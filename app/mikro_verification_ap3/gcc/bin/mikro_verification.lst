
bin/mikro_verification.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 19 e9 00 00 81 e9 00 00 cd d3 00 00     ................
    c010:	cd d3 00 00 cd d3 00 00 cd d3 00 00 00 00 00 00     ................
	...
    c02c:	87 e9 00 00 87 e9 00 00 00 00 00 00 87 e9 00 00     ................
    c03c:	87 e9 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c04c:	87 e9 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c05c:	87 e9 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c06c:	87 e9 00 00 87 e9 00 00 05 f0 00 00 b1 ef 00 00     ................
    c07c:	87 e9 00 00 87 e9 00 00 87 e9 00 00 b9 f0 00 00     ................
    c08c:	ed ee 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c09c:	87 e9 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c0ac:	87 e9 00 00 87 e9 00 00 87 e9 00 00 87 e9 00 00     ................
    c0bc:	87 e9 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:

// sharing variables in whole procedures
volatile uint8_t g_ui8PcmDataReadyFlag = 0;

int main(void)
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b084      	sub	sp, #16
    c2d8:	af00      	add	r7, sp, #0
    am_app_mic_verif_sys_init();
    c2da:	f002 fd1d 	bl	ed18 <am_app_mic_verif_sys_init>
#endif // configUSE_SYSVIEW

    //
    // Print the banner.
    //
    DebugLog("Microphone verification procedure is ready!\r\n\n");
    c2de:	48a2      	ldr	r0, [pc, #648]	; (c568 <main+0x294>)
    c2e0:	f002 fb9c 	bl	ea1c <DebugLog>

#if AM_APP_ANALOG_MIC
        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c2e4:	4ba1      	ldr	r3, [pc, #644]	; (c56c <main+0x298>)
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <main+0x22>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c2ee:	48a0      	ldr	r0, [pc, #640]	; (c570 <main+0x29c>)
    c2f0:	f001 ff84 	bl	e1fc <am_util_stdio_printf>
            while(1);
    c2f4:	e7fe      	b.n	c2f4 <main+0x20>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c2f6:	4b9f      	ldr	r3, [pc, #636]	; (c574 <main+0x2a0>)
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	b2db      	uxtb	r3, r3
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d01c      	beq.n	c33a <main+0x66>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c300:	4b9c      	ldr	r3, [pc, #624]	; (c574 <main+0x2a0>)
    c302:	2200      	movs	r2, #0
    c304:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c306:	f002 fc4f 	bl	eba8 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c30a:	4b9b      	ldr	r3, [pc, #620]	; (c578 <main+0x2a4>)
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c312:	4618      	mov	r0, r3
    c314:	f003 f8fa 	bl	f50c <am_hal_adc_interrupt_clear>
    c318:	4603      	mov	r3, r0
    c31a:	2b00      	cmp	r3, #0
    c31c:	d002      	beq.n	c324 <main+0x50>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c31e:	4897      	ldr	r0, [pc, #604]	; (c57c <main+0x2a8>)
    c320:	f001 ff6c 	bl	e1fc <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c324:	4b94      	ldr	r3, [pc, #592]	; (c578 <main+0x2a4>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	4618      	mov	r0, r3
    c32a:	f003 f901 	bl	f530 <am_hal_adc_sw_trigger>
    c32e:	4603      	mov	r3, r0
    c330:	2b00      	cmp	r3, #0
    c332:	d002      	beq.n	c33a <main+0x66>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c334:	4892      	ldr	r0, [pc, #584]	; (c580 <main+0x2ac>)
    c336:	f001 ff61 	bl	e1fc <am_util_stdio_printf>
            }
        }
        
        if((g_bAMicDataReady == true) && (g_bAMicEvalFlag == true) && (g_bPDMDataReady == true))
    c33a:	4b92      	ldr	r3, [pc, #584]	; (c584 <main+0x2b0>)
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	b2db      	uxtb	r3, r3
    c340:	2b00      	cmp	r3, #0
    c342:	d01e      	beq.n	c382 <main+0xae>
    c344:	4b90      	ldr	r3, [pc, #576]	; (c588 <main+0x2b4>)
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	2b00      	cmp	r3, #0
    c34c:	d019      	beq.n	c382 <main+0xae>
    c34e:	4b8f      	ldr	r3, [pc, #572]	; (c58c <main+0x2b8>)
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b2db      	uxtb	r3, r3
    c354:	2b00      	cmp	r3, #0
    c356:	d014      	beq.n	c382 <main+0xae>
        {
            am_util_stdio_printf("Get Analog Mic data %d bytes!\n\r", g_ui32AMicDataSumBytes);
    c358:	4b8d      	ldr	r3, [pc, #564]	; (c590 <main+0x2bc>)
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	4619      	mov	r1, r3
    c35e:	488d      	ldr	r0, [pc, #564]	; (c594 <main+0x2c0>)
    c360:	f001 ff4c 	bl	e1fc <am_util_stdio_printf>

            am_util_stdio_printf("Get PDM audio data %d bytes!\n\r", g_ui32PCMDataSumBytes);
    c364:	4b8c      	ldr	r3, [pc, #560]	; (c598 <main+0x2c4>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4619      	mov	r1, r3
    c36a:	488c      	ldr	r0, [pc, #560]	; (c59c <main+0x2c8>)
    c36c:	f001 ff46 	bl	e1fc <am_util_stdio_printf>

            am_util_stdio_printf("Audio data collection ended....");
    c370:	488b      	ldr	r0, [pc, #556]	; (c5a0 <main+0x2cc>)
    c372:	f001 ff43 	bl	e1fc <am_util_stdio_printf>
            
            //
            // zero clear the counter 
            //
            g_ui32AMicDataSumBytes = 0;
    c376:	4b86      	ldr	r3, [pc, #536]	; (c590 <main+0x2bc>)
    c378:	2200      	movs	r2, #0
    c37a:	601a      	str	r2, [r3, #0]
            g_ui32PCMDataSumBytes = 0;
    c37c:	4b86      	ldr	r3, [pc, #536]	; (c598 <main+0x2c4>)
    c37e:	2200      	movs	r2, #0
    c380:	601a      	str	r2, [r3, #0]
        }

        if((g_bPDMDataReady == true) && (g_bAMicDataReady == true))
    c382:	4b82      	ldr	r3, [pc, #520]	; (c58c <main+0x2b8>)
    c384:	781b      	ldrb	r3, [r3, #0]
    c386:	b2db      	uxtb	r3, r3
    c388:	2b00      	cmp	r3, #0
    c38a:	f000 80a5 	beq.w	c4d8 <main+0x204>
    c38e:	4b7d      	ldr	r3, [pc, #500]	; (c584 <main+0x2b0>)
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	b2db      	uxtb	r3, r3
    c394:	2b00      	cmp	r3, #0
    c396:	f000 809f 	beq.w	c4d8 <main+0x204>
        {
            am_devices_led_off(am_bsp_psLEDs, 1);
    c39a:	2101      	movs	r1, #1
    c39c:	4881      	ldr	r0, [pc, #516]	; (c5a4 <main+0x2d0>)
    c39e:	f002 fa2d 	bl	e7fc <am_devices_led_off>
            g_bAMicEvalFlag = false;
    c3a2:	4b79      	ldr	r3, [pc, #484]	; (c588 <main+0x2b4>)
    c3a4:	2200      	movs	r2, #0
    c3a6:	701a      	strb	r2, [r3, #0]
            g_bPDMDataReady = false;
    c3a8:	4b78      	ldr	r3, [pc, #480]	; (c58c <main+0x2b8>)
    c3aa:	2200      	movs	r2, #0
    c3ac:	701a      	strb	r2, [r3, #0]
            g_bAMicDataReady = false;
    c3ae:	4b75      	ldr	r3, [pc, #468]	; (c584 <main+0x2b0>)
    c3b0:	2200      	movs	r2, #0
    c3b2:	701a      	strb	r2, [r3, #0]
            am_util_stdio_printf("Analog Mic data as following: \n\r");
    c3b4:	487c      	ldr	r0, [pc, #496]	; (c5a8 <main+0x2d4>)
    c3b6:	f001 ff21 	bl	e1fc <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c3ba:	e031      	b.n	c420 <main+0x14c>
            {
                uint8_t indx = 0;
    c3bc:	2300      	movs	r3, #0
    c3be:	73fb      	strb	r3, [r7, #15]
                uint32_t ringbuff_ret = 0;
    c3c0:	2300      	movs	r3, #0
    c3c2:	607b      	str	r3, [r7, #4]
                for(indx=0; indx<16; indx++)
    c3c4:	2300      	movs	r3, #0
    c3c6:	73fb      	strb	r3, [r7, #15]
    c3c8:	e024      	b.n	c414 <main+0x140>
                {
                    ringbuff_ret = am_app_utils_ring_buffer_pop(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], &g_ui32AD_Val, 4);
    c3ca:	2204      	movs	r2, #4
    c3cc:	4977      	ldr	r1, [pc, #476]	; (c5ac <main+0x2d8>)
    c3ce:	4878      	ldr	r0, [pc, #480]	; (c5b0 <main+0x2dc>)
    c3d0:	f002 f8bf 	bl	e552 <am_app_utils_ring_buffer_pop>
    c3d4:	6078      	str	r0, [r7, #4]
                    if(ringbuff_ret == 4)
    c3d6:	687b      	ldr	r3, [r7, #4]
    c3d8:	2b04      	cmp	r3, #4
    c3da:	d105      	bne.n	c3e8 <main+0x114>
                    {    
                        g_ui32OutSamples += 1;
    c3dc:	4b75      	ldr	r3, [pc, #468]	; (c5b4 <main+0x2e0>)
    c3de:	681b      	ldr	r3, [r3, #0]
    c3e0:	3301      	adds	r3, #1
    c3e2:	4a74      	ldr	r2, [pc, #464]	; (c5b4 <main+0x2e0>)
    c3e4:	6013      	str	r3, [r2, #0]
    c3e6:	e009      	b.n	c3fc <main+0x128>
                    }
                    else if(ringbuff_ret ==0)
    c3e8:	687b      	ldr	r3, [r7, #4]
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d103      	bne.n	c3f6 <main+0x122>
                    {
                        am_util_stdio_printf("AMic ring buffer is already empty...\n\r");
    c3ee:	4872      	ldr	r0, [pc, #456]	; (c5b8 <main+0x2e4>)
    c3f0:	f001 ff04 	bl	e1fc <am_util_stdio_printf>
                        break;
    c3f4:	e011      	b.n	c41a <main+0x146>
                    }
                    else
                    {
                        am_util_stdio_printf("There're something weired...AMic ring buffer not 4 bytes aligned...\n\r");
    c3f6:	4871      	ldr	r0, [pc, #452]	; (c5bc <main+0x2e8>)
    c3f8:	f001 ff00 	bl	e1fc <am_util_stdio_printf>
                    }
                    //
                    // follow the ADC data format
                    //
                    DebugLogUInt32(g_ui32AD_Val>>6);
    c3fc:	4b6b      	ldr	r3, [pc, #428]	; (c5ac <main+0x2d8>)
    c3fe:	681b      	ldr	r3, [r3, #0]
    c400:	099b      	lsrs	r3, r3, #6
    c402:	4618      	mov	r0, r3
    c404:	f002 fb18 	bl	ea38 <DebugLogUInt32>
                    DebugLog(" ");
    c408:	486d      	ldr	r0, [pc, #436]	; (c5c0 <main+0x2ec>)
    c40a:	f002 fb07 	bl	ea1c <DebugLog>
                for(indx=0; indx<16; indx++)
    c40e:	7bfb      	ldrb	r3, [r7, #15]
    c410:	3301      	adds	r3, #1
    c412:	73fb      	strb	r3, [r7, #15]
    c414:	7bfb      	ldrb	r3, [r7, #15]
    c416:	2b0f      	cmp	r3, #15
    c418:	d9d7      	bls.n	c3ca <main+0xf6>
                }
                am_util_stdio_printf("\n\r");
    c41a:	486a      	ldr	r0, [pc, #424]	; (c5c4 <main+0x2f0>)
    c41c:	f001 feee 	bl	e1fc <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c420:	4b69      	ldr	r3, [pc, #420]	; (c5c8 <main+0x2f4>)
    c422:	699a      	ldr	r2, [r3, #24]
    c424:	4b68      	ldr	r3, [pc, #416]	; (c5c8 <main+0x2f4>)
    c426:	69db      	ldr	r3, [r3, #28]
    c428:	429a      	cmp	r2, r3
    c42a:	d1c7      	bne.n	c3bc <main+0xe8>
    c42c:	4b66      	ldr	r3, [pc, #408]	; (c5c8 <main+0x2f4>)
    c42e:	6a1b      	ldr	r3, [r3, #32]
    c430:	2b00      	cmp	r3, #0
    c432:	d1c3      	bne.n	c3bc <main+0xe8>
            }
            am_util_stdio_printf("Send out ALL AMic data! There're totally %d samples\n\n\r", g_ui32OutSamples); 
    c434:	4b5f      	ldr	r3, [pc, #380]	; (c5b4 <main+0x2e0>)
    c436:	681b      	ldr	r3, [r3, #0]
    c438:	4619      	mov	r1, r3
    c43a:	4864      	ldr	r0, [pc, #400]	; (c5cc <main+0x2f8>)
    c43c:	f001 fede 	bl	e1fc <am_util_stdio_printf>
            g_ui32OutSamples = 0;
    c440:	4b5c      	ldr	r3, [pc, #368]	; (c5b4 <main+0x2e0>)
    c442:	2200      	movs	r2, #0
    c444:	601a      	str	r2, [r3, #0]
#if 1
            am_util_stdio_printf("PCM data register values as following: \n\r");
    c446:	4862      	ldr	r0, [pc, #392]	; (c5d0 <main+0x2fc>)
    c448:	f001 fed8 	bl	e1fc <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM])))
    c44c:	e02e      	b.n	c4ac <main+0x1d8>
            {
                uint8_t indx = 0;
    c44e:	2300      	movs	r3, #0
    c450:	73bb      	strb	r3, [r7, #14]
                uint32_t ringbuff_ret = 0;
    c452:	2300      	movs	r3, #0
    c454:	60bb      	str	r3, [r7, #8]
                for(indx==0; indx<16; indx++)
    c456:	e023      	b.n	c4a0 <main+0x1cc>
                {
                    ringbuff_ret = am_app_utils_ring_buffer_pop(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], &g_ui32PCM_RegVal, 4);
    c458:	2204      	movs	r2, #4
    c45a:	495e      	ldr	r1, [pc, #376]	; (c5d4 <main+0x300>)
    c45c:	485e      	ldr	r0, [pc, #376]	; (c5d8 <main+0x304>)
    c45e:	f002 f878 	bl	e552 <am_app_utils_ring_buffer_pop>
    c462:	60b8      	str	r0, [r7, #8]
                    if(ringbuff_ret == 4)
    c464:	68bb      	ldr	r3, [r7, #8]
    c466:	2b04      	cmp	r3, #4
    c468:	d105      	bne.n	c476 <main+0x1a2>
                    {    
                        g_ui32OutSamples += 1;
    c46a:	4b52      	ldr	r3, [pc, #328]	; (c5b4 <main+0x2e0>)
    c46c:	681b      	ldr	r3, [r3, #0]
    c46e:	3301      	adds	r3, #1
    c470:	4a50      	ldr	r2, [pc, #320]	; (c5b4 <main+0x2e0>)
    c472:	6013      	str	r3, [r2, #0]
    c474:	e009      	b.n	c48a <main+0x1b6>
                    }
                    else if(ringbuff_ret ==0)
    c476:	68bb      	ldr	r3, [r7, #8]
    c478:	2b00      	cmp	r3, #0
    c47a:	d103      	bne.n	c484 <main+0x1b0>
                    {
                        am_util_stdio_printf("DMic ring buffer is already empty...\n\r");
    c47c:	4857      	ldr	r0, [pc, #348]	; (c5dc <main+0x308>)
    c47e:	f001 febd 	bl	e1fc <am_util_stdio_printf>
                        break;
    c482:	e010      	b.n	c4a6 <main+0x1d2>
                    }
                    else
                    {
                        am_util_stdio_printf("There're something weired...DMic ring buffer not 4 bytes aligned...\n\r");
    c484:	4856      	ldr	r0, [pc, #344]	; (c5e0 <main+0x30c>)
    c486:	f001 feb9 	bl	e1fc <am_util_stdio_printf>
                    }

                    //
                    // follow the ADC data format
                    //
                    DebugLogUInt32(g_ui32PCM_RegVal);
    c48a:	4b52      	ldr	r3, [pc, #328]	; (c5d4 <main+0x300>)
    c48c:	681b      	ldr	r3, [r3, #0]
    c48e:	4618      	mov	r0, r3
    c490:	f002 fad2 	bl	ea38 <DebugLogUInt32>
                    DebugLog(" ");
    c494:	484a      	ldr	r0, [pc, #296]	; (c5c0 <main+0x2ec>)
    c496:	f002 fac1 	bl	ea1c <DebugLog>
                for(indx==0; indx<16; indx++)
    c49a:	7bbb      	ldrb	r3, [r7, #14]
    c49c:	3301      	adds	r3, #1
    c49e:	73bb      	strb	r3, [r7, #14]
    c4a0:	7bbb      	ldrb	r3, [r7, #14]
    c4a2:	2b0f      	cmp	r3, #15
    c4a4:	d9d8      	bls.n	c458 <main+0x184>
                }
                am_util_stdio_printf("\n\r");
    c4a6:	4847      	ldr	r0, [pc, #284]	; (c5c4 <main+0x2f0>)
    c4a8:	f001 fea8 	bl	e1fc <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM])))
    c4ac:	4b46      	ldr	r3, [pc, #280]	; (c5c8 <main+0x2f4>)
    c4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c4b0:	4b45      	ldr	r3, [pc, #276]	; (c5c8 <main+0x2f4>)
    c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c4b4:	429a      	cmp	r2, r3
    c4b6:	d1ca      	bne.n	c44e <main+0x17a>
    c4b8:	4b43      	ldr	r3, [pc, #268]	; (c5c8 <main+0x2f4>)
    c4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d1c6      	bne.n	c44e <main+0x17a>

            }
            am_util_stdio_printf("Send out ALL DMic data! There're totally %d samples\n\r", g_ui32OutSamples); 
    c4c0:	4b3c      	ldr	r3, [pc, #240]	; (c5b4 <main+0x2e0>)
    c4c2:	681b      	ldr	r3, [r3, #0]
    c4c4:	4619      	mov	r1, r3
    c4c6:	4847      	ldr	r0, [pc, #284]	; (c5e4 <main+0x310>)
    c4c8:	f001 fe98 	bl	e1fc <am_util_stdio_printf>
            g_ui32OutSamples = 0;
    c4cc:	4b39      	ldr	r3, [pc, #228]	; (c5b4 <main+0x2e0>)
    c4ce:	2200      	movs	r2, #0
    c4d0:	601a      	str	r2, [r3, #0]
#endif // 1
            am_util_stdio_printf("All data were sended out...\n\n\n\r");
    c4d2:	4845      	ldr	r0, [pc, #276]	; (c5e8 <main+0x314>)
    c4d4:	f001 fe92 	bl	e1fc <am_util_stdio_printf>
        }
#endif // AM_APP_ANALOG_MIC

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c4d8:	4b44      	ldr	r3, [pc, #272]	; (c5ec <main+0x318>)
    c4da:	681b      	ldr	r3, [r3, #0]
    c4dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c4e0:	d306      	bcc.n	c4f0 <main+0x21c>
        {
            g_ui32TimerCount = 0;
    c4e2:	4b42      	ldr	r3, [pc, #264]	; (c5ec <main+0x318>)
    c4e4:	2200      	movs	r2, #0
    c4e6:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c4e8:	2100      	movs	r1, #0
    c4ea:	482e      	ldr	r0, [pc, #184]	; (c5a4 <main+0x2d0>)
    c4ec:	f002 f9c4 	bl	e878 <am_devices_led_toggle>

//
// Board key interface for different procedure switch
//

        if((g_sysKeyValue == AM_APP_KEY_0) && (g_ui8ButtonPushedFlag == 1))
    c4f0:	4b3f      	ldr	r3, [pc, #252]	; (c5f0 <main+0x31c>)
    c4f2:	781b      	ldrb	r3, [r3, #0]
    c4f4:	b2db      	uxtb	r3, r3
    c4f6:	2b01      	cmp	r3, #1
    c4f8:	d123      	bne.n	c542 <main+0x26e>
    c4fa:	4b3e      	ldr	r3, [pc, #248]	; (c5f4 <main+0x320>)
    c4fc:	781b      	ldrb	r3, [r3, #0]
    c4fe:	b2db      	uxtb	r3, r3
    c500:	2b01      	cmp	r3, #1
    c502:	d11e      	bne.n	c542 <main+0x26e>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c504:	4b3a      	ldr	r3, [pc, #232]	; (c5f0 <main+0x31c>)
    c506:	2200      	movs	r2, #0
    c508:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c50a:	4b3a      	ldr	r3, [pc, #232]	; (c5f4 <main+0x320>)
    c50c:	2200      	movs	r2, #0
    c50e:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
            }
#endif // AM_APP_MIC_CALIBRATION

#if AM_APP_ANALOG_MIC
            if(g_bAMicEvalFlag == false)
    c510:	4b1d      	ldr	r3, [pc, #116]	; (c588 <main+0x2b4>)
    c512:	781b      	ldrb	r3, [r3, #0]
    c514:	b2db      	uxtb	r3, r3
    c516:	f083 0301 	eor.w	r3, r3, #1
    c51a:	b2db      	uxtb	r3, r3
    c51c:	2b00      	cmp	r3, #0
    c51e:	d010      	beq.n	c542 <main+0x26e>
            {
                am_util_stdio_printf("Waiting 2 seconds to evaluate AMic and DMic...\r\n");
    c520:	4835      	ldr	r0, [pc, #212]	; (c5f8 <main+0x324>)
    c522:	f001 fe6b 	bl	e1fc <am_util_stdio_printf>
                am_util_delay_ms(2000);
    c526:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c52a:	f000 ff31 	bl	d390 <am_util_delay_ms>
                am_util_stdio_printf("Start to get audio data...\r\n");
    c52e:	4833      	ldr	r0, [pc, #204]	; (c5fc <main+0x328>)
    c530:	f001 fe64 	bl	e1fc <am_util_stdio_printf>
                am_devices_led_on(am_bsp_psLEDs, 1);
    c534:	2101      	movs	r1, #1
    c536:	481b      	ldr	r0, [pc, #108]	; (c5a4 <main+0x2d0>)
    c538:	f002 f925 	bl	e786 <am_devices_led_on>
                g_bAMicEvalFlag = true;
    c53c:	4b12      	ldr	r3, [pc, #72]	; (c588 <main+0x2b4>)
    c53e:	2201      	movs	r2, #1
    c540:	701a      	strb	r2, [r3, #0]
            }
#endif // AM_APP_ANALOG_MIC

        }

        if((g_sysKeyValue == AM_APP_KEY_1) && (g_ui8ButtonPushedFlag == 1))
    c542:	4b2b      	ldr	r3, [pc, #172]	; (c5f0 <main+0x31c>)
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	b2db      	uxtb	r3, r3
    c548:	2b02      	cmp	r3, #2
    c54a:	f47f aecb 	bne.w	c2e4 <main+0x10>
    c54e:	4b29      	ldr	r3, [pc, #164]	; (c5f4 <main+0x320>)
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	b2db      	uxtb	r3, r3
    c554:	2b01      	cmp	r3, #1
    c556:	f47f aec5 	bne.w	c2e4 <main+0x10>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c55a:	4b25      	ldr	r3, [pc, #148]	; (c5f0 <main+0x31c>)
    c55c:	2200      	movs	r2, #0
    c55e:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c560:	4b24      	ldr	r3, [pc, #144]	; (c5f4 <main+0x320>)
    c562:	2200      	movs	r2, #0
    c564:	701a      	strb	r2, [r3, #0]
        if (g_bADCDMAError)
    c566:	e6bd      	b.n	c2e4 <main+0x10>
    c568:	00010b20 	.word	0x00010b20
    c56c:	1002beb8 	.word	0x1002beb8
    c570:	00010b50 	.word	0x00010b50
    c574:	1000ca75 	.word	0x1000ca75
    c578:	1000ca70 	.word	0x1000ca70
    c57c:	00010b64 	.word	0x00010b64
    c580:	00010b94 	.word	0x00010b94
    c584:	1000c178 	.word	0x1000c178
    c588:	1000c179 	.word	0x1000c179
    c58c:	1000c16e 	.word	0x1000c16e
    c590:	1000c174 	.word	0x1000c174
    c594:	00010bb8 	.word	0x00010bb8
    c598:	1000c170 	.word	0x1000c170
    c59c:	00010bd8 	.word	0x00010bd8
    c5a0:	00010bf8 	.word	0x00010bf8
    c5a4:	1000c00c 	.word	0x1000c00c
    c5a8:	00010c18 	.word	0x00010c18
    c5ac:	1000c050 	.word	0x1000c050
    c5b0:	1002be90 	.word	0x1002be90
    c5b4:	1000c058 	.word	0x1000c058
    c5b8:	00010c3c 	.word	0x00010c3c
    c5bc:	00010c64 	.word	0x00010c64
    c5c0:	00010cac 	.word	0x00010cac
    c5c4:	00010cb0 	.word	0x00010cb0
    c5c8:	1002be7c 	.word	0x1002be7c
    c5cc:	00010cb4 	.word	0x00010cb4
    c5d0:	00010cec 	.word	0x00010cec
    c5d4:	1000c054 	.word	0x1000c054
    c5d8:	1002bea4 	.word	0x1002bea4
    c5dc:	00010d18 	.word	0x00010d18
    c5e0:	00010d40 	.word	0x00010d40
    c5e4:	00010d88 	.word	0x00010d88
    c5e8:	00010dc0 	.word	0x00010dc0
    c5ec:	1000c160 	.word	0x1000c160
    c5f0:	1000c16c 	.word	0x1000c16c
    c5f4:	1000c16d 	.word	0x1000c16d
    c5f8:	00010de0 	.word	0x00010de0
    c5fc:	00010e14 	.word	0x00010e14

0000c600 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c600:	b480      	push	{r7}
    c602:	b083      	sub	sp, #12
    c604:	af00      	add	r7, sp, #0
    c606:	6078      	str	r0, [r7, #4]
    c608:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d001      	beq.n	c614 <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c610:	2305      	movs	r3, #5
    c612:	e048      	b.n	c6a6 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c614:	683b      	ldr	r3, [r7, #0]
    c616:	2b00      	cmp	r3, #0
    c618:	d101      	bne.n	c61e <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c61a:	2306      	movs	r3, #6
    c61c:	e043      	b.n	c6a6 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c61e:	4925      	ldr	r1, [pc, #148]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c620:	687a      	ldr	r2, [r7, #4]
    c622:	4613      	mov	r3, r2
    c624:	005b      	lsls	r3, r3, #1
    c626:	4413      	add	r3, r2
    c628:	009b      	lsls	r3, r3, #2
    c62a:	440b      	add	r3, r1
    c62c:	78db      	ldrb	r3, [r3, #3]
    c62e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c632:	b2db      	uxtb	r3, r3
    c634:	2b00      	cmp	r3, #0
    c636:	d001      	beq.n	c63c <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c638:	2307      	movs	r3, #7
    c63a:	e034      	b.n	c6a6 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c63c:	491d      	ldr	r1, [pc, #116]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c63e:	687a      	ldr	r2, [r7, #4]
    c640:	4613      	mov	r3, r2
    c642:	005b      	lsls	r3, r3, #1
    c644:	4413      	add	r3, r2
    c646:	009b      	lsls	r3, r3, #2
    c648:	18ca      	adds	r2, r1, r3
    c64a:	78d3      	ldrb	r3, [r2, #3]
    c64c:	f043 0301 	orr.w	r3, r3, #1
    c650:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c652:	4918      	ldr	r1, [pc, #96]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c654:	687a      	ldr	r2, [r7, #4]
    c656:	4613      	mov	r3, r2
    c658:	005b      	lsls	r3, r3, #1
    c65a:	4413      	add	r3, r2
    c65c:	009b      	lsls	r3, r3, #2
    c65e:	18ca      	adds	r2, r1, r3
    c660:	6813      	ldr	r3, [r2, #0]
    c662:	4915      	ldr	r1, [pc, #84]	; (c6b8 <am_hal_pdm_initialize+0xb8>)
    c664:	f361 0317 	bfi	r3, r1, #0, #24
    c668:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    c66a:	4912      	ldr	r1, [pc, #72]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c66c:	687a      	ldr	r2, [r7, #4]
    c66e:	4613      	mov	r3, r2
    c670:	005b      	lsls	r3, r3, #1
    c672:	4413      	add	r3, r2
    c674:	009b      	lsls	r3, r3, #2
    c676:	440b      	add	r3, r1
    c678:	3308      	adds	r3, #8
    c67a:	687a      	ldr	r2, [r7, #4]
    c67c:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    c67e:	490d      	ldr	r1, [pc, #52]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c680:	687a      	ldr	r2, [r7, #4]
    c682:	4613      	mov	r3, r2
    c684:	005b      	lsls	r3, r3, #1
    c686:	4413      	add	r3, r2
    c688:	009b      	lsls	r3, r3, #2
    c68a:	440b      	add	r3, r1
    c68c:	3304      	adds	r3, #4
    c68e:	2200      	movs	r2, #0
    c690:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    c692:	687a      	ldr	r2, [r7, #4]
    c694:	4613      	mov	r3, r2
    c696:	005b      	lsls	r3, r3, #1
    c698:	4413      	add	r3, r2
    c69a:	009b      	lsls	r3, r3, #2
    c69c:	4a05      	ldr	r2, [pc, #20]	; (c6b4 <am_hal_pdm_initialize+0xb4>)
    c69e:	441a      	add	r2, r3
    c6a0:	683b      	ldr	r3, [r7, #0]
    c6a2:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c6a4:	2300      	movs	r3, #0
}
    c6a6:	4618      	mov	r0, r3
    c6a8:	370c      	adds	r7, #12
    c6aa:	46bd      	mov	sp, r7
    c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6b0:	4770      	bx	lr
    c6b2:	bf00      	nop
    c6b4:	1000c19c 	.word	0x1000c19c
    c6b8:	00f956e2 	.word	0x00f956e2

0000c6bc <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    c6bc:	b580      	push	{r7, lr}
    c6be:	b088      	sub	sp, #32
    c6c0:	af00      	add	r7, sp, #0
    c6c2:	6078      	str	r0, [r7, #4]
    c6c4:	460b      	mov	r3, r1
    c6c6:	70fb      	strb	r3, [r7, #3]
    c6c8:	4613      	mov	r3, r2
    c6ca:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c6cc:	687b      	ldr	r3, [r7, #4]
    c6ce:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c6d0:	69fb      	ldr	r3, [r7, #28]
    c6d2:	689b      	ldr	r3, [r3, #8]
    c6d4:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    c6d6:	69bb      	ldr	r3, [r7, #24]
    c6d8:	b2db      	uxtb	r3, r3
    c6da:	330d      	adds	r3, #13
    c6dc:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	2b00      	cmp	r3, #0
    c6e2:	d00d      	beq.n	c700 <am_hal_pdm_power_control+0x44>
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	78db      	ldrb	r3, [r3, #3]
    c6e8:	f003 0301 	and.w	r3, r3, #1
    c6ec:	b2db      	uxtb	r3, r3
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d006      	beq.n	c700 <am_hal_pdm_power_control+0x44>
    c6f2:	687b      	ldr	r3, [r7, #4]
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c6fa:	4a23      	ldr	r2, [pc, #140]	; (c788 <am_hal_pdm_power_control+0xcc>)
    c6fc:	4293      	cmp	r3, r2
    c6fe:	d001      	beq.n	c704 <am_hal_pdm_power_control+0x48>
    c700:	2302      	movs	r3, #2
    c702:	e03d      	b.n	c780 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    c704:	78fb      	ldrb	r3, [r7, #3]
    c706:	2b00      	cmp	r3, #0
    c708:	d004      	beq.n	c714 <am_hal_pdm_power_control+0x58>
    c70a:	2b00      	cmp	r3, #0
    c70c:	db34      	blt.n	c778 <am_hal_pdm_power_control+0xbc>
    c70e:	2b02      	cmp	r3, #2
    c710:	dc32      	bgt.n	c778 <am_hal_pdm_power_control+0xbc>
    c712:	e01e      	b.n	c752 <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    c714:	78bb      	ldrb	r3, [r7, #2]
    c716:	2b00      	cmp	r3, #0
    c718:	d008      	beq.n	c72c <am_hal_pdm_power_control+0x70>
    c71a:	69fb      	ldr	r3, [r7, #28]
    c71c:	791b      	ldrb	r3, [r3, #4]
    c71e:	f083 0301 	eor.w	r3, r3, #1
    c722:	b2db      	uxtb	r3, r3
    c724:	2b00      	cmp	r3, #0
    c726:	d001      	beq.n	c72c <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    c728:	2307      	movs	r3, #7
    c72a:	e029      	b.n	c780 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    c72c:	7dfb      	ldrb	r3, [r7, #23]
    c72e:	4618      	mov	r0, r3
    c730:	f003 fc66 	bl	10000 <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    c734:	78bb      	ldrb	r3, [r7, #2]
    c736:	2b00      	cmp	r3, #0
    c738:	d020      	beq.n	c77c <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    c73a:	f003 fbc3 	bl	fec4 <am_hal_interrupt_master_disable>
    c73e:	4603      	mov	r3, r0
    c740:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    c742:	69fb      	ldr	r3, [r7, #28]
    c744:	2200      	movs	r2, #0
    c746:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c748:	693b      	ldr	r3, [r7, #16]
    c74a:	4618      	mov	r0, r3
    c74c:	f003 fbbe 	bl	fecc <am_hal_interrupt_master_set>
            }
            break;
    c750:	e014      	b.n	c77c <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    c752:	78bb      	ldrb	r3, [r7, #2]
    c754:	2b00      	cmp	r3, #0
    c756:	d00a      	beq.n	c76e <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    c758:	f003 fbb4 	bl	fec4 <am_hal_interrupt_master_disable>
    c75c:	4603      	mov	r3, r0
    c75e:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    c760:	69fb      	ldr	r3, [r7, #28]
    c762:	2201      	movs	r2, #1
    c764:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c766:	68fb      	ldr	r3, [r7, #12]
    c768:	4618      	mov	r0, r3
    c76a:	f003 fbaf 	bl	fecc <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    c76e:	7dfb      	ldrb	r3, [r7, #23]
    c770:	4618      	mov	r0, r3
    c772:	f003 fc6f 	bl	10054 <am_hal_pwrctrl_periph_disable>
            break;
    c776:	e002      	b.n	c77e <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    c778:	2306      	movs	r3, #6
    c77a:	e001      	b.n	c780 <am_hal_pdm_power_control+0xc4>
            break;
    c77c:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c77e:	2300      	movs	r3, #0
}
    c780:	4618      	mov	r0, r3
    c782:	3720      	adds	r7, #32
    c784:	46bd      	mov	sp, r7
    c786:	bd80      	pop	{r7, pc}
    c788:	00f956e2 	.word	0x00f956e2

0000c78c <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b088      	sub	sp, #32
    c790:	af00      	add	r7, sp, #0
    c792:	6078      	str	r0, [r7, #4]
    c794:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c79a:	69fb      	ldr	r3, [r7, #28]
    c79c:	689b      	ldr	r3, [r3, #8]
    c79e:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c7a0:	687b      	ldr	r3, [r7, #4]
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d00d      	beq.n	c7c2 <am_hal_pdm_configure+0x36>
    c7a6:	687b      	ldr	r3, [r7, #4]
    c7a8:	78db      	ldrb	r3, [r3, #3]
    c7aa:	f003 0301 	and.w	r3, r3, #1
    c7ae:	b2db      	uxtb	r3, r3
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d006      	beq.n	c7c2 <am_hal_pdm_configure+0x36>
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	681b      	ldr	r3, [r3, #0]
    c7b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c7bc:	4a5e      	ldr	r2, [pc, #376]	; (c938 <am_hal_pdm_configure+0x1ac>)
    c7be:	4293      	cmp	r3, r2
    c7c0:	d001      	beq.n	c7c6 <am_hal_pdm_configure+0x3a>
    c7c2:	2302      	movs	r3, #2
    c7c4:	e0b4      	b.n	c930 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    c7c6:	4a5d      	ldr	r2, [pc, #372]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c7c8:	683b      	ldr	r3, [r7, #0]
    c7ca:	7f59      	ldrb	r1, [r3, #29]
    c7cc:	6813      	ldr	r3, [r2, #0]
    c7ce:	f361 0341 	bfi	r3, r1, #1, #1
    c7d2:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    c7d4:	683b      	ldr	r3, [r7, #0]
    c7d6:	699b      	ldr	r3, [r3, #24]
    c7d8:	4a58      	ldr	r2, [pc, #352]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c7da:	f003 0307 	and.w	r3, r3, #7
    c7de:	b2d9      	uxtb	r1, r3
    c7e0:	6813      	ldr	r3, [r2, #0]
    c7e2:	f361 0384 	bfi	r3, r1, #2, #3
    c7e6:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    c7e8:	683b      	ldr	r3, [r7, #0]
    c7ea:	68db      	ldr	r3, [r3, #12]
    c7ec:	4a53      	ldr	r2, [pc, #332]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c7ee:	f003 030f 	and.w	r3, r3, #15
    c7f2:	b2d9      	uxtb	r1, r3
    c7f4:	6813      	ldr	r3, [r2, #0]
    c7f6:	f361 1348 	bfi	r3, r1, #5, #4
    c7fa:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    c7fc:	4a4f      	ldr	r2, [pc, #316]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c7fe:	683b      	ldr	r3, [r7, #0]
    c800:	7a19      	ldrb	r1, [r3, #8]
    c802:	6813      	ldr	r3, [r2, #0]
    c804:	f361 2349 	bfi	r3, r1, #9, #1
    c808:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    c80a:	683b      	ldr	r3, [r7, #0]
    c80c:	685b      	ldr	r3, [r3, #4]
    c80e:	4a4b      	ldr	r2, [pc, #300]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c814:	b2d9      	uxtb	r1, r3
    c816:	6813      	ldr	r3, [r2, #0]
    c818:	f361 2390 	bfi	r3, r1, #10, #7
    c81c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    c81e:	683b      	ldr	r3, [r7, #0]
    c820:	781b      	ldrb	r3, [r3, #0]
    c822:	4a46      	ldr	r2, [pc, #280]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c824:	f003 0303 	and.w	r3, r3, #3
    c828:	b2d9      	uxtb	r1, r3
    c82a:	6813      	ldr	r3, [r2, #0]
    c82c:	f361 4352 	bfi	r3, r1, #17, #2
    c830:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    c832:	683b      	ldr	r3, [r7, #0]
    c834:	785b      	ldrb	r3, [r3, #1]
    c836:	4a41      	ldr	r2, [pc, #260]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c838:	f003 031f 	and.w	r3, r3, #31
    c83c:	b2d9      	uxtb	r1, r3
    c83e:	6813      	ldr	r3, [r2, #0]
    c840:	f361 5359 	bfi	r3, r1, #21, #5
    c844:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    c846:	683b      	ldr	r3, [r7, #0]
    c848:	789b      	ldrb	r3, [r3, #2]
    c84a:	4a3c      	ldr	r2, [pc, #240]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c84c:	f003 031f 	and.w	r3, r3, #31
    c850:	b2d9      	uxtb	r1, r3
    c852:	6813      	ldr	r3, [r2, #0]
    c854:	f361 639e 	bfi	r3, r1, #26, #5
    c858:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    c85a:	4a38      	ldr	r2, [pc, #224]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c85c:	683b      	ldr	r3, [r7, #0]
    c85e:	7f99      	ldrb	r1, [r3, #30]
    c860:	6813      	ldr	r3, [r2, #0]
    c862:	f361 73df 	bfi	r3, r1, #31, #1
    c866:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    c868:	4a34      	ldr	r2, [pc, #208]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c86a:	6813      	ldr	r3, [r2, #0]
    c86c:	f043 0301 	orr.w	r3, r3, #1
    c870:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    c872:	4a32      	ldr	r2, [pc, #200]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c874:	6853      	ldr	r3, [r2, #4]
    c876:	f36f 639a 	bfc	r3, #26, #1
    c87a:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    c87c:	4a2f      	ldr	r2, [pc, #188]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c87e:	6853      	ldr	r3, [r2, #4]
    c880:	f36f 73df 	bfc	r3, #31, #1
    c884:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    c886:	4a2d      	ldr	r2, [pc, #180]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c888:	6853      	ldr	r3, [r2, #4]
    c88a:	f36f 739e 	bfc	r3, #30, #1
    c88e:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    c890:	683b      	ldr	r3, [r7, #0]
    c892:	7d5b      	ldrb	r3, [r3, #21]
    c894:	4a29      	ldr	r2, [pc, #164]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c896:	f003 0303 	and.w	r3, r3, #3
    c89a:	b2d9      	uxtb	r1, r3
    c89c:	6853      	ldr	r3, [r2, #4]
    c89e:	f361 03c4 	bfi	r3, r1, #3, #2
    c8a2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    c8a4:	4a25      	ldr	r2, [pc, #148]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8a6:	683b      	ldr	r3, [r7, #0]
    c8a8:	7d19      	ldrb	r1, [r3, #20]
    c8aa:	6853      	ldr	r3, [r2, #4]
    c8ac:	f361 2308 	bfi	r3, r1, #8, #1
    c8b0:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    c8b2:	683b      	ldr	r3, [r7, #0]
    c8b4:	7c9b      	ldrb	r3, [r3, #18]
    c8b6:	4a21      	ldr	r2, [pc, #132]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8b8:	f003 0301 	and.w	r3, r3, #1
    c8bc:	b2d9      	uxtb	r1, r3
    c8be:	6853      	ldr	r3, [r2, #4]
    c8c0:	f361 4310 	bfi	r3, r1, #16, #1
    c8c4:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    c8c6:	4a1d      	ldr	r2, [pc, #116]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8c8:	683b      	ldr	r3, [r7, #0]
    c8ca:	7cd9      	ldrb	r1, [r3, #19]
    c8cc:	6853      	ldr	r3, [r2, #4]
    c8ce:	f361 4351 	bfi	r3, r1, #17, #1
    c8d2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    c8d4:	4a19      	ldr	r2, [pc, #100]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8d6:	683b      	ldr	r3, [r7, #0]
    c8d8:	7c59      	ldrb	r1, [r3, #17]
    c8da:	6853      	ldr	r3, [r2, #4]
    c8dc:	f361 43d3 	bfi	r3, r1, #19, #1
    c8e0:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    c8e2:	4a16      	ldr	r2, [pc, #88]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8e4:	683b      	ldr	r3, [r7, #0]
    c8e6:	7f19      	ldrb	r1, [r3, #28]
    c8e8:	6853      	ldr	r3, [r2, #4]
    c8ea:	f361 5314 	bfi	r3, r1, #20, #1
    c8ee:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    c8f0:	683b      	ldr	r3, [r7, #0]
    c8f2:	7c1b      	ldrb	r3, [r3, #16]
    c8f4:	4a11      	ldr	r2, [pc, #68]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c8f6:	f003 0307 	and.w	r3, r3, #7
    c8fa:	b2d9      	uxtb	r1, r3
    c8fc:	6853      	ldr	r3, [r2, #4]
    c8fe:	f361 63dd 	bfi	r3, r1, #27, #3
    c902:	6053      	str	r3, [r2, #4]

    delay_us(100);
    c904:	f107 030c 	add.w	r3, r7, #12
    c908:	4618      	mov	r0, r3
    c90a:	f003 f92b 	bl	fb64 <am_hal_clkgen_status_get>
    c90e:	68fb      	ldr	r3, [r7, #12]
    c910:	4a0b      	ldr	r2, [pc, #44]	; (c940 <am_hal_pdm_configure+0x1b4>)
    c912:	fba2 2303 	umull	r2, r3, r2, r3
    c916:	0c9b      	lsrs	r3, r3, #18
    c918:	2264      	movs	r2, #100	; 0x64
    c91a:	fb02 f303 	mul.w	r3, r2, r3
    c91e:	4618      	mov	r0, r3
    c920:	f003 fa78 	bl	fe14 <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    c924:	4a05      	ldr	r2, [pc, #20]	; (c93c <am_hal_pdm_configure+0x1b0>)
    c926:	6853      	ldr	r3, [r2, #4]
    c928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c92c:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c92e:	2300      	movs	r3, #0
}
    c930:	4618      	mov	r0, r3
    c932:	3720      	adds	r7, #32
    c934:	46bd      	mov	sp, r7
    c936:	bd80      	pop	{r7, pc}
    c938:	00f956e2 	.word	0x00f956e2
    c93c:	50011000 	.word	0x50011000
    c940:	165e9f81 	.word	0x165e9f81

0000c944 <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    c944:	b480      	push	{r7}
    c946:	b085      	sub	sp, #20
    c948:	af00      	add	r7, sp, #0
    c94a:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c94c:	687b      	ldr	r3, [r7, #4]
    c94e:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c950:	68fb      	ldr	r3, [r7, #12]
    c952:	689b      	ldr	r3, [r3, #8]
    c954:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	2b00      	cmp	r3, #0
    c95a:	d00d      	beq.n	c978 <am_hal_pdm_enable+0x34>
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	78db      	ldrb	r3, [r3, #3]
    c960:	f003 0301 	and.w	r3, r3, #1
    c964:	b2db      	uxtb	r3, r3
    c966:	2b00      	cmp	r3, #0
    c968:	d006      	beq.n	c978 <am_hal_pdm_enable+0x34>
    c96a:	687b      	ldr	r3, [r7, #4]
    c96c:	681b      	ldr	r3, [r3, #0]
    c96e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c972:	4a0b      	ldr	r2, [pc, #44]	; (c9a0 <am_hal_pdm_enable+0x5c>)
    c974:	4293      	cmp	r3, r2
    c976:	d001      	beq.n	c97c <am_hal_pdm_enable+0x38>
    c978:	2302      	movs	r3, #2
    c97a:	e00a      	b.n	c992 <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    c97c:	4a09      	ldr	r2, [pc, #36]	; (c9a4 <am_hal_pdm_enable+0x60>)
    c97e:	6853      	ldr	r3, [r2, #4]
    c980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c984:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    c986:	4a07      	ldr	r2, [pc, #28]	; (c9a4 <am_hal_pdm_enable+0x60>)
    c988:	6853      	ldr	r3, [r2, #4]
    c98a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c98e:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c990:	2300      	movs	r3, #0
}
    c992:	4618      	mov	r0, r3
    c994:	3714      	adds	r7, #20
    c996:	46bd      	mov	sp, r7
    c998:	f85d 7b04 	ldr.w	r7, [sp], #4
    c99c:	4770      	bx	lr
    c99e:	bf00      	nop
    c9a0:	00f956e2 	.word	0x00f956e2
    c9a4:	50011000 	.word	0x50011000

0000c9a8 <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    c9a8:	b480      	push	{r7}
    c9aa:	b087      	sub	sp, #28
    c9ac:	af00      	add	r7, sp, #0
    c9ae:	6078      	str	r0, [r7, #4]
    c9b0:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c9b2:	687b      	ldr	r3, [r7, #4]
    c9b4:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c9b6:	68fb      	ldr	r3, [r7, #12]
    c9b8:	689b      	ldr	r3, [r3, #8]
    c9ba:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c9bc:	687b      	ldr	r3, [r7, #4]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d00d      	beq.n	c9de <am_hal_pdm_dma_start+0x36>
    c9c2:	687b      	ldr	r3, [r7, #4]
    c9c4:	78db      	ldrb	r3, [r3, #3]
    c9c6:	f003 0301 	and.w	r3, r3, #1
    c9ca:	b2db      	uxtb	r3, r3
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d006      	beq.n	c9de <am_hal_pdm_dma_start+0x36>
    c9d0:	687b      	ldr	r3, [r7, #4]
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c9d8:	4a33      	ldr	r2, [pc, #204]	; (caa8 <am_hal_pdm_dma_start+0x100>)
    c9da:	4293      	cmp	r3, r2
    c9dc:	d001      	beq.n	c9e2 <am_hal_pdm_dma_start+0x3a>
    c9de:	2302      	movs	r3, #2
    c9e0:	e05b      	b.n	ca9a <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    c9e2:	2300      	movs	r3, #0
    c9e4:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    c9e6:	2301      	movs	r3, #1
    c9e8:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c9ea:	2301      	movs	r3, #1
    c9ec:	613b      	str	r3, [r7, #16]
    c9ee:	e01b      	b.n	ca28 <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c9f0:	683b      	ldr	r3, [r7, #0]
    c9f2:	685b      	ldr	r3, [r3, #4]
    c9f4:	693a      	ldr	r2, [r7, #16]
    c9f6:	fbb3 f2f2 	udiv	r2, r3, r2
    c9fa:	6939      	ldr	r1, [r7, #16]
    c9fc:	fb01 f202 	mul.w	r2, r1, r2
    ca00:	1a9b      	subs	r3, r3, r2
    ca02:	2b00      	cmp	r3, #0
    ca04:	d10d      	bne.n	ca22 <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    ca06:	683b      	ldr	r3, [r7, #0]
    ca08:	685a      	ldr	r2, [r3, #4]
    ca0a:	693b      	ldr	r3, [r7, #16]
    ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    ca10:	2b1f      	cmp	r3, #31
    ca12:	d806      	bhi.n	ca22 <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    ca14:	683b      	ldr	r3, [r7, #0]
    ca16:	685a      	ldr	r2, [r3, #4]
    ca18:	693b      	ldr	r3, [r7, #16]
    ca1a:	fbb2 f3f3 	udiv	r3, r2, r3
    ca1e:	617b      	str	r3, [r7, #20]
            break;
    ca20:	e007      	b.n	ca32 <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    ca22:	693b      	ldr	r3, [r7, #16]
    ca24:	3301      	adds	r3, #1
    ca26:	613b      	str	r3, [r7, #16]
    ca28:	683b      	ldr	r3, [r7, #0]
    ca2a:	685b      	ldr	r3, [r3, #4]
    ca2c:	693a      	ldr	r2, [r7, #16]
    ca2e:	429a      	cmp	r2, r3
    ca30:	d3de      	bcc.n	c9f0 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    ca32:	697b      	ldr	r3, [r7, #20]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d102      	bne.n	ca3e <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    ca38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ca3c:	e02d      	b.n	ca9a <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    ca3e:	4a1b      	ldr	r2, [pc, #108]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca40:	697b      	ldr	r3, [r7, #20]
    ca42:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    ca44:	4b19      	ldr	r3, [pc, #100]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca46:	2200      	movs	r2, #0
    ca48:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    ca4c:	4a17      	ldr	r2, [pc, #92]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca4e:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    ca52:	f36f 2308 	bfc	r3, #8, #1
    ca56:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    ca5a:	4a14      	ldr	r2, [pc, #80]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca5c:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    ca60:	f36f 0382 	bfc	r3, #2, #1
    ca64:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    ca68:	4a10      	ldr	r2, [pc, #64]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca6a:	683b      	ldr	r3, [r7, #0]
    ca6c:	685b      	ldr	r3, [r3, #4]
    ca6e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    ca72:	4a0e      	ldr	r2, [pc, #56]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca74:	683b      	ldr	r3, [r7, #0]
    ca76:	681b      	ldr	r3, [r3, #0]
    ca78:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    ca7c:	4a0b      	ldr	r2, [pc, #44]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca7e:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    ca82:	f043 0301 	orr.w	r3, r3, #1
    ca86:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    ca8a:	4a08      	ldr	r2, [pc, #32]	; (caac <am_hal_pdm_dma_start+0x104>)
    ca8c:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    ca90:	f043 0301 	orr.w	r3, r3, #1
    ca94:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    ca98:	2300      	movs	r3, #0
}
    ca9a:	4618      	mov	r0, r3
    ca9c:	371c      	adds	r7, #28
    ca9e:	46bd      	mov	sp, r7
    caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    caa4:	4770      	bx	lr
    caa6:	bf00      	nop
    caa8:	00f956e2 	.word	0x00f956e2
    caac:	50011000 	.word	0x50011000

0000cab0 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    cab0:	b480      	push	{r7}
    cab2:	b085      	sub	sp, #20
    cab4:	af00      	add	r7, sp, #0
    cab6:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cab8:	687b      	ldr	r3, [r7, #4]
    caba:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	689b      	ldr	r3, [r3, #8]
    cac0:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cac2:	687b      	ldr	r3, [r7, #4]
    cac4:	2b00      	cmp	r3, #0
    cac6:	d00d      	beq.n	cae4 <am_hal_pdm_fifo_flush+0x34>
    cac8:	687b      	ldr	r3, [r7, #4]
    caca:	78db      	ldrb	r3, [r3, #3]
    cacc:	f003 0301 	and.w	r3, r3, #1
    cad0:	b2db      	uxtb	r3, r3
    cad2:	2b00      	cmp	r3, #0
    cad4:	d006      	beq.n	cae4 <am_hal_pdm_fifo_flush+0x34>
    cad6:	687b      	ldr	r3, [r7, #4]
    cad8:	681b      	ldr	r3, [r3, #0]
    cada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cade:	4a07      	ldr	r2, [pc, #28]	; (cafc <am_hal_pdm_fifo_flush+0x4c>)
    cae0:	4293      	cmp	r3, r2
    cae2:	d001      	beq.n	cae8 <am_hal_pdm_fifo_flush+0x38>
    cae4:	2302      	movs	r3, #2
    cae6:	e003      	b.n	caf0 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    cae8:	4b05      	ldr	r3, [pc, #20]	; (cb00 <am_hal_pdm_fifo_flush+0x50>)
    caea:	2201      	movs	r2, #1
    caec:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    caee:	2300      	movs	r3, #0
}
    caf0:	4618      	mov	r0, r3
    caf2:	3714      	adds	r7, #20
    caf4:	46bd      	mov	sp, r7
    caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cafa:	4770      	bx	lr
    cafc:	00f956e2 	.word	0x00f956e2
    cb00:	50011000 	.word	0x50011000

0000cb04 <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    cb04:	b480      	push	{r7}
    cb06:	b085      	sub	sp, #20
    cb08:	af00      	add	r7, sp, #0
    cb0a:	6078      	str	r0, [r7, #4]
    cb0c:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb0e:	687b      	ldr	r3, [r7, #4]
    cb10:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cb12:	68fb      	ldr	r3, [r7, #12]
    cb14:	689b      	ldr	r3, [r3, #8]
    cb16:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb18:	687b      	ldr	r3, [r7, #4]
    cb1a:	2b00      	cmp	r3, #0
    cb1c:	d00d      	beq.n	cb3a <am_hal_pdm_interrupt_enable+0x36>
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	78db      	ldrb	r3, [r3, #3]
    cb22:	f003 0301 	and.w	r3, r3, #1
    cb26:	b2db      	uxtb	r3, r3
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d006      	beq.n	cb3a <am_hal_pdm_interrupt_enable+0x36>
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb34:	4a09      	ldr	r2, [pc, #36]	; (cb5c <am_hal_pdm_interrupt_enable+0x58>)
    cb36:	4293      	cmp	r3, r2
    cb38:	d001      	beq.n	cb3e <am_hal_pdm_interrupt_enable+0x3a>
    cb3a:	2302      	movs	r3, #2
    cb3c:	e008      	b.n	cb50 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    cb3e:	4b08      	ldr	r3, [pc, #32]	; (cb60 <am_hal_pdm_interrupt_enable+0x5c>)
    cb40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cb44:	4906      	ldr	r1, [pc, #24]	; (cb60 <am_hal_pdm_interrupt_enable+0x5c>)
    cb46:	683b      	ldr	r3, [r7, #0]
    cb48:	4313      	orrs	r3, r2
    cb4a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    cb4e:	2300      	movs	r3, #0
}
    cb50:	4618      	mov	r0, r3
    cb52:	3714      	adds	r7, #20
    cb54:	46bd      	mov	sp, r7
    cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb5a:	4770      	bx	lr
    cb5c:	00f956e2 	.word	0x00f956e2
    cb60:	50011000 	.word	0x50011000

0000cb64 <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    cb64:	b480      	push	{r7}
    cb66:	b085      	sub	sp, #20
    cb68:	af00      	add	r7, sp, #0
    cb6a:	6078      	str	r0, [r7, #4]
    cb6c:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb6e:	687b      	ldr	r3, [r7, #4]
    cb70:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cb72:	68fb      	ldr	r3, [r7, #12]
    cb74:	689b      	ldr	r3, [r3, #8]
    cb76:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb78:	687b      	ldr	r3, [r7, #4]
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d00d      	beq.n	cb9a <am_hal_pdm_interrupt_clear+0x36>
    cb7e:	687b      	ldr	r3, [r7, #4]
    cb80:	78db      	ldrb	r3, [r3, #3]
    cb82:	f003 0301 	and.w	r3, r3, #1
    cb86:	b2db      	uxtb	r3, r3
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d006      	beq.n	cb9a <am_hal_pdm_interrupt_clear+0x36>
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb94:	4a07      	ldr	r2, [pc, #28]	; (cbb4 <am_hal_pdm_interrupt_clear+0x50>)
    cb96:	4293      	cmp	r3, r2
    cb98:	d001      	beq.n	cb9e <am_hal_pdm_interrupt_clear+0x3a>
    cb9a:	2302      	movs	r3, #2
    cb9c:	e004      	b.n	cba8 <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    cb9e:	4a06      	ldr	r2, [pc, #24]	; (cbb8 <am_hal_pdm_interrupt_clear+0x54>)
    cba0:	683b      	ldr	r3, [r7, #0]
    cba2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    cba6:	2300      	movs	r3, #0
}
    cba8:	4618      	mov	r0, r3
    cbaa:	3714      	adds	r7, #20
    cbac:	46bd      	mov	sp, r7
    cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb2:	4770      	bx	lr
    cbb4:	00f956e2 	.word	0x00f956e2
    cbb8:	50011000 	.word	0x50011000

0000cbbc <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    cbbc:	b480      	push	{r7}
    cbbe:	b087      	sub	sp, #28
    cbc0:	af00      	add	r7, sp, #0
    cbc2:	60f8      	str	r0, [r7, #12]
    cbc4:	60b9      	str	r1, [r7, #8]
    cbc6:	4613      	mov	r3, r2
    cbc8:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cbca:	68fb      	ldr	r3, [r7, #12]
    cbcc:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    cbce:	697b      	ldr	r3, [r7, #20]
    cbd0:	689b      	ldr	r3, [r3, #8]
    cbd2:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cbd4:	68fb      	ldr	r3, [r7, #12]
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d00d      	beq.n	cbf6 <am_hal_pdm_interrupt_status_get+0x3a>
    cbda:	68fb      	ldr	r3, [r7, #12]
    cbdc:	78db      	ldrb	r3, [r3, #3]
    cbde:	f003 0301 	and.w	r3, r3, #1
    cbe2:	b2db      	uxtb	r3, r3
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d006      	beq.n	cbf6 <am_hal_pdm_interrupt_status_get+0x3a>
    cbe8:	68fb      	ldr	r3, [r7, #12]
    cbea:	681b      	ldr	r3, [r3, #0]
    cbec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbf0:	4a10      	ldr	r2, [pc, #64]	; (cc34 <am_hal_pdm_interrupt_status_get+0x78>)
    cbf2:	4293      	cmp	r3, r2
    cbf4:	d001      	beq.n	cbfa <am_hal_pdm_interrupt_status_get+0x3e>
    cbf6:	2302      	movs	r3, #2
    cbf8:	e016      	b.n	cc28 <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    cbfa:	79fb      	ldrb	r3, [r7, #7]
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d00d      	beq.n	cc1c <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cc00:	4b0d      	ldr	r3, [pc, #52]	; (cc38 <am_hal_pdm_interrupt_status_get+0x7c>)
    cc02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cc06:	68bb      	ldr	r3, [r7, #8]
    cc08:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    cc0a:	4b0b      	ldr	r3, [pc, #44]	; (cc38 <am_hal_pdm_interrupt_status_get+0x7c>)
    cc0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cc10:	68bb      	ldr	r3, [r7, #8]
    cc12:	681b      	ldr	r3, [r3, #0]
    cc14:	401a      	ands	r2, r3
    cc16:	68bb      	ldr	r3, [r7, #8]
    cc18:	601a      	str	r2, [r3, #0]
    cc1a:	e004      	b.n	cc26 <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cc1c:	4b06      	ldr	r3, [pc, #24]	; (cc38 <am_hal_pdm_interrupt_status_get+0x7c>)
    cc1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cc22:	68bb      	ldr	r3, [r7, #8]
    cc24:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    cc26:	2300      	movs	r3, #0
}
    cc28:	4618      	mov	r0, r3
    cc2a:	371c      	adds	r7, #28
    cc2c:	46bd      	mov	sp, r7
    cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc32:	4770      	bx	lr
    cc34:	00f956e2 	.word	0x00f956e2
    cc38:	50011000 	.word	0x50011000

0000cc3c <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    cc3c:	b480      	push	{r7}
    cc3e:	b085      	sub	sp, #20
    cc40:	af00      	add	r7, sp, #0
    cc42:	6078      	str	r0, [r7, #4]
    cc44:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	681b      	ldr	r3, [r3, #0]
    cc4a:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    cc4c:	683b      	ldr	r3, [r7, #0]
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    cc52:	68fa      	ldr	r2, [r7, #12]
    cc54:	68bb      	ldr	r3, [r7, #8]
    cc56:	429a      	cmp	r2, r3
    cc58:	bf0c      	ite	eq
    cc5a:	2301      	moveq	r3, #1
    cc5c:	2300      	movne	r3, #0
    cc5e:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    cc60:	4618      	mov	r0, r3
    cc62:	3714      	adds	r7, #20
    cc64:	46bd      	mov	sp, r7
    cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc6a:	4770      	bx	lr

0000cc6c <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    cc6c:	b580      	push	{r7, lr}
    cc6e:	b092      	sub	sp, #72	; 0x48
    cc70:	af00      	add	r7, sp, #0
    cc72:	6078      	str	r0, [r7, #4]
    cc74:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    cc76:	2300      	movs	r3, #0
    cc78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	2b31      	cmp	r3, #49	; 0x31
    cc80:	d901      	bls.n	cc86 <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cc82:	2306      	movs	r3, #6
    cc84:	e1ba      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    cc86:	2300      	movs	r3, #0
    cc88:	643b      	str	r3, [r7, #64]	; 0x40
    cc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cc8c:	647b      	str	r3, [r7, #68]	; 0x44
    cc8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc90:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    cc92:	783b      	ldrb	r3, [r7, #0]
    cc94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc98:	b2db      	uxtb	r3, r3
    cc9a:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    cc9c:	783b      	ldrb	r3, [r7, #0]
    cc9e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cca2:	b2db      	uxtb	r3, r3
    cca4:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cca8:	00db      	lsls	r3, r3, #3
    ccaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ccac:	4313      	orrs	r3, r2
    ccae:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ccb0:	783b      	ldrb	r3, [r7, #0]
    ccb2:	f023 031f 	bic.w	r3, r3, #31
    ccb6:	b2db      	uxtb	r3, r3
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d039      	beq.n	cd30 <am_hal_gpio_pinconfig+0xc4>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    ccbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccbe:	f043 0301 	orr.w	r3, r3, #1
    ccc2:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ccc4:	783b      	ldrb	r3, [r7, #0]
    ccc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
    ccca:	b2db      	uxtb	r3, r3
    cccc:	2b01      	cmp	r3, #1
    ccce:	d919      	bls.n	cd04 <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    ccd0:	783b      	ldrb	r3, [r7, #0]
    ccd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
    ccd6:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ccd8:	2b05      	cmp	r3, #5
    ccda:	d813      	bhi.n	cd04 <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    ccdc:	783b      	ldrb	r3, [r7, #0]
    ccde:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cce2:	b2db      	uxtb	r3, r3
    cce4:	3b02      	subs	r3, #2
    cce6:	019b      	lsls	r3, r3, #6
    cce8:	461a      	mov	r2, r3
    ccea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccec:	4313      	orrs	r3, r2
    ccee:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    ccf0:	4a79      	ldr	r2, [pc, #484]	; (ced8 <am_hal_gpio_pinconfig+0x26c>)
    ccf2:	687b      	ldr	r3, [r7, #4]
    ccf4:	4413      	add	r3, r2
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	f003 0301 	and.w	r3, r3, #1
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d117      	bne.n	cd30 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cd00:	4b76      	ldr	r3, [pc, #472]	; (cedc <am_hal_gpio_pinconfig+0x270>)
    cd02:	e17b      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    cd04:	783b      	ldrb	r3, [r7, #0]
    cd06:	f023 031f 	bic.w	r3, r3, #31
    cd0a:	b2db      	uxtb	r3, r3
    cd0c:	2bc0      	cmp	r3, #192	; 0xc0
    cd0e:	d104      	bne.n	cd1a <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    cd10:	687b      	ldr	r3, [r7, #4]
    cd12:	2b14      	cmp	r3, #20
    cd14:	d00c      	beq.n	cd30 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    cd16:	4b72      	ldr	r3, [pc, #456]	; (cee0 <am_hal_gpio_pinconfig+0x274>)
    cd18:	e170      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    cd1a:	783b      	ldrb	r3, [r7, #0]
    cd1c:	f023 031f 	bic.w	r3, r3, #31
    cd20:	b2db      	uxtb	r3, r3
    cd22:	2b20      	cmp	r3, #32
    cd24:	d104      	bne.n	cd30 <am_hal_gpio_pinconfig+0xc4>
        {
            //
            // All pads except 20 support a weak pullup, for which we only need
            // to set PADnPULL and clear 7:6 (already done at this point).
            //
            if ( ui32Pin == 20 )
    cd26:	687b      	ldr	r3, [r7, #4]
    cd28:	2b14      	cmp	r3, #20
    cd2a:	d101      	bne.n	cd30 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cd2c:	4b6b      	ldr	r3, [pc, #428]	; (cedc <am_hal_gpio_pinconfig+0x270>)
    cd2e:	e165      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd32:	2b00      	cmp	r3, #0
    cd34:	d021      	beq.n	cd7a <am_hal_gpio_pinconfig+0x10e>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd38:	2b01      	cmp	r3, #1
    cd3a:	d10c      	bne.n	cd56 <am_hal_gpio_pinconfig+0xea>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    cd3c:	4a66      	ldr	r2, [pc, #408]	; (ced8 <am_hal_gpio_pinconfig+0x26c>)
    cd3e:	687b      	ldr	r3, [r7, #4]
    cd40:	4413      	add	r3, r2
    cd42:	781b      	ldrb	r3, [r3, #0]
    cd44:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d004      	beq.n	cd56 <am_hal_gpio_pinconfig+0xea>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    cd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cd52:	647b      	str	r3, [r7, #68]	; 0x44
    cd54:	e011      	b.n	cd7a <am_hal_gpio_pinconfig+0x10e>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd58:	2b02      	cmp	r3, #2
    cd5a:	d10c      	bne.n	cd76 <am_hal_gpio_pinconfig+0x10a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    cd5c:	4a5e      	ldr	r2, [pc, #376]	; (ced8 <am_hal_gpio_pinconfig+0x26c>)
    cd5e:	687b      	ldr	r3, [r7, #4]
    cd60:	4413      	add	r3, r2
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    cd68:	2b00      	cmp	r3, #0
    cd6a:	d004      	beq.n	cd76 <am_hal_gpio_pinconfig+0x10a>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    cd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cd72:	647b      	str	r3, [r7, #68]	; 0x44
    cd74:	e001      	b.n	cd7a <am_hal_gpio_pinconfig+0x10e>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    cd76:	4b5b      	ldr	r3, [pc, #364]	; (cee4 <am_hal_gpio_pinconfig+0x278>)
    cd78:	e140      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    cd7a:	4a5b      	ldr	r2, [pc, #364]	; (cee8 <am_hal_gpio_pinconfig+0x27c>)
    cd7c:	687b      	ldr	r3, [r7, #4]
    cd7e:	4413      	add	r3, r2
    cd80:	781b      	ldrb	r3, [r3, #0]
    cd82:	461a      	mov	r2, r3
    cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd86:	fa42 f303 	asr.w	r3, r2, r3
    cd8a:	005b      	lsls	r3, r3, #1
    cd8c:	f003 0302 	and.w	r3, r3, #2
    cd90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cd92:	4313      	orrs	r3, r2
    cd94:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    cd96:	4a55      	ldr	r2, [pc, #340]	; (ceec <am_hal_gpio_pinconfig+0x280>)
    cd98:	687b      	ldr	r3, [r7, #4]
    cd9a:	4413      	add	r3, r2
    cd9c:	781b      	ldrb	r3, [r3, #0]
    cd9e:	461a      	mov	r2, r3
    cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cda2:	4293      	cmp	r3, r2
    cda4:	d13d      	bne.n	ce22 <am_hal_gpio_pinconfig+0x1b6>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    cda6:	78bb      	ldrb	r3, [r7, #2]
    cda8:	f003 0307 	and.w	r3, r3, #7
    cdac:	b2db      	uxtb	r3, r3
    cdae:	2b07      	cmp	r3, #7
    cdb0:	d101      	bne.n	cdb6 <am_hal_gpio_pinconfig+0x14a>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    cdb2:	4b4f      	ldr	r3, [pc, #316]	; (cef0 <am_hal_gpio_pinconfig+0x284>)
    cdb4:	e122      	b.n	cffc <am_hal_gpio_pinconfig+0x390>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    cdb6:	78bb      	ldrb	r3, [r7, #2]
    cdb8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cdbc:	b2db      	uxtb	r3, r3
    cdbe:	011b      	lsls	r3, r3, #4
    cdc0:	b25a      	sxtb	r2, r3
    cdc2:	78bb      	ldrb	r3, [r7, #2]
    cdc4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cdc8:	b2db      	uxtb	r3, r3
    cdca:	b25b      	sxtb	r3, r3
    cdcc:	4313      	orrs	r3, r2
    cdce:	b25b      	sxtb	r3, r3
    cdd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cdd4:	2300      	movs	r3, #0
    cdd6:	637b      	str	r3, [r7, #52]	; 0x34
    cdd8:	e00d      	b.n	cdf6 <am_hal_gpio_pinconfig+0x18a>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    cdda:	4a46      	ldr	r2, [pc, #280]	; (cef4 <am_hal_gpio_pinconfig+0x288>)
    cddc:	687b      	ldr	r3, [r7, #4]
    cdde:	009b      	lsls	r3, r3, #2
    cde0:	441a      	add	r2, r3
    cde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cde4:	4413      	add	r3, r2
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cdec:	429a      	cmp	r2, r3
    cdee:	d006      	beq.n	cdfe <am_hal_gpio_pinconfig+0x192>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdf2:	3301      	adds	r3, #1
    cdf4:	637b      	str	r3, [r7, #52]	; 0x34
    cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdf8:	2b03      	cmp	r3, #3
    cdfa:	d9ee      	bls.n	cdda <am_hal_gpio_pinconfig+0x16e>
    cdfc:	e000      	b.n	ce00 <am_hal_gpio_pinconfig+0x194>
            {
                break;
    cdfe:	bf00      	nop
            }
        }

#ifndef AM_HAL_DISABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    ce00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce02:	2b03      	cmp	r3, #3
    ce04:	d901      	bls.n	ce0a <am_hal_gpio_pinconfig+0x19e>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    ce06:	4b3c      	ldr	r3, [pc, #240]	; (cef8 <am_hal_gpio_pinconfig+0x28c>)
    ce08:	e0f8      	b.n	cffc <am_hal_gpio_pinconfig+0x390>
        }
#endif // AM_HAL_DISABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    ce0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce0c:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    ce0e:	78ba      	ldrb	r2, [r7, #2]
    ce10:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ce14:	b2d2      	uxtb	r2, r2
    ce16:	00d2      	lsls	r2, r2, #3
    ce18:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    ce1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce1c:	4313      	orrs	r3, r2
    ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ce20:	e044      	b.n	ceac <am_hal_gpio_pinconfig+0x240>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ce22:	787b      	ldrb	r3, [r7, #1]
    ce24:	f3c3 1300 	ubfx	r3, r3, #4, #1
    ce28:	b2db      	uxtb	r3, r3
    ce2a:	005b      	lsls	r3, r3, #1
    ce2c:	461a      	mov	r2, r3
    ce2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce30:	4313      	orrs	r3, r2
    ce32:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    ce34:	787b      	ldrb	r3, [r7, #1]
    ce36:	f3c3 0381 	ubfx	r3, r3, #2, #2
    ce3a:	b2db      	uxtb	r3, r3
    ce3c:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ce3e:	787b      	ldrb	r3, [r7, #1]
    ce40:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ce44:	b2db      	uxtb	r3, r3
    ce46:	00db      	lsls	r3, r3, #3
    ce48:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    ce4c:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    ce4e:	787b      	ldrb	r3, [r7, #1]
    ce50:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ce54:	b2db      	uxtb	r3, r3
    ce56:	105b      	asrs	r3, r3, #1
    ce58:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ce5c:	4313      	orrs	r3, r2
    ce5e:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce62:	4313      	orrs	r3, r2
    ce64:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ce66:	787b      	ldrb	r3, [r7, #1]
    ce68:	f003 030c 	and.w	r3, r3, #12
    ce6c:	b2db      	uxtb	r3, r3
    ce6e:	2b04      	cmp	r3, #4
    ce70:	d007      	beq.n	ce82 <am_hal_gpio_pinconfig+0x216>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    ce72:	463b      	mov	r3, r7
    ce74:	4921      	ldr	r1, [pc, #132]	; (cefc <am_hal_gpio_pinconfig+0x290>)
    ce76:	4618      	mov	r0, r3
    ce78:	f7ff fee0 	bl	cc3c <pincfg_equ>
    ce7c:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d002      	beq.n	ce88 <am_hal_gpio_pinconfig+0x21c>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    ce82:	2301      	movs	r3, #1
    ce84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    ce88:	787b      	ldrb	r3, [r7, #1]
    ce8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
    ce8e:	b2db      	uxtb	r3, r3
    ce90:	2b00      	cmp	r3, #0
    ce92:	d10b      	bne.n	ceac <am_hal_gpio_pinconfig+0x240>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    ce94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce96:	f023 0301 	bic.w	r3, r3, #1
    ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    ce9c:	787b      	ldrb	r3, [r7, #1]
    ce9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cea2:	b2db      	uxtb	r3, r3
    cea4:	461a      	mov	r2, r3
    cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cea8:	4313      	orrs	r3, r2
    ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    ceac:	787b      	ldrb	r3, [r7, #1]
    ceae:	f3c3 0301 	ubfx	r3, r3, #0, #2
    ceb2:	b2db      	uxtb	r3, r3
    ceb4:	2b02      	cmp	r3, #2
    ceb6:	d009      	beq.n	cecc <am_hal_gpio_pinconfig+0x260>
    ceb8:	2b03      	cmp	r3, #3
    ceba:	d021      	beq.n	cf00 <am_hal_gpio_pinconfig+0x294>
    cebc:	2b01      	cmp	r3, #1
    cebe:	d000      	beq.n	cec2 <am_hal_gpio_pinconfig+0x256>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    cec0:	e027      	b.n	cf12 <am_hal_gpio_pinconfig+0x2a6>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    cec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cec4:	f043 0304 	orr.w	r3, r3, #4
    cec8:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    ceca:	e022      	b.n	cf12 <am_hal_gpio_pinconfig+0x2a6>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cece:	f043 0301 	orr.w	r3, r3, #1
    ced2:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ced4:	e01d      	b.n	cf12 <am_hal_gpio_pinconfig+0x2a6>
    ced6:	bf00      	nop
    ced8:	0001118c 	.word	0x0001118c
    cedc:	08000100 	.word	0x08000100
    cee0:	08000101 	.word	0x08000101
    cee4:	08000102 	.word	0x08000102
    cee8:	00011158 	.word	0x00011158
    ceec:	000111c0 	.word	0x000111c0
    cef0:	08000103 	.word	0x08000103
    cef4:	000111f4 	.word	0x000111f4
    cef8:	08000104 	.word	0x08000104
    cefc:	0001114c 	.word	0x0001114c
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    cf00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cf02:	f043 0304 	orr.w	r3, r3, #4
    cf06:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    cf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cf0a:	f043 0301 	orr.w	r3, r3, #1
    cf0e:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    cf10:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    cf12:	687b      	ldr	r3, [r7, #4]
    cf14:	085b      	lsrs	r3, r3, #1
    cf16:	f023 0203 	bic.w	r2, r3, #3
    cf1a:	4b3a      	ldr	r3, [pc, #232]	; (d004 <am_hal_gpio_pinconfig+0x398>)
    cf1c:	4413      	add	r3, r2
    cf1e:	627b      	str	r3, [r7, #36]	; 0x24
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    cf20:	687b      	ldr	r3, [r7, #4]
    cf22:	f023 0303 	bic.w	r3, r3, #3
    cf26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf2a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cf2e:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	f023 0203 	bic.w	r2, r3, #3
    cf36:	4b34      	ldr	r3, [pc, #208]	; (d008 <am_hal_gpio_pinconfig+0x39c>)
    cf38:	4413      	add	r3, r2
    cf3a:	61fb      	str	r3, [r7, #28]

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    cf3c:	687b      	ldr	r3, [r7, #4]
    cf3e:	009b      	lsls	r3, r3, #2
    cf40:	f003 031c 	and.w	r3, r3, #28
    cf44:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    cf46:	687b      	ldr	r3, [r7, #4]
    cf48:	00db      	lsls	r3, r3, #3
    cf4a:	f003 0318 	and.w	r3, r3, #24
    cf4e:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    cf50:	220f      	movs	r2, #15
    cf52:	69bb      	ldr	r3, [r7, #24]
    cf54:	fa02 f303 	lsl.w	r3, r2, r3
    cf58:	43db      	mvns	r3, r3
    cf5a:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    cf5c:	22ff      	movs	r2, #255	; 0xff
    cf5e:	697b      	ldr	r3, [r7, #20]
    cf60:	fa02 f303 	lsl.w	r3, r2, r3
    cf64:	43db      	mvns	r3, r3
    cf66:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    cf68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf6a:	697b      	ldr	r3, [r7, #20]
    cf6c:	fa02 f303 	lsl.w	r3, r2, r3
    cf70:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    cf72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cf74:	697b      	ldr	r3, [r7, #20]
    cf76:	fa02 f303 	lsl.w	r3, r2, r3
    cf7a:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    cf7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf7e:	69bb      	ldr	r3, [r7, #24]
    cf80:	fa02 f303 	lsl.w	r3, r2, r3
    cf84:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    cf86:	f002 ff9d 	bl	fec4 <am_hal_interrupt_master_disable>
    cf8a:	4603      	mov	r3, r0
    cf8c:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    cf8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cf92:	2b00      	cmp	r3, #0
    cf94:	d00c      	beq.n	cfb0 <am_hal_gpio_pinconfig+0x344>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    cf96:	687b      	ldr	r3, [r7, #4]
    cf98:	f003 021f 	and.w	r2, r3, #31
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	08db      	lsrs	r3, r3, #3
    cfa0:	f003 0104 	and.w	r1, r3, #4
    cfa4:	4b19      	ldr	r3, [pc, #100]	; (d00c <am_hal_gpio_pinconfig+0x3a0>)
    cfa6:	440b      	add	r3, r1
    cfa8:	4619      	mov	r1, r3
    cfaa:	2301      	movs	r3, #1
    cfac:	4093      	lsls	r3, r2
    cfae:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    cfb0:	4b17      	ldr	r3, [pc, #92]	; (d010 <am_hal_gpio_pinconfig+0x3a4>)
    cfb2:	2273      	movs	r2, #115	; 0x73
    cfb4:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    cfb6:	6a3b      	ldr	r3, [r7, #32]
    cfb8:	681a      	ldr	r2, [r3, #0]
    cfba:	68fb      	ldr	r3, [r7, #12]
    cfbc:	ea02 0103 	and.w	r1, r2, r3
    cfc0:	6a3b      	ldr	r3, [r7, #32]
    cfc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cfc4:	430a      	orrs	r2, r1
    cfc6:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfca:	681a      	ldr	r2, [r3, #0]
    cfcc:	693b      	ldr	r3, [r7, #16]
    cfce:	ea02 0103 	and.w	r1, r2, r3
    cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfd6:	430a      	orrs	r2, r1
    cfd8:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    cfda:	69fb      	ldr	r3, [r7, #28]
    cfdc:	681a      	ldr	r2, [r3, #0]
    cfde:	68fb      	ldr	r3, [r7, #12]
    cfe0:	ea02 0103 	and.w	r1, r2, r3
    cfe4:	69fb      	ldr	r3, [r7, #28]
    cfe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cfe8:	430a      	orrs	r2, r1
    cfea:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    cfec:	4b08      	ldr	r3, [pc, #32]	; (d010 <am_hal_gpio_pinconfig+0x3a4>)
    cfee:	2200      	movs	r2, #0
    cff0:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    cff2:	68bb      	ldr	r3, [r7, #8]
    cff4:	4618      	mov	r0, r3
    cff6:	f002 ff69 	bl	fecc <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    cffa:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    cffc:	4618      	mov	r0, r3
    cffe:	3748      	adds	r7, #72	; 0x48
    d000:	46bd      	mov	sp, r7
    d002:	bd80      	pop	{r7, pc}
    d004:	40010040 	.word	0x40010040
    d008:	400100e0 	.word	0x400100e0
    d00c:	400100b4 	.word	0x400100b4
    d010:	40010000 	.word	0x40010000

0000d014 <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    d014:	b480      	push	{r7}
    d016:	b089      	sub	sp, #36	; 0x24
    d018:	af00      	add	r7, sp, #0
    d01a:	60f8      	str	r0, [r7, #12]
    d01c:	460b      	mov	r3, r1
    d01e:	607a      	str	r2, [r7, #4]
    d020:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    d022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d026:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    d028:	687b      	ldr	r3, [r7, #4]
    d02a:	2b00      	cmp	r3, #0
    d02c:	d101      	bne.n	d032 <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d02e:	2306      	movs	r3, #6
    d030:	e044      	b.n	d0bc <am_hal_gpio_state_read+0xa8>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	2b31      	cmp	r3, #49	; 0x31
    d036:	d904      	bls.n	d042 <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    d038:	687b      	ldr	r3, [r7, #4]
    d03a:	69fa      	ldr	r2, [r7, #28]
    d03c:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d03e:	2305      	movs	r3, #5
    d040:	e03c      	b.n	d0bc <am_hal_gpio_state_read+0xa8>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> 3);   // 0 or 4
    d042:	68fb      	ldr	r3, [r7, #12]
    d044:	08db      	lsrs	r3, r3, #3
    d046:	f003 0304 	and.w	r3, r3, #4
    d04a:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    d04c:	68fb      	ldr	r3, [r7, #12]
    d04e:	f003 031f 	and.w	r3, r3, #31
    d052:	617b      	str	r3, [r7, #20]

    switch ( eReadType )
    d054:	7afb      	ldrb	r3, [r7, #11]
    d056:	2b01      	cmp	r3, #1
    d058:	d010      	beq.n	d07c <am_hal_gpio_state_read+0x68>
    d05a:	2b02      	cmp	r3, #2
    d05c:	d01b      	beq.n	d096 <am_hal_gpio_state_read+0x82>
    d05e:	2b00      	cmp	r3, #0
    d060:	d126      	bne.n	d0b0 <am_hal_gpio_state_read+0x9c>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, RDA) + ui32BaseAddr);
    d062:	69ba      	ldr	r2, [r7, #24]
    d064:	4b18      	ldr	r3, [pc, #96]	; (d0c8 <am_hal_gpio_state_read+0xb4>)
    d066:	4413      	add	r3, r2
    d068:	681b      	ldr	r3, [r3, #0]
    d06a:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d06c:	69fa      	ldr	r2, [r7, #28]
    d06e:	697b      	ldr	r3, [r7, #20]
    d070:	fa22 f303 	lsr.w	r3, r2, r3
    d074:	f003 0301 	and.w	r3, r3, #1
    d078:	61fb      	str	r3, [r7, #28]
            break;
    d07a:	e01b      	b.n	d0b4 <am_hal_gpio_state_read+0xa0>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32BaseAddr);
    d07c:	69ba      	ldr	r2, [r7, #24]
    d07e:	4b13      	ldr	r3, [pc, #76]	; (d0cc <am_hal_gpio_state_read+0xb8>)
    d080:	4413      	add	r3, r2
    d082:	681b      	ldr	r3, [r3, #0]
    d084:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d086:	69fa      	ldr	r2, [r7, #28]
    d088:	697b      	ldr	r3, [r7, #20]
    d08a:	fa22 f303 	lsr.w	r3, r2, r3
    d08e:	f003 0301 	and.w	r3, r3, #1
    d092:	61fb      	str	r3, [r7, #28]
            break;
    d094:	e00e      	b.n	d0b4 <am_hal_gpio_state_read+0xa0>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, ENA) + ui32BaseAddr);
    d096:	69ba      	ldr	r2, [r7, #24]
    d098:	4b0d      	ldr	r3, [pc, #52]	; (d0d0 <am_hal_gpio_state_read+0xbc>)
    d09a:	4413      	add	r3, r2
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d0a0:	69fa      	ldr	r2, [r7, #28]
    d0a2:	697b      	ldr	r3, [r7, #20]
    d0a4:	fa22 f303 	lsr.w	r3, r2, r3
    d0a8:	f003 0301 	and.w	r3, r3, #1
    d0ac:	61fb      	str	r3, [r7, #28]
            break;
    d0ae:	e001      	b.n	d0b4 <am_hal_gpio_state_read+0xa0>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d0b0:	2306      	movs	r3, #6
    d0b2:	e003      	b.n	d0bc <am_hal_gpio_state_read+0xa8>
    }

    *pui32ReadState = ui32ReadValue;
    d0b4:	687b      	ldr	r3, [r7, #4]
    d0b6:	69fa      	ldr	r2, [r7, #28]
    d0b8:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d0ba:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d0bc:	4618      	mov	r0, r3
    d0be:	3724      	adds	r7, #36	; 0x24
    d0c0:	46bd      	mov	sp, r7
    d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0c6:	4770      	bx	lr
    d0c8:	40010080 	.word	0x40010080
    d0cc:	40010088 	.word	0x40010088
    d0d0:	400100a0 	.word	0x400100a0

0000d0d4 <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d0d4:	b580      	push	{r7, lr}
    d0d6:	b086      	sub	sp, #24
    d0d8:	af00      	add	r7, sp, #0
    d0da:	6078      	str	r0, [r7, #4]
    d0dc:	460b      	mov	r3, r1
    d0de:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d0e0:	2300      	movs	r3, #0
    d0e2:	617b      	str	r3, [r7, #20]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d0e4:	687b      	ldr	r3, [r7, #4]
    d0e6:	2b31      	cmp	r3, #49	; 0x31
    d0e8:	d901      	bls.n	d0ee <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d0ea:	2305      	movs	r3, #5
    d0ec:	e062      	b.n	d1b4 <am_hal_gpio_state_write+0xe0>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d0ee:	78fb      	ldrb	r3, [r7, #3]
    d0f0:	2b05      	cmp	r3, #5
    d0f2:	d901      	bls.n	d0f8 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d0f4:	2306      	movs	r3, #6
    d0f6:	e05d      	b.n	d1b4 <am_hal_gpio_state_write+0xe0>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d0f8:	687b      	ldr	r3, [r7, #4]
    d0fa:	f003 031f 	and.w	r3, r3, #31
    d0fe:	2201      	movs	r2, #1
    d100:	fa02 f303 	lsl.w	r3, r2, r3
    d104:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	08db      	lsrs	r3, r3, #3
    d10a:	f003 0304 	and.w	r3, r3, #4
    d10e:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d110:	f002 fed8 	bl	fec4 <am_hal_interrupt_master_disable>
    d114:	4603      	mov	r3, r0
    d116:	60bb      	str	r3, [r7, #8]
    switch ( eWriteType )
    d118:	78fb      	ldrb	r3, [r7, #3]
    d11a:	2b05      	cmp	r3, #5
    d11c:	d842      	bhi.n	d1a4 <am_hal_gpio_state_write+0xd0>
    d11e:	a201      	add	r2, pc, #4	; (adr r2, d124 <am_hal_gpio_state_write+0x50>)
    d120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d124:	0000d14b 	.word	0x0000d14b
    d128:	0000d13d 	.word	0x0000d13d
    d12c:	0000d159 	.word	0x0000d159
    d130:	0000d17f 	.word	0x0000d17f
    d134:	0000d171 	.word	0x0000d171
    d138:	0000d18d 	.word	0x0000d18d
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
    d13c:	68fa      	ldr	r2, [r7, #12]
    d13e:	4b1f      	ldr	r3, [pc, #124]	; (d1bc <am_hal_gpio_state_write+0xe8>)
    d140:	4413      	add	r3, r2
    d142:	461a      	mov	r2, r3
    d144:	693b      	ldr	r3, [r7, #16]
    d146:	6013      	str	r3, [r2, #0]
            break;
    d148:	e02f      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
    d14a:	68fa      	ldr	r2, [r7, #12]
    d14c:	4b1c      	ldr	r3, [pc, #112]	; (d1c0 <am_hal_gpio_state_write+0xec>)
    d14e:	4413      	add	r3, r2
    d150:	461a      	mov	r2, r3
    d152:	693b      	ldr	r3, [r7, #16]
    d154:	6013      	str	r3, [r2, #0]
            break;
    d156:	e028      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
    d158:	68fa      	ldr	r2, [r7, #12]
    d15a:	4b1a      	ldr	r3, [pc, #104]	; (d1c4 <am_hal_gpio_state_write+0xf0>)
    d15c:	4413      	add	r3, r2
    d15e:	681a      	ldr	r2, [r3, #0]
    d160:	68f9      	ldr	r1, [r7, #12]
    d162:	4b18      	ldr	r3, [pc, #96]	; (d1c4 <am_hal_gpio_state_write+0xf0>)
    d164:	440b      	add	r3, r1
    d166:	4619      	mov	r1, r3
    d168:	693b      	ldr	r3, [r7, #16]
    d16a:	4053      	eors	r3, r2
    d16c:	600b      	str	r3, [r1, #0]
            break;
    d16e:	e01c      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
    d170:	68fa      	ldr	r2, [r7, #12]
    d172:	4b15      	ldr	r3, [pc, #84]	; (d1c8 <am_hal_gpio_state_write+0xf4>)
    d174:	4413      	add	r3, r2
    d176:	461a      	mov	r2, r3
    d178:	693b      	ldr	r3, [r7, #16]
    d17a:	6013      	str	r3, [r2, #0]
            break;
    d17c:	e015      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
    d17e:	68fa      	ldr	r2, [r7, #12]
    d180:	4b12      	ldr	r3, [pc, #72]	; (d1cc <am_hal_gpio_state_write+0xf8>)
    d182:	4413      	add	r3, r2
    d184:	461a      	mov	r2, r3
    d186:	693b      	ldr	r3, [r7, #16]
    d188:	6013      	str	r3, [r2, #0]
            break;
    d18a:	e00e      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
    d18c:	68fa      	ldr	r2, [r7, #12]
    d18e:	4b0f      	ldr	r3, [pc, #60]	; (d1cc <am_hal_gpio_state_write+0xf8>)
    d190:	4413      	add	r3, r2
    d192:	681a      	ldr	r2, [r3, #0]
    d194:	68f9      	ldr	r1, [r7, #12]
    d196:	4b0d      	ldr	r3, [pc, #52]	; (d1cc <am_hal_gpio_state_write+0xf8>)
    d198:	440b      	add	r3, r1
    d19a:	4619      	mov	r1, r3
    d19c:	693b      	ldr	r3, [r7, #16]
    d19e:	4053      	eors	r3, r2
    d1a0:	600b      	str	r3, [r1, #0]
            break;
    d1a2:	e002      	b.n	d1aa <am_hal_gpio_state_write+0xd6>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d1a4:	2306      	movs	r3, #6
    d1a6:	617b      	str	r3, [r7, #20]
            break;
    d1a8:	bf00      	nop
    }

    AM_CRITICAL_END;
    d1aa:	68bb      	ldr	r3, [r7, #8]
    d1ac:	4618      	mov	r0, r3
    d1ae:	f002 fe8d 	bl	fecc <am_hal_interrupt_master_set>

    return ui32Return;
    d1b2:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d1b4:	4618      	mov	r0, r3
    d1b6:	3718      	adds	r7, #24
    d1b8:	46bd      	mov	sp, r7
    d1ba:	bd80      	pop	{r7, pc}
    d1bc:	40010090 	.word	0x40010090
    d1c0:	40010098 	.word	0x40010098
    d1c4:	40010088 	.word	0x40010088
    d1c8:	400100a8 	.word	0x400100a8
    d1cc:	400100b4 	.word	0x400100b4

0000d1d0 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d1d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d1d4:	b084      	sub	sp, #16
    d1d6:	af00      	add	r7, sp, #0
    d1d8:	e9c7 0100 	strd	r0, r1, [r7]
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d1dc:	e9d7 3400 	ldrd	r3, r4, [r7]
    d1e0:	f04f 0100 	mov.w	r1, #0
    d1e4:	4a17      	ldr	r2, [pc, #92]	; (d244 <am_hal_gpio_interrupt_enable+0x74>)
    d1e6:	ea03 0b01 	and.w	fp, r3, r1
    d1ea:	ea04 0c02 	and.w	ip, r4, r2
    d1ee:	ea5b 030c 	orrs.w	r3, fp, ip
    d1f2:	d001      	beq.n	d1f8 <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d1f4:	2305      	movs	r3, #5
    d1f6:	e01f      	b.n	d238 <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d1f8:	f002 fe64 	bl	fec4 <am_hal_interrupt_master_disable>
    d1fc:	4603      	mov	r3, r0
    d1fe:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d200:	4b11      	ldr	r3, [pc, #68]	; (d248 <am_hal_gpio_interrupt_enable+0x78>)
    d202:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d206:	683b      	ldr	r3, [r7, #0]
    d208:	490f      	ldr	r1, [pc, #60]	; (d248 <am_hal_gpio_interrupt_enable+0x78>)
    d20a:	4313      	orrs	r3, r2
    d20c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d210:	4b0d      	ldr	r3, [pc, #52]	; (d248 <am_hal_gpio_interrupt_enable+0x78>)
    d212:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d216:	e9d7 1200 	ldrd	r1, r2, [r7]
    d21a:	f04f 0300 	mov.w	r3, #0
    d21e:	f04f 0400 	mov.w	r4, #0
    d222:	0013      	movs	r3, r2
    d224:	2400      	movs	r4, #0
    d226:	4a08      	ldr	r2, [pc, #32]	; (d248 <am_hal_gpio_interrupt_enable+0x78>)
    d228:	4303      	orrs	r3, r0
    d22a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d22e:	68fb      	ldr	r3, [r7, #12]
    d230:	4618      	mov	r0, r3
    d232:	f002 fe4b 	bl	fecc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d236:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d238:	4618      	mov	r0, r3
    d23a:	3710      	adds	r7, #16
    d23c:	46bd      	mov	sp, r7
    d23e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d242:	bf00      	nop
    d244:	fffc0000 	.word	0xfffc0000
    d248:	40010000 	.word	0x40010000

0000d24c <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d24c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d250:	b084      	sub	sp, #16
    d252:	af00      	add	r7, sp, #0
    d254:	e9c7 0100 	strd	r0, r1, [r7]
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d258:	e9d7 3400 	ldrd	r3, r4, [r7]
    d25c:	f04f 0100 	mov.w	r1, #0
    d260:	4a13      	ldr	r2, [pc, #76]	; (d2b0 <am_hal_gpio_interrupt_clear+0x64>)
    d262:	ea03 0b01 	and.w	fp, r3, r1
    d266:	ea04 0c02 	and.w	ip, r4, r2
    d26a:	ea5b 030c 	orrs.w	r3, fp, ip
    d26e:	d001      	beq.n	d274 <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d270:	2305      	movs	r3, #5
    d272:	e017      	b.n	d2a4 <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d274:	f002 fe26 	bl	fec4 <am_hal_interrupt_master_disable>
    d278:	4603      	mov	r3, r0
    d27a:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d27c:	4a0d      	ldr	r2, [pc, #52]	; (d2b4 <am_hal_gpio_interrupt_clear+0x68>)
    d27e:	683b      	ldr	r3, [r7, #0]
    d280:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d284:	e9d7 1200 	ldrd	r1, r2, [r7]
    d288:	f04f 0300 	mov.w	r3, #0
    d28c:	f04f 0400 	mov.w	r4, #0
    d290:	0013      	movs	r3, r2
    d292:	2400      	movs	r4, #0
    d294:	4a07      	ldr	r2, [pc, #28]	; (d2b4 <am_hal_gpio_interrupt_clear+0x68>)
    d296:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d29a:	68fb      	ldr	r3, [r7, #12]
    d29c:	4618      	mov	r0, r3
    d29e:	f002 fe15 	bl	fecc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d2a2:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d2a4:	4618      	mov	r0, r3
    d2a6:	3710      	adds	r7, #16
    d2a8:	46bd      	mov	sp, r7
    d2aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d2ae:	bf00      	nop
    d2b0:	fffc0000 	.word	0xfffc0000
    d2b4:	40010000 	.word	0x40010000

0000d2b8 <am_hal_gpio_interrupt_status_get>:
// Get GPIO interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_status_get(bool bEnabledOnly, uint64_t *pui64IntStatus)
{
    d2b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d2bc:	b088      	sub	sp, #32
    d2be:	af00      	add	r7, sp, #0
    d2c0:	4603      	mov	r3, r0
    d2c2:	6039      	str	r1, [r7, #0]
    d2c4:	71fb      	strb	r3, [r7, #7]

    uint64_t ui64RetVal, ui64Mask;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
    d2c6:	683b      	ldr	r3, [r7, #0]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d101      	bne.n	d2d0 <am_hal_gpio_interrupt_status_get+0x18>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d2cc:	2306      	movs	r3, #6
    d2ce:	e058      	b.n	d382 <am_hal_gpio_interrupt_status_get+0xca>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize variable outside critical section
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    d2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d2d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d2d8:	e9c7 3406 	strd	r3, r4, [r7, #24]

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
    d2dc:	f002 fdf2 	bl	fec4 <am_hal_interrupt_master_disable>
    d2e0:	4603      	mov	r3, r0
    d2e2:	60fb      	str	r3, [r7, #12]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
    d2e4:	4b29      	ldr	r3, [pc, #164]	; (d38c <am_hal_gpio_interrupt_status_get+0xd4>)
    d2e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    d2ea:	4619      	mov	r1, r3
    d2ec:	f04f 0200 	mov.w	r2, #0
    d2f0:	f04f 0300 	mov.w	r3, #0
    d2f4:	f04f 0400 	mov.w	r4, #0
    d2f8:	000c      	movs	r4, r1
    d2fa:	2300      	movs	r3, #0
    d2fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
    d300:	4b22      	ldr	r3, [pc, #136]	; (d38c <am_hal_gpio_interrupt_status_get+0xd4>)
    d302:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d306:	469b      	mov	fp, r3
    d308:	f04f 0c00 	mov.w	ip, #0
    d30c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d310:	ea4b 0301 	orr.w	r3, fp, r1
    d314:	ea4c 0402 	orr.w	r4, ip, r2
    d318:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if ( bEnabledOnly )
    d31c:	79fb      	ldrb	r3, [r7, #7]
    d31e:	2b00      	cmp	r3, #0
    d320:	d01b      	beq.n	d35a <am_hal_gpio_interrupt_status_get+0xa2>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
    d322:	4b1a      	ldr	r3, [pc, #104]	; (d38c <am_hal_gpio_interrupt_status_get+0xd4>)
    d324:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d328:	4619      	mov	r1, r3
    d32a:	f04f 0200 	mov.w	r2, #0
    d32e:	f04f 0300 	mov.w	r3, #0
    d332:	f04f 0400 	mov.w	r4, #0
    d336:	000c      	movs	r4, r1
    d338:	2300      	movs	r3, #0
    d33a:	e9c7 3406 	strd	r3, r4, [r7, #24]
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
    d33e:	4b13      	ldr	r3, [pc, #76]	; (d38c <am_hal_gpio_interrupt_status_get+0xd4>)
    d340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d344:	469b      	mov	fp, r3
    d346:	f04f 0c00 	mov.w	ip, #0
    d34a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d34e:	ea4b 0301 	orr.w	r3, fp, r1
    d352:	ea4c 0402 	orr.w	r4, ip, r2
    d356:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }

    ui64RetVal &= ui64Mask;
    d35a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d35e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d362:	ea03 0b01 	and.w	fp, r3, r1
    d366:	ea04 0c02 	and.w	ip, r4, r2
    d36a:	e9c7 bc04 	strd	fp, ip, [r7, #16]

    *pui64IntStatus = ui64RetVal;
    d36e:	683a      	ldr	r2, [r7, #0]
    d370:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d374:	e9c2 3400 	strd	r3, r4, [r2]

    AM_CRITICAL_END
    d378:	68fb      	ldr	r3, [r7, #12]
    d37a:	4618      	mov	r0, r3
    d37c:	f002 fda6 	bl	fecc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d380:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_status_get()
    d382:	4618      	mov	r0, r3
    d384:	3720      	adds	r7, #32
    d386:	46bd      	mov	sp, r7
    d388:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d38c:	40010000 	.word	0x40010000

0000d390 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d390:	b580      	push	{r7, lr}
    d392:	b088      	sub	sp, #32
    d394:	af00      	add	r7, sp, #0
    d396:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d398:	f107 030c 	add.w	r3, r7, #12
    d39c:	4618      	mov	r0, r3
    d39e:	f002 fbe1 	bl	fb64 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    d3a2:	68fb      	ldr	r3, [r7, #12]
    d3a4:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d3a6:	69fb      	ldr	r3, [r7, #28]
    d3a8:	4a07      	ldr	r2, [pc, #28]	; (d3c8 <am_util_delay_ms+0x38>)
    d3aa:	fba2 2303 	umull	r2, r3, r2, r3
    d3ae:	099a      	lsrs	r2, r3, #6
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	fb02 f303 	mul.w	r3, r2, r3
    d3b6:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d3b8:	69b8      	ldr	r0, [r7, #24]
    d3ba:	f002 fd2b 	bl	fe14 <am_hal_flash_delay>
}
    d3be:	bf00      	nop
    d3c0:	3720      	adds	r7, #32
    d3c2:	46bd      	mov	sp, r7
    d3c4:	bd80      	pop	{r7, pc}
    d3c6:	bf00      	nop
    d3c8:	057619f1 	.word	0x057619f1

0000d3cc <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d3cc:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d3ce:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d3d2:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d3d4:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d3d8:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d3dc:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d3e0:	f000 f80a 	bl	d3f8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d3e4:	bd01      	pop	{r0, pc}
}
    d3e6:	bf00      	nop
    d3e8:	4618      	mov	r0, r3

0000d3ea <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d3ea:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d3ec:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d3ee:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d3f0:	4770      	bx	lr
}
    d3f2:	bf00      	nop
    d3f4:	4618      	mov	r0, r3
	...

0000d3f8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d3f8:	b580      	push	{r7, lr}
    d3fa:	b096      	sub	sp, #88	; 0x58
    d3fc:	af00      	add	r7, sp, #0
    d3fe:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d400:	f107 030c 	add.w	r3, r7, #12
    d404:	2200      	movs	r2, #0
    d406:	601a      	str	r2, [r3, #0]
    d408:	605a      	str	r2, [r3, #4]
    d40a:	609a      	str	r2, [r3, #8]
    d40c:	60da      	str	r2, [r3, #12]
    d40e:	611a      	str	r2, [r3, #16]
    d410:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d412:	2300      	movs	r3, #0
    d414:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d418:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d41a:	4b2e      	ldr	r3, [pc, #184]	; (d4d4 <am_util_faultisr_collect_data+0xdc>)
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d422:	b2db      	uxtb	r3, r3
    d424:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d42a:	0a1b      	lsrs	r3, r3, #8
    d42c:	b2db      	uxtb	r3, r3
    d42e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d434:	0c1b      	lsrs	r3, r3, #16
    d436:	b29b      	uxth	r3, r3
    d438:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d43c:	4b26      	ldr	r3, [pc, #152]	; (d4d8 <am_util_faultisr_collect_data+0xe0>)
    d43e:	681b      	ldr	r3, [r3, #0]
    d440:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d442:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d446:	b2db      	uxtb	r3, r3
    d448:	f003 0302 	and.w	r3, r3, #2
    d44c:	2b00      	cmp	r3, #0
    d44e:	d005      	beq.n	d45c <am_util_faultisr_collect_data+0x64>
    d450:	6879      	ldr	r1, [r7, #4]
    d452:	2006      	movs	r0, #6
    d454:	f7ff ffc9 	bl	d3ea <getStackedReg>
    d458:	4603      	mov	r3, r0
    d45a:	e001      	b.n	d460 <am_util_faultisr_collect_data+0x68>
    d45c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d460:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d462:	6879      	ldr	r1, [r7, #4]
    d464:	2000      	movs	r0, #0
    d466:	f7ff ffc0 	bl	d3ea <getStackedReg>
    d46a:	4603      	mov	r3, r0
    d46c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d46e:	6879      	ldr	r1, [r7, #4]
    d470:	2001      	movs	r0, #1
    d472:	f7ff ffba 	bl	d3ea <getStackedReg>
    d476:	4603      	mov	r3, r0
    d478:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d47a:	6879      	ldr	r1, [r7, #4]
    d47c:	2002      	movs	r0, #2
    d47e:	f7ff ffb4 	bl	d3ea <getStackedReg>
    d482:	4603      	mov	r3, r0
    d484:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d486:	6879      	ldr	r1, [r7, #4]
    d488:	2003      	movs	r0, #3
    d48a:	f7ff ffae 	bl	d3ea <getStackedReg>
    d48e:	4603      	mov	r3, r0
    d490:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d492:	6879      	ldr	r1, [r7, #4]
    d494:	2004      	movs	r0, #4
    d496:	f7ff ffa8 	bl	d3ea <getStackedReg>
    d49a:	4603      	mov	r3, r0
    d49c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d49e:	6879      	ldr	r1, [r7, #4]
    d4a0:	2005      	movs	r0, #5
    d4a2:	f7ff ffa2 	bl	d3ea <getStackedReg>
    d4a6:	4603      	mov	r3, r0
    d4a8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d4aa:	6879      	ldr	r1, [r7, #4]
    d4ac:	2006      	movs	r0, #6
    d4ae:	f7ff ff9c 	bl	d3ea <getStackedReg>
    d4b2:	4603      	mov	r3, r0
    d4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d4b6:	6879      	ldr	r1, [r7, #4]
    d4b8:	2007      	movs	r0, #7
    d4ba:	f7ff ff96 	bl	d3ea <getStackedReg>
    d4be:	4603      	mov	r3, r0
    d4c0:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d4c2:	f107 030c 	add.w	r3, r7, #12
    d4c6:	4619      	mov	r1, r3
    d4c8:	2002      	movs	r0, #2
    d4ca:	f002 fd03 	bl	fed4 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d4ce:	2300      	movs	r3, #0
    d4d0:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d4d2:	e7fe      	b.n	d4d2 <am_util_faultisr_collect_data+0xda>
    d4d4:	e000ed28 	.word	0xe000ed28
    d4d8:	e000ed38 	.word	0xe000ed38

0000d4dc <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d4dc:	b480      	push	{r7}
    d4de:	b083      	sub	sp, #12
    d4e0:	af00      	add	r7, sp, #0
    d4e2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d4e4:	4a04      	ldr	r2, [pc, #16]	; (d4f8 <am_util_stdio_printf_init+0x1c>)
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	6013      	str	r3, [r2, #0]
}
    d4ea:	bf00      	nop
    d4ec:	370c      	adds	r7, #12
    d4ee:	46bd      	mov	sp, r7
    d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4f4:	4770      	bx	lr
    d4f6:	bf00      	nop
    d4f8:	1000c1a8 	.word	0x1000c1a8

0000d4fc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d4fc:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d500:	b08b      	sub	sp, #44	; 0x2c
    d502:	af00      	add	r7, sp, #0
    d504:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d508:	e9d7 1200 	ldrd	r1, r2, [r7]
    d50c:	f04f 0300 	mov.w	r3, #0
    d510:	f04f 0400 	mov.w	r4, #0
    d514:	0013      	movs	r3, r2
    d516:	2400      	movs	r4, #0
    d518:	4323      	orrs	r3, r4
    d51a:	f000 809d 	beq.w	d658 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d51e:	e9d7 3400 	ldrd	r3, r4, [r7]
    d522:	0866      	lsrs	r6, r4, #1
    d524:	ea4f 0533 	mov.w	r5, r3, rrx
    d528:	e9d7 1200 	ldrd	r1, r2, [r7]
    d52c:	f04f 0b00 	mov.w	fp, #0
    d530:	f04f 0c00 	mov.w	ip, #0
    d534:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d538:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d53c:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d540:	eb1b 0305 	adds.w	r3, fp, r5
    d544:	eb4c 0406 	adc.w	r4, ip, r6
    d548:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d54c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d550:	f04f 0500 	mov.w	r5, #0
    d554:	f04f 0600 	mov.w	r6, #0
    d558:	090d      	lsrs	r5, r1, #4
    d55a:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d55e:	0916      	lsrs	r6, r2, #4
    d560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d564:	186b      	adds	r3, r5, r1
    d566:	eb46 0402 	adc.w	r4, r6, r2
    d56a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d56e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d572:	f04f 0500 	mov.w	r5, #0
    d576:	f04f 0600 	mov.w	r6, #0
    d57a:	0a0d      	lsrs	r5, r1, #8
    d57c:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d580:	0a16      	lsrs	r6, r2, #8
    d582:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d586:	186b      	adds	r3, r5, r1
    d588:	eb46 0402 	adc.w	r4, r6, r2
    d58c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d590:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d594:	f04f 0500 	mov.w	r5, #0
    d598:	f04f 0600 	mov.w	r6, #0
    d59c:	0c0d      	lsrs	r5, r1, #16
    d59e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d5a2:	0c16      	lsrs	r6, r2, #16
    d5a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5a8:	186b      	adds	r3, r5, r1
    d5aa:	eb46 0402 	adc.w	r4, r6, r2
    d5ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d5b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5b6:	f04f 0500 	mov.w	r5, #0
    d5ba:	f04f 0600 	mov.w	r6, #0
    d5be:	0015      	movs	r5, r2
    d5c0:	2600      	movs	r6, #0
    d5c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5c6:	186b      	adds	r3, r5, r1
    d5c8:	eb46 0402 	adc.w	r4, r6, r2
    d5cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d5d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5d4:	f04f 0300 	mov.w	r3, #0
    d5d8:	f04f 0400 	mov.w	r4, #0
    d5dc:	08cb      	lsrs	r3, r1, #3
    d5de:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d5e2:	08d4      	lsrs	r4, r2, #3
    d5e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d5e8:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d5ec:	46ab      	mov	fp, r5
    d5ee:	46b4      	mov	ip, r6
    d5f0:	f04f 0100 	mov.w	r1, #0
    d5f4:	f04f 0200 	mov.w	r2, #0
    d5f8:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d5fc:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d600:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d604:	468b      	mov	fp, r1
    d606:	4694      	mov	ip, r2
    d608:	eb1b 0b05 	adds.w	fp, fp, r5
    d60c:	eb4c 0c06 	adc.w	ip, ip, r6
    d610:	eb1b 030b 	adds.w	r3, fp, fp
    d614:	eb4c 040c 	adc.w	r4, ip, ip
    d618:	469b      	mov	fp, r3
    d61a:	46a4      	mov	ip, r4
    d61c:	4659      	mov	r1, fp
    d61e:	4662      	mov	r2, ip
    d620:	e9d7 3400 	ldrd	r3, r4, [r7]
    d624:	1a5b      	subs	r3, r3, r1
    d626:	eb64 0402 	sbc.w	r4, r4, r2
    d62a:	461d      	mov	r5, r3
    d62c:	4626      	mov	r6, r4
    d62e:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d632:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d636:	1d99      	adds	r1, r3, #6
    d638:	f144 0200 	adc.w	r2, r4, #0
    d63c:	f04f 0500 	mov.w	r5, #0
    d640:	f04f 0600 	mov.w	r6, #0
    d644:	090d      	lsrs	r5, r1, #4
    d646:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d64a:	0916      	lsrs	r6, r2, #4
    d64c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d650:	186b      	adds	r3, r5, r1
    d652:	eb46 0402 	adc.w	r4, r6, r2
    d656:	e029      	b.n	d6ac <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d658:	683b      	ldr	r3, [r7, #0]
    d65a:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d65e:	085a      	lsrs	r2, r3, #1
    d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d662:	089b      	lsrs	r3, r3, #2
    d664:	4413      	add	r3, r2
    d666:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d668:	6a3b      	ldr	r3, [r7, #32]
    d66a:	091b      	lsrs	r3, r3, #4
    d66c:	6a3a      	ldr	r2, [r7, #32]
    d66e:	4413      	add	r3, r2
    d670:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d672:	6a3b      	ldr	r3, [r7, #32]
    d674:	0a1b      	lsrs	r3, r3, #8
    d676:	6a3a      	ldr	r2, [r7, #32]
    d678:	4413      	add	r3, r2
    d67a:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d67c:	6a3b      	ldr	r3, [r7, #32]
    d67e:	0c1b      	lsrs	r3, r3, #16
    d680:	6a3a      	ldr	r2, [r7, #32]
    d682:	4413      	add	r3, r2
    d684:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d686:	6a3b      	ldr	r3, [r7, #32]
    d688:	08db      	lsrs	r3, r3, #3
    d68a:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d68c:	6a3a      	ldr	r2, [r7, #32]
    d68e:	4613      	mov	r3, r2
    d690:	009b      	lsls	r3, r3, #2
    d692:	4413      	add	r3, r2
    d694:	005b      	lsls	r3, r3, #1
    d696:	461a      	mov	r2, r3
    d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d69a:	1a9b      	subs	r3, r3, r2
    d69c:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d69e:	69fb      	ldr	r3, [r7, #28]
    d6a0:	3306      	adds	r3, #6
    d6a2:	091a      	lsrs	r2, r3, #4
    d6a4:	6a3b      	ldr	r3, [r7, #32]
    d6a6:	4413      	add	r3, r2
    d6a8:	f04f 0400 	mov.w	r4, #0
    }
}
    d6ac:	4618      	mov	r0, r3
    d6ae:	4621      	mov	r1, r4
    d6b0:	372c      	adds	r7, #44	; 0x2c
    d6b2:	46bd      	mov	sp, r7
    d6b4:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d6b8:	4770      	bx	lr

0000d6ba <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d6ba:	b590      	push	{r4, r7, lr}
    d6bc:	b085      	sub	sp, #20
    d6be:	af00      	add	r7, sp, #0
    d6c0:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d6c4:	683a      	ldr	r2, [r7, #0]
    d6c6:	687b      	ldr	r3, [r7, #4]
    d6c8:	4313      	orrs	r3, r2
    d6ca:	2b00      	cmp	r3, #0
    d6cc:	bf0c      	ite	eq
    d6ce:	2301      	moveq	r3, #1
    d6d0:	2300      	movne	r3, #0
    d6d2:	b2db      	uxtb	r3, r3
    d6d4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d6d6:	e008      	b.n	d6ea <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d6d8:	e9d7 0100 	ldrd	r0, r1, [r7]
    d6dc:	f7ff ff0e 	bl	d4fc <divu64_10>
    d6e0:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d6e4:	68fb      	ldr	r3, [r7, #12]
    d6e6:	3301      	adds	r3, #1
    d6e8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d6ea:	e9d7 3400 	ldrd	r3, r4, [r7]
    d6ee:	4323      	orrs	r3, r4
    d6f0:	d1f2      	bne.n	d6d8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d6f2:	68fb      	ldr	r3, [r7, #12]
}
    d6f4:	4618      	mov	r0, r3
    d6f6:	3714      	adds	r7, #20
    d6f8:	46bd      	mov	sp, r7
    d6fa:	bd90      	pop	{r4, r7, pc}

0000d6fc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d6fc:	b590      	push	{r4, r7, lr}
    d6fe:	b083      	sub	sp, #12
    d700:	af00      	add	r7, sp, #0
    d702:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d706:	e9d7 3400 	ldrd	r3, r4, [r7]
    d70a:	2b00      	cmp	r3, #0
    d70c:	f174 0300 	sbcs.w	r3, r4, #0
    d710:	da06      	bge.n	d720 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d712:	e9d7 3400 	ldrd	r3, r4, [r7]
    d716:	425b      	negs	r3, r3
    d718:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d71c:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d720:	e9d7 3400 	ldrd	r3, r4, [r7]
    d724:	4618      	mov	r0, r3
    d726:	4621      	mov	r1, r4
    d728:	f7ff ffc7 	bl	d6ba <ndigits_in_u64>
    d72c:	4603      	mov	r3, r0
}
    d72e:	4618      	mov	r0, r3
    d730:	370c      	adds	r7, #12
    d732:	46bd      	mov	sp, r7
    d734:	bd90      	pop	{r4, r7, pc}

0000d736 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d736:	b490      	push	{r4, r7}
    d738:	b084      	sub	sp, #16
    d73a:	af00      	add	r7, sp, #0
    d73c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d740:	683a      	ldr	r2, [r7, #0]
    d742:	687b      	ldr	r3, [r7, #4]
    d744:	4313      	orrs	r3, r2
    d746:	2b00      	cmp	r3, #0
    d748:	bf0c      	ite	eq
    d74a:	2301      	moveq	r3, #1
    d74c:	2300      	movne	r3, #0
    d74e:	b2db      	uxtb	r3, r3
    d750:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d752:	e00e      	b.n	d772 <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    d754:	e9d7 1200 	ldrd	r1, r2, [r7]
    d758:	f04f 0300 	mov.w	r3, #0
    d75c:	f04f 0400 	mov.w	r4, #0
    d760:	090b      	lsrs	r3, r1, #4
    d762:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d766:	0914      	lsrs	r4, r2, #4
    d768:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	3301      	adds	r3, #1
    d770:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d772:	e9d7 3400 	ldrd	r3, r4, [r7]
    d776:	4323      	orrs	r3, r4
    d778:	d1ec      	bne.n	d754 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d77a:	68fb      	ldr	r3, [r7, #12]
}
    d77c:	4618      	mov	r0, r3
    d77e:	3710      	adds	r7, #16
    d780:	46bd      	mov	sp, r7
    d782:	bc90      	pop	{r4, r7}
    d784:	4770      	bx	lr

0000d786 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d786:	b480      	push	{r7}
    d788:	b087      	sub	sp, #28
    d78a:	af00      	add	r7, sp, #0
    d78c:	6078      	str	r0, [r7, #4]
    d78e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d790:	2300      	movs	r3, #0
    d792:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d794:	2300      	movs	r3, #0
    d796:	613b      	str	r3, [r7, #16]
    d798:	2300      	movs	r3, #0
    d79a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d79c:	687b      	ldr	r3, [r7, #4]
    d79e:	781b      	ldrb	r3, [r3, #0]
    d7a0:	2b2d      	cmp	r3, #45	; 0x2d
    d7a2:	d11b      	bne.n	d7dc <decstr_to_int+0x56>
    {
        bNeg = true;
    d7a4:	2301      	movs	r3, #1
    d7a6:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d7a8:	687b      	ldr	r3, [r7, #4]
    d7aa:	3301      	adds	r3, #1
    d7ac:	607b      	str	r3, [r7, #4]
        uCnt++;
    d7ae:	68fb      	ldr	r3, [r7, #12]
    d7b0:	3301      	adds	r3, #1
    d7b2:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7b4:	e012      	b.n	d7dc <decstr_to_int+0x56>
    {
        ++uCnt;
    d7b6:	68fb      	ldr	r3, [r7, #12]
    d7b8:	3301      	adds	r3, #1
    d7ba:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d7bc:	693a      	ldr	r2, [r7, #16]
    d7be:	4613      	mov	r3, r2
    d7c0:	009b      	lsls	r3, r3, #2
    d7c2:	4413      	add	r3, r2
    d7c4:	005b      	lsls	r3, r3, #1
    d7c6:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d7c8:	687b      	ldr	r3, [r7, #4]
    d7ca:	781b      	ldrb	r3, [r3, #0]
    d7cc:	461a      	mov	r2, r3
    d7ce:	693b      	ldr	r3, [r7, #16]
    d7d0:	4413      	add	r3, r2
    d7d2:	3b30      	subs	r3, #48	; 0x30
    d7d4:	613b      	str	r3, [r7, #16]
        pcStr++;
    d7d6:	687b      	ldr	r3, [r7, #4]
    d7d8:	3301      	adds	r3, #1
    d7da:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7dc:	687b      	ldr	r3, [r7, #4]
    d7de:	781b      	ldrb	r3, [r3, #0]
    d7e0:	2b2f      	cmp	r3, #47	; 0x2f
    d7e2:	d903      	bls.n	d7ec <decstr_to_int+0x66>
    d7e4:	687b      	ldr	r3, [r7, #4]
    d7e6:	781b      	ldrb	r3, [r3, #0]
    d7e8:	2b39      	cmp	r3, #57	; 0x39
    d7ea:	d9e4      	bls.n	d7b6 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d7ec:	683b      	ldr	r3, [r7, #0]
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	d002      	beq.n	d7f8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d7f2:	683b      	ldr	r3, [r7, #0]
    d7f4:	68fa      	ldr	r2, [r7, #12]
    d7f6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d7f8:	7dfb      	ldrb	r3, [r7, #23]
    d7fa:	2b00      	cmp	r3, #0
    d7fc:	d002      	beq.n	d804 <decstr_to_int+0x7e>
    d7fe:	693b      	ldr	r3, [r7, #16]
    d800:	425b      	negs	r3, r3
    d802:	e000      	b.n	d806 <decstr_to_int+0x80>
    d804:	693b      	ldr	r3, [r7, #16]
}
    d806:	4618      	mov	r0, r3
    d808:	371c      	adds	r7, #28
    d80a:	46bd      	mov	sp, r7
    d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d810:	4770      	bx	lr

0000d812 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d812:	b590      	push	{r4, r7, lr}
    d814:	b091      	sub	sp, #68	; 0x44
    d816:	af00      	add	r7, sp, #0
    d818:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d81c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d81e:	2300      	movs	r3, #0
    d820:	63fb      	str	r3, [r7, #60]	; 0x3c
    d822:	2300      	movs	r3, #0
    d824:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d82a:	f7ff fe67 	bl	d4fc <divu64_10>
    d82e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d832:	68b9      	ldr	r1, [r7, #8]
    d834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d836:	4613      	mov	r3, r2
    d838:	009b      	lsls	r3, r3, #2
    d83a:	4413      	add	r3, r2
    d83c:	005b      	lsls	r3, r3, #1
    d83e:	1acb      	subs	r3, r1, r3
    d840:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d844:	b2da      	uxtb	r2, r3
    d846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d848:	1c59      	adds	r1, r3, #1
    d84a:	63f9      	str	r1, [r7, #60]	; 0x3c
    d84c:	3230      	adds	r2, #48	; 0x30
    d84e:	b2d2      	uxtb	r2, r2
    d850:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d854:	440b      	add	r3, r1
    d856:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d85a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d85e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d862:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d866:	4323      	orrs	r3, r4
    d868:	d1dd      	bne.n	d826 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d86c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d86e:	687b      	ldr	r3, [r7, #4]
    d870:	2b00      	cmp	r3, #0
    d872:	d011      	beq.n	d898 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d874:	e008      	b.n	d888 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	1c5a      	adds	r2, r3, #1
    d87a:	607a      	str	r2, [r7, #4]
    d87c:	f107 0110 	add.w	r1, r7, #16
    d880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d882:	440a      	add	r2, r1
    d884:	7812      	ldrb	r2, [r2, #0]
    d886:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d88a:	1e5a      	subs	r2, r3, #1
    d88c:	63fa      	str	r2, [r7, #60]	; 0x3c
    d88e:	2b00      	cmp	r3, #0
    d890:	d1f1      	bne.n	d876 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	2200      	movs	r2, #0
    d896:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d89a:	4618      	mov	r0, r3
    d89c:	3744      	adds	r7, #68	; 0x44
    d89e:	46bd      	mov	sp, r7
    d8a0:	bd90      	pop	{r4, r7, pc}

0000d8a2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d8a2:	b490      	push	{r4, r7}
    d8a4:	b08c      	sub	sp, #48	; 0x30
    d8a6:	af00      	add	r7, sp, #0
    d8a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d8ac:	607a      	str	r2, [r7, #4]
    d8ae:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d8b0:	2300      	movs	r3, #0
    d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d8b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d8b8:	4323      	orrs	r3, r4
    d8ba:	d135      	bne.n	d928 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8be:	1c5a      	adds	r2, r3, #1
    d8c0:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d8c6:	4413      	add	r3, r2
    d8c8:	2230      	movs	r2, #48	; 0x30
    d8ca:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d8ce:	e02b      	b.n	d928 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    d8d0:	7a3b      	ldrb	r3, [r7, #8]
    d8d2:	f003 030f 	and.w	r3, r3, #15
    d8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d8da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d8de:	2b09      	cmp	r3, #9
    d8e0:	d90a      	bls.n	d8f8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d8e2:	78fb      	ldrb	r3, [r7, #3]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d001      	beq.n	d8ec <uint64_to_hexstr+0x4a>
    d8e8:	2227      	movs	r2, #39	; 0x27
    d8ea:	e000      	b.n	d8ee <uint64_to_hexstr+0x4c>
    d8ec:	2207      	movs	r2, #7
    d8ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d8f2:	4413      	add	r3, r2
    d8f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8fa:	1c5a      	adds	r2, r3, #1
    d8fc:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d902:	3230      	adds	r2, #48	; 0x30
    d904:	b2d2      	uxtb	r2, r2
    d906:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d90a:	440b      	add	r3, r1
    d90c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d910:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    d914:	f04f 0300 	mov.w	r3, #0
    d918:	f04f 0400 	mov.w	r4, #0
    d91c:	090b      	lsrs	r3, r1, #4
    d91e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d922:	0914      	lsrs	r4, r2, #4
    d924:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    d928:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d92c:	4323      	orrs	r3, r4
    d92e:	d1cf      	bne.n	d8d0 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d932:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d934:	687b      	ldr	r3, [r7, #4]
    d936:	2b00      	cmp	r3, #0
    d938:	d011      	beq.n	d95e <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    d93a:	e008      	b.n	d94e <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    d93c:	687b      	ldr	r3, [r7, #4]
    d93e:	1c5a      	adds	r2, r3, #1
    d940:	607a      	str	r2, [r7, #4]
    d942:	f107 0110 	add.w	r1, r7, #16
    d946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d948:	440a      	add	r2, r1
    d94a:	7812      	ldrb	r2, [r2, #0]
    d94c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d950:	1e5a      	subs	r2, r3, #1
    d952:	62fa      	str	r2, [r7, #44]	; 0x2c
    d954:	2b00      	cmp	r3, #0
    d956:	d1f1      	bne.n	d93c <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d958:	687b      	ldr	r3, [r7, #4]
    d95a:	2200      	movs	r2, #0
    d95c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d960:	4618      	mov	r0, r3
    d962:	3730      	adds	r7, #48	; 0x30
    d964:	46bd      	mov	sp, r7
    d966:	bc90      	pop	{r4, r7}
    d968:	4770      	bx	lr

0000d96a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d96a:	b480      	push	{r7}
    d96c:	b085      	sub	sp, #20
    d96e:	af00      	add	r7, sp, #0
    d970:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d972:	2300      	movs	r3, #0
    d974:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d976:	687b      	ldr	r3, [r7, #4]
    d978:	2b00      	cmp	r3, #0
    d97a:	d104      	bne.n	d986 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d97c:	68fb      	ldr	r3, [r7, #12]
    d97e:	e009      	b.n	d994 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d980:	68fb      	ldr	r3, [r7, #12]
    d982:	3301      	adds	r3, #1
    d984:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	1c5a      	adds	r2, r3, #1
    d98a:	607a      	str	r2, [r7, #4]
    d98c:	781b      	ldrb	r3, [r3, #0]
    d98e:	2b00      	cmp	r3, #0
    d990:	d1f6      	bne.n	d980 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d992:	68fb      	ldr	r3, [r7, #12]
}
    d994:	4618      	mov	r0, r3
    d996:	3714      	adds	r7, #20
    d998:	46bd      	mov	sp, r7
    d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d99e:	4770      	bx	lr

0000d9a0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d9a0:	b480      	push	{r7}
    d9a2:	b087      	sub	sp, #28
    d9a4:	af00      	add	r7, sp, #0
    d9a6:	60f8      	str	r0, [r7, #12]
    d9a8:	460b      	mov	r3, r1
    d9aa:	607a      	str	r2, [r7, #4]
    d9ac:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d9ae:	2300      	movs	r3, #0
    d9b0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d9b2:	687b      	ldr	r3, [r7, #4]
    d9b4:	2b00      	cmp	r3, #0
    d9b6:	dc0c      	bgt.n	d9d2 <padbuffer+0x32>
    {
        return i32Cnt;
    d9b8:	697b      	ldr	r3, [r7, #20]
    d9ba:	e010      	b.n	d9de <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d9bc:	68fb      	ldr	r3, [r7, #12]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d004      	beq.n	d9cc <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d9c2:	68fb      	ldr	r3, [r7, #12]
    d9c4:	1c5a      	adds	r2, r3, #1
    d9c6:	60fa      	str	r2, [r7, #12]
    d9c8:	7afa      	ldrb	r2, [r7, #11]
    d9ca:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d9cc:	697b      	ldr	r3, [r7, #20]
    d9ce:	3301      	adds	r3, #1
    d9d0:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d9d2:	687b      	ldr	r3, [r7, #4]
    d9d4:	1e5a      	subs	r2, r3, #1
    d9d6:	607a      	str	r2, [r7, #4]
    d9d8:	2b00      	cmp	r3, #0
    d9da:	d1ef      	bne.n	d9bc <padbuffer+0x1c>
    }

    return i32Cnt;
    d9dc:	697b      	ldr	r3, [r7, #20]
}
    d9de:	4618      	mov	r0, r3
    d9e0:	371c      	adds	r7, #28
    d9e2:	46bd      	mov	sp, r7
    d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9e8:	4770      	bx	lr
	...

0000d9ec <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d9ec:	b590      	push	{r4, r7, lr}
    d9ee:	b08f      	sub	sp, #60	; 0x3c
    d9f0:	af00      	add	r7, sp, #0
    d9f2:	ed87 0a03 	vstr	s0, [r7, #12]
    d9f6:	60b8      	str	r0, [r7, #8]
    d9f8:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d9fa:	68bb      	ldr	r3, [r7, #8]
    d9fc:	681b      	ldr	r3, [r3, #0]
    d9fe:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da02:	2b03      	cmp	r3, #3
    da04:	dc02      	bgt.n	da0c <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    da06:	f06f 0302 	mvn.w	r3, #2
    da0a:	e0e7      	b.n	dbdc <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    da0c:	edd7 7a03 	vldr	s15, [r7, #12]
    da10:	eef5 7a40 	vcmp.f32	s15, #0.0
    da14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da18:	d104      	bne.n	da24 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    da1a:	68bb      	ldr	r3, [r7, #8]
    da1c:	4a71      	ldr	r2, [pc, #452]	; (dbe4 <ftoa+0x1f8>)
    da1e:	601a      	str	r2, [r3, #0]
        return 3;
    da20:	2303      	movs	r3, #3
    da22:	e0db      	b.n	dbdc <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    da24:	68bb      	ldr	r3, [r7, #8]
    da26:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    da28:	68fb      	ldr	r3, [r7, #12]
    da2a:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    da2c:	693b      	ldr	r3, [r7, #16]
    da2e:	15db      	asrs	r3, r3, #23
    da30:	b2db      	uxtb	r3, r3
    da32:	3b7f      	subs	r3, #127	; 0x7f
    da34:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    da36:	693b      	ldr	r3, [r7, #16]
    da38:	f3c3 0316 	ubfx	r3, r3, #0, #23
    da3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    da40:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    da42:	2300      	movs	r3, #0
    da44:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    da46:	2300      	movs	r3, #0
    da48:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    da4a:	69fb      	ldr	r3, [r7, #28]
    da4c:	2b1e      	cmp	r3, #30
    da4e:	dd02      	ble.n	da56 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    da50:	f06f 0301 	mvn.w	r3, #1
    da54:	e0c2      	b.n	dbdc <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    da56:	69fb      	ldr	r3, [r7, #28]
    da58:	f113 0f17 	cmn.w	r3, #23
    da5c:	da02      	bge.n	da64 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    da5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    da62:	e0bb      	b.n	dbdc <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    da64:	69fb      	ldr	r3, [r7, #28]
    da66:	2b16      	cmp	r3, #22
    da68:	dd06      	ble.n	da78 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    da6a:	69fb      	ldr	r3, [r7, #28]
    da6c:	3b17      	subs	r3, #23
    da6e:	69ba      	ldr	r2, [r7, #24]
    da70:	fa02 f303 	lsl.w	r3, r2, r3
    da74:	637b      	str	r3, [r7, #52]	; 0x34
    da76:	e01a      	b.n	daae <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    da78:	69fb      	ldr	r3, [r7, #28]
    da7a:	2b00      	cmp	r3, #0
    da7c:	db0f      	blt.n	da9e <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    da7e:	69fb      	ldr	r3, [r7, #28]
    da80:	f1c3 0317 	rsb	r3, r3, #23
    da84:	69ba      	ldr	r2, [r7, #24]
    da86:	fa42 f303 	asr.w	r3, r2, r3
    da8a:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    da8c:	69fb      	ldr	r3, [r7, #28]
    da8e:	3301      	adds	r3, #1
    da90:	69ba      	ldr	r2, [r7, #24]
    da92:	fa02 f303 	lsl.w	r3, r2, r3
    da96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da9a:	633b      	str	r3, [r7, #48]	; 0x30
    da9c:	e007      	b.n	daae <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    da9e:	69bb      	ldr	r3, [r7, #24]
    daa0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    daa4:	69fb      	ldr	r3, [r7, #28]
    daa6:	43db      	mvns	r3, r3
    daa8:	fa42 f303 	asr.w	r3, r2, r3
    daac:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    daae:	693b      	ldr	r3, [r7, #16]
    dab0:	2b00      	cmp	r3, #0
    dab2:	da04      	bge.n	dabe <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    dab4:	68bb      	ldr	r3, [r7, #8]
    dab6:	1c5a      	adds	r2, r3, #1
    dab8:	60ba      	str	r2, [r7, #8]
    daba:	222d      	movs	r2, #45	; 0x2d
    dabc:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    dabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dac0:	2b00      	cmp	r3, #0
    dac2:	d105      	bne.n	dad0 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    dac4:	68bb      	ldr	r3, [r7, #8]
    dac6:	1c5a      	adds	r2, r3, #1
    dac8:	60ba      	str	r2, [r7, #8]
    daca:	2230      	movs	r2, #48	; 0x30
    dacc:	701a      	strb	r2, [r3, #0]
    dace:	e021      	b.n	db14 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    dad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dad2:	2b00      	cmp	r3, #0
    dad4:	dd08      	ble.n	dae8 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    dad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dad8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    dadc:	68ba      	ldr	r2, [r7, #8]
    dade:	4618      	mov	r0, r3
    dae0:	4621      	mov	r1, r4
    dae2:	f7ff fe96 	bl	d812 <uint64_to_str>
    dae6:	e011      	b.n	db0c <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    dae8:	68bb      	ldr	r3, [r7, #8]
    daea:	1c5a      	adds	r2, r3, #1
    daec:	60ba      	str	r2, [r7, #8]
    daee:	222d      	movs	r2, #45	; 0x2d
    daf0:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    daf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    daf4:	425b      	negs	r3, r3
    daf6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    dafa:	68ba      	ldr	r2, [r7, #8]
    dafc:	4618      	mov	r0, r3
    dafe:	4621      	mov	r1, r4
    db00:	f7ff fe87 	bl	d812 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    db04:	e002      	b.n	db0c <ftoa+0x120>
        {
            pcBuf++;
    db06:	68bb      	ldr	r3, [r7, #8]
    db08:	3301      	adds	r3, #1
    db0a:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    db0c:	68bb      	ldr	r3, [r7, #8]
    db0e:	781b      	ldrb	r3, [r3, #0]
    db10:	2b00      	cmp	r3, #0
    db12:	d1f8      	bne.n	db06 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    db14:	68bb      	ldr	r3, [r7, #8]
    db16:	1c5a      	adds	r2, r3, #1
    db18:	60ba      	str	r2, [r7, #8]
    db1a:	222e      	movs	r2, #46	; 0x2e
    db1c:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db20:	2b00      	cmp	r3, #0
    db22:	d105      	bne.n	db30 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    db24:	68bb      	ldr	r3, [r7, #8]
    db26:	1c5a      	adds	r2, r3, #1
    db28:	60ba      	str	r2, [r7, #8]
    db2a:	2230      	movs	r2, #48	; 0x30
    db2c:	701a      	strb	r2, [r3, #0]
    db2e:	e04f      	b.n	dbd0 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    db30:	68ba      	ldr	r2, [r7, #8]
    db32:	6a3b      	ldr	r3, [r7, #32]
    db34:	1ad3      	subs	r3, r2, r3
    db36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    db38:	1ad3      	subs	r3, r2, r3
    db3a:	3b01      	subs	r3, #1
    db3c:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    db3e:	697a      	ldr	r2, [r7, #20]
    db40:	687b      	ldr	r3, [r7, #4]
    db42:	4293      	cmp	r3, r2
    db44:	bfa8      	it	ge
    db46:	4613      	movge	r3, r2
    db48:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    db4a:	2300      	movs	r3, #0
    db4c:	62bb      	str	r3, [r7, #40]	; 0x28
    db4e:	e015      	b.n	db7c <ftoa+0x190>
        {
            i32FracPart *= 10;
    db50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db52:	4613      	mov	r3, r2
    db54:	009b      	lsls	r3, r3, #2
    db56:	4413      	add	r3, r2
    db58:	005b      	lsls	r3, r3, #1
    db5a:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db5e:	161b      	asrs	r3, r3, #24
    db60:	b2da      	uxtb	r2, r3
    db62:	68bb      	ldr	r3, [r7, #8]
    db64:	1c59      	adds	r1, r3, #1
    db66:	60b9      	str	r1, [r7, #8]
    db68:	3230      	adds	r2, #48	; 0x30
    db6a:	b2d2      	uxtb	r2, r2
    db6c:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    db74:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    db76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db78:	3301      	adds	r3, #1
    db7a:	62bb      	str	r3, [r7, #40]	; 0x28
    db7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    db7e:	697b      	ldr	r3, [r7, #20]
    db80:	429a      	cmp	r2, r3
    db82:	dbe5      	blt.n	db50 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    db84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db86:	4613      	mov	r3, r2
    db88:	009b      	lsls	r3, r3, #2
    db8a:	4413      	add	r3, r2
    db8c:	005b      	lsls	r3, r3, #1
    db8e:	161b      	asrs	r3, r3, #24
    db90:	2b04      	cmp	r3, #4
    db92:	dd1d      	ble.n	dbd0 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    db94:	68bb      	ldr	r3, [r7, #8]
    db96:	3b01      	subs	r3, #1
    db98:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db9a:	e015      	b.n	dbc8 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db9e:	781b      	ldrb	r3, [r3, #0]
    dba0:	2b2e      	cmp	r3, #46	; 0x2e
    dba2:	d00e      	beq.n	dbc2 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dba6:	781b      	ldrb	r3, [r3, #0]
    dba8:	2b39      	cmp	r3, #57	; 0x39
    dbaa:	d103      	bne.n	dbb4 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbae:	2230      	movs	r2, #48	; 0x30
    dbb0:	701a      	strb	r2, [r3, #0]
    dbb2:	e006      	b.n	dbc2 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	3301      	adds	r3, #1
    dbba:	b2da      	uxtb	r2, r3
    dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbbe:	701a      	strb	r2, [r3, #0]
                    break;
    dbc0:	e006      	b.n	dbd0 <ftoa+0x1e4>
                }
                pcBuftmp--;
    dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbc4:	3b01      	subs	r3, #1
    dbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    dbc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dbca:	6a3b      	ldr	r3, [r7, #32]
    dbcc:	429a      	cmp	r2, r3
    dbce:	d2e5      	bcs.n	db9c <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    dbd0:	68bb      	ldr	r3, [r7, #8]
    dbd2:	2200      	movs	r2, #0
    dbd4:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    dbd6:	68ba      	ldr	r2, [r7, #8]
    dbd8:	6a3b      	ldr	r3, [r7, #32]
    dbda:	1ad3      	subs	r3, r2, r3
} // ftoa()
    dbdc:	4618      	mov	r0, r3
    dbde:	373c      	adds	r7, #60	; 0x3c
    dbe0:	46bd      	mov	sp, r7
    dbe2:	bd90      	pop	{r4, r7, pc}
    dbe4:	00302e30 	.word	0x00302e30

0000dbe8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    dbe8:	b590      	push	{r4, r7, lr}
    dbea:	b097      	sub	sp, #92	; 0x5c
    dbec:	af00      	add	r7, sp, #0
    dbee:	60f8      	str	r0, [r7, #12]
    dbf0:	60b9      	str	r1, [r7, #8]
    dbf2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    dbf4:	2300      	movs	r3, #0
    dbf6:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    dbf8:	2300      	movs	r3, #0
    dbfa:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    dbfc:	e2e7      	b.n	e1ce <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    dbfe:	2306      	movs	r3, #6
    dc00:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    dc02:	68bb      	ldr	r3, [r7, #8]
    dc04:	781b      	ldrb	r3, [r3, #0]
    dc06:	2b25      	cmp	r3, #37	; 0x25
    dc08:	d01f      	beq.n	dc4a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    dc0a:	68fb      	ldr	r3, [r7, #12]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d015      	beq.n	dc3c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    dc10:	68bb      	ldr	r3, [r7, #8]
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	2b0a      	cmp	r3, #10
    dc16:	d10b      	bne.n	dc30 <am_util_stdio_vsprintf+0x48>
    dc18:	4bb1      	ldr	r3, [pc, #708]	; (dee0 <am_util_stdio_vsprintf+0x2f8>)
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d007      	beq.n	dc30 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    dc20:	68fb      	ldr	r3, [r7, #12]
    dc22:	1c5a      	adds	r2, r3, #1
    dc24:	60fa      	str	r2, [r7, #12]
    dc26:	220d      	movs	r2, #13
    dc28:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    dc2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dc2c:	3301      	adds	r3, #1
    dc2e:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    dc30:	68fb      	ldr	r3, [r7, #12]
    dc32:	1c5a      	adds	r2, r3, #1
    dc34:	60fa      	str	r2, [r7, #12]
    dc36:	68ba      	ldr	r2, [r7, #8]
    dc38:	7812      	ldrb	r2, [r2, #0]
    dc3a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    dc3c:	68bb      	ldr	r3, [r7, #8]
    dc3e:	3301      	adds	r3, #1
    dc40:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    dc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dc44:	3301      	adds	r3, #1
    dc46:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    dc48:	e2c1      	b.n	e1ce <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    dc4a:	68bb      	ldr	r3, [r7, #8]
    dc4c:	3301      	adds	r3, #1
    dc4e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    dc50:	2300      	movs	r3, #0
    dc52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    dc56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dc5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    dc5e:	2320      	movs	r3, #32
    dc60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    dc64:	68bb      	ldr	r3, [r7, #8]
    dc66:	781b      	ldrb	r3, [r3, #0]
    dc68:	2b30      	cmp	r3, #48	; 0x30
    dc6a:	d105      	bne.n	dc78 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    dc6c:	2330      	movs	r3, #48	; 0x30
    dc6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    dc72:	68bb      	ldr	r3, [r7, #8]
    dc74:	3301      	adds	r3, #1
    dc76:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    dc78:	f107 0314 	add.w	r3, r7, #20
    dc7c:	4619      	mov	r1, r3
    dc7e:	68b8      	ldr	r0, [r7, #8]
    dc80:	f7ff fd81 	bl	d786 <decstr_to_int>
    dc84:	4603      	mov	r3, r0
    dc86:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    dc88:	697b      	ldr	r3, [r7, #20]
    dc8a:	68ba      	ldr	r2, [r7, #8]
    dc8c:	4413      	add	r3, r2
    dc8e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    dc90:	68bb      	ldr	r3, [r7, #8]
    dc92:	781b      	ldrb	r3, [r3, #0]
    dc94:	2b73      	cmp	r3, #115	; 0x73
    dc96:	d005      	beq.n	dca4 <am_util_stdio_vsprintf+0xbc>
    dc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	da02      	bge.n	dca4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    dc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dca0:	425b      	negs	r3, r3
    dca2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    dca4:	68bb      	ldr	r3, [r7, #8]
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	2b2e      	cmp	r3, #46	; 0x2e
    dcaa:	d10e      	bne.n	dcca <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    dcac:	68bb      	ldr	r3, [r7, #8]
    dcae:	3301      	adds	r3, #1
    dcb0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    dcb2:	f107 0314 	add.w	r3, r7, #20
    dcb6:	4619      	mov	r1, r3
    dcb8:	68b8      	ldr	r0, [r7, #8]
    dcba:	f7ff fd64 	bl	d786 <decstr_to_int>
    dcbe:	4603      	mov	r3, r0
    dcc0:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    dcc2:	697b      	ldr	r3, [r7, #20]
    dcc4:	68ba      	ldr	r2, [r7, #8]
    dcc6:	4413      	add	r3, r2
    dcc8:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dcca:	68bb      	ldr	r3, [r7, #8]
    dccc:	781b      	ldrb	r3, [r3, #0]
    dcce:	2b6c      	cmp	r3, #108	; 0x6c
    dcd0:	d10c      	bne.n	dcec <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dcd2:	68bb      	ldr	r3, [r7, #8]
    dcd4:	3301      	adds	r3, #1
    dcd6:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dcd8:	68bb      	ldr	r3, [r7, #8]
    dcda:	781b      	ldrb	r3, [r3, #0]
    dcdc:	2b6c      	cmp	r3, #108	; 0x6c
    dcde:	d105      	bne.n	dcec <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dce0:	68bb      	ldr	r3, [r7, #8]
    dce2:	3301      	adds	r3, #1
    dce4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dce6:	2301      	movs	r3, #1
    dce8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    dcec:	68bb      	ldr	r3, [r7, #8]
    dcee:	781b      	ldrb	r3, [r3, #0]
    dcf0:	3b46      	subs	r3, #70	; 0x46
    dcf2:	2b32      	cmp	r3, #50	; 0x32
    dcf4:	f200 8258 	bhi.w	e1a8 <am_util_stdio_vsprintf+0x5c0>
    dcf8:	a201      	add	r2, pc, #4	; (adr r2, dd00 <am_util_stdio_vsprintf+0x118>)
    dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dcfe:	bf00      	nop
    dd00:	0000e12f 	.word	0x0000e12f
    dd04:	0000e1a9 	.word	0x0000e1a9
    dd08:	0000e1a9 	.word	0x0000e1a9
    dd0c:	0000e1a9 	.word	0x0000e1a9
    dd10:	0000e1a9 	.word	0x0000e1a9
    dd14:	0000e1a9 	.word	0x0000e1a9
    dd18:	0000e1a9 	.word	0x0000e1a9
    dd1c:	0000e1a9 	.word	0x0000e1a9
    dd20:	0000e1a9 	.word	0x0000e1a9
    dd24:	0000e1a9 	.word	0x0000e1a9
    dd28:	0000e1a9 	.word	0x0000e1a9
    dd2c:	0000e1a9 	.word	0x0000e1a9
    dd30:	0000e1a9 	.word	0x0000e1a9
    dd34:	0000e1a9 	.word	0x0000e1a9
    dd38:	0000e1a9 	.word	0x0000e1a9
    dd3c:	0000e1a9 	.word	0x0000e1a9
    dd40:	0000e1a9 	.word	0x0000e1a9
    dd44:	0000e1a9 	.word	0x0000e1a9
    dd48:	0000dec3 	.word	0x0000dec3
    dd4c:	0000e1a9 	.word	0x0000e1a9
    dd50:	0000e1a9 	.word	0x0000e1a9
    dd54:	0000e1a9 	.word	0x0000e1a9
    dd58:	0000e1a9 	.word	0x0000e1a9
    dd5c:	0000e1a9 	.word	0x0000e1a9
    dd60:	0000e1a9 	.word	0x0000e1a9
    dd64:	0000e1a9 	.word	0x0000e1a9
    dd68:	0000e1a9 	.word	0x0000e1a9
    dd6c:	0000e1a9 	.word	0x0000e1a9
    dd70:	0000e1a9 	.word	0x0000e1a9
    dd74:	0000ddcd 	.word	0x0000ddcd
    dd78:	0000dff5 	.word	0x0000dff5
    dd7c:	0000e1a9 	.word	0x0000e1a9
    dd80:	0000e12f 	.word	0x0000e12f
    dd84:	0000e1a9 	.word	0x0000e1a9
    dd88:	0000e1a9 	.word	0x0000e1a9
    dd8c:	0000dff5 	.word	0x0000dff5
    dd90:	0000e1a9 	.word	0x0000e1a9
    dd94:	0000e1a9 	.word	0x0000e1a9
    dd98:	0000e1a9 	.word	0x0000e1a9
    dd9c:	0000e1a9 	.word	0x0000e1a9
    dda0:	0000e1a9 	.word	0x0000e1a9
    dda4:	0000e1a9 	.word	0x0000e1a9
    dda8:	0000e1a9 	.word	0x0000e1a9
    ddac:	0000e1a9 	.word	0x0000e1a9
    ddb0:	0000e1a9 	.word	0x0000e1a9
    ddb4:	0000ddef 	.word	0x0000ddef
    ddb8:	0000e1a9 	.word	0x0000e1a9
    ddbc:	0000df61 	.word	0x0000df61
    ddc0:	0000e1a9 	.word	0x0000e1a9
    ddc4:	0000e1a9 	.word	0x0000e1a9
    ddc8:	0000debd 	.word	0x0000debd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	1d1a      	adds	r2, r3, #4
    ddd0:	607a      	str	r2, [r7, #4]
    ddd2:	681b      	ldr	r3, [r3, #0]
    ddd4:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    ddd6:	68fb      	ldr	r3, [r7, #12]
    ddd8:	2b00      	cmp	r3, #0
    ddda:	d004      	beq.n	dde6 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    dddc:	68fb      	ldr	r3, [r7, #12]
    ddde:	1c5a      	adds	r2, r3, #1
    dde0:	60fa      	str	r2, [r7, #12]
    dde2:	7ffa      	ldrb	r2, [r7, #31]
    dde4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    dde6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dde8:	3301      	adds	r3, #1
    ddea:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    ddec:	e1ec      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ddee:	687b      	ldr	r3, [r7, #4]
    ddf0:	1d1a      	adds	r2, r3, #4
    ddf2:	607a      	str	r2, [r7, #4]
    ddf4:	681b      	ldr	r3, [r3, #0]
    ddf6:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ddf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    ddfa:	f7ff fdb6 	bl	d96a <simple_strlen>
    ddfe:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    de00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de02:	2b00      	cmp	r3, #0
    de04:	dd2e      	ble.n	de64 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    de06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    de0a:	429a      	cmp	r2, r3
    de0c:	d22a      	bcs.n	de64 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    de0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de12:	1ad3      	subs	r3, r2, r3
    de14:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de1c:	4619      	mov	r1, r3
    de1e:	68f8      	ldr	r0, [r7, #12]
    de20:	f7ff fdbe 	bl	d9a0 <padbuffer>
    de24:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    de26:	68fb      	ldr	r3, [r7, #12]
    de28:	2b00      	cmp	r3, #0
    de2a:	d001      	beq.n	de30 <am_util_stdio_vsprintf+0x248>
    de2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de2e:	e000      	b.n	de32 <am_util_stdio_vsprintf+0x24a>
    de30:	2300      	movs	r3, #0
    de32:	68fa      	ldr	r2, [r7, #12]
    de34:	4413      	add	r3, r2
    de36:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    de38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de3c:	4413      	add	r3, r2
    de3e:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    de40:	2300      	movs	r3, #0
    de42:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    de44:	e00e      	b.n	de64 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    de46:	68fb      	ldr	r3, [r7, #12]
    de48:	2b00      	cmp	r3, #0
    de4a:	d005      	beq.n	de58 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    de4c:	68fb      	ldr	r3, [r7, #12]
    de4e:	1c5a      	adds	r2, r3, #1
    de50:	60fa      	str	r2, [r7, #12]
    de52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    de54:	7812      	ldrb	r2, [r2, #0]
    de56:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    de58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de5a:	3301      	adds	r3, #1
    de5c:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    de5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    de60:	3301      	adds	r3, #1
    de62:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    de64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    de66:	781b      	ldrb	r3, [r3, #0]
    de68:	2b00      	cmp	r3, #0
    de6a:	d1ec      	bne.n	de46 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    de6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de6e:	2b00      	cmp	r3, #0
    de70:	f000 81a7 	beq.w	e1c2 <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    de74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de76:	425b      	negs	r3, r3
    de78:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    de7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    de7e:	429a      	cmp	r2, r3
    de80:	f080 819f 	bcs.w	e1c2 <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    de84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de88:	1ad3      	subs	r3, r2, r3
    de8a:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de92:	4619      	mov	r1, r3
    de94:	68f8      	ldr	r0, [r7, #12]
    de96:	f7ff fd83 	bl	d9a0 <padbuffer>
    de9a:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	2b00      	cmp	r3, #0
    dea0:	d001      	beq.n	dea6 <am_util_stdio_vsprintf+0x2be>
    dea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dea4:	e000      	b.n	dea8 <am_util_stdio_vsprintf+0x2c0>
    dea6:	2300      	movs	r3, #0
    dea8:	68fa      	ldr	r2, [r7, #12]
    deaa:	4413      	add	r3, r2
    deac:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    deae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    deb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    deb2:	4413      	add	r3, r2
    deb4:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    deb6:	2300      	movs	r3, #0
    deb8:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    deba:	e182      	b.n	e1c2 <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    debc:	2301      	movs	r3, #1
    debe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dec2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dec6:	2b00      	cmp	r3, #0
    dec8:	d00c      	beq.n	dee4 <am_util_stdio_vsprintf+0x2fc>
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	3307      	adds	r3, #7
    dece:	f023 0307 	bic.w	r3, r3, #7
    ded2:	f103 0208 	add.w	r2, r3, #8
    ded6:	607a      	str	r2, [r7, #4]
    ded8:	e9d3 3400 	ldrd	r3, r4, [r3]
    dedc:	e008      	b.n	def0 <am_util_stdio_vsprintf+0x308>
    dede:	bf00      	nop
    dee0:	1000c15c 	.word	0x1000c15c
                                      va_arg(pArgs, uint32_t);
    dee4:	687b      	ldr	r3, [r7, #4]
    dee6:	1d1a      	adds	r2, r3, #4
    dee8:	607a      	str	r2, [r7, #4]
    deea:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    deec:	f04f 0400 	mov.w	r4, #0
    def0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    def6:	2b00      	cmp	r3, #0
    def8:	d01e      	beq.n	df38 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    defa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    defe:	f7ff fc1a 	bl	d736 <ndigits_in_hex>
    df02:	4602      	mov	r2, r0
    df04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df06:	1a9b      	subs	r3, r3, r2
    df08:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    df0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    df0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    df10:	4619      	mov	r1, r3
    df12:	68f8      	ldr	r0, [r7, #12]
    df14:	f7ff fd44 	bl	d9a0 <padbuffer>
    df18:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    df1a:	68fb      	ldr	r3, [r7, #12]
    df1c:	2b00      	cmp	r3, #0
    df1e:	d001      	beq.n	df24 <am_util_stdio_vsprintf+0x33c>
    df20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df22:	e000      	b.n	df26 <am_util_stdio_vsprintf+0x33e>
    df24:	2300      	movs	r3, #0
    df26:	68fa      	ldr	r2, [r7, #12]
    df28:	4413      	add	r3, r2
    df2a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    df2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df30:	4413      	add	r3, r2
    df32:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    df34:	2300      	movs	r3, #0
    df36:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    df38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    df3c:	68fa      	ldr	r2, [r7, #12]
    df3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df42:	f7ff fcae 	bl	d8a2 <uint64_to_hexstr>
    df46:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    df48:	68fb      	ldr	r3, [r7, #12]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d003      	beq.n	df56 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df50:	68fa      	ldr	r2, [r7, #12]
    df52:	4413      	add	r3, r2
    df54:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    df56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df5a:	4413      	add	r3, r2
    df5c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    df5e:	e133      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    df60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    df64:	2b00      	cmp	r3, #0
    df66:	d009      	beq.n	df7c <am_util_stdio_vsprintf+0x394>
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	3307      	adds	r3, #7
    df6c:	f023 0307 	bic.w	r3, r3, #7
    df70:	f103 0208 	add.w	r2, r3, #8
    df74:	607a      	str	r2, [r7, #4]
    df76:	e9d3 3400 	ldrd	r3, r4, [r3]
    df7a:	e005      	b.n	df88 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	1d1a      	adds	r2, r3, #4
    df80:	607a      	str	r2, [r7, #4]
    df82:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    df84:	f04f 0400 	mov.w	r4, #0
    df88:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    df8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df8e:	2b00      	cmp	r3, #0
    df90:	d01e      	beq.n	dfd0 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    df92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df96:	f7ff fb90 	bl	d6ba <ndigits_in_u64>
    df9a:	4602      	mov	r2, r0
    df9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df9e:	1a9b      	subs	r3, r3, r2
    dfa0:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dfa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dfa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dfa8:	4619      	mov	r1, r3
    dfaa:	68f8      	ldr	r0, [r7, #12]
    dfac:	f7ff fcf8 	bl	d9a0 <padbuffer>
    dfb0:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    dfb2:	68fb      	ldr	r3, [r7, #12]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d001      	beq.n	dfbc <am_util_stdio_vsprintf+0x3d4>
    dfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfba:	e000      	b.n	dfbe <am_util_stdio_vsprintf+0x3d6>
    dfbc:	2300      	movs	r3, #0
    dfbe:	68fa      	ldr	r2, [r7, #12]
    dfc0:	4413      	add	r3, r2
    dfc2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dfc8:	4413      	add	r3, r2
    dfca:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    dfcc:	2300      	movs	r3, #0
    dfce:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dfd0:	68fa      	ldr	r2, [r7, #12]
    dfd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    dfd6:	f7ff fc1c 	bl	d812 <uint64_to_str>
    dfda:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dfdc:	68fb      	ldr	r3, [r7, #12]
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d003      	beq.n	dfea <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    dfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfe4:	68fa      	ldr	r2, [r7, #12]
    dfe6:	4413      	add	r3, r2
    dfe8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dfee:	4413      	add	r3, r2
    dff0:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dff2:	e0e9      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dff4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dff8:	2b00      	cmp	r3, #0
    dffa:	d009      	beq.n	e010 <am_util_stdio_vsprintf+0x428>
    dffc:	687b      	ldr	r3, [r7, #4]
    dffe:	3307      	adds	r3, #7
    e000:	f023 0307 	bic.w	r3, r3, #7
    e004:	f103 0208 	add.w	r2, r3, #8
    e008:	607a      	str	r2, [r7, #4]
    e00a:	e9d3 3400 	ldrd	r3, r4, [r3]
    e00e:	e005      	b.n	e01c <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    e010:	687b      	ldr	r3, [r7, #4]
    e012:	1d1a      	adds	r2, r3, #4
    e014:	607a      	str	r2, [r7, #4]
    e016:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e018:	ea4f 74e3 	mov.w	r4, r3, asr #31
    e01c:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    e020:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e024:	2b00      	cmp	r3, #0
    e026:	f174 0300 	sbcs.w	r3, r4, #0
    e02a:	da0a      	bge.n	e042 <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    e02c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e030:	425b      	negs	r3, r3
    e032:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    e036:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    e03a:	2301      	movs	r3, #1
    e03c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    e040:	e006      	b.n	e050 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    e042:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e046:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    e04a:	2300      	movs	r3, #0
    e04c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    e050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e052:	2b00      	cmp	r3, #0
    e054:	d04a      	beq.n	e0ec <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    e056:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    e05a:	4618      	mov	r0, r3
    e05c:	4621      	mov	r1, r4
    e05e:	f7ff fb4d 	bl	d6fc <ndigits_in_i64>
    e062:	4602      	mov	r2, r0
    e064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e066:	1a9b      	subs	r3, r3, r2
    e068:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    e06a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e06e:	2b00      	cmp	r3, #0
    e070:	d011      	beq.n	e096 <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    e072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e074:	3b01      	subs	r3, #1
    e076:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    e078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e07c:	2b30      	cmp	r3, #48	; 0x30
    e07e:	d10a      	bne.n	e096 <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    e080:	68fb      	ldr	r3, [r7, #12]
    e082:	2b00      	cmp	r3, #0
    e084:	d004      	beq.n	e090 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    e086:	68fb      	ldr	r3, [r7, #12]
    e088:	1c5a      	adds	r2, r3, #1
    e08a:	60fa      	str	r2, [r7, #12]
    e08c:	222d      	movs	r2, #45	; 0x2d
    e08e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    e090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e092:	3301      	adds	r3, #1
    e094:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e09a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e09c:	4619      	mov	r1, r3
    e09e:	68f8      	ldr	r0, [r7, #12]
    e0a0:	f7ff fc7e 	bl	d9a0 <padbuffer>
    e0a4:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e0a6:	68fb      	ldr	r3, [r7, #12]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d001      	beq.n	e0b0 <am_util_stdio_vsprintf+0x4c8>
    e0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0ae:	e000      	b.n	e0b2 <am_util_stdio_vsprintf+0x4ca>
    e0b0:	2300      	movs	r3, #0
    e0b2:	68fa      	ldr	r2, [r7, #12]
    e0b4:	4413      	add	r3, r2
    e0b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e0bc:	4413      	add	r3, r2
    e0be:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e0c0:	2300      	movs	r3, #0
    e0c2:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e0c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d01e      	beq.n	e10a <am_util_stdio_vsprintf+0x522>
    e0cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e0d0:	2b20      	cmp	r3, #32
    e0d2:	d11a      	bne.n	e10a <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e0d4:	68fb      	ldr	r3, [r7, #12]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d004      	beq.n	e0e4 <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	1c5a      	adds	r2, r3, #1
    e0de:	60fa      	str	r2, [r7, #12]
    e0e0:	222d      	movs	r2, #45	; 0x2d
    e0e2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e0e6:	3301      	adds	r3, #1
    e0e8:	647b      	str	r3, [r7, #68]	; 0x44
    e0ea:	e00e      	b.n	e10a <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e0ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d00a      	beq.n	e10a <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e0f4:	68fb      	ldr	r3, [r7, #12]
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d004      	beq.n	e104 <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e0fa:	68fb      	ldr	r3, [r7, #12]
    e0fc:	1c5a      	adds	r2, r3, #1
    e0fe:	60fa      	str	r2, [r7, #12]
    e100:	222d      	movs	r2, #45	; 0x2d
    e102:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e106:	3301      	adds	r3, #1
    e108:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e10a:	68fa      	ldr	r2, [r7, #12]
    e10c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e110:	f7ff fb7f 	bl	d812 <uint64_to_str>
    e114:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e116:	68fb      	ldr	r3, [r7, #12]
    e118:	2b00      	cmp	r3, #0
    e11a:	d003      	beq.n	e124 <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e11e:	68fa      	ldr	r2, [r7, #12]
    e120:	4413      	add	r3, r2
    e122:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e128:	4413      	add	r3, r2
    e12a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e12c:	e04c      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e12e:	68fb      	ldr	r3, [r7, #12]
    e130:	2b00      	cmp	r3, #0
    e132:	d048      	beq.n	e1c6 <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e134:	687b      	ldr	r3, [r7, #4]
    e136:	3307      	adds	r3, #7
    e138:	f023 0307 	bic.w	r3, r3, #7
    e13c:	f103 0208 	add.w	r2, r3, #8
    e140:	607a      	str	r2, [r7, #4]
    e142:	e9d3 3400 	ldrd	r3, r4, [r3]
    e146:	4618      	mov	r0, r3
    e148:	4621      	mov	r1, r4
    e14a:	f7fe f873 	bl	c234 <__aeabi_d2f>
    e14e:	4603      	mov	r3, r0
    e150:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e152:	68fb      	ldr	r3, [r7, #12]
    e154:	2214      	movs	r2, #20
    e156:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e15a:	68f8      	ldr	r0, [r7, #12]
    e15c:	ed97 0a06 	vldr	s0, [r7, #24]
    e160:	f7ff fc44 	bl	d9ec <ftoa>
    e164:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e168:	2b00      	cmp	r3, #0
    e16a:	da14      	bge.n	e196 <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e172:	d102      	bne.n	e17a <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e174:	4b1e      	ldr	r3, [pc, #120]	; (e1f0 <am_util_stdio_vsprintf+0x608>)
    e176:	633b      	str	r3, [r7, #48]	; 0x30
    e178:	e008      	b.n	e18c <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e17c:	f113 0f02 	cmn.w	r3, #2
    e180:	d102      	bne.n	e188 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e182:	4b1c      	ldr	r3, [pc, #112]	; (e1f4 <am_util_stdio_vsprintf+0x60c>)
    e184:	633b      	str	r3, [r7, #48]	; 0x30
    e186:	e001      	b.n	e18c <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e188:	4b1b      	ldr	r3, [pc, #108]	; (e1f8 <am_util_stdio_vsprintf+0x610>)
    e18a:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e18c:	68fb      	ldr	r3, [r7, #12]
    e18e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e190:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e192:	2303      	movs	r3, #3
    e194:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e19a:	4413      	add	r3, r2
    e19c:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e1a0:	68fa      	ldr	r2, [r7, #12]
    e1a2:	4413      	add	r3, r2
    e1a4:	60fb      	str	r3, [r7, #12]
                }
                break;
    e1a6:	e00e      	b.n	e1c6 <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e1a8:	68fb      	ldr	r3, [r7, #12]
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d005      	beq.n	e1ba <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e1ae:	68fb      	ldr	r3, [r7, #12]
    e1b0:	1c5a      	adds	r2, r3, #1
    e1b2:	60fa      	str	r2, [r7, #12]
    e1b4:	68ba      	ldr	r2, [r7, #8]
    e1b6:	7812      	ldrb	r2, [r2, #0]
    e1b8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e1bc:	3301      	adds	r3, #1
    e1be:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e1c0:	e002      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>
                break;
    e1c2:	bf00      	nop
    e1c4:	e000      	b.n	e1c8 <am_util_stdio_vsprintf+0x5e0>
                break;
    e1c6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e1c8:	68bb      	ldr	r3, [r7, #8]
    e1ca:	3301      	adds	r3, #1
    e1cc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e1ce:	68bb      	ldr	r3, [r7, #8]
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	f47f ad13 	bne.w	dbfe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d002      	beq.n	e1e4 <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e1de:	68fb      	ldr	r3, [r7, #12]
    e1e0:	2200      	movs	r2, #0
    e1e2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e1e6:	4618      	mov	r0, r3
    e1e8:	375c      	adds	r7, #92	; 0x5c
    e1ea:	46bd      	mov	sp, r7
    e1ec:	bd90      	pop	{r4, r7, pc}
    e1ee:	bf00      	nop
    e1f0:	00302e30 	.word	0x00302e30
    e1f4:	00232e23 	.word	0x00232e23
    e1f8:	003f2e3f 	.word	0x003f2e3f

0000e1fc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e1fc:	b40f      	push	{r0, r1, r2, r3}
    e1fe:	b580      	push	{r7, lr}
    e200:	b082      	sub	sp, #8
    e202:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e204:	4b0d      	ldr	r3, [pc, #52]	; (e23c <am_util_stdio_printf+0x40>)
    e206:	681b      	ldr	r3, [r3, #0]
    e208:	2b00      	cmp	r3, #0
    e20a:	d101      	bne.n	e210 <am_util_stdio_printf+0x14>
    {
        return 0;
    e20c:	2300      	movs	r3, #0
    e20e:	e00d      	b.n	e22c <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e210:	f107 0314 	add.w	r3, r7, #20
    e214:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e216:	683a      	ldr	r2, [r7, #0]
    e218:	6939      	ldr	r1, [r7, #16]
    e21a:	4809      	ldr	r0, [pc, #36]	; (e240 <am_util_stdio_printf+0x44>)
    e21c:	f7ff fce4 	bl	dbe8 <am_util_stdio_vsprintf>
    e220:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e222:	4b06      	ldr	r3, [pc, #24]	; (e23c <am_util_stdio_printf+0x40>)
    e224:	681b      	ldr	r3, [r3, #0]
    e226:	4806      	ldr	r0, [pc, #24]	; (e240 <am_util_stdio_printf+0x44>)
    e228:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e22a:	687b      	ldr	r3, [r7, #4]
}
    e22c:	4618      	mov	r0, r3
    e22e:	3708      	adds	r7, #8
    e230:	46bd      	mov	sp, r7
    e232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e236:	b004      	add	sp, #16
    e238:	4770      	bx	lr
    e23a:	bf00      	nop
    e23c:	1000c1a8 	.word	0x1000c1a8
    e240:	1000c05c 	.word	0x1000c05c

0000e244 <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e244:	b480      	push	{r7}
    e246:	b085      	sub	sp, #20
    e248:	af00      	add	r7, sp, #0
    e24a:	60f8      	str	r0, [r7, #12]
    e24c:	4638      	mov	r0, r7
    e24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e252:	683b      	ldr	r3, [r7, #0]
    e254:	461a      	mov	r2, r3
    e256:	4613      	mov	r3, r2
    e258:	009b      	lsls	r3, r3, #2
    e25a:	4413      	add	r3, r2
    e25c:	009b      	lsls	r3, r3, #2
    e25e:	461a      	mov	r2, r3
    e260:	68fb      	ldr	r3, [r7, #12]
    e262:	4413      	add	r3, r2
    e264:	2200      	movs	r2, #0
    e266:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e268:	683b      	ldr	r3, [r7, #0]
    e26a:	461a      	mov	r2, r3
    e26c:	4613      	mov	r3, r2
    e26e:	009b      	lsls	r3, r3, #2
    e270:	4413      	add	r3, r2
    e272:	009b      	lsls	r3, r3, #2
    e274:	461a      	mov	r2, r3
    e276:	68fb      	ldr	r3, [r7, #12]
    e278:	4413      	add	r3, r2
    e27a:	2200      	movs	r2, #0
    e27c:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e27e:	683b      	ldr	r3, [r7, #0]
    e280:	461a      	mov	r2, r3
    e282:	4613      	mov	r3, r2
    e284:	009b      	lsls	r3, r3, #2
    e286:	4413      	add	r3, r2
    e288:	009b      	lsls	r3, r3, #2
    e28a:	461a      	mov	r2, r3
    e28c:	68fb      	ldr	r3, [r7, #12]
    e28e:	4413      	add	r3, r2
    e290:	2200      	movs	r2, #0
    e292:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e294:	683b      	ldr	r3, [r7, #0]
    e296:	461a      	mov	r2, r3
    e298:	4613      	mov	r3, r2
    e29a:	009b      	lsls	r3, r3, #2
    e29c:	4413      	add	r3, r2
    e29e:	009b      	lsls	r3, r3, #2
    e2a0:	461a      	mov	r2, r3
    e2a2:	68fb      	ldr	r3, [r7, #12]
    e2a4:	4413      	add	r3, r2
    e2a6:	68ba      	ldr	r2, [r7, #8]
    e2a8:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e2aa:	683b      	ldr	r3, [r7, #0]
    e2ac:	461a      	mov	r2, r3
    e2ae:	4613      	mov	r3, r2
    e2b0:	009b      	lsls	r3, r3, #2
    e2b2:	4413      	add	r3, r2
    e2b4:	009b      	lsls	r3, r3, #2
    e2b6:	461a      	mov	r2, r3
    e2b8:	68fb      	ldr	r3, [r7, #12]
    e2ba:	4413      	add	r3, r2
    e2bc:	687a      	ldr	r2, [r7, #4]
    e2be:	601a      	str	r2, [r3, #0]
}
    e2c0:	bf00      	nop
    e2c2:	3714      	adds	r7, #20
    e2c4:	46bd      	mov	sp, r7
    e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2ca:	4770      	bx	lr

0000e2cc <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e2cc:	b580      	push	{r7, lr}
    e2ce:	b086      	sub	sp, #24
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	60f8      	str	r0, [r7, #12]
    e2d4:	60b9      	str	r1, [r7, #8]
    e2d6:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e2d8:	2300      	movs	r3, #0
    e2da:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e2dc:	2300      	movs	r3, #0
    e2de:	617b      	str	r3, [r7, #20]
    e2e0:	e00e      	b.n	e300 <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e2e2:	697a      	ldr	r2, [r7, #20]
    e2e4:	4613      	mov	r3, r2
    e2e6:	005b      	lsls	r3, r3, #1
    e2e8:	4413      	add	r3, r2
    e2ea:	009b      	lsls	r3, r3, #2
    e2ec:	461a      	mov	r2, r3
    e2ee:	68bb      	ldr	r3, [r7, #8]
    e2f0:	4413      	add	r3, r2
    e2f2:	cb0e      	ldmia	r3, {r1, r2, r3}
    e2f4:	68f8      	ldr	r0, [r7, #12]
    e2f6:	f7ff ffa5 	bl	e244 <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e2fa:	697b      	ldr	r3, [r7, #20]
    e2fc:	3301      	adds	r3, #1
    e2fe:	617b      	str	r3, [r7, #20]
    e300:	697a      	ldr	r2, [r7, #20]
    e302:	687b      	ldr	r3, [r7, #4]
    e304:	429a      	cmp	r2, r3
    e306:	d3ec      	bcc.n	e2e2 <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e308:	bf00      	nop
    e30a:	3718      	adds	r7, #24
    e30c:	46bd      	mov	sp, r7
    e30e:	bd80      	pop	{r7, pc}

0000e310 <am_app_utils_ring_buffer_push>:
//                  If false, data could be pushed no matter buffer is full or not.
// Return:
//      bytes pushed into the ring buffer
//*****************************************************************************
uint32_t am_app_utils_ring_buffer_push(am_app_utils_ring_buffer_t *psBuffer, void *pvSource, uint32_t ui32Bytes, bool bFullCheck)
{
    e310:	b580      	push	{r7, lr}
    e312:	b088      	sub	sp, #32
    e314:	af00      	add	r7, sp, #0
    e316:	60f8      	str	r0, [r7, #12]
    e318:	60b9      	str	r1, [r7, #8]
    e31a:	607a      	str	r2, [r7, #4]
    e31c:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32CopyLen = 0;
    e31e:	2300      	movs	r3, #0
    e320:	61fb      	str	r3, [r7, #28]
    uint32_t ui32ReturnPushLen = 0;
    e322:	2300      	movs	r3, #0
    e324:	617b      	str	r3, [r7, #20]
    uint32_t ui32TempLen = 0;
    e326:	2300      	movs	r3, #0
    e328:	61bb      	str	r3, [r7, #24]
    uint8_t *pui8Source;
    
    ui32CopyLen = ui32Bytes;
    e32a:	687b      	ldr	r3, [r7, #4]
    e32c:	61fb      	str	r3, [r7, #28]
    pui8Source = (uint8_t*)pvSource;
    e32e:	68bb      	ldr	r3, [r7, #8]
    e330:	613b      	str	r3, [r7, #16]

    if(bFullCheck == true)
    e332:	78fb      	ldrb	r3, [r7, #3]
    e334:	2b00      	cmp	r3, #0
    e336:	f000 8092 	beq.w	e45e <am_app_utils_ring_buffer_push+0x14e>
    {
        // won't push any data if buffer is full
        if(am_app_utils_ring_buffer_full(psBuffer))
    e33a:	68fb      	ldr	r3, [r7, #12]
    e33c:	685a      	ldr	r2, [r3, #4]
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	689b      	ldr	r3, [r3, #8]
    e342:	429a      	cmp	r2, r3
    e344:	d109      	bne.n	e35a <am_app_utils_ring_buffer_push+0x4a>
    e346:	68fb      	ldr	r3, [r7, #12]
    e348:	68db      	ldr	r3, [r3, #12]
    e34a:	2b01      	cmp	r3, #1
    e34c:	d105      	bne.n	e35a <am_app_utils_ring_buffer_push+0x4a>
        {
            ui32CopyLen = 0;
    e34e:	2300      	movs	r3, #0
    e350:	61fb      	str	r3, [r7, #28]
            ui32ReturnPushLen =0;
    e352:	2300      	movs	r3, #0
    e354:	617b      	str	r3, [r7, #20]
            return ui32ReturnPushLen;
    e356:	697b      	ldr	r3, [r7, #20]
    e358:	e0f7      	b.n	e54a <am_app_utils_ring_buffer_push+0x23a>
        }
    
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e35a:	68fb      	ldr	r3, [r7, #12]
    e35c:	685a      	ldr	r2, [r3, #4]
    e35e:	68fb      	ldr	r3, [r7, #12]
    e360:	689b      	ldr	r3, [r3, #8]
    e362:	429a      	cmp	r2, r3
    e364:	d10f      	bne.n	e386 <am_app_utils_ring_buffer_push+0x76>
    e366:	68fb      	ldr	r3, [r7, #12]
    e368:	68db      	ldr	r3, [r3, #12]
    e36a:	2b00      	cmp	r3, #0
    e36c:	d10b      	bne.n	e386 <am_app_utils_ring_buffer_push+0x76>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e36e:	68fb      	ldr	r3, [r7, #12]
    e370:	691b      	ldr	r3, [r3, #16]
    e372:	69fa      	ldr	r2, [r7, #28]
    e374:	429a      	cmp	r2, r3
    e376:	d32b      	bcc.n	e3d0 <am_app_utils_ring_buffer_push+0xc0>
            {      
                psBuffer->ui32OverWriting = 1;
    e378:	68fb      	ldr	r3, [r7, #12]
    e37a:	2201      	movs	r2, #1
    e37c:	60da      	str	r2, [r3, #12]
                ui32CopyLen = psBuffer->ui32Capacity;
    e37e:	68fb      	ldr	r3, [r7, #12]
    e380:	691b      	ldr	r3, [r3, #16]
    e382:	61fb      	str	r3, [r7, #28]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e384:	e024      	b.n	e3d0 <am_app_utils_ring_buffer_push+0xc0>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e386:	68fb      	ldr	r3, [r7, #12]
    e388:	689a      	ldr	r2, [r3, #8]
    e38a:	68fb      	ldr	r3, [r7, #12]
    e38c:	691b      	ldr	r3, [r3, #16]
    e38e:	441a      	add	r2, r3
    e390:	68fb      	ldr	r3, [r7, #12]
    e392:	685b      	ldr	r3, [r3, #4]
    e394:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e396:	68fa      	ldr	r2, [r7, #12]
    e398:	6912      	ldr	r2, [r2, #16]
    e39a:	fbb3 f1f2 	udiv	r1, r3, r2
    e39e:	fb02 f201 	mul.w	r2, r2, r1
    e3a2:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3a4:	69fa      	ldr	r2, [r7, #28]
    e3a6:	429a      	cmp	r2, r3
    e3a8:	d312      	bcc.n	e3d0 <am_app_utils_ring_buffer_push+0xc0>
            {    
                psBuffer->ui32OverWriting = 1;
    e3aa:	68fb      	ldr	r3, [r7, #12]
    e3ac:	2201      	movs	r2, #1
    e3ae:	60da      	str	r2, [r3, #12]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3b0:	68fb      	ldr	r3, [r7, #12]
    e3b2:	689a      	ldr	r2, [r3, #8]
    e3b4:	68fb      	ldr	r3, [r7, #12]
    e3b6:	691b      	ldr	r3, [r3, #16]
    e3b8:	441a      	add	r2, r3
    e3ba:	68fb      	ldr	r3, [r7, #12]
    e3bc:	685b      	ldr	r3, [r3, #4]
    e3be:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity);
    e3c0:	68fa      	ldr	r2, [r7, #12]
    e3c2:	6912      	ldr	r2, [r2, #16]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3c4:	fbb3 f1f2 	udiv	r1, r3, r2
    e3c8:	fb02 f201 	mul.w	r2, r2, r1
    e3cc:	1a9b      	subs	r3, r3, r2
    e3ce:	61fb      	str	r3, [r7, #28]
            }
    
        }        
            
        ui32ReturnPushLen = ui32CopyLen;
    e3d0:	69fb      	ldr	r3, [r7, #28]
    e3d2:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e3d4:	e020      	b.n	e418 <am_app_utils_ring_buffer_push+0x108>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	691a      	ldr	r2, [r3, #16]
    e3da:	68fb      	ldr	r3, [r7, #12]
    e3dc:	685b      	ldr	r3, [r3, #4]
    e3de:	1ad3      	subs	r3, r2, r3
    e3e0:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e3e2:	68fb      	ldr	r3, [r7, #12]
    e3e4:	681a      	ldr	r2, [r3, #0]
    e3e6:	68fb      	ldr	r3, [r7, #12]
    e3e8:	685b      	ldr	r3, [r3, #4]
    e3ea:	4413      	add	r3, r2
    e3ec:	69ba      	ldr	r2, [r7, #24]
    e3ee:	6939      	ldr	r1, [r7, #16]
    e3f0:	4618      	mov	r0, r3
    e3f2:	f7fd fe85 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e3f6:	68fb      	ldr	r3, [r7, #12]
    e3f8:	685a      	ldr	r2, [r3, #4]
    e3fa:	69bb      	ldr	r3, [r7, #24]
    e3fc:	4413      	add	r3, r2
    e3fe:	68fa      	ldr	r2, [r7, #12]
    e400:	6912      	ldr	r2, [r2, #16]
    e402:	fbb3 f1f2 	udiv	r1, r3, r2
    e406:	fb02 f201 	mul.w	r2, r2, r1
    e40a:	1a9a      	subs	r2, r3, r2
    e40c:	68fb      	ldr	r3, [r7, #12]
    e40e:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e410:	69fa      	ldr	r2, [r7, #28]
    e412:	69bb      	ldr	r3, [r7, #24]
    e414:	1ad3      	subs	r3, r2, r3
    e416:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	685a      	ldr	r2, [r3, #4]
    e41c:	69fb      	ldr	r3, [r7, #28]
    e41e:	441a      	add	r2, r3
    e420:	68fb      	ldr	r3, [r7, #12]
    e422:	691b      	ldr	r3, [r3, #16]
    e424:	429a      	cmp	r2, r3
    e426:	d2d6      	bcs.n	e3d6 <am_app_utils_ring_buffer_push+0xc6>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e428:	68fb      	ldr	r3, [r7, #12]
    e42a:	681a      	ldr	r2, [r3, #0]
    e42c:	68fb      	ldr	r3, [r7, #12]
    e42e:	685b      	ldr	r3, [r3, #4]
    e430:	18d0      	adds	r0, r2, r3
    e432:	693a      	ldr	r2, [r7, #16]
    e434:	69bb      	ldr	r3, [r7, #24]
    e436:	4413      	add	r3, r2
    e438:	69fa      	ldr	r2, [r7, #28]
    e43a:	4619      	mov	r1, r3
    e43c:	f7fd fe60 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e440:	68fb      	ldr	r3, [r7, #12]
    e442:	685a      	ldr	r2, [r3, #4]
    e444:	69fb      	ldr	r3, [r7, #28]
    e446:	4413      	add	r3, r2
    e448:	68fa      	ldr	r2, [r7, #12]
    e44a:	6912      	ldr	r2, [r2, #16]
    e44c:	fbb3 f1f2 	udiv	r1, r3, r2
    e450:	fb02 f201 	mul.w	r2, r2, r1
    e454:	1a9a      	subs	r2, r3, r2
    e456:	68fb      	ldr	r3, [r7, #12]
    e458:	605a      	str	r2, [r3, #4]
        
        return ui32ReturnPushLen;
    e45a:	697b      	ldr	r3, [r7, #20]
    e45c:	e075      	b.n	e54a <am_app_utils_ring_buffer_push+0x23a>
    }
    else        // if no full check, the return bytes are always ui32Bytes.
    {
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e45e:	68fb      	ldr	r3, [r7, #12]
    e460:	685a      	ldr	r2, [r3, #4]
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	689b      	ldr	r3, [r3, #8]
    e466:	429a      	cmp	r2, r3
    e468:	d10c      	bne.n	e484 <am_app_utils_ring_buffer_push+0x174>
    e46a:	68fb      	ldr	r3, [r7, #12]
    e46c:	68db      	ldr	r3, [r3, #12]
    e46e:	2b00      	cmp	r3, #0
    e470:	d108      	bne.n	e484 <am_app_utils_ring_buffer_push+0x174>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e472:	68fb      	ldr	r3, [r7, #12]
    e474:	691b      	ldr	r3, [r3, #16]
    e476:	69fa      	ldr	r2, [r7, #28]
    e478:	429a      	cmp	r2, r3
    e47a:	d318      	bcc.n	e4ae <am_app_utils_ring_buffer_push+0x19e>
            {      
                psBuffer->ui32OverWriting = 1;
    e47c:	68fb      	ldr	r3, [r7, #12]
    e47e:	2201      	movs	r2, #1
    e480:	60da      	str	r2, [r3, #12]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e482:	e014      	b.n	e4ae <am_app_utils_ring_buffer_push+0x19e>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e484:	68fb      	ldr	r3, [r7, #12]
    e486:	689a      	ldr	r2, [r3, #8]
    e488:	68fb      	ldr	r3, [r7, #12]
    e48a:	691b      	ldr	r3, [r3, #16]
    e48c:	441a      	add	r2, r3
    e48e:	68fb      	ldr	r3, [r7, #12]
    e490:	685b      	ldr	r3, [r3, #4]
    e492:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e494:	68fa      	ldr	r2, [r7, #12]
    e496:	6912      	ldr	r2, [r2, #16]
    e498:	fbb3 f1f2 	udiv	r1, r3, r2
    e49c:	fb02 f201 	mul.w	r2, r2, r1
    e4a0:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e4a2:	69fa      	ldr	r2, [r7, #28]
    e4a4:	429a      	cmp	r2, r3
    e4a6:	d302      	bcc.n	e4ae <am_app_utils_ring_buffer_push+0x19e>
            {    
                psBuffer->ui32OverWriting = 1;
    e4a8:	68fb      	ldr	r3, [r7, #12]
    e4aa:	2201      	movs	r2, #1
    e4ac:	60da      	str	r2, [r3, #12]
            }
        }        

        ui32ReturnPushLen = ui32CopyLen;
    e4ae:	69fb      	ldr	r3, [r7, #28]
    e4b0:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e4b2:	e020      	b.n	e4f6 <am_app_utils_ring_buffer_push+0x1e6>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e4b4:	68fb      	ldr	r3, [r7, #12]
    e4b6:	691a      	ldr	r2, [r3, #16]
    e4b8:	68fb      	ldr	r3, [r7, #12]
    e4ba:	685b      	ldr	r3, [r3, #4]
    e4bc:	1ad3      	subs	r3, r2, r3
    e4be:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e4c0:	68fb      	ldr	r3, [r7, #12]
    e4c2:	681a      	ldr	r2, [r3, #0]
    e4c4:	68fb      	ldr	r3, [r7, #12]
    e4c6:	685b      	ldr	r3, [r3, #4]
    e4c8:	4413      	add	r3, r2
    e4ca:	69ba      	ldr	r2, [r7, #24]
    e4cc:	6939      	ldr	r1, [r7, #16]
    e4ce:	4618      	mov	r0, r3
    e4d0:	f7fd fe16 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e4d4:	68fb      	ldr	r3, [r7, #12]
    e4d6:	685a      	ldr	r2, [r3, #4]
    e4d8:	69bb      	ldr	r3, [r7, #24]
    e4da:	4413      	add	r3, r2
    e4dc:	68fa      	ldr	r2, [r7, #12]
    e4de:	6912      	ldr	r2, [r2, #16]
    e4e0:	fbb3 f1f2 	udiv	r1, r3, r2
    e4e4:	fb02 f201 	mul.w	r2, r2, r1
    e4e8:	1a9a      	subs	r2, r3, r2
    e4ea:	68fb      	ldr	r3, [r7, #12]
    e4ec:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e4ee:	69fa      	ldr	r2, [r7, #28]
    e4f0:	69bb      	ldr	r3, [r7, #24]
    e4f2:	1ad3      	subs	r3, r2, r3
    e4f4:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e4f6:	68fb      	ldr	r3, [r7, #12]
    e4f8:	685a      	ldr	r2, [r3, #4]
    e4fa:	69fb      	ldr	r3, [r7, #28]
    e4fc:	441a      	add	r2, r3
    e4fe:	68fb      	ldr	r3, [r7, #12]
    e500:	691b      	ldr	r3, [r3, #16]
    e502:	429a      	cmp	r2, r3
    e504:	d2d6      	bcs.n	e4b4 <am_app_utils_ring_buffer_push+0x1a4>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e506:	68fb      	ldr	r3, [r7, #12]
    e508:	681a      	ldr	r2, [r3, #0]
    e50a:	68fb      	ldr	r3, [r7, #12]
    e50c:	685b      	ldr	r3, [r3, #4]
    e50e:	18d0      	adds	r0, r2, r3
    e510:	693a      	ldr	r2, [r7, #16]
    e512:	69bb      	ldr	r3, [r7, #24]
    e514:	4413      	add	r3, r2
    e516:	69fa      	ldr	r2, [r7, #28]
    e518:	4619      	mov	r1, r3
    e51a:	f7fd fdf1 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e51e:	68fb      	ldr	r3, [r7, #12]
    e520:	685a      	ldr	r2, [r3, #4]
    e522:	69fb      	ldr	r3, [r7, #28]
    e524:	4413      	add	r3, r2
    e526:	68fa      	ldr	r2, [r7, #12]
    e528:	6912      	ldr	r2, [r2, #16]
    e52a:	fbb3 f1f2 	udiv	r1, r3, r2
    e52e:	fb02 f201 	mul.w	r2, r2, r1
    e532:	1a9a      	subs	r2, r3, r2
    e534:	68fb      	ldr	r3, [r7, #12]
    e536:	605a      	str	r2, [r3, #4]
        
        //
        // Keep read and write at same position
        //
        if(psBuffer->ui32OverWriting == 1)
    e538:	68fb      	ldr	r3, [r7, #12]
    e53a:	68db      	ldr	r3, [r3, #12]
    e53c:	2b01      	cmp	r3, #1
    e53e:	d103      	bne.n	e548 <am_app_utils_ring_buffer_push+0x238>
        {
            psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e540:	68fb      	ldr	r3, [r7, #12]
    e542:	685a      	ldr	r2, [r3, #4]
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	609a      	str	r2, [r3, #8]
        }
        
        return ui32ReturnPushLen;
    e548:	697b      	ldr	r3, [r7, #20]
    }
}
    e54a:	4618      	mov	r0, r3
    e54c:	3720      	adds	r7, #32
    e54e:	46bd      	mov	sp, r7
    e550:	bd80      	pop	{r7, pc}

0000e552 <am_app_utils_ring_buffer_pop>:


uint32_t am_app_utils_ring_buffer_pop(am_app_utils_ring_buffer_t *psBuffer, void *pvDest,
                         uint32_t ui32Bytes)
{
    e552:	b580      	push	{r7, lr}
    e554:	b08a      	sub	sp, #40	; 0x28
    e556:	af00      	add	r7, sp, #0
    e558:	60f8      	str	r0, [r7, #12]
    e55a:	60b9      	str	r1, [r7, #8]
    e55c:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e55e:	2300      	movs	r3, #0
    e560:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint32_t ui32TempLen = 0;
    e562:	2300      	movs	r3, #0
    e564:	623b      	str	r3, [r7, #32]
    
    uint32_t ui32DataLen = 0;
    e566:	2300      	movs	r3, #0
    e568:	61fb      	str	r3, [r7, #28]

    uint32_t ui32ReturnPopLen = 0;
    e56a:	2300      	movs	r3, #0
    e56c:	61bb      	str	r3, [r7, #24]

    uint8_t *pui8Dest;

    pui8Dest = (uint8_t *) pvDest;
    e56e:	68bb      	ldr	r3, [r7, #8]
    e570:	617b      	str	r3, [r7, #20]
    ui32DataLen = am_app_utils_get_ring_buffer_status(psBuffer);
    e572:	68f8      	ldr	r0, [r7, #12]
    e574:	f000 f862 	bl	e63c <am_app_utils_get_ring_buffer_status>
    e578:	61f8      	str	r0, [r7, #28]
   
    if(am_app_utils_ring_buffer_overwrite(psBuffer))
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	685a      	ldr	r2, [r3, #4]
    e57e:	68fb      	ldr	r3, [r7, #12]
    e580:	689b      	ldr	r3, [r3, #8]
    e582:	429a      	cmp	r2, r3
    e584:	d007      	beq.n	e596 <am_app_utils_ring_buffer_pop+0x44>
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	68db      	ldr	r3, [r3, #12]
    e58a:	2b01      	cmp	r3, #1
    e58c:	d103      	bne.n	e596 <am_app_utils_ring_buffer_pop+0x44>
    {
        psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e58e:	68fb      	ldr	r3, [r7, #12]
    e590:	685a      	ldr	r2, [r3, #4]
    e592:	68fb      	ldr	r3, [r7, #12]
    e594:	609a      	str	r2, [r3, #8]
       
    }

    // pop len can't exceed the length of buffer
    ui32CopyLen = ui32Bytes < ui32DataLen ? ui32Bytes : ui32DataLen;
    e596:	69fa      	ldr	r2, [r7, #28]
    e598:	687b      	ldr	r3, [r7, #4]
    e59a:	4293      	cmp	r3, r2
    e59c:	bf28      	it	cs
    e59e:	4613      	movcs	r3, r2
    e5a0:	627b      	str	r3, [r7, #36]	; 0x24
    
    ui32ReturnPopLen = ui32CopyLen;
    e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5a4:	61bb      	str	r3, [r7, #24]

    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e5a6:	e020      	b.n	e5ea <am_app_utils_ring_buffer_pop+0x98>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read;
    e5a8:	68fb      	ldr	r3, [r7, #12]
    e5aa:	691a      	ldr	r2, [r3, #16]
    e5ac:	68fb      	ldr	r3, [r7, #12]
    e5ae:	689b      	ldr	r3, [r3, #8]
    e5b0:	1ad3      	subs	r3, r2, r3
    e5b2:	623b      	str	r3, [r7, #32]
        memcpy(pui8Dest, (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32TempLen);
    e5b4:	68fb      	ldr	r3, [r7, #12]
    e5b6:	681a      	ldr	r2, [r3, #0]
    e5b8:	68fb      	ldr	r3, [r7, #12]
    e5ba:	689b      	ldr	r3, [r3, #8]
    e5bc:	4413      	add	r3, r2
    e5be:	6a3a      	ldr	r2, [r7, #32]
    e5c0:	4619      	mov	r1, r3
    e5c2:	6978      	ldr	r0, [r7, #20]
    e5c4:	f7fd fd9c 	bl	c100 <memcpy>
        psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32TempLen) % psBuffer->ui32Capacity);
    e5c8:	68fb      	ldr	r3, [r7, #12]
    e5ca:	689a      	ldr	r2, [r3, #8]
    e5cc:	6a3b      	ldr	r3, [r7, #32]
    e5ce:	4413      	add	r3, r2
    e5d0:	68fa      	ldr	r2, [r7, #12]
    e5d2:	6912      	ldr	r2, [r2, #16]
    e5d4:	fbb3 f1f2 	udiv	r1, r3, r2
    e5d8:	fb02 f201 	mul.w	r2, r2, r1
    e5dc:	1a9a      	subs	r2, r3, r2
    e5de:	68fb      	ldr	r3, [r7, #12]
    e5e0:	609a      	str	r2, [r3, #8]
        ui32CopyLen -= ui32TempLen;
    e5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e5e4:	6a3b      	ldr	r3, [r7, #32]
    e5e6:	1ad3      	subs	r3, r2, r3
    e5e8:	627b      	str	r3, [r7, #36]	; 0x24
    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e5ea:	68fb      	ldr	r3, [r7, #12]
    e5ec:	689a      	ldr	r2, [r3, #8]
    e5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5f0:	441a      	add	r2, r3
    e5f2:	68fb      	ldr	r3, [r7, #12]
    e5f4:	691b      	ldr	r3, [r3, #16]
    e5f6:	429a      	cmp	r2, r3
    e5f8:	d2d6      	bcs.n	e5a8 <am_app_utils_ring_buffer_pop+0x56>
    }

//    configASSERT((psBuffer->ui32BufferHead_read + ui32CopyLen) < psBuffer->ui32Capacity);
    
    memcpy(&pui8Dest[ui32TempLen], (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32CopyLen);
    e5fa:	697a      	ldr	r2, [r7, #20]
    e5fc:	6a3b      	ldr	r3, [r7, #32]
    e5fe:	18d0      	adds	r0, r2, r3
    e600:	68fb      	ldr	r3, [r7, #12]
    e602:	681a      	ldr	r2, [r3, #0]
    e604:	68fb      	ldr	r3, [r7, #12]
    e606:	689b      	ldr	r3, [r3, #8]
    e608:	4413      	add	r3, r2
    e60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e60c:	4619      	mov	r1, r3
    e60e:	f7fd fd77 	bl	c100 <memcpy>
    
    psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32CopyLen) % psBuffer->ui32Capacity);
    e612:	68fb      	ldr	r3, [r7, #12]
    e614:	689a      	ldr	r2, [r3, #8]
    e616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e618:	4413      	add	r3, r2
    e61a:	68fa      	ldr	r2, [r7, #12]
    e61c:	6912      	ldr	r2, [r2, #16]
    e61e:	fbb3 f1f2 	udiv	r1, r3, r2
    e622:	fb02 f201 	mul.w	r2, r2, r1
    e626:	1a9a      	subs	r2, r3, r2
    e628:	68fb      	ldr	r3, [r7, #12]
    e62a:	609a      	str	r2, [r3, #8]
      
    psBuffer->ui32OverWriting = 0;
    e62c:	68fb      	ldr	r3, [r7, #12]
    e62e:	2200      	movs	r2, #0
    e630:	60da      	str	r2, [r3, #12]

    return ui32ReturnPopLen;
    e632:	69bb      	ldr	r3, [r7, #24]
}
    e634:	4618      	mov	r0, r3
    e636:	3728      	adds	r7, #40	; 0x28
    e638:	46bd      	mov	sp, r7
    e63a:	bd80      	pop	{r7, pc}

0000e63c <am_app_utils_get_ring_buffer_status>:
//! @return The number of data left.
//
//*****************************************************************************
uint32_t
am_app_utils_get_ring_buffer_status(am_app_utils_ring_buffer_t *psBuffer)
{
    e63c:	b480      	push	{r7}
    e63e:	b085      	sub	sp, #20
    e640:	af00      	add	r7, sp, #0
    e642:	6078      	str	r0, [r7, #4]
    uint32_t ui32NewDataLen = 0;
    e644:	2300      	movs	r3, #0
    e646:	60fb      	str	r3, [r7, #12]
    
    if (am_app_utils_ring_buffer_overwrite(psBuffer) || am_app_utils_ring_buffer_full(psBuffer))
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	685a      	ldr	r2, [r3, #4]
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	689b      	ldr	r3, [r3, #8]
    e650:	429a      	cmp	r2, r3
    e652:	d003      	beq.n	e65c <am_app_utils_get_ring_buffer_status+0x20>
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	68db      	ldr	r3, [r3, #12]
    e658:	2b01      	cmp	r3, #1
    e65a:	d009      	beq.n	e670 <am_app_utils_get_ring_buffer_status+0x34>
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	685a      	ldr	r2, [r3, #4]
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	689b      	ldr	r3, [r3, #8]
    e664:	429a      	cmp	r2, r3
    e666:	d108      	bne.n	e67a <am_app_utils_get_ring_buffer_status+0x3e>
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	68db      	ldr	r3, [r3, #12]
    e66c:	2b01      	cmp	r3, #1
    e66e:	d104      	bne.n	e67a <am_app_utils_get_ring_buffer_status+0x3e>
    {
        ui32NewDataLen = psBuffer->ui32Capacity;
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	691b      	ldr	r3, [r3, #16]
    e674:	60fb      	str	r3, [r7, #12]
        return ui32NewDataLen;
    e676:	68fb      	ldr	r3, [r7, #12]
    e678:	e010      	b.n	e69c <am_app_utils_get_ring_buffer_status+0x60>
    }
    
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	685a      	ldr	r2, [r3, #4]
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	691b      	ldr	r3, [r3, #16]
    e682:	441a      	add	r2, r3
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	689b      	ldr	r3, [r3, #8]
    e688:	1ad3      	subs	r3, r2, r3
        psBuffer->ui32Capacity);
    e68a:	687a      	ldr	r2, [r7, #4]
    e68c:	6912      	ldr	r2, [r2, #16]
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e68e:	fbb3 f1f2 	udiv	r1, r3, r2
    e692:	fb02 f201 	mul.w	r2, r2, r1
    e696:	1a9b      	subs	r3, r3, r2
    e698:	60fb      	str	r3, [r7, #12]

    return ui32NewDataLen; 
    e69a:	68fb      	ldr	r3, [r7, #12]

}
    e69c:	4618      	mov	r0, r3
    e69e:	3714      	adds	r7, #20
    e6a0:	46bd      	mov	sp, r7
    e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6a6:	4770      	bx	lr

0000e6a8 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e6a8:	b580      	push	{r7, lr}
    e6aa:	b082      	sub	sp, #8
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e6b0:	687b      	ldr	r3, [r7, #4]
    e6b2:	2b00      	cmp	r3, #0
    e6b4:	d03d      	beq.n	e732 <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e6b6:	687b      	ldr	r3, [r7, #4]
    e6b8:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e6ba:	2b31      	cmp	r3, #49	; 0x31
    e6bc:	d839      	bhi.n	e732 <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	685b      	ldr	r3, [r3, #4]
    e6c2:	f003 0302 	and.w	r3, r3, #2
    e6c6:	2b00      	cmp	r3, #0
    e6c8:	d019      	beq.n	e6fe <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e6ca:	687b      	ldr	r3, [r7, #4]
    e6cc:	681a      	ldr	r2, [r3, #0]
    e6ce:	4b1b      	ldr	r3, [pc, #108]	; (e73c <am_devices_led_init+0x94>)
    e6d0:	6819      	ldr	r1, [r3, #0]
    e6d2:	4610      	mov	r0, r2
    e6d4:	f7fe faca 	bl	cc6c <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	681b      	ldr	r3, [r3, #0]
    e6dc:	2103      	movs	r1, #3
    e6de:	4618      	mov	r0, r3
    e6e0:	f7fe fcf8 	bl	d0d4 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e6e4:	687b      	ldr	r3, [r7, #4]
    e6e6:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	f003 0301 	and.w	r3, r3, #1
    e6f2:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e6f4:	4619      	mov	r1, r3
    e6f6:	4610      	mov	r0, r2
    e6f8:	f7fe fcec 	bl	d0d4 <am_hal_gpio_state_write>
    e6fc:	e01a      	b.n	e734 <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e6fe:	687b      	ldr	r3, [r7, #4]
    e700:	681a      	ldr	r2, [r3, #0]
    e702:	4b0f      	ldr	r3, [pc, #60]	; (e740 <am_devices_led_init+0x98>)
    e704:	6819      	ldr	r1, [r3, #0]
    e706:	4610      	mov	r0, r2
    e708:	f7fe fab0 	bl	cc6c <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	681b      	ldr	r3, [r3, #0]
    e710:	2103      	movs	r1, #3
    e712:	4618      	mov	r0, r3
    e714:	f7fe fcde 	bl	d0d4 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e718:	687b      	ldr	r3, [r7, #4]
    e71a:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e71c:	687b      	ldr	r3, [r7, #4]
    e71e:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e720:	b2db      	uxtb	r3, r3
    e722:	f003 0301 	and.w	r3, r3, #1
    e726:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e728:	4619      	mov	r1, r3
    e72a:	4610      	mov	r0, r2
    e72c:	f7fe fcd2 	bl	d0d4 <am_hal_gpio_state_write>
    e730:	e000      	b.n	e734 <am_devices_led_init+0x8c>
        return;
    e732:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e734:	3708      	adds	r7, #8
    e736:	46bd      	mov	sp, r7
    e738:	bd80      	pop	{r7, pc}
    e73a:	bf00      	nop
    e73c:	00011154 	.word	0x00011154
    e740:	00011150 	.word	0x00011150

0000e744 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e744:	b580      	push	{r7, lr}
    e746:	b084      	sub	sp, #16
    e748:	af00      	add	r7, sp, #0
    e74a:	6078      	str	r0, [r7, #4]
    e74c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e74e:	687b      	ldr	r3, [r7, #4]
    e750:	2b00      	cmp	r3, #0
    e752:	d014      	beq.n	e77e <am_devices_led_array_init+0x3a>
    e754:	683b      	ldr	r3, [r7, #0]
    e756:	2b1f      	cmp	r3, #31
    e758:	d811      	bhi.n	e77e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e75a:	2300      	movs	r3, #0
    e75c:	60fb      	str	r3, [r7, #12]
    e75e:	e009      	b.n	e774 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e760:	68fb      	ldr	r3, [r7, #12]
    e762:	00db      	lsls	r3, r3, #3
    e764:	687a      	ldr	r2, [r7, #4]
    e766:	4413      	add	r3, r2
    e768:	4618      	mov	r0, r3
    e76a:	f7ff ff9d 	bl	e6a8 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	3301      	adds	r3, #1
    e772:	60fb      	str	r3, [r7, #12]
    e774:	68fa      	ldr	r2, [r7, #12]
    e776:	683b      	ldr	r3, [r7, #0]
    e778:	429a      	cmp	r2, r3
    e77a:	d3f1      	bcc.n	e760 <am_devices_led_array_init+0x1c>
    e77c:	e000      	b.n	e780 <am_devices_led_array_init+0x3c>
        return;
    e77e:	bf00      	nop
    }
}
    e780:	3710      	adds	r7, #16
    e782:	46bd      	mov	sp, r7
    e784:	bd80      	pop	{r7, pc}

0000e786 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e786:	b580      	push	{r7, lr}
    e788:	b082      	sub	sp, #8
    e78a:	af00      	add	r7, sp, #0
    e78c:	6078      	str	r0, [r7, #4]
    e78e:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	2b00      	cmp	r3, #0
    e794:	d02e      	beq.n	e7f4 <am_devices_led_on+0x6e>
    e796:	683b      	ldr	r3, [r7, #0]
    e798:	2b1e      	cmp	r3, #30
    e79a:	d82b      	bhi.n	e7f4 <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e79c:	683b      	ldr	r3, [r7, #0]
    e79e:	00db      	lsls	r3, r3, #3
    e7a0:	687a      	ldr	r2, [r7, #4]
    e7a2:	4413      	add	r3, r2
    e7a4:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e7a6:	2b31      	cmp	r3, #49	; 0x31
    e7a8:	d824      	bhi.n	e7f4 <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e7aa:	683b      	ldr	r3, [r7, #0]
    e7ac:	00db      	lsls	r3, r3, #3
    e7ae:	687a      	ldr	r2, [r7, #4]
    e7b0:	4413      	add	r3, r2
    e7b2:	685b      	ldr	r3, [r3, #4]
    e7b4:	f003 0302 	and.w	r3, r3, #2
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d011      	beq.n	e7e0 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7bc:	683b      	ldr	r3, [r7, #0]
    e7be:	00db      	lsls	r3, r3, #3
    e7c0:	687a      	ldr	r2, [r7, #4]
    e7c2:	4413      	add	r3, r2
    e7c4:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e7c6:	683b      	ldr	r3, [r7, #0]
    e7c8:	00db      	lsls	r3, r3, #3
    e7ca:	687a      	ldr	r2, [r7, #4]
    e7cc:	4413      	add	r3, r2
    e7ce:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e7d0:	b2db      	uxtb	r3, r3
    e7d2:	f003 0301 	and.w	r3, r3, #1
    e7d6:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7d8:	4619      	mov	r1, r3
    e7da:	f7fe fc7b 	bl	d0d4 <am_hal_gpio_state_write>
    e7de:	e00a      	b.n	e7f6 <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7e0:	683b      	ldr	r3, [r7, #0]
    e7e2:	00db      	lsls	r3, r3, #3
    e7e4:	687a      	ldr	r2, [r7, #4]
    e7e6:	4413      	add	r3, r2
    e7e8:	681b      	ldr	r3, [r3, #0]
    e7ea:	2104      	movs	r1, #4
    e7ec:	4618      	mov	r0, r3
    e7ee:	f7fe fc71 	bl	d0d4 <am_hal_gpio_state_write>
    e7f2:	e000      	b.n	e7f6 <am_devices_led_on+0x70>
        return;
    e7f4:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e7f6:	3708      	adds	r7, #8
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd80      	pop	{r7, pc}

0000e7fc <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e7fc:	b580      	push	{r7, lr}
    e7fe:	b082      	sub	sp, #8
    e800:	af00      	add	r7, sp, #0
    e802:	6078      	str	r0, [r7, #4]
    e804:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e806:	687b      	ldr	r3, [r7, #4]
    e808:	2b00      	cmp	r3, #0
    e80a:	d031      	beq.n	e870 <am_devices_led_off+0x74>
    e80c:	683b      	ldr	r3, [r7, #0]
    e80e:	2b1e      	cmp	r3, #30
    e810:	d82e      	bhi.n	e870 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e812:	683b      	ldr	r3, [r7, #0]
    e814:	00db      	lsls	r3, r3, #3
    e816:	687a      	ldr	r2, [r7, #4]
    e818:	4413      	add	r3, r2
    e81a:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e81c:	2b31      	cmp	r3, #49	; 0x31
    e81e:	d827      	bhi.n	e870 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e820:	683b      	ldr	r3, [r7, #0]
    e822:	00db      	lsls	r3, r3, #3
    e824:	687a      	ldr	r2, [r7, #4]
    e826:	4413      	add	r3, r2
    e828:	685b      	ldr	r3, [r3, #4]
    e82a:	f003 0302 	and.w	r3, r3, #2
    e82e:	2b00      	cmp	r3, #0
    e830:	d014      	beq.n	e85c <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e832:	683b      	ldr	r3, [r7, #0]
    e834:	00db      	lsls	r3, r3, #3
    e836:	687a      	ldr	r2, [r7, #4]
    e838:	4413      	add	r3, r2
    e83a:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e83c:	683b      	ldr	r3, [r7, #0]
    e83e:	00db      	lsls	r3, r3, #3
    e840:	687a      	ldr	r2, [r7, #4]
    e842:	4413      	add	r3, r2
    e844:	685b      	ldr	r3, [r3, #4]
    e846:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e84a:	2b00      	cmp	r3, #0
    e84c:	bf0c      	ite	eq
    e84e:	2301      	moveq	r3, #1
    e850:	2300      	movne	r3, #0
    e852:	b2db      	uxtb	r3, r3
    e854:	4619      	mov	r1, r3
    e856:	f7fe fc3d 	bl	d0d4 <am_hal_gpio_state_write>
    e85a:	e00a      	b.n	e872 <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e85c:	683b      	ldr	r3, [r7, #0]
    e85e:	00db      	lsls	r3, r3, #3
    e860:	687a      	ldr	r2, [r7, #4]
    e862:	4413      	add	r3, r2
    e864:	681b      	ldr	r3, [r3, #0]
    e866:	2103      	movs	r1, #3
    e868:	4618      	mov	r0, r3
    e86a:	f7fe fc33 	bl	d0d4 <am_hal_gpio_state_write>
    e86e:	e000      	b.n	e872 <am_devices_led_off+0x76>
        return;
    e870:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e872:	3708      	adds	r7, #8
    e874:	46bd      	mov	sp, r7
    e876:	bd80      	pop	{r7, pc}

0000e878 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e878:	b580      	push	{r7, lr}
    e87a:	b084      	sub	sp, #16
    e87c:	af00      	add	r7, sp, #0
    e87e:	6078      	str	r0, [r7, #4]
    e880:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e882:	687b      	ldr	r3, [r7, #4]
    e884:	2b00      	cmp	r3, #0
    e886:	d042      	beq.n	e90e <am_devices_led_toggle+0x96>
    e888:	683b      	ldr	r3, [r7, #0]
    e88a:	2b1e      	cmp	r3, #30
    e88c:	d83f      	bhi.n	e90e <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e88e:	683b      	ldr	r3, [r7, #0]
    e890:	00db      	lsls	r3, r3, #3
    e892:	687a      	ldr	r2, [r7, #4]
    e894:	4413      	add	r3, r2
    e896:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e898:	2b31      	cmp	r3, #49	; 0x31
    e89a:	d838      	bhi.n	e90e <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e89c:	683b      	ldr	r3, [r7, #0]
    e89e:	00db      	lsls	r3, r3, #3
    e8a0:	687a      	ldr	r2, [r7, #4]
    e8a2:	4413      	add	r3, r2
    e8a4:	685b      	ldr	r3, [r3, #4]
    e8a6:	f003 0302 	and.w	r3, r3, #2
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	d009      	beq.n	e8c2 <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8ae:	683b      	ldr	r3, [r7, #0]
    e8b0:	00db      	lsls	r3, r3, #3
    e8b2:	687a      	ldr	r2, [r7, #4]
    e8b4:	4413      	add	r3, r2
    e8b6:	681b      	ldr	r3, [r3, #0]
    e8b8:	2102      	movs	r1, #2
    e8ba:	4618      	mov	r0, r3
    e8bc:	f7fe fc0a 	bl	d0d4 <am_hal_gpio_state_write>
    e8c0:	e026      	b.n	e910 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8c2:	683b      	ldr	r3, [r7, #0]
    e8c4:	00db      	lsls	r3, r3, #3
    e8c6:	687a      	ldr	r2, [r7, #4]
    e8c8:	4413      	add	r3, r2
    e8ca:	681b      	ldr	r3, [r3, #0]
    e8cc:	f107 0208 	add.w	r2, r7, #8
    e8d0:	2102      	movs	r1, #2
    e8d2:	4618      	mov	r0, r3
    e8d4:	f7fe fb9e 	bl	d014 <am_hal_gpio_state_read>
    e8d8:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e8da:	68fb      	ldr	r3, [r7, #12]
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d117      	bne.n	e910 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e8e0:	68bb      	ldr	r3, [r7, #8]
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	d009      	beq.n	e8fa <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8e6:	683b      	ldr	r3, [r7, #0]
    e8e8:	00db      	lsls	r3, r3, #3
    e8ea:	687a      	ldr	r2, [r7, #4]
    e8ec:	4413      	add	r3, r2
    e8ee:	681b      	ldr	r3, [r3, #0]
    e8f0:	2103      	movs	r1, #3
    e8f2:	4618      	mov	r0, r3
    e8f4:	f7fe fbee 	bl	d0d4 <am_hal_gpio_state_write>
    e8f8:	e00a      	b.n	e910 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8fa:	683b      	ldr	r3, [r7, #0]
    e8fc:	00db      	lsls	r3, r3, #3
    e8fe:	687a      	ldr	r2, [r7, #4]
    e900:	4413      	add	r3, r2
    e902:	681b      	ldr	r3, [r3, #0]
    e904:	2104      	movs	r1, #4
    e906:	4618      	mov	r0, r3
    e908:	f7fe fbe4 	bl	d0d4 <am_hal_gpio_state_write>
    e90c:	e000      	b.n	e910 <am_devices_led_toggle+0x98>
        return;
    e90e:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e910:	3710      	adds	r7, #16
    e912:	46bd      	mov	sp, r7
    e914:	bd80      	pop	{r7, pc}
	...

0000e918 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e918:	4811      	ldr	r0, [pc, #68]	; (e960 <zero_loop+0x12>)
    e91a:	4912      	ldr	r1, [pc, #72]	; (e964 <zero_loop+0x16>)
    e91c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e91e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e922:	4811      	ldr	r0, [pc, #68]	; (e968 <zero_loop+0x1a>)
    e924:	6801      	ldr	r1, [r0, #0]
    e926:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e92a:	6001      	str	r1, [r0, #0]
    e92c:	f3bf 8f4f 	dsb	sy
    e930:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e934:	480d      	ldr	r0, [pc, #52]	; (e96c <zero_loop+0x1e>)
    e936:	490e      	ldr	r1, [pc, #56]	; (e970 <zero_loop+0x22>)
    e938:	4a0e      	ldr	r2, [pc, #56]	; (e974 <zero_loop+0x26>)

0000e93a <copy_loop>:
    e93a:	f850 3b04 	ldr.w	r3, [r0], #4
    e93e:	f841 3b04 	str.w	r3, [r1], #4
    e942:	4291      	cmp	r1, r2
    e944:	dbf9      	blt.n	e93a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e946:	480c      	ldr	r0, [pc, #48]	; (e978 <zero_loop+0x2a>)
    e948:	490c      	ldr	r1, [pc, #48]	; (e97c <zero_loop+0x2e>)
    e94a:	f04f 0200 	mov.w	r2, #0

0000e94e <zero_loop>:
    e94e:	4288      	cmp	r0, r1
    e950:	bfb8      	it	lt
    e952:	f840 2b04 	strlt.w	r2, [r0], #4
    e956:	dbfa      	blt.n	e94e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e958:	f7fd fcbc 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e95c:	be00      	bkpt	0x0000
}
    e95e:	bf00      	nop
    e960:	e000ed08 	.word	0xe000ed08
    e964:	0000c000 	.word	0x0000c000
    e968:	e000ed88 	.word	0xe000ed88
    e96c:	0001144c 	.word	0x0001144c
    e970:	1000c000 	.word	0x1000c000
    e974:	1000c050 	.word	0x1000c050
    e978:	1000c050 	.word	0x1000c050
    e97c:	1002bfc8 	.word	0x1002bfc8

0000e980 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e980:	b480      	push	{r7}
    e982:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e984:	e7fe      	b.n	e984 <NMI_Handler+0x4>

0000e986 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e986:	b480      	push	{r7}
    e988:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e98a:	e7fe      	b.n	e98a <DebugMon_Handler+0x4>

0000e98c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e98c:	b480      	push	{r7}
    e98e:	b083      	sub	sp, #12
    e990:	af00      	add	r7, sp, #0
    e992:	4603      	mov	r3, r0
    e994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e996:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e99a:	2b00      	cmp	r3, #0
    e99c:	db0b      	blt.n	e9b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e99e:	79fb      	ldrb	r3, [r7, #7]
    e9a0:	f003 021f 	and.w	r2, r3, #31
    e9a4:	4907      	ldr	r1, [pc, #28]	; (e9c4 <__NVIC_EnableIRQ+0x38>)
    e9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e9aa:	095b      	lsrs	r3, r3, #5
    e9ac:	2001      	movs	r0, #1
    e9ae:	fa00 f202 	lsl.w	r2, r0, r2
    e9b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e9b6:	bf00      	nop
    e9b8:	370c      	adds	r7, #12
    e9ba:	46bd      	mov	sp, r7
    e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9c0:	4770      	bx	lr
    e9c2:	bf00      	nop
    e9c4:	e000e100 	.word	0xe000e100

0000e9c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    e9c8:	b480      	push	{r7}
    e9ca:	b083      	sub	sp, #12
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	4603      	mov	r3, r0
    e9d0:	6039      	str	r1, [r7, #0]
    e9d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e9d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e9d8:	2b00      	cmp	r3, #0
    e9da:	db0a      	blt.n	e9f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e9dc:	683b      	ldr	r3, [r7, #0]
    e9de:	b2da      	uxtb	r2, r3
    e9e0:	490c      	ldr	r1, [pc, #48]	; (ea14 <__NVIC_SetPriority+0x4c>)
    e9e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e9e6:	0152      	lsls	r2, r2, #5
    e9e8:	b2d2      	uxtb	r2, r2
    e9ea:	440b      	add	r3, r1
    e9ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    e9f0:	e00a      	b.n	ea08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e9f2:	683b      	ldr	r3, [r7, #0]
    e9f4:	b2da      	uxtb	r2, r3
    e9f6:	4908      	ldr	r1, [pc, #32]	; (ea18 <__NVIC_SetPriority+0x50>)
    e9f8:	79fb      	ldrb	r3, [r7, #7]
    e9fa:	f003 030f 	and.w	r3, r3, #15
    e9fe:	3b04      	subs	r3, #4
    ea00:	0152      	lsls	r2, r2, #5
    ea02:	b2d2      	uxtb	r2, r2
    ea04:	440b      	add	r3, r1
    ea06:	761a      	strb	r2, [r3, #24]
}
    ea08:	bf00      	nop
    ea0a:	370c      	adds	r7, #12
    ea0c:	46bd      	mov	sp, r7
    ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea12:	4770      	bx	lr
    ea14:	e000e100 	.word	0xe000e100
    ea18:	e000ed00 	.word	0xe000ed00

0000ea1c <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    ea1c:	b580      	push	{r7, lr}
    ea1e:	b082      	sub	sp, #8
    ea20:	af00      	add	r7, sp, #0
    ea22:	6078      	str	r0, [r7, #4]
    ea24:	6879      	ldr	r1, [r7, #4]
    ea26:	4803      	ldr	r0, [pc, #12]	; (ea34 <DebugLog+0x18>)
    ea28:	f7ff fbe8 	bl	e1fc <am_util_stdio_printf>
    ea2c:	bf00      	nop
    ea2e:	3708      	adds	r7, #8
    ea30:	46bd      	mov	sp, r7
    ea32:	bd80      	pop	{r7, pc}
    ea34:	00010e34 	.word	0x00010e34

0000ea38 <DebugLogUInt32>:
void DebugLogInt32(int32_t i) { am_util_stdio_printf("%d", i); }
void DebugLogUInt32(uint32_t i) { am_util_stdio_printf("%u", i); }
    ea38:	b580      	push	{r7, lr}
    ea3a:	b082      	sub	sp, #8
    ea3c:	af00      	add	r7, sp, #0
    ea3e:	6078      	str	r0, [r7, #4]
    ea40:	6879      	ldr	r1, [r7, #4]
    ea42:	4803      	ldr	r0, [pc, #12]	; (ea50 <DebugLogUInt32+0x18>)
    ea44:	f7ff fbda 	bl	e1fc <am_util_stdio_printf>
    ea48:	bf00      	nop
    ea4a:	3708      	adds	r7, #8
    ea4c:	46bd      	mov	sp, r7
    ea4e:	bd80      	pop	{r7, pc}
    ea50:	00010e3c 	.word	0x00010e3c

0000ea54 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    ea54:	b580      	push	{r7, lr}
    ea56:	b082      	sub	sp, #8
    ea58:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    ea5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea5e:	2000      	movs	r0, #0
    ea60:	f001 f938 	bl	fcd4 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    ea64:	490a      	ldr	r1, [pc, #40]	; (ea90 <timerA0_init+0x3c>)
    ea66:	2000      	movs	r0, #0
    ea68:	f001 f89a 	bl	fba0 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    ea6c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    ea70:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	085b      	lsrs	r3, r3, #1
    ea76:	687a      	ldr	r2, [r7, #4]
    ea78:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea7c:	2000      	movs	r0, #0
    ea7e:	f001 f93d 	bl	fcfc <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ea82:	2001      	movs	r0, #1
    ea84:	f001 f9b6 	bl	fdf4 <am_hal_ctimer_int_clear>
}
    ea88:	bf00      	nop
    ea8a:	3708      	adds	r7, #8
    ea8c:	46bd      	mov	sp, r7
    ea8e:	bd80      	pop	{r7, pc}
    ea90:	1000c000 	.word	0x1000c000

0000ea94 <pdm_trigger_dma>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void pdm_trigger_dma(void)
{
    ea94:	b580      	push	{r7, lr}
    ea96:	b082      	sub	sp, #8
    ea98:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    ea9a:	4b08      	ldr	r3, [pc, #32]	; (eabc <pdm_trigger_dma+0x28>)
    ea9c:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    ea9e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    eaa2:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    eaa4:	4b06      	ldr	r3, [pc, #24]	; (eac0 <pdm_trigger_dma+0x2c>)
    eaa6:	681b      	ldr	r3, [r3, #0]
    eaa8:	463a      	mov	r2, r7
    eaaa:	4611      	mov	r1, r2
    eaac:	4618      	mov	r0, r3
    eaae:	f7fd ff7b 	bl	c9a8 <am_hal_pdm_dma_start>
}
    eab2:	bf00      	nop
    eab4:	3708      	adds	r7, #8
    eab6:	46bd      	mov	sp, r7
    eab8:	bd80      	pop	{r7, pc}
    eaba:	bf00      	nop
    eabc:	1000c1ac 	.word	0x1000c1ac
    eac0:	1000ca78 	.word	0x1000ca78

0000eac4 <am_app_mic_verif_pdm_init>:

void am_app_mic_verif_pdm_init(void) 
{
    eac4:	b580      	push	{r7, lr}
    eac6:	b08a      	sub	sp, #40	; 0x28
    eac8:	af00      	add	r7, sp, #0
    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    eaca:	2300      	movs	r3, #0
    eacc:	627b      	str	r3, [r7, #36]	; 0x24

    // ARPIT 181019
    // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
    // am_hal_gpio_pinconfig(10, sPinCfg);
    sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    eace:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ead2:	2205      	movs	r2, #5
    ead4:	f362 0302 	bfi	r3, r2, #0, #3
    ead8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(12, sPinCfg);
    eadc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    eade:	200c      	movs	r0, #12
    eae0:	f7fe f8c4 	bl	cc6c <am_hal_gpio_pinconfig>

    sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    eae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    eae8:	f043 0307 	orr.w	r3, r3, #7
    eaec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(11, sPinCfg);
    eaf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    eaf2:	200b      	movs	r0, #11
    eaf4:	f7fe f8ba 	bl	cc6c <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    eaf8:	1d3b      	adds	r3, r7, #4
    eafa:	2220      	movs	r2, #32
    eafc:	2100      	movs	r1, #0
    eafe:	4618      	mov	r0, r3
    eb00:	f001 ffc4 	bl	10a8c <memset>
    eb04:	230b      	movs	r3, #11
    eb06:	717b      	strb	r3, [r7, #5]
    eb08:	230b      	movs	r3, #11
    eb0a:	71bb      	strb	r3, [r7, #6]
    eb0c:	2318      	movs	r3, #24
    eb0e:	60bb      	str	r3, [r7, #8]
    eb10:	2308      	movs	r3, #8
    eb12:	613b      	str	r3, [r7, #16]
    eb14:	2305      	movs	r3, #5
    eb16:	753b      	strb	r3, [r7, #20]
    eb18:	2301      	movs	r3, #1
    eb1a:	763b      	strb	r3, [r7, #24]
    eb1c:	2303      	movs	r3, #3
    eb1e:	767b      	strb	r3, [r7, #25]
    };
    
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    eb20:	491c      	ldr	r1, [pc, #112]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb22:	2000      	movs	r0, #0
    eb24:	f7fd fd6c 	bl	c600 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    eb28:	4b1a      	ldr	r3, [pc, #104]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb2a:	681b      	ldr	r3, [r3, #0]
    eb2c:	2200      	movs	r2, #0
    eb2e:	2100      	movs	r1, #0
    eb30:	4618      	mov	r0, r3
    eb32:	f7fd fdc3 	bl	c6bc <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    eb36:	4b17      	ldr	r3, [pc, #92]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb38:	681b      	ldr	r3, [r3, #0]
    eb3a:	1d3a      	adds	r2, r7, #4
    eb3c:	4611      	mov	r1, r2
    eb3e:	4618      	mov	r0, r3
    eb40:	f7fd fe24 	bl	c78c <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    eb44:	4b13      	ldr	r3, [pc, #76]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	4618      	mov	r0, r3
    eb4a:	f7fd ffb1 	bl	cab0 <am_hal_pdm_fifo_flush>

    am_util_stdio_printf("PDM Settings:\r\n");
    eb4e:	4812      	ldr	r0, [pc, #72]	; (eb98 <am_app_mic_verif_pdm_init+0xd4>)
    eb50:	f7ff fb54 	bl	e1fc <am_util_stdio_printf>
    am_util_stdio_printf("PDM Clock (Hz):         %12d\r\n", 750000);
    eb54:	4911      	ldr	r1, [pc, #68]	; (eb9c <am_app_mic_verif_pdm_init+0xd8>)
    eb56:	4812      	ldr	r0, [pc, #72]	; (eba0 <am_app_mic_verif_pdm_init+0xdc>)
    eb58:	f7ff fb50 	bl	e1fc <am_util_stdio_printf>
    am_util_stdio_printf("Effective Sample Freq.: %12d\r\n\n", 16000);
    eb5c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
    eb60:	4810      	ldr	r0, [pc, #64]	; (eba4 <am_app_mic_verif_pdm_init+0xe0>)
    eb62:	f7ff fb4b 	bl	e1fc <am_util_stdio_printf>

    am_hal_pdm_enable(PDMHandle);
    eb66:	4b0b      	ldr	r3, [pc, #44]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb68:	681b      	ldr	r3, [r3, #0]
    eb6a:	4618      	mov	r0, r3
    eb6c:	f7fd feea 	bl	c944 <am_hal_pdm_enable>

    //
    // Configure and enable PDM interrupts (set up to trigger on DMA
    // completion).
    //
    am_hal_pdm_interrupt_enable(PDMHandle,
    eb70:	4b08      	ldr	r3, [pc, #32]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb72:	681b      	ldr	r3, [r3, #0]
    eb74:	211e      	movs	r1, #30
    eb76:	4618      	mov	r0, r3
    eb78:	f7fd ffc4 	bl	cb04 <am_hal_pdm_interrupt_enable>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    eb7c:	4b05      	ldr	r3, [pc, #20]	; (eb94 <am_app_mic_verif_pdm_init+0xd0>)
    eb7e:	681b      	ldr	r3, [r3, #0]
    eb80:	4618      	mov	r0, r3
    eb82:	f7fd fedf 	bl	c944 <am_hal_pdm_enable>
    pdm_trigger_dma();
    eb86:	f7ff ff85 	bl	ea94 <pdm_trigger_dma>

}
    eb8a:	bf00      	nop
    eb8c:	3728      	adds	r7, #40	; 0x28
    eb8e:	46bd      	mov	sp, r7
    eb90:	bd80      	pop	{r7, pc}
    eb92:	bf00      	nop
    eb94:	1000ca78 	.word	0x1000ca78
    eb98:	00010e4c 	.word	0x00010e4c
    eb9c:	000b71b0 	.word	0x000b71b0
    eba0:	00010e5c 	.word	0x00010e5c
    eba4:	00010e7c 	.word	0x00010e7c

0000eba8 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    eba8:	b580      	push	{r7, lr}
    ebaa:	b084      	sub	sp, #16
    ebac:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    ebae:	2301      	movs	r3, #1
    ebb0:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    ebb2:	2301      	movs	r3, #1
    ebb4:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    ebb6:	2301      	movs	r3, #1
    ebb8:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_COUNT;
    ebba:	2350      	movs	r3, #80	; 0x50
    ebbc:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    ebbe:	4b0c      	ldr	r3, [pc, #48]	; (ebf0 <adc_config_dma+0x48>)
    ebc0:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    ebc2:	4b0c      	ldr	r3, [pc, #48]	; (ebf4 <adc_config_dma+0x4c>)
    ebc4:	681b      	ldr	r3, [r3, #0]
    ebc6:	1d3a      	adds	r2, r7, #4
    ebc8:	4611      	mov	r1, r2
    ebca:	4618      	mov	r0, r3
    ebcc:	f000 fc12 	bl	f3f4 <am_hal_adc_configure_dma>
    ebd0:	4603      	mov	r3, r0
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d002      	beq.n	ebdc <adc_config_dma+0x34>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    ebd6:	4808      	ldr	r0, [pc, #32]	; (ebf8 <adc_config_dma+0x50>)
    ebd8:	f7ff fb10 	bl	e1fc <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    ebdc:	4b07      	ldr	r3, [pc, #28]	; (ebfc <adc_config_dma+0x54>)
    ebde:	2200      	movs	r2, #0
    ebe0:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    ebe2:	4b07      	ldr	r3, [pc, #28]	; (ec00 <adc_config_dma+0x58>)
    ebe4:	2200      	movs	r2, #0
    ebe6:	701a      	strb	r2, [r3, #0]
}
    ebe8:	bf00      	nop
    ebea:	3710      	adds	r7, #16
    ebec:	46bd      	mov	sp, r7
    ebee:	bd80      	pop	{r7, pc}
    ebf0:	1000c6b0 	.word	0x1000c6b0
    ebf4:	1000ca70 	.word	0x1000ca70
    ebf8:	00010e9c 	.word	0x00010e9c
    ebfc:	1000ca75 	.word	0x1000ca75
    ec00:	1002beb8 	.word	0x1002beb8

0000ec04 <adc_config>:


void adc_config(void)
{
    ec04:	b580      	push	{r7, lr}
    ec06:	b084      	sub	sp, #16
    ec08:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    ec0a:	4930      	ldr	r1, [pc, #192]	; (eccc <adc_config+0xc8>)
    ec0c:	2000      	movs	r0, #0
    ec0e:	f000 fb33 	bl	f278 <am_hal_adc_initialize>
    ec12:	4603      	mov	r3, r0
    ec14:	2b00      	cmp	r3, #0
    ec16:	d002      	beq.n	ec1e <adc_config+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    ec18:	482d      	ldr	r0, [pc, #180]	; (ecd0 <adc_config+0xcc>)
    ec1a:	f7ff faef 	bl	e1fc <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    ec1e:	4b2b      	ldr	r3, [pc, #172]	; (eccc <adc_config+0xc8>)
    ec20:	681b      	ldr	r3, [r3, #0]
    ec22:	2200      	movs	r2, #0
    ec24:	2100      	movs	r1, #0
    ec26:	4618      	mov	r0, r3
    ec28:	f000 fc94 	bl	f554 <am_hal_adc_power_control>
    ec2c:	4603      	mov	r3, r0
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d002      	beq.n	ec38 <adc_config+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    ec32:	4828      	ldr	r0, [pc, #160]	; (ecd4 <adc_config+0xd0>)
    ec34:	f7ff fae2 	bl	e1fc <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    ec38:	2301      	movs	r3, #1
    ec3a:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ec3c:	2300      	movs	r3, #0
    ec3e:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ec40:	2307      	movs	r3, #7
    ec42:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ec44:	2300      	movs	r3, #0
    ec46:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    ec48:	2301      	movs	r3, #1
    ec4a:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ec4c:	2300      	movs	r3, #0
    ec4e:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    ec50:	2301      	movs	r3, #1
    ec52:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    ec54:	4b1d      	ldr	r3, [pc, #116]	; (eccc <adc_config+0xc8>)
    ec56:	681b      	ldr	r3, [r3, #0]
    ec58:	f107 0208 	add.w	r2, r7, #8
    ec5c:	4611      	mov	r1, r2
    ec5e:	4618      	mov	r0, r3
    ec60:	f000 fb5a 	bl	f318 <am_hal_adc_configure>
    ec64:	4603      	mov	r3, r0
    ec66:	2b00      	cmp	r3, #0
    ec68:	d002      	beq.n	ec70 <adc_config+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    ec6a:	481b      	ldr	r0, [pc, #108]	; (ecd8 <adc_config+0xd4>)
    ec6c:	f7ff fac6 	bl	e1fc <am_util_stdio_printf>
//    *(uint32_t*)0x4002010c |= 0x00;
//    am_util_stdio_printf("ADC calibration is finished...\n\r");
    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    ec70:	2300      	movs	r3, #0
    ec72:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ec74:	2300      	movs	r3, #0
    ec76:	707b      	strb	r3, [r7, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE5;
    ec78:	2305      	movs	r3, #5
    ec7a:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    ec7c:	2300      	movs	r3, #0
    ec7e:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    ec80:	2301      	movs	r3, #1
    ec82:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    ec84:	4b11      	ldr	r3, [pc, #68]	; (eccc <adc_config+0xc8>)
    ec86:	681b      	ldr	r3, [r3, #0]
    ec88:	463a      	mov	r2, r7
    ec8a:	2100      	movs	r1, #0
    ec8c:	4618      	mov	r0, r3
    ec8e:	f000 fb7b 	bl	f388 <am_hal_adc_configure_slot>
    ec92:	4603      	mov	r3, r0
    ec94:	2b00      	cmp	r3, #0
    ec96:	d002      	beq.n	ec9e <adc_config+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    ec98:	4810      	ldr	r0, [pc, #64]	; (ecdc <adc_config+0xd8>)
    ec9a:	f7ff faaf 	bl	e1fc <am_util_stdio_printf>
    }
    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    ec9e:	f7ff ff83 	bl	eba8 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    eca2:	4b0a      	ldr	r3, [pc, #40]	; (eccc <adc_config+0xc8>)
    eca4:	681b      	ldr	r3, [r3, #0]
    eca6:	21c0      	movs	r1, #192	; 0xc0
    eca8:	4618      	mov	r0, r3
    ecaa:	f000 fbfb 	bl	f4a4 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    ecae:	4b07      	ldr	r3, [pc, #28]	; (eccc <adc_config+0xc8>)
    ecb0:	681b      	ldr	r3, [r3, #0]
    ecb2:	4618      	mov	r0, r3
    ecb4:	f000 fbd6 	bl	f464 <am_hal_adc_enable>
    ecb8:	4603      	mov	r3, r0
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d002      	beq.n	ecc4 <adc_config+0xc0>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    ecbe:	4808      	ldr	r0, [pc, #32]	; (ece0 <adc_config+0xdc>)
    ecc0:	f7ff fa9c 	bl	e1fc <am_util_stdio_printf>
    }
}
    ecc4:	bf00      	nop
    ecc6:	3710      	adds	r7, #16
    ecc8:	46bd      	mov	sp, r7
    ecca:	bd80      	pop	{r7, pc}
    eccc:	1000ca70 	.word	0x1000ca70
    ecd0:	00010ec4 	.word	0x00010ec4
    ecd4:	00010ef8 	.word	0x00010ef8
    ecd8:	00010f18 	.word	0x00010f18
    ecdc:	00010f3c 	.word	0x00010f3c
    ece0:	00010f64 	.word	0x00010f64

0000ece4 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    ece4:	b580      	push	{r7, lr}
    ece6:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (16000HZ sample rate).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    ece8:	2242      	movs	r2, #66	; 0x42
    ecea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ecee:	2003      	movs	r0, #3
    ecf0:	f000 ff86 	bl	fc00 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     );

//    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 375);
    ecf4:	f240 1377 	movw	r3, #375	; 0x177
    ecf8:	f240 22ee 	movw	r2, #750	; 0x2ee
    ecfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ed00:	2003      	movs	r0, #3
    ed02:	f000 fffb 	bl	fcfc <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    ed06:	f001 f84f 	bl	fda8 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    ed0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ed0e:	2003      	movs	r0, #3
    ed10:	f000 ffb6 	bl	fc80 <am_hal_ctimer_start>
}
    ed14:	bf00      	nop
    ed16:	bd80      	pop	{r7, pc}

0000ed18 <am_app_mic_verif_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_mic_verif_sys_init(void)
{
    ed18:	b580      	push	{r7, lr}
    ed1a:	b082      	sub	sp, #8
    ed1c:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    ed1e:	2100      	movs	r1, #0
    ed20:	2000      	movs	r0, #0
    ed22:	f000 fe93 	bl	fa4c <am_hal_clkgen_control>
    ed26:	4603      	mov	r3, r0
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d002      	beq.n	ed32 <am_app_mic_verif_sys_init+0x1a>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    ed2c:	485d      	ldr	r0, [pc, #372]	; (eea4 <am_app_mic_verif_sys_init+0x18c>)
    ed2e:	f7ff fa65 	bl	e1fc <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    ed32:	485d      	ldr	r0, [pc, #372]	; (eea8 <am_app_mic_verif_sys_init+0x190>)
    ed34:	f000 fce8 	bl	f708 <am_hal_cachectrl_config>
    ed38:	4603      	mov	r3, r0
    ed3a:	2b00      	cmp	r3, #0
    ed3c:	d002      	beq.n	ed44 <am_app_mic_verif_sys_init+0x2c>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    ed3e:	485b      	ldr	r0, [pc, #364]	; (eeac <am_app_mic_verif_sys_init+0x194>)
    ed40:	f7ff fa5c 	bl	e1fc <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    ed44:	f000 fd06 	bl	f754 <am_hal_cachectrl_enable>
    ed48:	4603      	mov	r3, r0
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d002      	beq.n	ed54 <am_app_mic_verif_sys_init+0x3c>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    ed4e:	4858      	ldr	r0, [pc, #352]	; (eeb0 <am_app_mic_verif_sys_init+0x198>)
    ed50:	f7ff fa54 	bl	e1fc <am_util_stdio_printf>
    }

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    ed54:	f000 fa42 	bl	f1dc <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output
    //
#if configUSE_UART_PRINTF
    am_bsp_uart_printf_enable();
    ed58:	f000 fa60 	bl	f21c <am_bsp_uart_printf_enable>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_switch_button0);
    ed5c:	4b55      	ldr	r3, [pc, #340]	; (eeb4 <am_app_mic_verif_sys_init+0x19c>)
    ed5e:	6819      	ldr	r1, [r3, #0]
    ed60:	2010      	movs	r0, #16
    ed62:	f7fd ff83 	bl	cc6c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_switch_button1);
    ed66:	4b54      	ldr	r3, [pc, #336]	; (eeb8 <am_app_mic_verif_sys_init+0x1a0>)
    ed68:	6819      	ldr	r1, [r3, #0]
    ed6a:	2012      	movs	r0, #18
    ed6c:	f7fd ff7e 	bl	cc6c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_switch_button2);
    ed70:	4b52      	ldr	r3, [pc, #328]	; (eebc <am_app_mic_verif_sys_init+0x1a4>)
    ed72:	6819      	ldr	r1, [r3, #0]
    ed74:	2013      	movs	r0, #19
    ed76:	f7fd ff79 	bl	cc6c <am_hal_gpio_pinconfig>
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ed7e:	f04f 0100 	mov.w	r1, #0
    ed82:	f7fe fa63 	bl	d24c <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ed86:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ed8a:	f04f 0100 	mov.w	r1, #0
    ed8e:	f7fe fa5d 	bl	d24c <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed96:	f04f 0100 	mov.w	r1, #0
    ed9a:	f7fe fa57 	bl	d24c <am_hal_gpio_interrupt_clear>
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    eda2:	f04f 0100 	mov.w	r1, #0
    eda6:	f7fe fa13 	bl	d1d0 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    edaa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    edae:	f04f 0100 	mov.w	r1, #0
    edb2:	f7fe fa0d 	bl	d1d0 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    edb6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    edba:	f04f 0100 	mov.w	r1, #0
    edbe:	f7fe fa07 	bl	d1d0 <am_hal_gpio_interrupt_enable>
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    edc2:	2105      	movs	r1, #5
    edc4:	483e      	ldr	r0, [pc, #248]	; (eec0 <am_app_mic_verif_sys_init+0x1a8>)
    edc6:	f7ff fcbd 	bl	e744 <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    edca:	2300      	movs	r3, #0
    edcc:	607b      	str	r3, [r7, #4]
    edce:	e007      	b.n	ede0 <am_app_mic_verif_sys_init+0xc8>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    edd0:	687b      	ldr	r3, [r7, #4]
    edd2:	4619      	mov	r1, r3
    edd4:	483a      	ldr	r0, [pc, #232]	; (eec0 <am_app_mic_verif_sys_init+0x1a8>)
    edd6:	f7ff fd11 	bl	e7fc <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	3301      	adds	r3, #1
    edde:	607b      	str	r3, [r7, #4]
    ede0:	687b      	ldr	r3, [r7, #4]
    ede2:	2b04      	cmp	r3, #4
    ede4:	ddf4      	ble.n	edd0 <am_app_mic_verif_sys_init+0xb8>
#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    
    //
    // Initiate all ring buffers 
    //
    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    ede6:	2202      	movs	r2, #2
    ede8:	4936      	ldr	r1, [pc, #216]	; (eec4 <am_app_mic_verif_sys_init+0x1ac>)
    edea:	4837      	ldr	r0, [pc, #220]	; (eec8 <am_app_mic_verif_sys_init+0x1b0>)
    edec:	f7ff fa6e 	bl	e2cc <am_app_utils_ring_buffer_init_all>
    
    //
    // Turn on PDM
    //
    am_app_mic_verif_pdm_init();
    edf0:	f7ff fe68 	bl	eac4 <am_app_mic_verif_pdm_init>

#if AM_APP_ANALOG_MIC
    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(33, g_AM_PIN_33_ADCSE5);
    edf4:	4b35      	ldr	r3, [pc, #212]	; (eecc <am_app_mic_verif_sys_init+0x1b4>)
    edf6:	6819      	ldr	r1, [r3, #0]
    edf8:	2021      	movs	r0, #33	; 0x21
    edfa:	f7fd ff37 	bl	cc6c <am_hal_gpio_pinconfig>
    //
    // Configure the ADC
    //
    adc_config();
    edfe:	f7ff ff01 	bl	ec04 <adc_config>
    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    ee02:	f7ff ff6f 	bl	ece4 <init_timerA3_for_ADC>
#endif // AM_APP_ANALOG_MIC
    //
    // TimerA0 init.
    //
    timerA0_init();
    ee06:	f7ff fe25 	bl	ea54 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    ee0a:	2001      	movs	r0, #1
    ee0c:	f000 ffde 	bl	fdcc <am_hal_ctimer_int_enable>

    NVIC_SetPriority(PDM_IRQn, 4);
    ee10:	2104      	movs	r1, #4
    ee12:	2013      	movs	r0, #19
    ee14:	f7ff fdd8 	bl	e9c8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    ee18:	2013      	movs	r0, #19
    ee1a:	f7ff fdb7 	bl	e98c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPIO_IRQn);
    ee1e:	200d      	movs	r0, #13
    ee20:	f7ff fdb4 	bl	e98c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    ee24:	200e      	movs	r0, #14
    ee26:	f7ff fdb1 	bl	e98c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC_IRQn);
    ee2a:	2012      	movs	r0, #18
    ee2c:	f7ff fdae 	bl	e98c <__NVIC_EnableIRQ>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    ee30:	f001 f844 	bl	febc <am_hal_interrupt_master_enable>
   
    //
    // Configure and enable burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    ee34:	4826      	ldr	r0, [pc, #152]	; (eed0 <am_app_mic_verif_sys_init+0x1b8>)
    ee36:	f000 fbf1 	bl	f61c <am_hal_burst_mode_initialize>
    ee3a:	4603      	mov	r3, r0
    ee3c:	2b00      	cmp	r3, #0
    ee3e:	d110      	bne.n	ee62 <am_app_mic_verif_sys_init+0x14a>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    ee40:	4b23      	ldr	r3, [pc, #140]	; (eed0 <am_app_mic_verif_sys_init+0x1b8>)
    ee42:	781b      	ldrb	r3, [r3, #0]
    ee44:	2b00      	cmp	r3, #0
    ee46:	d10c      	bne.n	ee62 <am_app_mic_verif_sys_init+0x14a>
        {
            // Put the MCU into "Burst" mode.
            if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    ee48:	4822      	ldr	r0, [pc, #136]	; (eed4 <am_app_mic_verif_sys_init+0x1bc>)
    ee4a:	f000 fc2f 	bl	f6ac <am_hal_burst_mode_enable>
    ee4e:	4603      	mov	r3, r0
    ee50:	2b00      	cmp	r3, #0
    ee52:	d106      	bne.n	ee62 <am_app_mic_verif_sys_init+0x14a>
            {
                if (AM_HAL_BURST_MODE == eBurstMode)
    ee54:	4b1f      	ldr	r3, [pc, #124]	; (eed4 <am_app_mic_verif_sys_init+0x1bc>)
    ee56:	781b      	ldrb	r3, [r3, #0]
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d102      	bne.n	ee62 <am_app_mic_verif_sys_init+0x14a>
                {
                    am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n\n");
    ee5c:	481e      	ldr	r0, [pc, #120]	; (eed8 <am_app_mic_verif_sys_init+0x1c0>)
    ee5e:	f7ff f9cd 	bl	e1fc <am_util_stdio_printf>
            }

        }
    }

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    ee62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee66:	2000      	movs	r0, #0
    ee68:	f000 ff0a 	bl	fc80 <am_hal_ctimer_start>

#if AM_APP_ANALOG_MIC
    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    ee6c:	4b1b      	ldr	r3, [pc, #108]	; (eedc <am_app_mic_verif_sys_init+0x1c4>)
    ee6e:	681b      	ldr	r3, [r3, #0]
    ee70:	4618      	mov	r0, r3
    ee72:	f000 fb5d 	bl	f530 <am_hal_adc_sw_trigger>
    ee76:	4603      	mov	r3, r0
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d002      	beq.n	ee82 <am_app_mic_verif_sys_init+0x16a>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    ee7c:	4818      	ldr	r0, [pc, #96]	; (eee0 <am_app_mic_verif_sys_init+0x1c8>)
    ee7e:	f7ff f9bd 	bl	e1fc <am_util_stdio_printf>
    }
    while(!(*(uint32_t*)0x4002010c & 0x02));
    ee82:	bf00      	nop
    ee84:	4b17      	ldr	r3, [pc, #92]	; (eee4 <am_app_mic_verif_sys_init+0x1cc>)
    ee86:	681b      	ldr	r3, [r3, #0]
    ee88:	f003 0302 	and.w	r3, r3, #2
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d0f9      	beq.n	ee84 <am_app_mic_verif_sys_init+0x16c>
    am_util_stdio_printf("ADCCAL reg value now is %x ...\r\n", *(uint32_t*)0x4002010c);
    ee90:	4b14      	ldr	r3, [pc, #80]	; (eee4 <am_app_mic_verif_sys_init+0x1cc>)
    ee92:	681b      	ldr	r3, [r3, #0]
    ee94:	4619      	mov	r1, r3
    ee96:	4814      	ldr	r0, [pc, #80]	; (eee8 <am_app_mic_verif_sys_init+0x1d0>)
    ee98:	f7ff f9b0 	bl	e1fc <am_util_stdio_printf>
#endif // AM_APP_ANALOG_MIC

}
    ee9c:	bf00      	nop
    ee9e:	3708      	adds	r7, #8
    eea0:	46bd      	mov	sp, r7
    eea2:	bd80      	pop	{r7, pc}
    eea4:	00011000 	.word	0x00011000
    eea8:	00011314 	.word	0x00011314
    eeac:	00011030 	.word	0x00011030
    eeb0:	00011060 	.word	0x00011060
    eeb4:	000112d4 	.word	0x000112d4
    eeb8:	000112d8 	.word	0x000112d8
    eebc:	000112dc 	.word	0x000112dc
    eec0:	1000c00c 	.word	0x1000c00c
    eec4:	000112bc 	.word	0x000112bc
    eec8:	1002be7c 	.word	0x1002be7c
    eecc:	000112e0 	.word	0x000112e0
    eed0:	1000ca74 	.word	0x1000ca74
    eed4:	1000c6ac 	.word	0x1000c6ac
    eed8:	0001108c 	.word	0x0001108c
    eedc:	1000ca70 	.word	0x1000ca70
    eee0:	000110b8 	.word	0x000110b8
    eee4:	4002010c 	.word	0x4002010c
    eee8:	000110dc 	.word	0x000110dc

0000eeec <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    eeec:	b580      	push	{r7, lr}
    eeee:	b082      	sub	sp, #8
    eef0:	af00      	add	r7, sp, #0
    uint32_t ui32Status;
    uint32_t ui32PushRet;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    eef2:	4b27      	ldr	r3, [pc, #156]	; (ef90 <am_pdm0_isr+0xa4>)
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	4639      	mov	r1, r7
    eef8:	2201      	movs	r2, #1
    eefa:	4618      	mov	r0, r3
    eefc:	f7fd fe5e 	bl	cbbc <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ef00:	4b23      	ldr	r3, [pc, #140]	; (ef90 <am_pdm0_isr+0xa4>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	683a      	ldr	r2, [r7, #0]
    ef06:	4611      	mov	r1, r2
    ef08:	4618      	mov	r0, r3
    ef0a:	f7fd fe2b 	bl	cb64 <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ef0e:	683b      	ldr	r3, [r7, #0]
    ef10:	f003 0308 	and.w	r3, r3, #8
    ef14:	2b00      	cmp	r3, #0
    ef16:	d02d      	beq.n	ef74 <am_pdm0_isr+0x88>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    ef18:	4b1e      	ldr	r3, [pc, #120]	; (ef94 <am_pdm0_isr+0xa8>)
    ef1a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ef1e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
            }
        }
#endif // AM_AEP_MIKRO_CALIBRATION

#if AM_APP_ANALOG_MIC
        if((g_bPDMDataReady == false) && (g_bAMicEvalFlag == true))
    ef22:	4b1d      	ldr	r3, [pc, #116]	; (ef98 <am_pdm0_isr+0xac>)
    ef24:	781b      	ldrb	r3, [r3, #0]
    ef26:	b2db      	uxtb	r3, r3
    ef28:	f083 0301 	eor.w	r3, r3, #1
    ef2c:	b2db      	uxtb	r3, r3
    ef2e:	2b00      	cmp	r3, #0
    ef30:	d02a      	beq.n	ef88 <am_pdm0_isr+0x9c>
    ef32:	4b1a      	ldr	r3, [pc, #104]	; (ef9c <am_pdm0_isr+0xb0>)
    ef34:	781b      	ldrb	r3, [r3, #0]
    ef36:	b2db      	uxtb	r3, r3
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d025      	beq.n	ef88 <am_pdm0_isr+0x9c>
        {
            ui32PushRet = am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], (void*)g_ui32PCMDataBuff, PCM_FRAME_SIZE*PCM_DATA_BYTES, true);
    ef3c:	2301      	movs	r3, #1
    ef3e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ef42:	4917      	ldr	r1, [pc, #92]	; (efa0 <am_pdm0_isr+0xb4>)
    ef44:	4817      	ldr	r0, [pc, #92]	; (efa4 <am_pdm0_isr+0xb8>)
    ef46:	f7ff f9e3 	bl	e310 <am_app_utils_ring_buffer_push>
    ef4a:	6078      	str	r0, [r7, #4]
            g_ui32PCMDataSumBytes += ui32PushRet;
    ef4c:	4b16      	ldr	r3, [pc, #88]	; (efa8 <am_pdm0_isr+0xbc>)
    ef4e:	681a      	ldr	r2, [r3, #0]
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	4413      	add	r3, r2
    ef54:	4a14      	ldr	r2, [pc, #80]	; (efa8 <am_pdm0_isr+0xbc>)
    ef56:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM]))
    ef58:	4b14      	ldr	r3, [pc, #80]	; (efac <am_pdm0_isr+0xc0>)
    ef5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef5c:	4b13      	ldr	r3, [pc, #76]	; (efac <am_pdm0_isr+0xc0>)
    ef5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ef60:	429a      	cmp	r2, r3
    ef62:	d111      	bne.n	ef88 <am_pdm0_isr+0x9c>
    ef64:	4b11      	ldr	r3, [pc, #68]	; (efac <am_pdm0_isr+0xc0>)
    ef66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ef68:	2b01      	cmp	r3, #1
    ef6a:	d10d      	bne.n	ef88 <am_pdm0_isr+0x9c>
            {
                g_bPDMDataReady = true;
    ef6c:	4b0a      	ldr	r3, [pc, #40]	; (ef98 <am_pdm0_isr+0xac>)
    ef6e:	2201      	movs	r2, #1
    ef70:	701a      	strb	r2, [r3, #0]

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    ef72:	e009      	b.n	ef88 <am_pdm0_isr+0x9c>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    ef74:	683b      	ldr	r3, [r7, #0]
    ef76:	f003 0306 	and.w	r3, r3, #6
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d004      	beq.n	ef88 <am_pdm0_isr+0x9c>
        am_hal_pdm_fifo_flush(PDMHandle);
    ef7e:	4b04      	ldr	r3, [pc, #16]	; (ef90 <am_pdm0_isr+0xa4>)
    ef80:	681b      	ldr	r3, [r3, #0]
    ef82:	4618      	mov	r0, r3
    ef84:	f7fd fd94 	bl	cab0 <am_hal_pdm_fifo_flush>
}
    ef88:	bf00      	nop
    ef8a:	3708      	adds	r7, #8
    ef8c:	46bd      	mov	sp, r7
    ef8e:	bd80      	pop	{r7, pc}
    ef90:	1000ca78 	.word	0x1000ca78
    ef94:	50011000 	.word	0x50011000
    ef98:	1000c16e 	.word	0x1000c16e
    ef9c:	1000c179 	.word	0x1000c179
    efa0:	1000c1ac 	.word	0x1000c1ac
    efa4:	1002bea4 	.word	0x1002bea4
    efa8:	1000c170 	.word	0x1000c170
    efac:	1002be7c 	.word	0x1002be7c

0000efb0 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    efb0:	b580      	push	{r7, lr}
    efb2:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    efb4:	4b0f      	ldr	r3, [pc, #60]	; (eff4 <am_ctimer_isr+0x44>)
    efb6:	681b      	ldr	r3, [r3, #0]
    efb8:	3301      	adds	r3, #1
    efba:	4a0e      	ldr	r2, [pc, #56]	; (eff4 <am_ctimer_isr+0x44>)
    efbc:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    efbe:	4b0e      	ldr	r3, [pc, #56]	; (eff8 <am_ctimer_isr+0x48>)
    efc0:	781b      	ldrb	r3, [r3, #0]
    efc2:	b2db      	uxtb	r3, r3
    efc4:	2b01      	cmp	r3, #1
    efc6:	d10f      	bne.n	efe8 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    efc8:	4b0c      	ldr	r3, [pc, #48]	; (effc <am_ctimer_isr+0x4c>)
    efca:	681b      	ldr	r3, [r3, #0]
    efcc:	3301      	adds	r3, #1
    efce:	4a0b      	ldr	r2, [pc, #44]	; (effc <am_ctimer_isr+0x4c>)
    efd0:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    efd2:	4b0a      	ldr	r3, [pc, #40]	; (effc <am_ctimer_isr+0x4c>)
    efd4:	681b      	ldr	r3, [r3, #0]
    efd6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    efda:	d905      	bls.n	efe8 <am_ctimer_isr+0x38>
        {
            g_ui8ButtonPushedFlag = 1;
    efdc:	4b08      	ldr	r3, [pc, #32]	; (f000 <am_ctimer_isr+0x50>)
    efde:	2201      	movs	r2, #1
    efe0:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    efe2:	4b05      	ldr	r3, [pc, #20]	; (eff8 <am_ctimer_isr+0x48>)
    efe4:	2200      	movs	r2, #0
    efe6:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    efe8:	2001      	movs	r0, #1
    efea:	f000 ff03 	bl	fdf4 <am_hal_ctimer_int_clear>
}
    efee:	bf00      	nop
    eff0:	bd80      	pop	{r7, pc}
    eff2:	bf00      	nop
    eff4:	1000c160 	.word	0x1000c160
    eff8:	1000c164 	.word	0x1000c164
    effc:	1000c168 	.word	0x1000c168
    f000:	1000c16d 	.word	0x1000c16d

0000f004 <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    f004:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    f008:	b082      	sub	sp, #8
    f00a:	af00      	add	r7, sp, #0
    uint64_t ui64Status;
//
// Read and clear GPIO interrupt status
//
    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    f00c:	463b      	mov	r3, r7
    f00e:	4619      	mov	r1, r3
    f010:	2000      	movs	r0, #0
    f012:	f7fe f951 	bl	d2b8 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    f016:	e9d7 3400 	ldrd	r3, r4, [r7]
    f01a:	4618      	mov	r0, r3
    f01c:	4621      	mov	r1, r4
    f01e:	f7fe f915 	bl	d24c <am_hal_gpio_interrupt_clear>
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    f022:	4b22      	ldr	r3, [pc, #136]	; (f0ac <am_gpio_isr+0xa8>)
    f024:	781b      	ldrb	r3, [r3, #0]
    f026:	b2db      	uxtb	r3, r3
    f028:	2b00      	cmp	r3, #0
    f02a:	d134      	bne.n	f096 <am_gpio_isr+0x92>
    {
        if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0))
    f02c:	e9d7 bc00 	ldrd	fp, ip, [r7]
    f030:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    f034:	f04f 0200 	mov.w	r2, #0
    f038:	ea0b 0301 	and.w	r3, fp, r1
    f03c:	ea0c 0402 	and.w	r4, ip, r2
    f040:	4323      	orrs	r3, r4
    f042:	d003      	beq.n	f04c <am_gpio_isr+0x48>
            g_sysKeyValue = AM_APP_KEY_0;
    f044:	4b1a      	ldr	r3, [pc, #104]	; (f0b0 <am_gpio_isr+0xac>)
    f046:	2201      	movs	r2, #1
    f048:	701a      	strb	r2, [r3, #0]
    f04a:	e01e      	b.n	f08a <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1))
    f04c:	e9d7 bc00 	ldrd	fp, ip, [r7]
    f050:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    f054:	f04f 0200 	mov.w	r2, #0
    f058:	ea0b 0301 	and.w	r3, fp, r1
    f05c:	ea0c 0402 	and.w	r4, ip, r2
    f060:	4323      	orrs	r3, r4
    f062:	d003      	beq.n	f06c <am_gpio_isr+0x68>
            g_sysKeyValue = AM_APP_KEY_1;
    f064:	4b12      	ldr	r3, [pc, #72]	; (f0b0 <am_gpio_isr+0xac>)
    f066:	2202      	movs	r2, #2
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	e00e      	b.n	f08a <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2))
    f06c:	e9d7 bc00 	ldrd	fp, ip, [r7]
    f070:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    f074:	f04f 0200 	mov.w	r2, #0
    f078:	ea0b 0301 	and.w	r3, fp, r1
    f07c:	ea0c 0402 	and.w	r4, ip, r2
    f080:	4323      	orrs	r3, r4
    f082:	d002      	beq.n	f08a <am_gpio_isr+0x86>
            g_sysKeyValue = AM_APP_KEY_2;
    f084:	4b0a      	ldr	r3, [pc, #40]	; (f0b0 <am_gpio_isr+0xac>)
    f086:	2203      	movs	r2, #3
    f088:	701a      	strb	r2, [r3, #0]

        g_ui8DebounceFlag = 1;
    f08a:	4b08      	ldr	r3, [pc, #32]	; (f0ac <am_gpio_isr+0xa8>)
    f08c:	2201      	movs	r2, #1
    f08e:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    f090:	4b08      	ldr	r3, [pc, #32]	; (f0b4 <am_gpio_isr+0xb0>)
    f092:	2200      	movs	r2, #0
    f094:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    f096:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f09a:	f04f 0100 	mov.w	r1, #0
    f09e:	f7fe f8d5 	bl	d24c <am_hal_gpio_interrupt_clear>

}
    f0a2:	bf00      	nop
    f0a4:	3708      	adds	r7, #8
    f0a6:	46bd      	mov	sp, r7
    f0a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    f0ac:	1000c164 	.word	0x1000c164
    f0b0:	1000c16c 	.word	0x1000c16c
    f0b4:	1000c168 	.word	0x1000c168

0000f0b8 <am_adc_isr>:
//
//*****************************************************************************
#if AM_APP_ANALOG_MIC
void
am_adc_isr(void)
{
    f0b8:	b580      	push	{r7, lr}
    f0ba:	b082      	sub	sp, #8
    f0bc:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    f0be:	4b2a      	ldr	r3, [pc, #168]	; (f168 <am_adc_isr+0xb0>)
    f0c0:	681b      	ldr	r3, [r3, #0]
    f0c2:	1d39      	adds	r1, r7, #4
    f0c4:	2200      	movs	r2, #0
    f0c6:	4618      	mov	r0, r3
    f0c8:	f000 fa02 	bl	f4d0 <am_hal_adc_interrupt_status>
    f0cc:	4603      	mov	r3, r0
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	d002      	beq.n	f0d8 <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    f0d2:	4826      	ldr	r0, [pc, #152]	; (f16c <am_adc_isr+0xb4>)
    f0d4:	f7ff f892 	bl	e1fc <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    f0d8:	4b23      	ldr	r3, [pc, #140]	; (f168 <am_adc_isr+0xb0>)
    f0da:	681b      	ldr	r3, [r3, #0]
    f0dc:	687a      	ldr	r2, [r7, #4]
    f0de:	4611      	mov	r1, r2
    f0e0:	4618      	mov	r0, r3
    f0e2:	f000 fa13 	bl	f50c <am_hal_adc_interrupt_clear>
    f0e6:	4603      	mov	r3, r0
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d002      	beq.n	f0f2 <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    f0ec:	4820      	ldr	r0, [pc, #128]	; (f170 <am_adc_isr+0xb8>)
    f0ee:	f7ff f885 	bl	e1fc <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    f0f2:	687b      	ldr	r3, [r7, #4]
    f0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d029      	beq.n	f150 <am_adc_isr+0x98>
    {
        g_bADCDMAComplete = true;
    f0fc:	4b1d      	ldr	r3, [pc, #116]	; (f174 <am_adc_isr+0xbc>)
    f0fe:	2201      	movs	r2, #1
    f100:	701a      	strb	r2, [r3, #0]
        if((g_bAMicDataReady == false) && (g_bAMicEvalFlag == true))
    f102:	4b1d      	ldr	r3, [pc, #116]	; (f178 <am_adc_isr+0xc0>)
    f104:	781b      	ldrb	r3, [r3, #0]
    f106:	b2db      	uxtb	r3, r3
    f108:	f083 0301 	eor.w	r3, r3, #1
    f10c:	b2db      	uxtb	r3, r3
    f10e:	2b00      	cmp	r3, #0
    f110:	d01e      	beq.n	f150 <am_adc_isr+0x98>
    f112:	4b1a      	ldr	r3, [pc, #104]	; (f17c <am_adc_isr+0xc4>)
    f114:	781b      	ldrb	r3, [r3, #0]
    f116:	b2db      	uxtb	r3, r3
    f118:	2b00      	cmp	r3, #0
    f11a:	d019      	beq.n	f150 <am_adc_isr+0x98>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], (void*)g_ui32ADCSampleBuffer, ADC_SAMPLE_COUNT*ANALOG_MIC_DATA_BYTES, true);
    f11c:	2301      	movs	r3, #1
    f11e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f122:	4917      	ldr	r1, [pc, #92]	; (f180 <am_adc_isr+0xc8>)
    f124:	4817      	ldr	r0, [pc, #92]	; (f184 <am_adc_isr+0xcc>)
    f126:	f7ff f8f3 	bl	e310 <am_app_utils_ring_buffer_push>
            g_ui32AMicDataSumBytes += ADC_SAMPLE_COUNT * ANALOG_MIC_DATA_BYTES;
    f12a:	4b17      	ldr	r3, [pc, #92]	; (f188 <am_adc_isr+0xd0>)
    f12c:	681b      	ldr	r3, [r3, #0]
    f12e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f132:	4a15      	ldr	r2, [pc, #84]	; (f188 <am_adc_isr+0xd0>)
    f134:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA]))
    f136:	4b15      	ldr	r3, [pc, #84]	; (f18c <am_adc_isr+0xd4>)
    f138:	699a      	ldr	r2, [r3, #24]
    f13a:	4b14      	ldr	r3, [pc, #80]	; (f18c <am_adc_isr+0xd4>)
    f13c:	69db      	ldr	r3, [r3, #28]
    f13e:	429a      	cmp	r2, r3
    f140:	d106      	bne.n	f150 <am_adc_isr+0x98>
    f142:	4b12      	ldr	r3, [pc, #72]	; (f18c <am_adc_isr+0xd4>)
    f144:	6a1b      	ldr	r3, [r3, #32]
    f146:	2b01      	cmp	r3, #1
    f148:	d102      	bne.n	f150 <am_adc_isr+0x98>
            {
                g_bAMicDataReady = true;
    f14a:	4b0b      	ldr	r3, [pc, #44]	; (f178 <am_adc_isr+0xc0>)
    f14c:	2201      	movs	r2, #1
    f14e:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    f150:	687b      	ldr	r3, [r7, #4]
    f152:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f156:	2b00      	cmp	r3, #0
    f158:	d002      	beq.n	f160 <am_adc_isr+0xa8>
    {
        g_bADCDMAError = true;
    f15a:	4b0d      	ldr	r3, [pc, #52]	; (f190 <am_adc_isr+0xd8>)
    f15c:	2201      	movs	r2, #1
    f15e:	701a      	strb	r2, [r3, #0]
    }
}
    f160:	bf00      	nop
    f162:	3708      	adds	r7, #8
    f164:	46bd      	mov	sp, r7
    f166:	bd80      	pop	{r7, pc}
    f168:	1000ca70 	.word	0x1000ca70
    f16c:	00011100 	.word	0x00011100
    f170:	00011124 	.word	0x00011124
    f174:	1000ca75 	.word	0x1000ca75
    f178:	1000c178 	.word	0x1000c178
    f17c:	1000c179 	.word	0x1000c179
    f180:	1000c6b0 	.word	0x1000c6b0
    f184:	1002be90 	.word	0x1002be90
    f188:	1000c174 	.word	0x1000c174
    f18c:	1002be7c 	.word	0x1002be7c
    f190:	1002beb8 	.word	0x1002beb8

0000f194 <am_bsp_uart_string_print>:
    f194:	b510      	push	{r4, lr}
    f196:	b086      	sub	sp, #24
    f198:	7803      	ldrb	r3, [r0, #0]
    f19a:	2400      	movs	r4, #0
    f19c:	9400      	str	r4, [sp, #0]
    f19e:	b1bb      	cbz	r3, f1d0 <am_bsp_uart_string_print+0x3c>
    f1a0:	4603      	mov	r3, r0
    f1a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f1a6:	3401      	adds	r4, #1
    f1a8:	2a00      	cmp	r2, #0
    f1aa:	d1fa      	bne.n	f1a2 <am_bsp_uart_string_print+0xe>
    f1ac:	4b0a      	ldr	r3, [pc, #40]	; (f1d8 <am_bsp_uart_string_print+0x44>)
    f1ae:	9002      	str	r0, [sp, #8]
    f1b0:	2200      	movs	r2, #0
    f1b2:	6818      	ldr	r0, [r3, #0]
    f1b4:	9403      	str	r4, [sp, #12]
    f1b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f1ba:	a901      	add	r1, sp, #4
    f1bc:	9304      	str	r3, [sp, #16]
    f1be:	9201      	str	r2, [sp, #4]
    f1c0:	f8cd d014 	str.w	sp, [sp, #20]
    f1c4:	f001 f9ac 	bl	10520 <am_hal_uart_transfer>
    f1c8:	9b00      	ldr	r3, [sp, #0]
    f1ca:	42a3      	cmp	r3, r4
    f1cc:	d002      	beq.n	f1d4 <am_bsp_uart_string_print+0x40>
    f1ce:	e7fe      	b.n	f1ce <am_bsp_uart_string_print+0x3a>
    f1d0:	461c      	mov	r4, r3
    f1d2:	e7eb      	b.n	f1ac <am_bsp_uart_string_print+0x18>
    f1d4:	b006      	add	sp, #24
    f1d6:	bd10      	pop	{r4, pc}
    f1d8:	1000c180 	.word	0x1000c180

0000f1dc <am_bsp_low_power_init>:
    f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1de:	f000 ff65 	bl	100ac <am_hal_pwrctrl_low_power_init>
    f1e2:	f000 ffd5 	bl	10190 <am_hal_rtc_osc_disable>
    f1e6:	4b0b      	ldr	r3, [pc, #44]	; (f214 <am_bsp_low_power_init+0x38>)
    f1e8:	4f0b      	ldr	r7, [pc, #44]	; (f218 <am_bsp_low_power_init+0x3c>)
    f1ea:	681e      	ldr	r6, [r3, #0]
    f1ec:	2400      	movs	r4, #0
    f1ee:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f1f2:	4631      	mov	r1, r6
    f1f4:	4628      	mov	r0, r5
    f1f6:	f7fd fd39 	bl	cc6c <am_hal_gpio_pinconfig>
    f1fa:	2103      	movs	r1, #3
    f1fc:	4628      	mov	r0, r5
    f1fe:	f7fd ff69 	bl	d0d4 <am_hal_gpio_state_write>
    f202:	3401      	adds	r4, #1
    f204:	4628      	mov	r0, r5
    f206:	2100      	movs	r1, #0
    f208:	f7fd ff64 	bl	d0d4 <am_hal_gpio_state_write>
    f20c:	2c05      	cmp	r4, #5
    f20e:	d1ee      	bne.n	f1ee <am_bsp_low_power_init+0x12>
    f210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f212:	bf00      	nop
    f214:	00011154 	.word	0x00011154
    f218:	1000c00c 	.word	0x1000c00c

0000f21c <am_bsp_uart_printf_enable>:
    f21c:	b510      	push	{r4, lr}
    f21e:	4c10      	ldr	r4, [pc, #64]	; (f260 <am_bsp_uart_printf_enable+0x44>)
    f220:	4b10      	ldr	r3, [pc, #64]	; (f264 <am_bsp_uart_printf_enable+0x48>)
    f222:	4621      	mov	r1, r4
    f224:	2202      	movs	r2, #2
    f226:	2000      	movs	r0, #0
    f228:	601a      	str	r2, [r3, #0]
    f22a:	f000 ffbb 	bl	101a4 <am_hal_uart_initialize>
    f22e:	2200      	movs	r2, #0
    f230:	4611      	mov	r1, r2
    f232:	6820      	ldr	r0, [r4, #0]
    f234:	f000 ffde 	bl	101f4 <am_hal_uart_power_control>
    f238:	6820      	ldr	r0, [r4, #0]
    f23a:	490b      	ldr	r1, [pc, #44]	; (f268 <am_bsp_uart_printf_enable+0x4c>)
    f23c:	f001 f84c 	bl	102d8 <am_hal_uart_configure>
    f240:	4b0a      	ldr	r3, [pc, #40]	; (f26c <am_bsp_uart_printf_enable+0x50>)
    f242:	2016      	movs	r0, #22
    f244:	6819      	ldr	r1, [r3, #0]
    f246:	f7fd fd11 	bl	cc6c <am_hal_gpio_pinconfig>
    f24a:	4b09      	ldr	r3, [pc, #36]	; (f270 <am_bsp_uart_printf_enable+0x54>)
    f24c:	2017      	movs	r0, #23
    f24e:	6819      	ldr	r1, [r3, #0]
    f250:	f7fd fd0c 	bl	cc6c <am_hal_gpio_pinconfig>
    f254:	4807      	ldr	r0, [pc, #28]	; (f274 <am_bsp_uart_printf_enable+0x58>)
    f256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f25a:	f7fe b93f 	b.w	d4dc <am_util_stdio_printf_init>
    f25e:	bf00      	nop
    f260:	1000c180 	.word	0x1000c180
    f264:	1000c17c 	.word	0x1000c17c
    f268:	000112e4 	.word	0x000112e4
    f26c:	0001130c 	.word	0x0001130c
    f270:	00011310 	.word	0x00011310
    f274:	0000f195 	.word	0x0000f195

0000f278 <am_hal_adc_initialize>:
    f278:	b108      	cbz	r0, f27e <am_hal_adc_initialize+0x6>
    f27a:	2005      	movs	r0, #5
    f27c:	4770      	bx	lr
    f27e:	b139      	cbz	r1, f290 <am_hal_adc_initialize+0x18>
    f280:	4a1b      	ldr	r2, [pc, #108]	; (f2f0 <am_hal_adc_initialize+0x78>)
    f282:	b538      	push	{r3, r4, r5, lr}
    f284:	78d3      	ldrb	r3, [r2, #3]
    f286:	f013 0401 	ands.w	r4, r3, #1
    f28a:	d003      	beq.n	f294 <am_hal_adc_initialize+0x1c>
    f28c:	2007      	movs	r0, #7
    f28e:	bd38      	pop	{r3, r4, r5, pc}
    f290:	2006      	movs	r0, #6
    f292:	4770      	bx	lr
    f294:	f043 0301 	orr.w	r3, r3, #1
    f298:	70d3      	strb	r3, [r2, #3]
    f29a:	6813      	ldr	r3, [r2, #0]
    f29c:	4d15      	ldr	r5, [pc, #84]	; (f2f4 <am_hal_adc_initialize+0x7c>)
    f29e:	4816      	ldr	r0, [pc, #88]	; (f2f8 <am_hal_adc_initialize+0x80>)
    f2a0:	6054      	str	r4, [r2, #4]
    f2a2:	f365 0317 	bfi	r3, r5, #0, #24
    f2a6:	6013      	str	r3, [r2, #0]
    f2a8:	6004      	str	r4, [r0, #0]
    f2aa:	600a      	str	r2, [r1, #0]
    f2ac:	4813      	ldr	r0, [pc, #76]	; (f2fc <am_hal_adc_initialize+0x84>)
    f2ae:	4d14      	ldr	r5, [pc, #80]	; (f300 <am_hal_adc_initialize+0x88>)
    f2b0:	f000 fdfa 	bl	fea8 <am_hal_flash_load_ui32>
    f2b4:	6028      	str	r0, [r5, #0]
    f2b6:	4813      	ldr	r0, [pc, #76]	; (f304 <am_hal_adc_initialize+0x8c>)
    f2b8:	f000 fdf6 	bl	fea8 <am_hal_flash_load_ui32>
    f2bc:	6068      	str	r0, [r5, #4]
    f2be:	4812      	ldr	r0, [pc, #72]	; (f308 <am_hal_adc_initialize+0x90>)
    f2c0:	f000 fdf2 	bl	fea8 <am_hal_flash_load_ui32>
    f2c4:	682b      	ldr	r3, [r5, #0]
    f2c6:	60a8      	str	r0, [r5, #8]
    f2c8:	3301      	adds	r3, #1
    f2ca:	d008      	beq.n	f2de <am_hal_adc_initialize+0x66>
    f2cc:	686b      	ldr	r3, [r5, #4]
    f2ce:	3301      	adds	r3, #1
    f2d0:	d005      	beq.n	f2de <am_hal_adc_initialize+0x66>
    f2d2:	3001      	adds	r0, #1
    f2d4:	d003      	beq.n	f2de <am_hal_adc_initialize+0x66>
    f2d6:	2301      	movs	r3, #1
    f2d8:	732b      	strb	r3, [r5, #12]
    f2da:	4620      	mov	r0, r4
    f2dc:	bd38      	pop	{r3, r4, r5, pc}
    f2de:	490b      	ldr	r1, [pc, #44]	; (f30c <am_hal_adc_initialize+0x94>)
    f2e0:	4a0b      	ldr	r2, [pc, #44]	; (f310 <am_hal_adc_initialize+0x98>)
    f2e2:	4b0c      	ldr	r3, [pc, #48]	; (f314 <am_hal_adc_initialize+0x9c>)
    f2e4:	6029      	str	r1, [r5, #0]
    f2e6:	2000      	movs	r0, #0
    f2e8:	606a      	str	r2, [r5, #4]
    f2ea:	60ab      	str	r3, [r5, #8]
    f2ec:	7328      	strb	r0, [r5, #12]
    f2ee:	bd38      	pop	{r3, r4, r5, pc}
    f2f0:	1002bec0 	.word	0x1002bec0
    f2f4:	00afafaf 	.word	0x00afafaf
    f2f8:	1002bebc 	.word	0x1002bebc
    f2fc:	50023840 	.word	0x50023840
    f300:	1000c184 	.word	0x1000c184
    f304:	50023844 	.word	0x50023844
    f308:	50023848 	.word	0x50023848
    f30c:	4395c000 	.word	0x4395c000
    f310:	3f839874 	.word	0x3f839874
    f314:	bb8c47a1 	.word	0xbb8c47a1

0000f318 <am_hal_adc_configure>:
    f318:	b128      	cbz	r0, f326 <am_hal_adc_configure+0xe>
    f31a:	6803      	ldr	r3, [r0, #0]
    f31c:	4a18      	ldr	r2, [pc, #96]	; (f380 <am_hal_adc_configure+0x68>)
    f31e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f322:	4293      	cmp	r3, r2
    f324:	d001      	beq.n	f32a <am_hal_adc_configure+0x12>
    f326:	2002      	movs	r0, #2
    f328:	4770      	bx	lr
    f32a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f32c:	7808      	ldrb	r0, [r1, #0]
    f32e:	784d      	ldrb	r5, [r1, #1]
    f330:	788c      	ldrb	r4, [r1, #2]
    f332:	f891 e003 	ldrb.w	lr, [r1, #3]
    f336:	790f      	ldrb	r7, [r1, #4]
    f338:	794a      	ldrb	r2, [r1, #5]
    f33a:	798b      	ldrb	r3, [r1, #6]
    f33c:	4e11      	ldr	r6, [pc, #68]	; (f384 <am_hal_adc_configure+0x6c>)
    f33e:	0600      	lsls	r0, r0, #24
    f340:	04ed      	lsls	r5, r5, #19
    f342:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    f346:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    f34a:	4328      	orrs	r0, r5
    f34c:	0424      	lsls	r4, r4, #16
    f34e:	ea4f 210e 	mov.w	r1, lr, lsl #8
    f352:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    f356:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    f35a:	4304      	orrs	r4, r0
    f35c:	f401 7040 	and.w	r0, r1, #768	; 0x300
    f360:	0139      	lsls	r1, r7, #4
    f362:	4320      	orrs	r0, r4
    f364:	f001 0110 	and.w	r1, r1, #16
    f368:	00d2      	lsls	r2, r2, #3
    f36a:	4301      	orrs	r1, r0
    f36c:	f002 0208 	and.w	r2, r2, #8
    f370:	009b      	lsls	r3, r3, #2
    f372:	430a      	orrs	r2, r1
    f374:	f003 0304 	and.w	r3, r3, #4
    f378:	4313      	orrs	r3, r2
    f37a:	6033      	str	r3, [r6, #0]
    f37c:	2000      	movs	r0, #0
    f37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f380:	01afafaf 	.word	0x01afafaf
    f384:	50010000 	.word	0x50010000

0000f388 <am_hal_adc_configure_slot>:
    f388:	b128      	cbz	r0, f396 <am_hal_adc_configure_slot+0xe>
    f38a:	6803      	ldr	r3, [r0, #0]
    f38c:	4816      	ldr	r0, [pc, #88]	; (f3e8 <am_hal_adc_configure_slot+0x60>)
    f38e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f392:	4283      	cmp	r3, r0
    f394:	d001      	beq.n	f39a <am_hal_adc_configure_slot+0x12>
    f396:	2002      	movs	r0, #2
    f398:	4770      	bx	lr
    f39a:	2907      	cmp	r1, #7
    f39c:	d901      	bls.n	f3a2 <am_hal_adc_configure_slot+0x1a>
    f39e:	2005      	movs	r0, #5
    f3a0:	4770      	bx	lr
    f3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3a4:	7813      	ldrb	r3, [r2, #0]
    f3a6:	7854      	ldrb	r4, [r2, #1]
    f3a8:	7890      	ldrb	r0, [r2, #2]
    f3aa:	78d7      	ldrb	r7, [r2, #3]
    f3ac:	f892 e004 	ldrb.w	lr, [r2, #4]
    f3b0:	4d0e      	ldr	r5, [pc, #56]	; (f3ec <am_hal_adc_configure_slot+0x64>)
    f3b2:	4e0f      	ldr	r6, [pc, #60]	; (f3f0 <am_hal_adc_configure_slot+0x68>)
    f3b4:	061b      	lsls	r3, r3, #24
    f3b6:	0424      	lsls	r4, r4, #16
    f3b8:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    f3bc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    f3c0:	4323      	orrs	r3, r4
    f3c2:	0202      	lsls	r2, r0, #8
    f3c4:	ea43 0e0e 	orr.w	lr, r3, lr
    f3c8:	440d      	add	r5, r1
    f3ca:	007b      	lsls	r3, r7, #1
    f3cc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    f3d0:	ea4e 0202 	orr.w	r2, lr, r2
    f3d4:	00ad      	lsls	r5, r5, #2
    f3d6:	f003 0302 	and.w	r3, r3, #2
    f3da:	4313      	orrs	r3, r2
    f3dc:	602b      	str	r3, [r5, #0]
    f3de:	6833      	ldr	r3, [r6, #0]
    f3e0:	3301      	adds	r3, #1
    f3e2:	6033      	str	r3, [r6, #0]
    f3e4:	2000      	movs	r0, #0
    f3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3e8:	01afafaf 	.word	0x01afafaf
    f3ec:	14004003 	.word	0x14004003
    f3f0:	1002bebc 	.word	0x1002bebc

0000f3f4 <am_hal_adc_configure_dma>:
    f3f4:	b128      	cbz	r0, f402 <am_hal_adc_configure_dma+0xe>
    f3f6:	6803      	ldr	r3, [r0, #0]
    f3f8:	4a17      	ldr	r2, [pc, #92]	; (f458 <am_hal_adc_configure_dma+0x64>)
    f3fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3fe:	4293      	cmp	r3, r2
    f400:	d001      	beq.n	f406 <am_hal_adc_configure_dma+0x12>
    f402:	2002      	movs	r0, #2
    f404:	4770      	bx	lr
    f406:	b410      	push	{r4}
    f408:	7808      	ldrb	r0, [r1, #0]
    f40a:	784b      	ldrb	r3, [r1, #1]
    f40c:	4c13      	ldr	r4, [pc, #76]	; (f45c <am_hal_adc_configure_dma+0x68>)
    f40e:	4a14      	ldr	r2, [pc, #80]	; (f460 <am_hal_adc_configure_dma+0x6c>)
    f410:	6824      	ldr	r4, [r4, #0]
    f412:	0240      	lsls	r0, r0, #9
    f414:	021b      	lsls	r3, r3, #8
    f416:	f400 7000 	and.w	r0, r0, #512	; 0x200
    f41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    f41e:	4303      	orrs	r3, r0
    f420:	2c01      	cmp	r4, #1
    f422:	bf8c      	ite	hi
    f424:	2000      	movhi	r0, #0
    f426:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    f42a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    f42e:	4303      	orrs	r3, r0
    f430:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    f434:	8888      	ldrh	r0, [r1, #4]
    f436:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    f43a:	f360 0391 	bfi	r3, r0, #2, #16
    f43e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    f442:	688b      	ldr	r3, [r1, #8]
    f444:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    f448:	2301      	movs	r3, #1
    f44a:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    f44e:	2000      	movs	r0, #0
    f450:	f85d 4b04 	ldr.w	r4, [sp], #4
    f454:	4770      	bx	lr
    f456:	bf00      	nop
    f458:	01afafaf 	.word	0x01afafaf
    f45c:	1002bebc 	.word	0x1002bebc
    f460:	50010000 	.word	0x50010000

0000f464 <am_hal_adc_enable>:
    f464:	4603      	mov	r3, r0
    f466:	b128      	cbz	r0, f474 <am_hal_adc_enable+0x10>
    f468:	6802      	ldr	r2, [r0, #0]
    f46a:	490c      	ldr	r1, [pc, #48]	; (f49c <am_hal_adc_enable+0x38>)
    f46c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f470:	428a      	cmp	r2, r1
    f472:	d001      	beq.n	f478 <am_hal_adc_enable+0x14>
    f474:	2002      	movs	r0, #2
    f476:	4770      	bx	lr
    f478:	78c2      	ldrb	r2, [r0, #3]
    f47a:	f002 0202 	and.w	r2, r2, #2
    f47e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f482:	b94a      	cbnz	r2, f498 <am_hal_adc_enable+0x34>
    f484:	4906      	ldr	r1, [pc, #24]	; (f4a0 <am_hal_adc_enable+0x3c>)
    f486:	680a      	ldr	r2, [r1, #0]
    f488:	f042 0201 	orr.w	r2, r2, #1
    f48c:	600a      	str	r2, [r1, #0]
    f48e:	78da      	ldrb	r2, [r3, #3]
    f490:	f042 0202 	orr.w	r2, r2, #2
    f494:	70da      	strb	r2, [r3, #3]
    f496:	4770      	bx	lr
    f498:	2000      	movs	r0, #0
    f49a:	4770      	bx	lr
    f49c:	01afafaf 	.word	0x01afafaf
    f4a0:	50010000 	.word	0x50010000

0000f4a4 <am_hal_adc_interrupt_enable>:
    f4a4:	b128      	cbz	r0, f4b2 <am_hal_adc_interrupt_enable+0xe>
    f4a6:	6803      	ldr	r3, [r0, #0]
    f4a8:	4a07      	ldr	r2, [pc, #28]	; (f4c8 <am_hal_adc_interrupt_enable+0x24>)
    f4aa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4ae:	4293      	cmp	r3, r2
    f4b0:	d001      	beq.n	f4b6 <am_hal_adc_interrupt_enable+0x12>
    f4b2:	2002      	movs	r0, #2
    f4b4:	4770      	bx	lr
    f4b6:	4b05      	ldr	r3, [pc, #20]	; (f4cc <am_hal_adc_interrupt_enable+0x28>)
    f4b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f4bc:	4311      	orrs	r1, r2
    f4be:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    f4c2:	2000      	movs	r0, #0
    f4c4:	4770      	bx	lr
    f4c6:	bf00      	nop
    f4c8:	01afafaf 	.word	0x01afafaf
    f4cc:	50010000 	.word	0x50010000

0000f4d0 <am_hal_adc_interrupt_status>:
    f4d0:	b128      	cbz	r0, f4de <am_hal_adc_interrupt_status+0xe>
    f4d2:	6803      	ldr	r3, [r0, #0]
    f4d4:	480b      	ldr	r0, [pc, #44]	; (f504 <am_hal_adc_interrupt_status+0x34>)
    f4d6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4da:	4283      	cmp	r3, r0
    f4dc:	d001      	beq.n	f4e2 <am_hal_adc_interrupt_status+0x12>
    f4de:	2002      	movs	r0, #2
    f4e0:	4770      	bx	lr
    f4e2:	b92a      	cbnz	r2, f4f0 <am_hal_adc_interrupt_status+0x20>
    f4e4:	4b08      	ldr	r3, [pc, #32]	; (f508 <am_hal_adc_interrupt_status+0x38>)
    f4e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f4ea:	600b      	str	r3, [r1, #0]
    f4ec:	4610      	mov	r0, r2
    f4ee:	4770      	bx	lr
    f4f0:	4a05      	ldr	r2, [pc, #20]	; (f508 <am_hal_adc_interrupt_status+0x38>)
    f4f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    f4f6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f4fa:	4003      	ands	r3, r0
    f4fc:	600b      	str	r3, [r1, #0]
    f4fe:	2000      	movs	r0, #0
    f500:	4770      	bx	lr
    f502:	bf00      	nop
    f504:	01afafaf 	.word	0x01afafaf
    f508:	50010000 	.word	0x50010000

0000f50c <am_hal_adc_interrupt_clear>:
    f50c:	b128      	cbz	r0, f51a <am_hal_adc_interrupt_clear+0xe>
    f50e:	6803      	ldr	r3, [r0, #0]
    f510:	4a05      	ldr	r2, [pc, #20]	; (f528 <am_hal_adc_interrupt_clear+0x1c>)
    f512:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f516:	4293      	cmp	r3, r2
    f518:	d001      	beq.n	f51e <am_hal_adc_interrupt_clear+0x12>
    f51a:	2002      	movs	r0, #2
    f51c:	4770      	bx	lr
    f51e:	4b03      	ldr	r3, [pc, #12]	; (f52c <am_hal_adc_interrupt_clear+0x20>)
    f520:	2000      	movs	r0, #0
    f522:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    f526:	4770      	bx	lr
    f528:	01afafaf 	.word	0x01afafaf
    f52c:	50010000 	.word	0x50010000

0000f530 <am_hal_adc_sw_trigger>:
    f530:	b128      	cbz	r0, f53e <am_hal_adc_sw_trigger+0xe>
    f532:	6803      	ldr	r3, [r0, #0]
    f534:	4a05      	ldr	r2, [pc, #20]	; (f54c <am_hal_adc_sw_trigger+0x1c>)
    f536:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f53a:	4293      	cmp	r3, r2
    f53c:	d001      	beq.n	f542 <am_hal_adc_sw_trigger+0x12>
    f53e:	2002      	movs	r0, #2
    f540:	4770      	bx	lr
    f542:	4b03      	ldr	r3, [pc, #12]	; (f550 <am_hal_adc_sw_trigger+0x20>)
    f544:	2237      	movs	r2, #55	; 0x37
    f546:	609a      	str	r2, [r3, #8]
    f548:	2000      	movs	r0, #0
    f54a:	4770      	bx	lr
    f54c:	01afafaf 	.word	0x01afafaf
    f550:	50010000 	.word	0x50010000

0000f554 <am_hal_adc_power_control>:
    f554:	b140      	cbz	r0, f568 <am_hal_adc_power_control+0x14>
    f556:	6803      	ldr	r3, [r0, #0]
    f558:	b570      	push	{r4, r5, r6, lr}
    f55a:	4c2e      	ldr	r4, [pc, #184]	; (f614 <am_hal_adc_power_control+0xc0>)
    f55c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f560:	42a3      	cmp	r3, r4
    f562:	d003      	beq.n	f56c <am_hal_adc_power_control+0x18>
    f564:	2002      	movs	r0, #2
    f566:	bd70      	pop	{r4, r5, r6, pc}
    f568:	2002      	movs	r0, #2
    f56a:	4770      	bx	lr
    f56c:	4604      	mov	r4, r0
    f56e:	4615      	mov	r5, r2
    f570:	460e      	mov	r6, r1
    f572:	b329      	cbz	r1, f5c0 <am_hal_adc_power_control+0x6c>
    f574:	2902      	cmp	r1, #2
    f576:	d821      	bhi.n	f5bc <am_hal_adc_power_control+0x68>
    f578:	b1da      	cbz	r2, f5b2 <am_hal_adc_power_control+0x5e>
    f57a:	4b27      	ldr	r3, [pc, #156]	; (f618 <am_hal_adc_power_control+0xc4>)
    f57c:	68da      	ldr	r2, [r3, #12]
    f57e:	6142      	str	r2, [r0, #20]
    f580:	691a      	ldr	r2, [r3, #16]
    f582:	6182      	str	r2, [r0, #24]
    f584:	695a      	ldr	r2, [r3, #20]
    f586:	61c2      	str	r2, [r0, #28]
    f588:	699a      	ldr	r2, [r3, #24]
    f58a:	6202      	str	r2, [r0, #32]
    f58c:	69da      	ldr	r2, [r3, #28]
    f58e:	6242      	str	r2, [r0, #36]	; 0x24
    f590:	6a1a      	ldr	r2, [r3, #32]
    f592:	6282      	str	r2, [r0, #40]	; 0x28
    f594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f596:	62c2      	str	r2, [r0, #44]	; 0x2c
    f598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f59a:	6302      	str	r2, [r0, #48]	; 0x30
    f59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f59e:	6342      	str	r2, [r0, #52]	; 0x34
    f5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f5a2:	6382      	str	r2, [r0, #56]	; 0x38
    f5a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f5a8:	63c2      	str	r2, [r0, #60]	; 0x3c
    f5aa:	681b      	ldr	r3, [r3, #0]
    f5ac:	6103      	str	r3, [r0, #16]
    f5ae:	2301      	movs	r3, #1
    f5b0:	7303      	strb	r3, [r0, #12]
    f5b2:	200a      	movs	r0, #10
    f5b4:	f000 fd4e 	bl	10054 <am_hal_pwrctrl_periph_disable>
    f5b8:	2000      	movs	r0, #0
    f5ba:	bd70      	pop	{r4, r5, r6, pc}
    f5bc:	2006      	movs	r0, #6
    f5be:	bd70      	pop	{r4, r5, r6, pc}
    f5c0:	b11a      	cbz	r2, f5ca <am_hal_adc_power_control+0x76>
    f5c2:	7b03      	ldrb	r3, [r0, #12]
    f5c4:	b933      	cbnz	r3, f5d4 <am_hal_adc_power_control+0x80>
    f5c6:	2007      	movs	r0, #7
    f5c8:	bd70      	pop	{r4, r5, r6, pc}
    f5ca:	200a      	movs	r0, #10
    f5cc:	f000 fd18 	bl	10000 <am_hal_pwrctrl_periph_enable>
    f5d0:	4628      	mov	r0, r5
    f5d2:	bd70      	pop	{r4, r5, r6, pc}
    f5d4:	200a      	movs	r0, #10
    f5d6:	f000 fd13 	bl	10000 <am_hal_pwrctrl_periph_enable>
    f5da:	4b0f      	ldr	r3, [pc, #60]	; (f618 <am_hal_adc_power_control+0xc4>)
    f5dc:	6962      	ldr	r2, [r4, #20]
    f5de:	60da      	str	r2, [r3, #12]
    f5e0:	69a2      	ldr	r2, [r4, #24]
    f5e2:	611a      	str	r2, [r3, #16]
    f5e4:	69e2      	ldr	r2, [r4, #28]
    f5e6:	615a      	str	r2, [r3, #20]
    f5e8:	6a22      	ldr	r2, [r4, #32]
    f5ea:	619a      	str	r2, [r3, #24]
    f5ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f5ee:	61da      	str	r2, [r3, #28]
    f5f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f5f2:	621a      	str	r2, [r3, #32]
    f5f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f5f6:	625a      	str	r2, [r3, #36]	; 0x24
    f5f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f5fa:	629a      	str	r2, [r3, #40]	; 0x28
    f5fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f5fe:	62da      	str	r2, [r3, #44]	; 0x2c
    f600:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f602:	631a      	str	r2, [r3, #48]	; 0x30
    f604:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f60a:	6922      	ldr	r2, [r4, #16]
    f60c:	601a      	str	r2, [r3, #0]
    f60e:	4630      	mov	r0, r6
    f610:	7326      	strb	r6, [r4, #12]
    f612:	bd70      	pop	{r4, r5, r6, pc}
    f614:	01afafaf 	.word	0x01afafaf
    f618:	50010000 	.word	0x50010000

0000f61c <am_hal_burst_mode_initialize>:
    f61c:	b570      	push	{r4, r5, r6, lr}
    f61e:	4b1e      	ldr	r3, [pc, #120]	; (f698 <am_hal_burst_mode_initialize+0x7c>)
    f620:	695a      	ldr	r2, [r3, #20]
    f622:	07d5      	lsls	r5, r2, #31
    f624:	b082      	sub	sp, #8
    f626:	4604      	mov	r4, r0
    f628:	d407      	bmi.n	f63a <am_hal_burst_mode_initialize+0x1e>
    f62a:	4a1c      	ldr	r2, [pc, #112]	; (f69c <am_hal_burst_mode_initialize+0x80>)
    f62c:	2100      	movs	r1, #0
    f62e:	2301      	movs	r3, #1
    f630:	7011      	strb	r1, [r2, #0]
    f632:	2007      	movs	r0, #7
    f634:	7023      	strb	r3, [r4, #0]
    f636:	b002      	add	sp, #8
    f638:	bd70      	pop	{r4, r5, r6, pc}
    f63a:	4a19      	ldr	r2, [pc, #100]	; (f6a0 <am_hal_burst_mode_initialize+0x84>)
    f63c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f63e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f642:	6291      	str	r1, [r2, #40]	; 0x28
    f644:	6812      	ldr	r2, [r2, #0]
    f646:	07d0      	lsls	r0, r2, #31
    f648:	d507      	bpl.n	f65a <am_hal_burst_mode_initialize+0x3e>
    f64a:	68db      	ldr	r3, [r3, #12]
    f64c:	b2db      	uxtb	r3, r3
    f64e:	2b11      	cmp	r3, #17
    f650:	d903      	bls.n	f65a <am_hal_burst_mode_initialize+0x3e>
    f652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f656:	4a13      	ldr	r2, [pc, #76]	; (f6a4 <am_hal_burst_mode_initialize+0x88>)
    f658:	63da      	str	r2, [r3, #60]	; 0x3c
    f65a:	4d0f      	ldr	r5, [pc, #60]	; (f698 <am_hal_burst_mode_initialize+0x7c>)
    f65c:	4912      	ldr	r1, [pc, #72]	; (f6a8 <am_hal_burst_mode_initialize+0x8c>)
    f65e:	7e2a      	ldrb	r2, [r5, #24]
    f660:	2601      	movs	r6, #1
    f662:	f042 0210 	orr.w	r2, r2, #16
    f666:	2320      	movs	r3, #32
    f668:	762a      	strb	r2, [r5, #24]
    f66a:	f242 7010 	movw	r0, #10000	; 0x2710
    f66e:	461a      	mov	r2, r3
    f670:	9600      	str	r6, [sp, #0]
    f672:	f000 fbdf 	bl	fe34 <am_hal_flash_delay_status_check>
    f676:	b948      	cbnz	r0, f68c <am_hal_burst_mode_initialize+0x70>
    f678:	69aa      	ldr	r2, [r5, #24]
    f67a:	0651      	lsls	r1, r2, #25
    f67c:	d5d5      	bpl.n	f62a <am_hal_burst_mode_initialize+0xe>
    f67e:	69aa      	ldr	r2, [r5, #24]
    f680:	0692      	lsls	r2, r2, #26
    f682:	d5d2      	bpl.n	f62a <am_hal_burst_mode_initialize+0xe>
    f684:	4a05      	ldr	r2, [pc, #20]	; (f69c <am_hal_burst_mode_initialize+0x80>)
    f686:	7016      	strb	r6, [r2, #0]
    f688:	7020      	strb	r0, [r4, #0]
    f68a:	e7d4      	b.n	f636 <am_hal_burst_mode_initialize+0x1a>
    f68c:	4a03      	ldr	r2, [pc, #12]	; (f69c <am_hal_burst_mode_initialize+0x80>)
    f68e:	2100      	movs	r1, #0
    f690:	7011      	strb	r1, [r2, #0]
    f692:	7026      	strb	r6, [r4, #0]
    f694:	b002      	add	sp, #8
    f696:	bd70      	pop	{r4, r5, r6, pc}
    f698:	40020000 	.word	0x40020000
    f69c:	1000c194 	.word	0x1000c194
    f6a0:	40021000 	.word	0x40021000
    f6a4:	0fc0400f 	.word	0x0fc0400f
    f6a8:	40020018 	.word	0x40020018

0000f6ac <am_hal_burst_mode_enable>:
    f6ac:	4b14      	ldr	r3, [pc, #80]	; (f700 <am_hal_burst_mode_enable+0x54>)
    f6ae:	781b      	ldrb	r3, [r3, #0]
    f6b0:	b91b      	cbnz	r3, f6ba <am_hal_burst_mode_enable+0xe>
    f6b2:	2301      	movs	r3, #1
    f6b4:	7003      	strb	r3, [r0, #0]
    f6b6:	2007      	movs	r0, #7
    f6b8:	4770      	bx	lr
    f6ba:	b570      	push	{r4, r5, r6, lr}
    f6bc:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f6c0:	b082      	sub	sp, #8
    f6c2:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f6c6:	490f      	ldr	r1, [pc, #60]	; (f704 <am_hal_burst_mode_enable+0x58>)
    f6c8:	2601      	movs	r6, #1
    f6ca:	4332      	orrs	r2, r6
    f6cc:	2304      	movs	r3, #4
    f6ce:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f6d2:	4604      	mov	r4, r0
    f6d4:	461a      	mov	r2, r3
    f6d6:	9600      	str	r6, [sp, #0]
    f6d8:	f242 7010 	movw	r0, #10000	; 0x2710
    f6dc:	f000 fbaa 	bl	fe34 <am_hal_flash_delay_status_check>
    f6e0:	b938      	cbnz	r0, f6f2 <am_hal_burst_mode_enable+0x46>
    f6e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f6e4:	079a      	lsls	r2, r3, #30
    f6e6:	d507      	bpl.n	f6f8 <am_hal_burst_mode_enable+0x4c>
    f6e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f6ea:	075b      	lsls	r3, r3, #29
    f6ec:	d501      	bpl.n	f6f2 <am_hal_burst_mode_enable+0x46>
    f6ee:	7020      	strb	r0, [r4, #0]
    f6f0:	e000      	b.n	f6f4 <am_hal_burst_mode_enable+0x48>
    f6f2:	7026      	strb	r6, [r4, #0]
    f6f4:	b002      	add	sp, #8
    f6f6:	bd70      	pop	{r4, r5, r6, pc}
    f6f8:	7026      	strb	r6, [r4, #0]
    f6fa:	4630      	mov	r0, r6
    f6fc:	e7fa      	b.n	f6f4 <am_hal_burst_mode_enable+0x48>
    f6fe:	bf00      	nop
    f700:	1000c194 	.word	0x1000c194
    f704:	40004034 	.word	0x40004034

0000f708 <am_hal_cachectrl_config>:
    f708:	b530      	push	{r4, r5, lr}
    f70a:	b083      	sub	sp, #12
    f70c:	4605      	mov	r5, r0
    f70e:	f000 fbd9 	bl	fec4 <am_hal_interrupt_master_disable>
    f712:	4c0f      	ldr	r4, [pc, #60]	; (f750 <am_hal_cachectrl_config+0x48>)
    f714:	9001      	str	r0, [sp, #4]
    f716:	6823      	ldr	r3, [r4, #0]
    f718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f71c:	6023      	str	r3, [r4, #0]
    f71e:	9801      	ldr	r0, [sp, #4]
    f720:	f000 fbd4 	bl	fecc <am_hal_interrupt_master_set>
    f724:	78ab      	ldrb	r3, [r5, #2]
    f726:	782a      	ldrb	r2, [r5, #0]
    f728:	7869      	ldrb	r1, [r5, #1]
    f72a:	005b      	lsls	r3, r3, #1
    f72c:	0112      	lsls	r2, r2, #4
    f72e:	b2d2      	uxtb	r2, r2
    f730:	f003 0302 	and.w	r3, r3, #2
    f734:	4313      	orrs	r3, r2
    f736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f73a:	020a      	lsls	r2, r1, #8
    f73c:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f744:	4313      	orrs	r3, r2
    f746:	2000      	movs	r0, #0
    f748:	6023      	str	r3, [r4, #0]
    f74a:	b003      	add	sp, #12
    f74c:	bd30      	pop	{r4, r5, pc}
    f74e:	bf00      	nop
    f750:	40018000 	.word	0x40018000

0000f754 <am_hal_cachectrl_enable>:
    f754:	4a03      	ldr	r2, [pc, #12]	; (f764 <am_hal_cachectrl_enable+0x10>)
    f756:	6813      	ldr	r3, [r2, #0]
    f758:	f043 0301 	orr.w	r3, r3, #1
    f75c:	6013      	str	r3, [r2, #0]
    f75e:	2000      	movs	r0, #0
    f760:	4770      	bx	lr
    f762:	bf00      	nop
    f764:	40018000 	.word	0x40018000

0000f768 <am_hal_cachectrl_control>:
    f768:	b510      	push	{r4, lr}
    f76a:	3801      	subs	r0, #1
    f76c:	b08e      	sub	sp, #56	; 0x38
    f76e:	2810      	cmp	r0, #16
    f770:	f200 8143 	bhi.w	f9fa <am_hal_cachectrl_control+0x292>
    f774:	e8df f010 	tbh	[pc, r0, lsl #1]
    f778:	01380136 	.word	0x01380136
    f77c:	0011013e 	.word	0x0011013e
    f780:	001a0018 	.word	0x001a0018
    f784:	001f001c 	.word	0x001f001c
    f788:	00300022 	.word	0x00300022
    f78c:	0074003c 	.word	0x0074003c
    f790:	00e400ac 	.word	0x00e400ac
    f794:	011a00ff 	.word	0x011a00ff
    f798:	0120      	.short	0x0120
    f79a:	f44f 7208 	mov.w	r2, #544	; 0x220
    f79e:	4ba8      	ldr	r3, [pc, #672]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    f7a0:	2000      	movs	r0, #0
    f7a2:	609a      	str	r2, [r3, #8]
    f7a4:	b00e      	add	sp, #56	; 0x38
    f7a6:	bd10      	pop	{r4, pc}
    f7a8:	2240      	movs	r2, #64	; 0x40
    f7aa:	e7f8      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f7ac:	2220      	movs	r2, #32
    f7ae:	e7f6      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f7b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f7b4:	e7f3      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f7b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    f7ba:	e7f0      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f7bc:	f000 fb82 	bl	fec4 <am_hal_interrupt_master_disable>
    f7c0:	4a9f      	ldr	r2, [pc, #636]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    f7c2:	9000      	str	r0, [sp, #0]
    f7c4:	6813      	ldr	r3, [r2, #0]
    f7c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f7ca:	6013      	str	r3, [r2, #0]
    f7cc:	9800      	ldr	r0, [sp, #0]
    f7ce:	f000 fb7d 	bl	fecc <am_hal_interrupt_master_set>
    f7d2:	2000      	movs	r0, #0
    f7d4:	b00e      	add	sp, #56	; 0x38
    f7d6:	bd10      	pop	{r4, pc}
    f7d8:	f000 fb74 	bl	fec4 <am_hal_interrupt_master_disable>
    f7dc:	4a98      	ldr	r2, [pc, #608]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    f7de:	9001      	str	r0, [sp, #4]
    f7e0:	6813      	ldr	r3, [r2, #0]
    f7e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f7e6:	6013      	str	r3, [r2, #0]
    f7e8:	9801      	ldr	r0, [sp, #4]
    f7ea:	f000 fb6f 	bl	fecc <am_hal_interrupt_master_set>
    f7ee:	e7f0      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f7f0:	f000 fb68 	bl	fec4 <am_hal_interrupt_master_disable>
    f7f4:	4603      	mov	r3, r0
    f7f6:	4893      	ldr	r0, [pc, #588]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f7f8:	9302      	str	r3, [sp, #8]
    f7fa:	f000 fb55 	bl	fea8 <am_hal_flash_load_ui32>
    f7fe:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f802:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f806:	488f      	ldr	r0, [pc, #572]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f808:	f000 fb52 	bl	feb0 <am_hal_flash_store_ui32>
    f80c:	9802      	ldr	r0, [sp, #8]
    f80e:	f000 fb5d 	bl	fecc <am_hal_interrupt_master_set>
    f812:	f000 fb57 	bl	fec4 <am_hal_interrupt_master_disable>
    f816:	4603      	mov	r3, r0
    f818:	488a      	ldr	r0, [pc, #552]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f81a:	9303      	str	r3, [sp, #12]
    f81c:	f000 fb44 	bl	fea8 <am_hal_flash_load_ui32>
    f820:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f824:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    f828:	4886      	ldr	r0, [pc, #536]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f82a:	f000 fb41 	bl	feb0 <am_hal_flash_store_ui32>
    f82e:	9803      	ldr	r0, [sp, #12]
    f830:	f000 fb4c 	bl	fecc <am_hal_interrupt_master_set>
    f834:	f000 fb46 	bl	fec4 <am_hal_interrupt_master_disable>
    f838:	4603      	mov	r3, r0
    f83a:	4882      	ldr	r0, [pc, #520]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f83c:	9304      	str	r3, [sp, #16]
    f83e:	f000 fb33 	bl	fea8 <am_hal_flash_load_ui32>
    f842:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f846:	f021 010f 	bic.w	r1, r1, #15
    f84a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f84e:	f041 0103 	orr.w	r1, r1, #3
    f852:	487c      	ldr	r0, [pc, #496]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f854:	f000 fb2c 	bl	feb0 <am_hal_flash_store_ui32>
    f858:	9804      	ldr	r0, [sp, #16]
    f85a:	f000 fb37 	bl	fecc <am_hal_interrupt_master_set>
    f85e:	e7b8      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f860:	f000 fb30 	bl	fec4 <am_hal_interrupt_master_disable>
    f864:	4603      	mov	r3, r0
    f866:	4877      	ldr	r0, [pc, #476]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f868:	9305      	str	r3, [sp, #20]
    f86a:	f000 fb1d 	bl	fea8 <am_hal_flash_load_ui32>
    f86e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f872:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    f876:	4873      	ldr	r0, [pc, #460]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f878:	f000 fb1a 	bl	feb0 <am_hal_flash_store_ui32>
    f87c:	9805      	ldr	r0, [sp, #20]
    f87e:	f000 fb25 	bl	fecc <am_hal_interrupt_master_set>
    f882:	f000 fb1f 	bl	fec4 <am_hal_interrupt_master_disable>
    f886:	4603      	mov	r3, r0
    f888:	486e      	ldr	r0, [pc, #440]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f88a:	9306      	str	r3, [sp, #24]
    f88c:	f000 fb0c 	bl	fea8 <am_hal_flash_load_ui32>
    f890:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f894:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    f898:	486a      	ldr	r0, [pc, #424]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f89a:	f000 fb09 	bl	feb0 <am_hal_flash_store_ui32>
    f89e:	9806      	ldr	r0, [sp, #24]
    f8a0:	f000 fb14 	bl	fecc <am_hal_interrupt_master_set>
    f8a4:	f000 fb0e 	bl	fec4 <am_hal_interrupt_master_disable>
    f8a8:	4603      	mov	r3, r0
    f8aa:	4866      	ldr	r0, [pc, #408]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f8ac:	9307      	str	r3, [sp, #28]
    f8ae:	f000 fafb 	bl	fea8 <am_hal_flash_load_ui32>
    f8b2:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f8b6:	f021 010f 	bic.w	r1, r1, #15
    f8ba:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f8be:	f041 0101 	orr.w	r1, r1, #1
    f8c2:	4860      	ldr	r0, [pc, #384]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f8c4:	f000 faf4 	bl	feb0 <am_hal_flash_store_ui32>
    f8c8:	9807      	ldr	r0, [sp, #28]
    f8ca:	f000 faff 	bl	fecc <am_hal_interrupt_master_set>
    f8ce:	e780      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f8d0:	f000 faf8 	bl	fec4 <am_hal_interrupt_master_disable>
    f8d4:	4603      	mov	r3, r0
    f8d6:	485b      	ldr	r0, [pc, #364]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f8d8:	9308      	str	r3, [sp, #32]
    f8da:	f000 fae5 	bl	fea8 <am_hal_flash_load_ui32>
    f8de:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f8e2:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    f8e6:	4857      	ldr	r0, [pc, #348]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f8e8:	f000 fae2 	bl	feb0 <am_hal_flash_store_ui32>
    f8ec:	9808      	ldr	r0, [sp, #32]
    f8ee:	f000 faed 	bl	fecc <am_hal_interrupt_master_set>
    f8f2:	f000 fae7 	bl	fec4 <am_hal_interrupt_master_disable>
    f8f6:	4603      	mov	r3, r0
    f8f8:	4852      	ldr	r0, [pc, #328]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f8fa:	9309      	str	r3, [sp, #36]	; 0x24
    f8fc:	f000 fad4 	bl	fea8 <am_hal_flash_load_ui32>
    f900:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f904:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    f908:	484e      	ldr	r0, [pc, #312]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f90a:	f000 fad1 	bl	feb0 <am_hal_flash_store_ui32>
    f90e:	9809      	ldr	r0, [sp, #36]	; 0x24
    f910:	f000 fadc 	bl	fecc <am_hal_interrupt_master_set>
    f914:	f000 fad6 	bl	fec4 <am_hal_interrupt_master_disable>
    f918:	4603      	mov	r3, r0
    f91a:	484a      	ldr	r0, [pc, #296]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f91c:	930a      	str	r3, [sp, #40]	; 0x28
    f91e:	f000 fac3 	bl	fea8 <am_hal_flash_load_ui32>
    f922:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f926:	f021 010f 	bic.w	r1, r1, #15
    f92a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f92e:	f041 0101 	orr.w	r1, r1, #1
    f932:	4844      	ldr	r0, [pc, #272]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f934:	f000 fabc 	bl	feb0 <am_hal_flash_store_ui32>
    f938:	980a      	ldr	r0, [sp, #40]	; 0x28
    f93a:	f000 fac7 	bl	fecc <am_hal_interrupt_master_set>
    f93e:	e748      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f940:	2900      	cmp	r1, #0
    f942:	d05a      	beq.n	f9fa <am_hal_cachectrl_control+0x292>
    f944:	680c      	ldr	r4, [r1, #0]
    f946:	2c03      	cmp	r4, #3
    f948:	d834      	bhi.n	f9b4 <am_hal_cachectrl_control+0x24c>
    f94a:	f000 fabb 	bl	fec4 <am_hal_interrupt_master_disable>
    f94e:	4603      	mov	r3, r0
    f950:	483c      	ldr	r0, [pc, #240]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f952:	930b      	str	r3, [sp, #44]	; 0x2c
    f954:	f000 faa8 	bl	fea8 <am_hal_flash_load_ui32>
    f958:	0323      	lsls	r3, r4, #12
    f95a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    f95e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    f962:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f966:	4319      	orrs	r1, r3
    f968:	4836      	ldr	r0, [pc, #216]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f96a:	f000 faa1 	bl	feb0 <am_hal_flash_store_ui32>
    f96e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f970:	f000 faac 	bl	fecc <am_hal_interrupt_master_set>
    f974:	e72d      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f976:	2900      	cmp	r1, #0
    f978:	d03f      	beq.n	f9fa <am_hal_cachectrl_control+0x292>
    f97a:	680c      	ldr	r4, [r1, #0]
    f97c:	2c07      	cmp	r4, #7
    f97e:	d819      	bhi.n	f9b4 <am_hal_cachectrl_control+0x24c>
    f980:	f000 faa0 	bl	fec4 <am_hal_interrupt_master_disable>
    f984:	4603      	mov	r3, r0
    f986:	482f      	ldr	r0, [pc, #188]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f988:	930c      	str	r3, [sp, #48]	; 0x30
    f98a:	f000 fa8d 	bl	fea8 <am_hal_flash_load_ui32>
    f98e:	0123      	lsls	r3, r4, #4
    f990:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f994:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    f998:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f99c:	4319      	orrs	r1, r3
    f99e:	4829      	ldr	r0, [pc, #164]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    f9a0:	f000 fa86 	bl	feb0 <am_hal_flash_store_ui32>
    f9a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    f9a6:	f000 fa91 	bl	fecc <am_hal_interrupt_master_set>
    f9aa:	e712      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    f9ac:	b329      	cbz	r1, f9fa <am_hal_cachectrl_control+0x292>
    f9ae:	680c      	ldr	r4, [r1, #0]
    f9b0:	2c0f      	cmp	r4, #15
    f9b2:	d926      	bls.n	fa02 <am_hal_cachectrl_control+0x29a>
    f9b4:	2001      	movs	r0, #1
    f9b6:	e6f5      	b.n	f7a4 <am_hal_cachectrl_control+0x3c>
    f9b8:	b1f9      	cbz	r1, f9fa <am_hal_cachectrl_control+0x292>
    f9ba:	684a      	ldr	r2, [r1, #4]
    f9bc:	4b22      	ldr	r3, [pc, #136]	; (fa48 <am_hal_cachectrl_control+0x2e0>)
    f9be:	4013      	ands	r3, r2
    f9c0:	b9db      	cbnz	r3, f9fa <am_hal_cachectrl_control+0x292>
    f9c2:	688b      	ldr	r3, [r1, #8]
    f9c4:	4820      	ldr	r0, [pc, #128]	; (fa48 <am_hal_cachectrl_control+0x2e0>)
    f9c6:	4018      	ands	r0, r3
    f9c8:	b9b8      	cbnz	r0, f9fa <am_hal_cachectrl_control+0x292>
    f9ca:	780c      	ldrb	r4, [r1, #0]
    f9cc:	b374      	cbz	r4, fa2c <am_hal_cachectrl_control+0x2c4>
    f9ce:	2c01      	cmp	r4, #1
    f9d0:	d113      	bne.n	f9fa <am_hal_cachectrl_control+0x292>
    f9d2:	4c1b      	ldr	r4, [pc, #108]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    f9d4:	61a2      	str	r2, [r4, #24]
    f9d6:	61e3      	str	r3, [r4, #28]
    f9d8:	784a      	ldrb	r2, [r1, #1]
    f9da:	6823      	ldr	r3, [r4, #0]
    f9dc:	f362 03c3 	bfi	r3, r2, #3, #1
    f9e0:	6023      	str	r3, [r4, #0]
    f9e2:	e6df      	b.n	f7a4 <am_hal_cachectrl_control+0x3c>
    f9e4:	2201      	movs	r2, #1
    f9e6:	e6da      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f9e8:	4b15      	ldr	r3, [pc, #84]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    f9ea:	681b      	ldr	r3, [r3, #0]
    f9ec:	01db      	lsls	r3, r3, #7
    f9ee:	d406      	bmi.n	f9fe <am_hal_cachectrl_control+0x296>
    f9f0:	2007      	movs	r0, #7
    f9f2:	e6d7      	b.n	f7a4 <am_hal_cachectrl_control+0x3c>
    f9f4:	f44f 6288 	mov.w	r2, #1088	; 0x440
    f9f8:	e6d1      	b.n	f79e <am_hal_cachectrl_control+0x36>
    f9fa:	2006      	movs	r0, #6
    f9fc:	e6d2      	b.n	f7a4 <am_hal_cachectrl_control+0x3c>
    f9fe:	2202      	movs	r2, #2
    fa00:	e6cd      	b.n	f79e <am_hal_cachectrl_control+0x36>
    fa02:	f000 fa5f 	bl	fec4 <am_hal_interrupt_master_disable>
    fa06:	4603      	mov	r3, r0
    fa08:	480e      	ldr	r0, [pc, #56]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    fa0a:	930d      	str	r3, [sp, #52]	; 0x34
    fa0c:	f000 fa4c 	bl	fea8 <am_hal_flash_load_ui32>
    fa10:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    fa14:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    fa18:	f021 010f 	bic.w	r1, r1, #15
    fa1c:	4321      	orrs	r1, r4
    fa1e:	4809      	ldr	r0, [pc, #36]	; (fa44 <am_hal_cachectrl_control+0x2dc>)
    fa20:	f000 fa46 	bl	feb0 <am_hal_flash_store_ui32>
    fa24:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa26:	f000 fa51 	bl	fecc <am_hal_interrupt_master_set>
    fa2a:	e6d2      	b.n	f7d2 <am_hal_cachectrl_control+0x6a>
    fa2c:	4c04      	ldr	r4, [pc, #16]	; (fa40 <am_hal_cachectrl_control+0x2d8>)
    fa2e:	6122      	str	r2, [r4, #16]
    fa30:	6163      	str	r3, [r4, #20]
    fa32:	784a      	ldrb	r2, [r1, #1]
    fa34:	6823      	ldr	r3, [r4, #0]
    fa36:	f362 0382 	bfi	r3, r2, #2, #1
    fa3a:	6023      	str	r3, [r4, #0]
    fa3c:	e6b2      	b.n	f7a4 <am_hal_cachectrl_control+0x3c>
    fa3e:	bf00      	nop
    fa40:	40018000 	.word	0x40018000
    fa44:	40018004 	.word	0x40018004
    fa48:	f800000f 	.word	0xf800000f

0000fa4c <am_hal_clkgen_control>:
    fa4c:	4b41      	ldr	r3, [pc, #260]	; (fb54 <am_hal_clkgen_control+0x108>)
    fa4e:	681a      	ldr	r2, [r3, #0]
    fa50:	b912      	cbnz	r2, fa58 <am_hal_clkgen_control+0xc>
    fa52:	4a41      	ldr	r2, [pc, #260]	; (fb58 <am_hal_clkgen_control+0x10c>)
    fa54:	6812      	ldr	r2, [r2, #0]
    fa56:	601a      	str	r2, [r3, #0]
    fa58:	2809      	cmp	r0, #9
    fa5a:	d878      	bhi.n	fb4e <am_hal_clkgen_control+0x102>
    fa5c:	e8df f000 	tbb	[pc, r0]
    fa60:	261e160d 	.word	0x261e160d
    fa64:	524c423a 	.word	0x524c423a
    fa68:	055a      	.short	0x055a
    fa6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fa6e:	2000      	movs	r0, #0
    fa70:	6a1a      	ldr	r2, [r3, #32]
    fa72:	f36f 0200 	bfc	r2, #0, #1
    fa76:	621a      	str	r2, [r3, #32]
    fa78:	4770      	bx	lr
    fa7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fa7e:	2200      	movs	r2, #0
    fa80:	2147      	movs	r1, #71	; 0x47
    fa82:	6159      	str	r1, [r3, #20]
    fa84:	4610      	mov	r0, r2
    fa86:	619a      	str	r2, [r3, #24]
    fa88:	615a      	str	r2, [r3, #20]
    fa8a:	4770      	bx	lr
    fa8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa90:	2000      	movs	r0, #0
    fa92:	68d3      	ldr	r3, [r2, #12]
    fa94:	f023 0301 	bic.w	r3, r3, #1
    fa98:	60d3      	str	r3, [r2, #12]
    fa9a:	4770      	bx	lr
    fa9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    faa0:	2000      	movs	r0, #0
    faa2:	68d3      	ldr	r3, [r2, #12]
    faa4:	f023 0302 	bic.w	r3, r3, #2
    faa8:	60d3      	str	r3, [r2, #12]
    faaa:	4770      	bx	lr
    faac:	4a2b      	ldr	r2, [pc, #172]	; (fb5c <am_hal_clkgen_control+0x110>)
    faae:	68d3      	ldr	r3, [r2, #12]
    fab0:	b2db      	uxtb	r3, r3
    fab2:	2b21      	cmp	r3, #33	; 0x21
    fab4:	d106      	bne.n	fac4 <am_hal_clkgen_control+0x78>
    fab6:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    faba:	2101      	movs	r1, #1
    fabc:	f361 2309 	bfi	r3, r1, #8, #2
    fac0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    fac4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fac8:	2000      	movs	r0, #0
    faca:	68d3      	ldr	r3, [r2, #12]
    facc:	f043 0301 	orr.w	r3, r3, #1
    fad0:	60d3      	str	r3, [r2, #12]
    fad2:	4770      	bx	lr
    fad4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fad8:	2000      	movs	r0, #0
    fada:	68d3      	ldr	r3, [r2, #12]
    fadc:	f043 0302 	orr.w	r3, r3, #2
    fae0:	60d3      	str	r3, [r2, #12]
    fae2:	4770      	bx	lr
    fae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fae8:	2200      	movs	r2, #0
    faea:	2047      	movs	r0, #71	; 0x47
    faec:	2101      	movs	r1, #1
    faee:	6158      	str	r0, [r3, #20]
    faf0:	6199      	str	r1, [r3, #24]
    faf2:	4610      	mov	r0, r2
    faf4:	615a      	str	r2, [r3, #20]
    faf6:	4770      	bx	lr
    faf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fafc:	2000      	movs	r0, #0
    fafe:	68da      	ldr	r2, [r3, #12]
    fb00:	60da      	str	r2, [r3, #12]
    fb02:	4770      	bx	lr
    fb04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fb08:	2000      	movs	r0, #0
    fb0a:	68d3      	ldr	r3, [r2, #12]
    fb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fb10:	60d3      	str	r3, [r2, #12]
    fb12:	4770      	bx	lr
    fb14:	b510      	push	{r4, lr}
    fb16:	4a11      	ldr	r2, [pc, #68]	; (fb5c <am_hal_clkgen_control+0x110>)
    fb18:	68d3      	ldr	r3, [r2, #12]
    fb1a:	b2db      	uxtb	r3, r3
    fb1c:	2b21      	cmp	r3, #33	; 0x21
    fb1e:	460c      	mov	r4, r1
    fb20:	d008      	beq.n	fb34 <am_hal_clkgen_control+0xe8>
    fb22:	b194      	cbz	r4, fb4a <am_hal_clkgen_control+0xfe>
    fb24:	6823      	ldr	r3, [r4, #0]
    fb26:	f043 0301 	orr.w	r3, r3, #1
    fb2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fb2e:	2000      	movs	r0, #0
    fb30:	6213      	str	r3, [r2, #32]
    fb32:	bd10      	pop	{r4, pc}
    fb34:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    fb38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    fb3c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    fb40:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    fb44:	f000 f966 	bl	fe14 <am_hal_flash_delay>
    fb48:	e7eb      	b.n	fb22 <am_hal_clkgen_control+0xd6>
    fb4a:	4b05      	ldr	r3, [pc, #20]	; (fb60 <am_hal_clkgen_control+0x114>)
    fb4c:	e7ed      	b.n	fb2a <am_hal_clkgen_control+0xde>
    fb4e:	2006      	movs	r0, #6
    fb50:	4770      	bx	lr
    fb52:	bf00      	nop
    fb54:	1000c198 	.word	0x1000c198
    fb58:	4ffff000 	.word	0x4ffff000
    fb5c:	40020000 	.word	0x40020000
    fb60:	0025b801 	.word	0x0025b801

0000fb64 <am_hal_clkgen_status_get>:
    fb64:	b1a8      	cbz	r0, fb92 <am_hal_clkgen_status_get+0x2e>
    fb66:	b410      	push	{r4}
    fb68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fb6c:	490a      	ldr	r1, [pc, #40]	; (fb98 <am_hal_clkgen_status_get+0x34>)
    fb6e:	6994      	ldr	r4, [r2, #24]
    fb70:	4b0a      	ldr	r3, [pc, #40]	; (fb9c <am_hal_clkgen_status_get+0x38>)
    fb72:	f014 0f01 	tst.w	r4, #1
    fb76:	bf08      	it	eq
    fb78:	460b      	moveq	r3, r1
    fb7a:	6003      	str	r3, [r0, #0]
    fb7c:	69d3      	ldr	r3, [r2, #28]
    fb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    fb82:	f003 0201 	and.w	r2, r3, #1
    fb86:	f3c3 0340 	ubfx	r3, r3, #1, #1
    fb8a:	6042      	str	r2, [r0, #4]
    fb8c:	7203      	strb	r3, [r0, #8]
    fb8e:	2000      	movs	r0, #0
    fb90:	4770      	bx	lr
    fb92:	2006      	movs	r0, #6
    fb94:	4770      	bx	lr
    fb96:	bf00      	nop
    fb98:	02dc6c00 	.word	0x02dc6c00
    fb9c:	016e3600 	.word	0x016e3600

0000fba0 <am_hal_ctimer_config>:
    fba0:	b570      	push	{r4, r5, r6, lr}
    fba2:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    fba6:	2a00      	cmp	r2, #0
    fba8:	b082      	sub	sp, #8
    fbaa:	bf18      	it	ne
    fbac:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    fbb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    fbb4:	ea42 0403 	orr.w	r4, r2, r3
    fbb8:	460d      	mov	r5, r1
    fbba:	4606      	mov	r6, r0
    fbbc:	f000 f982 	bl	fec4 <am_hal_interrupt_master_disable>
    fbc0:	4b0d      	ldr	r3, [pc, #52]	; (fbf8 <am_hal_ctimer_config+0x58>)
    fbc2:	9001      	str	r0, [sp, #4]
    fbc4:	0172      	lsls	r2, r6, #5
    fbc6:	50d4      	str	r4, [r2, r3]
    fbc8:	9801      	ldr	r0, [sp, #4]
    fbca:	f000 f97f 	bl	fecc <am_hal_interrupt_master_set>
    fbce:	686b      	ldr	r3, [r5, #4]
    fbd0:	b90b      	cbnz	r3, fbd6 <am_hal_ctimer_config+0x36>
    fbd2:	682a      	ldr	r2, [r5, #0]
    fbd4:	b142      	cbz	r2, fbe8 <am_hal_ctimer_config+0x48>
    fbd6:	f3c3 0344 	ubfx	r3, r3, #1, #5
    fbda:	2100      	movs	r1, #0
    fbdc:	4a07      	ldr	r2, [pc, #28]	; (fbfc <am_hal_ctimer_config+0x5c>)
    fbde:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    fbe2:	5473      	strb	r3, [r6, r1]
    fbe4:	b002      	add	sp, #8
    fbe6:	bd70      	pop	{r4, r5, r6, pc}
    fbe8:	68ab      	ldr	r3, [r5, #8]
    fbea:	2b00      	cmp	r3, #0
    fbec:	d0fa      	beq.n	fbe4 <am_hal_ctimer_config+0x44>
    fbee:	f3c3 0344 	ubfx	r3, r3, #1, #5
    fbf2:	2101      	movs	r1, #1
    fbf4:	e7f2      	b.n	fbdc <am_hal_ctimer_config+0x3c>
    fbf6:	bf00      	nop
    fbf8:	4000800c 	.word	0x4000800c
    fbfc:	1000c034 	.word	0x1000c034

0000fc00 <am_hal_ctimer_config_single>:
    fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc02:	b083      	sub	sp, #12
    fc04:	460e      	mov	r6, r1
    fc06:	4614      	mov	r4, r2
    fc08:	0147      	lsls	r7, r0, #5
    fc0a:	4605      	mov	r5, r0
    fc0c:	f000 f95a 	bl	fec4 <am_hal_interrupt_master_disable>
    fc10:	4a19      	ldr	r2, [pc, #100]	; (fc78 <am_hal_ctimer_config_single+0x78>)
    fc12:	9001      	str	r0, [sp, #4]
    fc14:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    fc18:	58bb      	ldr	r3, [r7, r2]
    fc1a:	d021      	beq.n	fc60 <am_hal_ctimer_config_single+0x60>
    fc1c:	ea23 0306 	bic.w	r3, r3, r6
    fc20:	1c71      	adds	r1, r6, #1
    fc22:	ea43 0304 	orr.w	r3, r3, r4
    fc26:	d00c      	beq.n	fc42 <am_hal_ctimer_config_single+0x42>
    fc28:	50bb      	str	r3, [r7, r2]
    fc2a:	9801      	ldr	r0, [sp, #4]
    fc2c:	f000 f94e 	bl	fecc <am_hal_interrupt_master_set>
    fc30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc34:	429e      	cmp	r6, r3
    fc36:	d01c      	beq.n	fc72 <am_hal_ctimer_config_single+0x72>
    fc38:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    fc3c:	d017      	beq.n	fc6e <am_hal_ctimer_config_single+0x6e>
    fc3e:	b003      	add	sp, #12
    fc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fc46:	50bb      	str	r3, [r7, r2]
    fc48:	9801      	ldr	r0, [sp, #4]
    fc4a:	f000 f93f 	bl	fecc <am_hal_interrupt_master_set>
    fc4e:	2200      	movs	r2, #0
    fc50:	4b0a      	ldr	r3, [pc, #40]	; (fc7c <am_hal_ctimer_config_single+0x7c>)
    fc52:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    fc56:	f3c4 0444 	ubfx	r4, r4, #1, #5
    fc5a:	54ac      	strb	r4, [r5, r2]
    fc5c:	b003      	add	sp, #12
    fc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc60:	0424      	lsls	r4, r4, #16
    fc62:	b29b      	uxth	r3, r3
    fc64:	4323      	orrs	r3, r4
    fc66:	50bb      	str	r3, [r7, r2]
    fc68:	9801      	ldr	r0, [sp, #4]
    fc6a:	f000 f92f 	bl	fecc <am_hal_interrupt_master_set>
    fc6e:	2201      	movs	r2, #1
    fc70:	e7ee      	b.n	fc50 <am_hal_ctimer_config_single+0x50>
    fc72:	2200      	movs	r2, #0
    fc74:	e7ec      	b.n	fc50 <am_hal_ctimer_config_single+0x50>
    fc76:	bf00      	nop
    fc78:	4000800c 	.word	0x4000800c
    fc7c:	1000c034 	.word	0x1000c034

0000fc80 <am_hal_ctimer_start>:
    fc80:	b570      	push	{r4, r5, r6, lr}
    fc82:	b082      	sub	sp, #8
    fc84:	460c      	mov	r4, r1
    fc86:	0146      	lsls	r6, r0, #5
    fc88:	4605      	mov	r5, r0
    fc8a:	f000 f91b 	bl	fec4 <am_hal_interrupt_master_disable>
    fc8e:	4a0f      	ldr	r2, [pc, #60]	; (fccc <am_hal_ctimer_start+0x4c>)
    fc90:	9001      	str	r0, [sp, #4]
    fc92:	58b3      	ldr	r3, [r6, r2]
    fc94:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    fc98:	ea23 0301 	bic.w	r3, r3, r1
    fc9c:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    fca0:	430b      	orrs	r3, r1
    fca2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    fca6:	bf0c      	ite	eq
    fca8:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    fcac:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    fcb0:	50b3      	str	r3, [r6, r2]
    fcb2:	4b07      	ldr	r3, [pc, #28]	; (fcd0 <am_hal_ctimer_start+0x50>)
    fcb4:	9801      	ldr	r0, [sp, #4]
    fcb6:	bf0c      	ite	eq
    fcb8:	2101      	moveq	r1, #1
    fcba:	2100      	movne	r1, #0
    fcbc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    fcc0:	545c      	strb	r4, [r3, r1]
    fcc2:	f000 f903 	bl	fecc <am_hal_interrupt_master_set>
    fcc6:	b002      	add	sp, #8
    fcc8:	bd70      	pop	{r4, r5, r6, pc}
    fcca:	bf00      	nop
    fccc:	4000800c 	.word	0x4000800c
    fcd0:	1000c034 	.word	0x1000c034

0000fcd4 <am_hal_ctimer_clear>:
    fcd4:	b570      	push	{r4, r5, r6, lr}
    fcd6:	b082      	sub	sp, #8
    fcd8:	0146      	lsls	r6, r0, #5
    fcda:	460c      	mov	r4, r1
    fcdc:	f000 f8f2 	bl	fec4 <am_hal_interrupt_master_disable>
    fce0:	4d05      	ldr	r5, [pc, #20]	; (fcf8 <am_hal_ctimer_clear+0x24>)
    fce2:	9001      	str	r0, [sp, #4]
    fce4:	5973      	ldr	r3, [r6, r5]
    fce6:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    fcea:	4319      	orrs	r1, r3
    fcec:	5171      	str	r1, [r6, r5]
    fcee:	9801      	ldr	r0, [sp, #4]
    fcf0:	f000 f8ec 	bl	fecc <am_hal_interrupt_master_set>
    fcf4:	b002      	add	sp, #8
    fcf6:	bd70      	pop	{r4, r5, r6, pc}
    fcf8:	4000800c 	.word	0x4000800c

0000fcfc <am_hal_ctimer_period_set>:
    fcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd00:	b082      	sub	sp, #8
    fd02:	4689      	mov	r9, r1
    fd04:	4698      	mov	r8, r3
    fd06:	0147      	lsls	r7, r0, #5
    fd08:	4614      	mov	r4, r2
    fd0a:	f000 f8db 	bl	fec4 <am_hal_interrupt_master_disable>
    fd0e:	f8df a094 	ldr.w	sl, [pc, #148]	; fda4 <am_hal_ctimer_period_set+0xa8>
    fd12:	9001      	str	r0, [sp, #4]
    fd14:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    fd18:	4d20      	ldr	r5, [pc, #128]	; (fd9c <am_hal_ctimer_period_set+0xa0>)
    fd1a:	4e21      	ldr	r6, [pc, #132]	; (fda0 <am_hal_ctimer_period_set+0xa4>)
    fd1c:	f857 300a 	ldr.w	r3, [r7, sl]
    fd20:	d01a      	beq.n	fd58 <am_hal_ctimer_period_set+0x5c>
    fd22:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    fd26:	2b80      	cmp	r3, #128	; 0x80
    fd28:	d01b      	beq.n	fd62 <am_hal_ctimer_period_set+0x66>
    fd2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd2e:	2000      	movs	r0, #0
    fd30:	4591      	cmp	r9, r2
    fd32:	4603      	mov	r3, r0
    fd34:	d01e      	beq.n	fd74 <am_hal_ctimer_period_set+0x78>
    fd36:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    fd3a:	d025      	beq.n	fd88 <am_hal_ctimer_period_set+0x8c>
    fd3c:	0c1b      	lsrs	r3, r3, #16
    fd3e:	b2a2      	uxth	r2, r4
    fd40:	041b      	lsls	r3, r3, #16
    fd42:	4310      	orrs	r0, r2
    fd44:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    fd48:	5178      	str	r0, [r7, r5]
    fd4a:	51bb      	str	r3, [r7, r6]
    fd4c:	9801      	ldr	r0, [sp, #4]
    fd4e:	f000 f8bd 	bl	fecc <am_hal_interrupt_master_set>
    fd52:	b002      	add	sp, #8
    fd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd58:	0c1b      	lsrs	r3, r3, #16
    fd5a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    fd5e:	2b80      	cmp	r3, #128	; 0x80
    fd60:	d111      	bne.n	fd86 <am_hal_ctimer_period_set+0x8a>
    fd62:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd66:	4591      	cmp	r9, r2
    fd68:	ea4f 4004 	mov.w	r0, r4, lsl #16
    fd6c:	4623      	mov	r3, r4
    fd6e:	ebc8 0404 	rsb	r4, r8, r4
    fd72:	d1e0      	bne.n	fd36 <am_hal_ctimer_period_set+0x3a>
    fd74:	b2a3      	uxth	r3, r4
    fd76:	4318      	orrs	r0, r3
    fd78:	5178      	str	r0, [r7, r5]
    fd7a:	9801      	ldr	r0, [sp, #4]
    fd7c:	f000 f8a6 	bl	fecc <am_hal_interrupt_master_set>
    fd80:	b002      	add	sp, #8
    fd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd86:	2000      	movs	r0, #0
    fd88:	b2a3      	uxth	r3, r4
    fd8a:	4318      	orrs	r0, r3
    fd8c:	51b8      	str	r0, [r7, r6]
    fd8e:	9801      	ldr	r0, [sp, #4]
    fd90:	f000 f89c 	bl	fecc <am_hal_interrupt_master_set>
    fd94:	b002      	add	sp, #8
    fd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd9a:	bf00      	nop
    fd9c:	40008004 	.word	0x40008004
    fda0:	40008008 	.word	0x40008008
    fda4:	4000800c 	.word	0x4000800c

0000fda8 <am_hal_ctimer_adc_trigger_enable>:
    fda8:	b500      	push	{lr}
    fdaa:	b083      	sub	sp, #12
    fdac:	f000 f88a 	bl	fec4 <am_hal_interrupt_master_disable>
    fdb0:	4a05      	ldr	r2, [pc, #20]	; (fdc8 <am_hal_ctimer_adc_trigger_enable+0x20>)
    fdb2:	9001      	str	r0, [sp, #4]
    fdb4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    fdb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    fdba:	66d3      	str	r3, [r2, #108]	; 0x6c
    fdbc:	9801      	ldr	r0, [sp, #4]
    fdbe:	f000 f885 	bl	fecc <am_hal_interrupt_master_set>
    fdc2:	b003      	add	sp, #12
    fdc4:	f85d fb04 	ldr.w	pc, [sp], #4
    fdc8:	40008000 	.word	0x40008000

0000fdcc <am_hal_ctimer_int_enable>:
    fdcc:	b510      	push	{r4, lr}
    fdce:	b082      	sub	sp, #8
    fdd0:	4604      	mov	r4, r0
    fdd2:	f000 f877 	bl	fec4 <am_hal_interrupt_master_disable>
    fdd6:	4b06      	ldr	r3, [pc, #24]	; (fdf0 <am_hal_ctimer_int_enable+0x24>)
    fdd8:	9001      	str	r0, [sp, #4]
    fdda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fdde:	4314      	orrs	r4, r2
    fde0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    fde4:	9801      	ldr	r0, [sp, #4]
    fde6:	f000 f871 	bl	fecc <am_hal_interrupt_master_set>
    fdea:	b002      	add	sp, #8
    fdec:	bd10      	pop	{r4, pc}
    fdee:	bf00      	nop
    fdf0:	40008000 	.word	0x40008000

0000fdf4 <am_hal_ctimer_int_clear>:
    fdf4:	b510      	push	{r4, lr}
    fdf6:	b082      	sub	sp, #8
    fdf8:	4604      	mov	r4, r0
    fdfa:	f000 f863 	bl	fec4 <am_hal_interrupt_master_disable>
    fdfe:	4b04      	ldr	r3, [pc, #16]	; (fe10 <am_hal_ctimer_int_clear+0x1c>)
    fe00:	9001      	str	r0, [sp, #4]
    fe02:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    fe06:	9801      	ldr	r0, [sp, #4]
    fe08:	f000 f860 	bl	fecc <am_hal_interrupt_master_set>
    fe0c:	b002      	add	sp, #8
    fe0e:	bd10      	pop	{r4, pc}
    fe10:	40008000 	.word	0x40008000

0000fe14 <am_hal_flash_delay>:
    fe14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fe18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fe1a:	075b      	lsls	r3, r3, #29
    fe1c:	bf46      	itte	mi
    fe1e:	0040      	lslmi	r0, r0, #1
    fe20:	230e      	movmi	r3, #14
    fe22:	230b      	movpl	r3, #11
    fe24:	4298      	cmp	r0, r3
    fe26:	d800      	bhi.n	fe2a <am_hal_flash_delay+0x16>
    fe28:	4770      	bx	lr
    fe2a:	1ac0      	subs	r0, r0, r3
    fe2c:	4b00      	ldr	r3, [pc, #0]	; (fe30 <am_hal_flash_delay+0x1c>)
    fe2e:	4718      	bx	r3
    fe30:	0800009d 	.word	0x0800009d

0000fe34 <am_hal_flash_delay_status_check>:
    fe34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe38:	f89d 4020 	ldrb.w	r4, [sp, #32]
    fe3c:	460d      	mov	r5, r1
    fe3e:	4616      	mov	r6, r2
    fe40:	461f      	mov	r7, r3
    fe42:	b1b4      	cbz	r4, fe72 <am_hal_flash_delay_status_check+0x3e>
    fe44:	4604      	mov	r4, r0
    fe46:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    fe4a:	f8df 8058 	ldr.w	r8, [pc, #88]	; fea4 <am_hal_flash_delay_status_check+0x70>
    fe4e:	e009      	b.n	fe64 <am_hal_flash_delay_status_check+0x30>
    fe50:	b324      	cbz	r4, fe9c <am_hal_flash_delay_status_check+0x68>
    fe52:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    fe56:	f013 0f04 	tst.w	r3, #4
    fe5a:	bf14      	ite	ne
    fe5c:	2012      	movne	r0, #18
    fe5e:	2005      	moveq	r0, #5
    fe60:	3c01      	subs	r4, #1
    fe62:	47c0      	blx	r8
    fe64:	682b      	ldr	r3, [r5, #0]
    fe66:	4033      	ands	r3, r6
    fe68:	429f      	cmp	r7, r3
    fe6a:	d1f1      	bne.n	fe50 <am_hal_flash_delay_status_check+0x1c>
    fe6c:	2000      	movs	r0, #0
    fe6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe72:	f8df 8030 	ldr.w	r8, [pc, #48]	; fea4 <am_hal_flash_delay_status_check+0x70>
    fe76:	4604      	mov	r4, r0
    fe78:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    fe7c:	e009      	b.n	fe92 <am_hal_flash_delay_status_check+0x5e>
    fe7e:	b16c      	cbz	r4, fe9c <am_hal_flash_delay_status_check+0x68>
    fe80:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    fe84:	f013 0f04 	tst.w	r3, #4
    fe88:	bf14      	ite	ne
    fe8a:	2012      	movne	r0, #18
    fe8c:	2005      	moveq	r0, #5
    fe8e:	3c01      	subs	r4, #1
    fe90:	47c0      	blx	r8
    fe92:	682b      	ldr	r3, [r5, #0]
    fe94:	4033      	ands	r3, r6
    fe96:	429f      	cmp	r7, r3
    fe98:	d0f1      	beq.n	fe7e <am_hal_flash_delay_status_check+0x4a>
    fe9a:	e7e7      	b.n	fe6c <am_hal_flash_delay_status_check+0x38>
    fe9c:	2004      	movs	r0, #4
    fe9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fea2:	bf00      	nop
    fea4:	0800009d 	.word	0x0800009d

0000fea8 <am_hal_flash_load_ui32>:
    fea8:	4b00      	ldr	r3, [pc, #0]	; (feac <am_hal_flash_load_ui32+0x4>)
    feaa:	4718      	bx	r3
    feac:	08000075 	.word	0x08000075

0000feb0 <am_hal_flash_store_ui32>:
    feb0:	4b01      	ldr	r3, [pc, #4]	; (feb8 <am_hal_flash_store_ui32+0x8>)
    feb2:	f043 0301 	orr.w	r3, r3, #1
    feb6:	4718      	bx	r3
    feb8:	1000c044 	.word	0x1000c044

0000febc <am_hal_interrupt_master_enable>:
    febc:	f3ef 8010 	mrs	r0, PRIMASK
    fec0:	b662      	cpsie	i
    fec2:	4770      	bx	lr

0000fec4 <am_hal_interrupt_master_disable>:
    fec4:	f3ef 8010 	mrs	r0, PRIMASK
    fec8:	b672      	cpsid	i
    feca:	4770      	bx	lr

0000fecc <am_hal_interrupt_master_set>:
    fecc:	f380 8810 	msr	PRIMASK, r0
    fed0:	4770      	bx	lr
    fed2:	bf00      	nop

0000fed4 <am_hal_mcuctrl_info_get>:
    fed4:	b4f0      	push	{r4, r5, r6, r7}
    fed6:	b121      	cbz	r1, fee2 <am_hal_mcuctrl_info_get+0xe>
    fed8:	2801      	cmp	r0, #1
    feda:	d038      	beq.n	ff4e <am_hal_mcuctrl_info_get+0x7a>
    fedc:	d320      	bcc.n	ff20 <am_hal_mcuctrl_info_get+0x4c>
    fede:	2802      	cmp	r0, #2
    fee0:	d002      	beq.n	fee8 <am_hal_mcuctrl_info_get+0x14>
    fee2:	2006      	movs	r0, #6
    fee4:	bcf0      	pop	{r4, r5, r6, r7}
    fee6:	4770      	bx	lr
    fee8:	4a41      	ldr	r2, [pc, #260]	; (fff0 <am_hal_mcuctrl_info_get+0x11c>)
    feea:	684d      	ldr	r5, [r1, #4]
    feec:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    fef0:	694c      	ldr	r4, [r1, #20]
    fef2:	f003 0601 	and.w	r6, r3, #1
    fef6:	f3c3 0040 	ubfx	r0, r3, #1, #1
    fefa:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fefe:	700e      	strb	r6, [r1, #0]
    ff00:	7208      	strb	r0, [r1, #8]
    ff02:	740b      	strb	r3, [r1, #16]
    ff04:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    ff08:	60cb      	str	r3, [r1, #12]
    ff0a:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    ff0e:	4328      	orrs	r0, r5
    ff10:	6048      	str	r0, [r1, #4]
    ff12:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    ff16:	4323      	orrs	r3, r4
    ff18:	2000      	movs	r0, #0
    ff1a:	614b      	str	r3, [r1, #20]
    ff1c:	bcf0      	pop	{r4, r5, r6, r7}
    ff1e:	4770      	bx	lr
    ff20:	4a33      	ldr	r2, [pc, #204]	; (fff0 <am_hal_mcuctrl_info_get+0x11c>)
    ff22:	6993      	ldr	r3, [r2, #24]
    ff24:	f3c3 1080 	ubfx	r0, r3, #6, #1
    ff28:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ff2c:	7008      	strb	r0, [r1, #0]
    ff2e:	704b      	strb	r3, [r1, #1]
    ff30:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    ff34:	f3c3 6381 	ubfx	r3, r3, #26, #2
    ff38:	710b      	strb	r3, [r1, #4]
    ff3a:	6953      	ldr	r3, [r2, #20]
    ff3c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    ff40:	f003 0301 	and.w	r3, r3, #1
    ff44:	2000      	movs	r0, #0
    ff46:	708a      	strb	r2, [r1, #2]
    ff48:	70cb      	strb	r3, [r1, #3]
    ff4a:	bcf0      	pop	{r4, r5, r6, r7}
    ff4c:	4770      	bx	lr
    ff4e:	4b28      	ldr	r3, [pc, #160]	; (fff0 <am_hal_mcuctrl_info_get+0x11c>)
    ff50:	4c28      	ldr	r4, [pc, #160]	; (fff4 <am_hal_mcuctrl_info_get+0x120>)
    ff52:	681a      	ldr	r2, [r3, #0]
    ff54:	600a      	str	r2, [r1, #0]
    ff56:	6858      	ldr	r0, [r3, #4]
    ff58:	6048      	str	r0, [r1, #4]
    ff5a:	6898      	ldr	r0, [r3, #8]
    ff5c:	6088      	str	r0, [r1, #8]
    ff5e:	68d8      	ldr	r0, [r3, #12]
    ff60:	60c8      	str	r0, [r1, #12]
    ff62:	691d      	ldr	r5, [r3, #16]
    ff64:	4824      	ldr	r0, [pc, #144]	; (fff8 <am_hal_mcuctrl_info_get+0x124>)
    ff66:	610d      	str	r5, [r1, #16]
    ff68:	f3c2 5703 	ubfx	r7, r2, #20, #4
    ff6c:	f3c2 4603 	ubfx	r6, r2, #16, #4
    ff70:	695d      	ldr	r5, [r3, #20]
    ff72:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    ff76:	4b21      	ldr	r3, [pc, #132]	; (fffc <am_hal_mcuctrl_info_get+0x128>)
    ff78:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    ff7c:	6208      	str	r0, [r1, #32]
    ff7e:	f002 0201 	and.w	r2, r2, #1
    ff82:	614d      	str	r5, [r1, #20]
    ff84:	61cc      	str	r4, [r1, #28]
    ff86:	618a      	str	r2, [r1, #24]
    ff88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    ff8c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ff90:	b2d0      	uxtb	r0, r2
    ff92:	f004 020f 	and.w	r2, r4, #15
    ff96:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    ff9a:	624a      	str	r2, [r1, #36]	; 0x24
    ff9c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    ffa0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    ffa4:	f3c2 1003 	ubfx	r0, r2, #4, #4
    ffa8:	f004 020f 	and.w	r2, r4, #15
    ffac:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ffb0:	628a      	str	r2, [r1, #40]	; 0x28
    ffb2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    ffb6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ffba:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ffbe:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ffc2:	4302      	orrs	r2, r0
    ffc4:	62ca      	str	r2, [r1, #44]	; 0x2c
    ffc6:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    ffca:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ffce:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ffd2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ffd6:	b2c0      	uxtb	r0, r0
    ffd8:	0400      	lsls	r0, r0, #16
    ffda:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ffde:	b2d2      	uxtb	r2, r2
    ffe0:	431a      	orrs	r2, r3
    ffe2:	b2e3      	uxtb	r3, r4
    ffe4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ffe8:	630b      	str	r3, [r1, #48]	; 0x30
    ffea:	2000      	movs	r0, #0
    ffec:	bcf0      	pop	{r4, r5, r6, r7}
    ffee:	4770      	bx	lr
    fff0:	40020000 	.word	0x40020000
    fff4:	00011318 	.word	0x00011318
    fff8:	00011358 	.word	0x00011358
    fffc:	f0000f00 	.word	0xf0000f00

00010000 <am_hal_pwrctrl_periph_enable>:
   10000:	b570      	push	{r4, r5, r6, lr}
   10002:	b082      	sub	sp, #8
   10004:	4604      	mov	r4, r0
   10006:	f7ff ff5d 	bl	fec4 <am_hal_interrupt_master_disable>
   1000a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1000e:	4d0f      	ldr	r5, [pc, #60]	; (1004c <am_hal_pwrctrl_periph_enable+0x4c>)
   10010:	4e0f      	ldr	r6, [pc, #60]	; (10050 <am_hal_pwrctrl_periph_enable+0x50>)
   10012:	9001      	str	r0, [sp, #4]
   10014:	00a4      	lsls	r4, r4, #2
   10016:	68aa      	ldr	r2, [r5, #8]
   10018:	5933      	ldr	r3, [r6, r4]
   1001a:	4313      	orrs	r3, r2
   1001c:	60ab      	str	r3, [r5, #8]
   1001e:	9801      	ldr	r0, [sp, #4]
   10020:	4434      	add	r4, r6
   10022:	f7ff ff53 	bl	fecc <am_hal_interrupt_master_set>
   10026:	20a0      	movs	r0, #160	; 0xa0
   10028:	f7ff fef4 	bl	fe14 <am_hal_flash_delay>
   1002c:	69ab      	ldr	r3, [r5, #24]
   1002e:	6864      	ldr	r4, [r4, #4]
   10030:	4223      	tst	r3, r4
   10032:	d103      	bne.n	1003c <am_hal_pwrctrl_periph_enable+0x3c>
   10034:	20a0      	movs	r0, #160	; 0xa0
   10036:	f7ff feed 	bl	fe14 <am_hal_flash_delay>
   1003a:	69ab      	ldr	r3, [r5, #24]
   1003c:	4b03      	ldr	r3, [pc, #12]	; (1004c <am_hal_pwrctrl_periph_enable+0x4c>)
   1003e:	699b      	ldr	r3, [r3, #24]
   10040:	4223      	tst	r3, r4
   10042:	bf0c      	ite	eq
   10044:	2001      	moveq	r0, #1
   10046:	2000      	movne	r0, #0
   10048:	b002      	add	sp, #8
   1004a:	bd70      	pop	{r4, r5, r6, pc}
   1004c:	40021000 	.word	0x40021000
   10050:	00011398 	.word	0x00011398

00010054 <am_hal_pwrctrl_periph_disable>:
   10054:	b570      	push	{r4, r5, r6, lr}
   10056:	b082      	sub	sp, #8
   10058:	4604      	mov	r4, r0
   1005a:	f7ff ff33 	bl	fec4 <am_hal_interrupt_master_disable>
   1005e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10062:	4d10      	ldr	r5, [pc, #64]	; (100a4 <am_hal_pwrctrl_periph_disable+0x50>)
   10064:	4e10      	ldr	r6, [pc, #64]	; (100a8 <am_hal_pwrctrl_periph_disable+0x54>)
   10066:	9001      	str	r0, [sp, #4]
   10068:	00a4      	lsls	r4, r4, #2
   1006a:	68ab      	ldr	r3, [r5, #8]
   1006c:	5932      	ldr	r2, [r6, r4]
   1006e:	ea23 0302 	bic.w	r3, r3, r2
   10072:	60ab      	str	r3, [r5, #8]
   10074:	9801      	ldr	r0, [sp, #4]
   10076:	4434      	add	r4, r6
   10078:	f7ff ff28 	bl	fecc <am_hal_interrupt_master_set>
   1007c:	20a0      	movs	r0, #160	; 0xa0
   1007e:	f7ff fec9 	bl	fe14 <am_hal_flash_delay>
   10082:	69ab      	ldr	r3, [r5, #24]
   10084:	6864      	ldr	r4, [r4, #4]
   10086:	4223      	tst	r3, r4
   10088:	d003      	beq.n	10092 <am_hal_pwrctrl_periph_disable+0x3e>
   1008a:	20a0      	movs	r0, #160	; 0xa0
   1008c:	f7ff fec2 	bl	fe14 <am_hal_flash_delay>
   10090:	69ab      	ldr	r3, [r5, #24]
   10092:	4b04      	ldr	r3, [pc, #16]	; (100a4 <am_hal_pwrctrl_periph_disable+0x50>)
   10094:	699b      	ldr	r3, [r3, #24]
   10096:	4223      	tst	r3, r4
   10098:	bf14      	ite	ne
   1009a:	2001      	movne	r0, #1
   1009c:	2000      	moveq	r0, #0
   1009e:	b002      	add	sp, #8
   100a0:	bd70      	pop	{r4, r5, r6, pc}
   100a2:	bf00      	nop
   100a4:	40021000 	.word	0x40021000
   100a8:	00011398 	.word	0x00011398

000100ac <am_hal_pwrctrl_low_power_init>:
   100ac:	b530      	push	{r4, r5, lr}
   100ae:	4b33      	ldr	r3, [pc, #204]	; (1017c <am_hal_pwrctrl_low_power_init+0xd0>)
   100b0:	681a      	ldr	r2, [r3, #0]
   100b2:	b085      	sub	sp, #20
   100b4:	b912      	cbnz	r2, 100bc <am_hal_pwrctrl_low_power_init+0x10>
   100b6:	4a32      	ldr	r2, [pc, #200]	; (10180 <am_hal_pwrctrl_low_power_init+0xd4>)
   100b8:	6812      	ldr	r2, [r2, #0]
   100ba:	601a      	str	r2, [r3, #0]
   100bc:	4b31      	ldr	r3, [pc, #196]	; (10184 <am_hal_pwrctrl_low_power_init+0xd8>)
   100be:	68db      	ldr	r3, [r3, #12]
   100c0:	b2db      	uxtb	r3, r3
   100c2:	2b12      	cmp	r3, #18
   100c4:	d00a      	beq.n	100dc <am_hal_pwrctrl_low_power_init+0x30>
   100c6:	4c30      	ldr	r4, [pc, #192]	; (10188 <am_hal_pwrctrl_low_power_init+0xdc>)
   100c8:	2100      	movs	r1, #0
   100ca:	200c      	movs	r0, #12
   100cc:	f7ff fb4c 	bl	f768 <am_hal_cachectrl_control>
   100d0:	69a3      	ldr	r3, [r4, #24]
   100d2:	05d8      	lsls	r0, r3, #23
   100d4:	d520      	bpl.n	10118 <am_hal_pwrctrl_low_power_init+0x6c>
   100d6:	2000      	movs	r0, #0
   100d8:	b005      	add	sp, #20
   100da:	bd30      	pop	{r4, r5, pc}
   100dc:	4c2a      	ldr	r4, [pc, #168]	; (10188 <am_hal_pwrctrl_low_power_init+0xdc>)
   100de:	6863      	ldr	r3, [r4, #4]
   100e0:	07d9      	lsls	r1, r3, #31
   100e2:	d5f0      	bpl.n	100c6 <am_hal_pwrctrl_low_power_init+0x1a>
   100e4:	f7ff feee 	bl	fec4 <am_hal_interrupt_master_disable>
   100e8:	9003      	str	r0, [sp, #12]
   100ea:	68a3      	ldr	r3, [r4, #8]
   100ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   100f0:	60a3      	str	r3, [r4, #8]
   100f2:	9803      	ldr	r0, [sp, #12]
   100f4:	f7ff feea 	bl	fecc <am_hal_interrupt_master_set>
   100f8:	20a0      	movs	r0, #160	; 0xa0
   100fa:	f7ff fe8b 	bl	fe14 <am_hal_flash_delay>
   100fe:	69a3      	ldr	r3, [r4, #24]
   10100:	061a      	lsls	r2, r3, #24
   10102:	d403      	bmi.n	1010c <am_hal_pwrctrl_low_power_init+0x60>
   10104:	20a0      	movs	r0, #160	; 0xa0
   10106:	f7ff fe85 	bl	fe14 <am_hal_flash_delay>
   1010a:	69a3      	ldr	r3, [r4, #24]
   1010c:	4b1e      	ldr	r3, [pc, #120]	; (10188 <am_hal_pwrctrl_low_power_init+0xdc>)
   1010e:	699b      	ldr	r3, [r3, #24]
   10110:	061b      	lsls	r3, r3, #24
   10112:	d4d8      	bmi.n	100c6 <am_hal_pwrctrl_low_power_init+0x1a>
   10114:	2001      	movs	r0, #1
   10116:	e7df      	b.n	100d8 <am_hal_pwrctrl_low_power_init+0x2c>
   10118:	4d1a      	ldr	r5, [pc, #104]	; (10184 <am_hal_pwrctrl_low_power_init+0xd8>)
   1011a:	491c      	ldr	r1, [pc, #112]	; (1018c <am_hal_pwrctrl_low_power_init+0xe0>)
   1011c:	7e2a      	ldrb	r2, [r5, #24]
   1011e:	2001      	movs	r0, #1
   10120:	4302      	orrs	r2, r0
   10122:	2307      	movs	r3, #7
   10124:	762a      	strb	r2, [r5, #24]
   10126:	9000      	str	r0, [sp, #0]
   10128:	461a      	mov	r2, r3
   1012a:	f242 7010 	movw	r0, #10000	; 0x2710
   1012e:	f7ff fe81 	bl	fe34 <am_hal_flash_delay_status_check>
   10132:	b110      	cbz	r0, 1013a <am_hal_pwrctrl_low_power_init+0x8e>
   10134:	2004      	movs	r0, #4
   10136:	b005      	add	sp, #20
   10138:	bd30      	pop	{r4, r5, pc}
   1013a:	6823      	ldr	r3, [r4, #0]
   1013c:	f043 0301 	orr.w	r3, r3, #1
   10140:	6023      	str	r3, [r4, #0]
   10142:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10148:	6263      	str	r3, [r4, #36]	; 0x24
   1014a:	68eb      	ldr	r3, [r5, #12]
   1014c:	b2db      	uxtb	r3, r3
   1014e:	2b11      	cmp	r3, #17
   10150:	d1c1      	bne.n	100d6 <am_hal_pwrctrl_low_power_init+0x2a>
   10152:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   10156:	f360 5356 	bfi	r3, r0, #21, #2
   1015a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   1015e:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   10162:	220f      	movs	r2, #15
   10164:	f362 138b 	bfi	r3, r2, #6, #6
   10168:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   1016c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   10170:	f362 0305 	bfi	r3, r2, #0, #6
   10174:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   10178:	e7ae      	b.n	100d8 <am_hal_pwrctrl_low_power_init+0x2c>
   1017a:	bf00      	nop
   1017c:	1000c198 	.word	0x1000c198
   10180:	4ffff000 	.word	0x4ffff000
   10184:	40020000 	.word	0x40020000
   10188:	40021000 	.word	0x40021000
   1018c:	40020018 	.word	0x40020018

00010190 <am_hal_rtc_osc_disable>:
   10190:	4a03      	ldr	r2, [pc, #12]	; (101a0 <am_hal_rtc_osc_disable+0x10>)
   10192:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   10196:	f043 0310 	orr.w	r3, r3, #16
   1019a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   1019e:	4770      	bx	lr
   101a0:	40004200 	.word	0x40004200

000101a4 <am_hal_uart_initialize>:
   101a4:	2801      	cmp	r0, #1
   101a6:	d901      	bls.n	101ac <am_hal_uart_initialize+0x8>
   101a8:	2005      	movs	r0, #5
   101aa:	4770      	bx	lr
   101ac:	b169      	cbz	r1, 101ca <am_hal_uart_initialize+0x26>
   101ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   101b0:	2264      	movs	r2, #100	; 0x64
   101b2:	4e0e      	ldr	r6, [pc, #56]	; (101ec <am_hal_uart_initialize+0x48>)
   101b4:	fb02 f200 	mul.w	r2, r2, r0
   101b8:	18b4      	adds	r4, r6, r2
   101ba:	4603      	mov	r3, r0
   101bc:	78e0      	ldrb	r0, [r4, #3]
   101be:	f3c0 0700 	ubfx	r7, r0, #0, #1
   101c2:	b2fd      	uxtb	r5, r7
   101c4:	b11d      	cbz	r5, 101ce <am_hal_uart_initialize+0x2a>
   101c6:	2007      	movs	r0, #7
   101c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ca:	2006      	movs	r0, #6
   101cc:	4770      	bx	lr
   101ce:	f040 0001 	orr.w	r0, r0, #1
   101d2:	70e0      	strb	r0, [r4, #3]
   101d4:	58b0      	ldr	r0, [r6, r2]
   101d6:	f8df e018 	ldr.w	lr, [pc, #24]	; 101f0 <am_hal_uart_initialize+0x4c>
   101da:	f36e 0017 	bfi	r0, lr, #0, #24
   101de:	50b0      	str	r0, [r6, r2]
   101e0:	6263      	str	r3, [r4, #36]	; 0x24
   101e2:	7127      	strb	r7, [r4, #4]
   101e4:	6625      	str	r5, [r4, #96]	; 0x60
   101e6:	4628      	mov	r0, r5
   101e8:	600c      	str	r4, [r1, #0]
   101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ec:	1002bf00 	.word	0x1002bf00
   101f0:	00ea9e06 	.word	0x00ea9e06

000101f4 <am_hal_uart_power_control>:
   101f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   101f8:	6804      	ldr	r4, [r0, #0]
   101fa:	4b36      	ldr	r3, [pc, #216]	; (102d4 <am_hal_uart_power_control+0xe0>)
   101fc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   10200:	429c      	cmp	r4, r3
   10202:	b083      	sub	sp, #12
   10204:	d003      	beq.n	1020e <am_hal_uart_power_control+0x1a>
   10206:	2002      	movs	r0, #2
   10208:	b003      	add	sp, #12
   1020a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1020e:	6a47      	ldr	r7, [r0, #36]	; 0x24
   10210:	4605      	mov	r5, r0
   10212:	f107 0008 	add.w	r0, r7, #8
   10216:	4691      	mov	r9, r2
   10218:	460e      	mov	r6, r1
   1021a:	fa5f f880 	uxtb.w	r8, r0
   1021e:	b181      	cbz	r1, 10242 <am_hal_uart_power_control+0x4e>
   10220:	2902      	cmp	r1, #2
   10222:	d80c      	bhi.n	1023e <am_hal_uart_power_control+0x4a>
   10224:	b992      	cbnz	r2, 1024c <am_hal_uart_power_control+0x58>
   10226:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   1022a:	371c      	adds	r7, #28
   1022c:	033f      	lsls	r7, r7, #12
   1022e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10232:	647b      	str	r3, [r7, #68]	; 0x44
   10234:	4640      	mov	r0, r8
   10236:	f7ff ff0d 	bl	10054 <am_hal_pwrctrl_periph_disable>
   1023a:	2000      	movs	r0, #0
   1023c:	e7e4      	b.n	10208 <am_hal_uart_power_control+0x14>
   1023e:	2006      	movs	r0, #6
   10240:	e7e2      	b.n	10208 <am_hal_uart_power_control+0x14>
   10242:	b322      	cbz	r2, 1028e <am_hal_uart_power_control+0x9a>
   10244:	792b      	ldrb	r3, [r5, #4]
   10246:	bb3b      	cbnz	r3, 10298 <am_hal_uart_power_control+0xa4>
   10248:	2007      	movs	r0, #7
   1024a:	e7dd      	b.n	10208 <am_hal_uart_power_control+0x14>
   1024c:	f7ff fe3a 	bl	fec4 <am_hal_interrupt_master_disable>
   10250:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   10254:	331c      	adds	r3, #28
   10256:	031b      	lsls	r3, r3, #12
   10258:	9001      	str	r0, [sp, #4]
   1025a:	6a1a      	ldr	r2, [r3, #32]
   1025c:	60aa      	str	r2, [r5, #8]
   1025e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10260:	60ea      	str	r2, [r5, #12]
   10262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10264:	612a      	str	r2, [r5, #16]
   10266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10268:	616a      	str	r2, [r5, #20]
   1026a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1026c:	61aa      	str	r2, [r5, #24]
   1026e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10270:	61ea      	str	r2, [r5, #28]
   10272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10274:	622b      	str	r3, [r5, #32]
   10276:	2301      	movs	r3, #1
   10278:	712b      	strb	r3, [r5, #4]
   1027a:	9801      	ldr	r0, [sp, #4]
   1027c:	f7ff fe26 	bl	fecc <am_hal_interrupt_master_set>
   10280:	682b      	ldr	r3, [r5, #0]
   10282:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10286:	42a3      	cmp	r3, r4
   10288:	d1d4      	bne.n	10234 <am_hal_uart_power_control+0x40>
   1028a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1028c:	e7cb      	b.n	10226 <am_hal_uart_power_control+0x32>
   1028e:	4640      	mov	r0, r8
   10290:	f7ff feb6 	bl	10000 <am_hal_pwrctrl_periph_enable>
   10294:	4648      	mov	r0, r9
   10296:	e7b7      	b.n	10208 <am_hal_uart_power_control+0x14>
   10298:	4640      	mov	r0, r8
   1029a:	f7ff feb1 	bl	10000 <am_hal_pwrctrl_periph_enable>
   1029e:	f7ff fe11 	bl	fec4 <am_hal_interrupt_master_disable>
   102a2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   102a6:	331c      	adds	r3, #28
   102a8:	031b      	lsls	r3, r3, #12
   102aa:	68aa      	ldr	r2, [r5, #8]
   102ac:	9000      	str	r0, [sp, #0]
   102ae:	621a      	str	r2, [r3, #32]
   102b0:	68ea      	ldr	r2, [r5, #12]
   102b2:	625a      	str	r2, [r3, #36]	; 0x24
   102b4:	692a      	ldr	r2, [r5, #16]
   102b6:	629a      	str	r2, [r3, #40]	; 0x28
   102b8:	696a      	ldr	r2, [r5, #20]
   102ba:	62da      	str	r2, [r3, #44]	; 0x2c
   102bc:	69aa      	ldr	r2, [r5, #24]
   102be:	631a      	str	r2, [r3, #48]	; 0x30
   102c0:	69ea      	ldr	r2, [r5, #28]
   102c2:	635a      	str	r2, [r3, #52]	; 0x34
   102c4:	6a2a      	ldr	r2, [r5, #32]
   102c6:	639a      	str	r2, [r3, #56]	; 0x38
   102c8:	9800      	ldr	r0, [sp, #0]
   102ca:	712e      	strb	r6, [r5, #4]
   102cc:	f7ff fdfe 	bl	fecc <am_hal_interrupt_master_set>
   102d0:	4630      	mov	r0, r6
   102d2:	e799      	b.n	10208 <am_hal_uart_power_control+0x14>
   102d4:	01ea9e06 	.word	0x01ea9e06

000102d8 <am_hal_uart_configure>:
   102d8:	6803      	ldr	r3, [r0, #0]
   102da:	4a84      	ldr	r2, [pc, #528]	; (104ec <am_hal_uart_configure+0x214>)
   102dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   102e0:	4293      	cmp	r3, r2
   102e2:	d001      	beq.n	102e8 <am_hal_uart_configure+0x10>
   102e4:	2002      	movs	r0, #2
   102e6:	4770      	bx	lr
   102e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
   102ee:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   102f2:	351c      	adds	r5, #28
   102f4:	032d      	lsls	r5, r5, #12
   102f6:	2700      	movs	r7, #0
   102f8:	b084      	sub	sp, #16
   102fa:	632f      	str	r7, [r5, #48]	; 0x30
   102fc:	460e      	mov	r6, r1
   102fe:	4604      	mov	r4, r0
   10300:	f7ff fde0 	bl	fec4 <am_hal_interrupt_master_disable>
   10304:	9001      	str	r0, [sp, #4]
   10306:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10308:	f043 0308 	orr.w	r3, r3, #8
   1030c:	862b      	strh	r3, [r5, #48]	; 0x30
   1030e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10310:	2201      	movs	r2, #1
   10312:	f362 1306 	bfi	r3, r2, #4, #3
   10316:	862b      	strh	r3, [r5, #48]	; 0x30
   10318:	9801      	ldr	r0, [sp, #4]
   1031a:	f7ff fdd7 	bl	fecc <am_hal_interrupt_master_set>
   1031e:	f7ff fdd1 	bl	fec4 <am_hal_interrupt_master_disable>
   10322:	9002      	str	r0, [sp, #8]
   10324:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10326:	f367 0300 	bfi	r3, r7, #0, #1
   1032a:	862b      	strh	r3, [r5, #48]	; 0x30
   1032c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1032e:	f367 2349 	bfi	r3, r7, #9, #1
   10332:	862b      	strh	r3, [r5, #48]	; 0x30
   10334:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10336:	f367 2308 	bfi	r3, r7, #8, #1
   1033a:	862b      	strh	r3, [r5, #48]	; 0x30
   1033c:	9802      	ldr	r0, [sp, #8]
   1033e:	f7ff fdc5 	bl	fecc <am_hal_interrupt_master_set>
   10342:	4a6b      	ldr	r2, [pc, #428]	; (104f0 <am_hal_uart_configure+0x218>)
   10344:	6833      	ldr	r3, [r6, #0]
   10346:	68d2      	ldr	r2, [r2, #12]
   10348:	b2d2      	uxtb	r2, r2
   1034a:	2a12      	cmp	r2, #18
   1034c:	d00b      	beq.n	10366 <am_hal_uart_configure+0x8e>
   1034e:	4a68      	ldr	r2, [pc, #416]	; (104f0 <am_hal_uart_configure+0x218>)
   10350:	68d2      	ldr	r2, [r2, #12]
   10352:	b2d2      	uxtb	r2, r2
   10354:	2a20      	cmp	r2, #32
   10356:	d90a      	bls.n	1036e <am_hal_uart_configure+0x96>
   10358:	4a66      	ldr	r2, [pc, #408]	; (104f4 <am_hal_uart_configure+0x21c>)
   1035a:	4293      	cmp	r3, r2
   1035c:	d907      	bls.n	1036e <am_hal_uart_configure+0x96>
   1035e:	4866      	ldr	r0, [pc, #408]	; (104f8 <am_hal_uart_configure+0x220>)
   10360:	b004      	add	sp, #16
   10362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10366:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1036a:	d8f8      	bhi.n	1035e <am_hal_uart_configure+0x86>
   1036c:	e7ef      	b.n	1034e <am_hal_uart_configure+0x76>
   1036e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   10370:	f3c2 1202 	ubfx	r2, r2, #4, #3
   10374:	3a01      	subs	r2, #1
   10376:	2a03      	cmp	r2, #3
   10378:	d852      	bhi.n	10420 <am_hal_uart_configure+0x148>
   1037a:	e8df f002 	tbb	[pc, r2]
   1037e:	020f      	.short	0x020f
   10380:	1215      	.short	0x1215
   10382:	4a5e      	ldr	r2, [pc, #376]	; (104fc <am_hal_uart_configure+0x224>)
   10384:	495e      	ldr	r1, [pc, #376]	; (10500 <am_hal_uart_configure+0x228>)
   10386:	011b      	lsls	r3, r3, #4
   10388:	fbb2 f2f3 	udiv	r2, r2, r3
   1038c:	fbb1 f3f3 	udiv	r3, r1, r3
   10390:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
   10394:	b95b      	cbnz	r3, 103ae <am_hal_uart_configure+0xd6>
   10396:	6623      	str	r3, [r4, #96]	; 0x60
   10398:	4857      	ldr	r0, [pc, #348]	; (104f8 <am_hal_uart_configure+0x220>)
   1039a:	e7e1      	b.n	10360 <am_hal_uart_configure+0x88>
   1039c:	4a59      	ldr	r2, [pc, #356]	; (10504 <am_hal_uart_configure+0x22c>)
   1039e:	495a      	ldr	r1, [pc, #360]	; (10508 <am_hal_uart_configure+0x230>)
   103a0:	e7f1      	b.n	10386 <am_hal_uart_configure+0xae>
   103a2:	4a5a      	ldr	r2, [pc, #360]	; (1050c <am_hal_uart_configure+0x234>)
   103a4:	495a      	ldr	r1, [pc, #360]	; (10510 <am_hal_uart_configure+0x238>)
   103a6:	e7ee      	b.n	10386 <am_hal_uart_configure+0xae>
   103a8:	4a5a      	ldr	r2, [pc, #360]	; (10514 <am_hal_uart_configure+0x23c>)
   103aa:	495b      	ldr	r1, [pc, #364]	; (10518 <am_hal_uart_configure+0x240>)
   103ac:	e7eb      	b.n	10386 <am_hal_uart_configure+0xae>
   103ae:	0890      	lsrs	r0, r2, #2
   103b0:	626b      	str	r3, [r5, #36]	; 0x24
   103b2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   103b6:	626b      	str	r3, [r5, #36]	; 0x24
   103b8:	fbb1 f1f0 	udiv	r1, r1, r0
   103bc:	62aa      	str	r2, [r5, #40]	; 0x28
   103be:	6621      	str	r1, [r4, #96]	; 0x60
   103c0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   103c2:	f36f 338e 	bfc	r3, #14, #1
   103c6:	862b      	strh	r3, [r5, #48]	; 0x30
   103c8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   103ca:	f36f 33cf 	bfc	r3, #15, #1
   103ce:	862b      	strh	r3, [r5, #48]	; 0x30
   103d0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   103d2:	6933      	ldr	r3, [r6, #16]
   103d4:	4313      	orrs	r3, r2
   103d6:	632b      	str	r3, [r5, #48]	; 0x30
   103d8:	6973      	ldr	r3, [r6, #20]
   103da:	636b      	str	r3, [r5, #52]	; 0x34
   103dc:	6871      	ldr	r1, [r6, #4]
   103de:	68b3      	ldr	r3, [r6, #8]
   103e0:	68f2      	ldr	r2, [r6, #12]
   103e2:	430b      	orrs	r3, r1
   103e4:	f043 0310 	orr.w	r3, r3, #16
   103e8:	4313      	orrs	r3, r2
   103ea:	62eb      	str	r3, [r5, #44]	; 0x2c
   103ec:	f7ff fd6a 	bl	fec4 <am_hal_interrupt_master_disable>
   103f0:	9003      	str	r0, [sp, #12]
   103f2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   103f4:	f043 0301 	orr.w	r3, r3, #1
   103f8:	862b      	strh	r3, [r5, #48]	; 0x30
   103fa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   103fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10400:	862b      	strh	r3, [r5, #48]	; 0x30
   10402:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10408:	862b      	strh	r3, [r5, #48]	; 0x30
   1040a:	9803      	ldr	r0, [sp, #12]
   1040c:	f7ff fd5e 	bl	fecc <am_hal_interrupt_master_set>
   10410:	6825      	ldr	r5, [r4, #0]
   10412:	4b36      	ldr	r3, [pc, #216]	; (104ec <am_hal_uart_configure+0x214>)
   10414:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   10418:	429d      	cmp	r5, r3
   1041a:	d005      	beq.n	10428 <am_hal_uart_configure+0x150>
   1041c:	2000      	movs	r0, #0
   1041e:	e79f      	b.n	10360 <am_hal_uart_configure+0x88>
   10420:	2300      	movs	r3, #0
   10422:	6623      	str	r3, [r4, #96]	; 0x60
   10424:	483d      	ldr	r0, [pc, #244]	; (1051c <am_hal_uart_configure+0x244>)
   10426:	e79b      	b.n	10360 <am_hal_uart_configure+0x88>
   10428:	69b1      	ldr	r1, [r6, #24]
   1042a:	6a37      	ldr	r7, [r6, #32]
   1042c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   10430:	b109      	cbz	r1, 10436 <am_hal_uart_configure+0x15e>
   10432:	69f3      	ldr	r3, [r6, #28]
   10434:	bb3b      	cbnz	r3, 10486 <am_hal_uart_configure+0x1ae>
   10436:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10438:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1043c:	f103 021c 	add.w	r2, r3, #28
   10440:	0312      	lsls	r2, r2, #12
   10442:	2100      	movs	r1, #0
   10444:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   10448:	6b91      	ldr	r1, [r2, #56]	; 0x38
   1044a:	f021 0120 	bic.w	r1, r1, #32
   1044e:	6391      	str	r1, [r2, #56]	; 0x38
   10450:	b1b7      	cbz	r7, 10480 <am_hal_uart_configure+0x1a8>
   10452:	f1b8 0f00 	cmp.w	r8, #0
   10456:	d12e      	bne.n	104b6 <am_hal_uart_configure+0x1de>
   10458:	6823      	ldr	r3, [r4, #0]
   1045a:	4a24      	ldr	r2, [pc, #144]	; (104ec <am_hal_uart_configure+0x214>)
   1045c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10460:	2100      	movs	r1, #0
   10462:	4293      	cmp	r3, r2
   10464:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
   10468:	d1d8      	bne.n	1041c <am_hal_uart_configure+0x144>
   1046a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1046c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10470:	331c      	adds	r3, #28
   10472:	031b      	lsls	r3, r3, #12
   10474:	2000      	movs	r0, #0
   10476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10478:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   1047c:	639a      	str	r2, [r3, #56]	; 0x38
   1047e:	e76f      	b.n	10360 <am_hal_uart_configure+0x88>
   10480:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
   10484:	e7f4      	b.n	10470 <am_hal_uart_configure+0x198>
   10486:	2201      	movs	r2, #1
   10488:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   1048c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   10490:	f000 fa80 	bl	10994 <am_hal_queue_init>
   10494:	6823      	ldr	r3, [r4, #0]
   10496:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1049a:	42ab      	cmp	r3, r5
   1049c:	d1be      	bne.n	1041c <am_hal_uart_configure+0x144>
   1049e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   104a0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   104a4:	331c      	adds	r3, #28
   104a6:	031b      	lsls	r3, r3, #12
   104a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   104aa:	f042 0220 	orr.w	r2, r2, #32
   104ae:	639a      	str	r2, [r3, #56]	; 0x38
   104b0:	2f00      	cmp	r7, #0
   104b2:	d1ce      	bne.n	10452 <am_hal_uart_configure+0x17a>
   104b4:	e7d0      	b.n	10458 <am_hal_uart_configure+0x180>
   104b6:	2201      	movs	r2, #1
   104b8:	4643      	mov	r3, r8
   104ba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   104be:	4639      	mov	r1, r7
   104c0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   104c4:	f000 fa66 	bl	10994 <am_hal_queue_init>
   104c8:	6823      	ldr	r3, [r4, #0]
   104ca:	4a08      	ldr	r2, [pc, #32]	; (104ec <am_hal_uart_configure+0x214>)
   104cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   104d0:	4293      	cmp	r3, r2
   104d2:	d1a3      	bne.n	1041c <am_hal_uart_configure+0x144>
   104d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   104d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   104da:	331c      	adds	r3, #28
   104dc:	031b      	lsls	r3, r3, #12
   104de:	2000      	movs	r0, #0
   104e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   104e2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   104e6:	639a      	str	r2, [r3, #56]	; 0x38
   104e8:	e73a      	b.n	10360 <am_hal_uart_configure+0x88>
   104ea:	bf00      	nop
   104ec:	01ea9e06 	.word	0x01ea9e06
   104f0:	40020000 	.word	0x40020000
   104f4:	0016e360 	.word	0x0016e360
   104f8:	08000003 	.word	0x08000003
   104fc:	2dc6c000 	.word	0x2dc6c000
   10500:	00b71b00 	.word	0x00b71b00
   10504:	5b8d8000 	.word	0x5b8d8000
   10508:	016e3600 	.word	0x016e3600
   1050c:	0b71b000 	.word	0x0b71b000
   10510:	002dc6c0 	.word	0x002dc6c0
   10514:	16e36000 	.word	0x16e36000
   10518:	005b8d80 	.word	0x005b8d80
   1051c:	08000002 	.word	0x08000002

00010520 <am_hal_uart_transfer>:
   10520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10524:	680f      	ldr	r7, [r1, #0]
   10526:	b091      	sub	sp, #68	; 0x44
   10528:	4605      	mov	r5, r0
   1052a:	b13f      	cbz	r7, 1053c <am_hal_uart_transfer+0x1c>
   1052c:	2f01      	cmp	r7, #1
   1052e:	bf18      	it	ne
   10530:	2707      	movne	r7, #7
   10532:	d024      	beq.n	1057e <am_hal_uart_transfer+0x5e>
   10534:	4638      	mov	r0, r7
   10536:	b011      	add	sp, #68	; 0x44
   10538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1053c:	f8d1 900c 	ldr.w	r9, [r1, #12]
   10540:	690b      	ldr	r3, [r1, #16]
   10542:	f8d1 a004 	ldr.w	sl, [r1, #4]
   10546:	688e      	ldr	r6, [r1, #8]
   10548:	9300      	str	r3, [sp, #0]
   1054a:	f1b9 0f00 	cmp.w	r9, #0
   1054e:	d031      	beq.n	105b4 <am_hal_uart_transfer+0x94>
   10550:	2e00      	cmp	r6, #0
   10552:	f000 819c 	beq.w	1088e <am_hal_uart_transfer+0x36e>
   10556:	2800      	cmp	r0, #0
   10558:	f000 8097 	beq.w	1068a <am_hal_uart_transfer+0x16a>
   1055c:	6803      	ldr	r3, [r0, #0]
   1055e:	4aa9      	ldr	r2, [pc, #676]	; (10804 <am_hal_uart_transfer+0x2e4>)
   10560:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10564:	4293      	cmp	r3, r2
   10566:	f000 8092 	beq.w	1068e <am_hal_uart_transfer+0x16e>
   1056a:	46b8      	mov	r8, r7
   1056c:	9b00      	ldr	r3, [sp, #0]
   1056e:	b10b      	cbz	r3, 10574 <am_hal_uart_transfer+0x54>
   10570:	f8c3 8000 	str.w	r8, [r3]
   10574:	2702      	movs	r7, #2
   10576:	4638      	mov	r0, r7
   10578:	b011      	add	sp, #68	; 0x44
   1057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1057e:	1d0b      	adds	r3, r1, #4
   10580:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
   10584:	f1b9 0f00 	cmp.w	r9, #0
   10588:	d043      	beq.n	10612 <am_hal_uart_transfer+0xf2>
   1058a:	2f00      	cmp	r7, #0
   1058c:	f000 8185 	beq.w	1089a <am_hal_uart_transfer+0x37a>
   10590:	2800      	cmp	r0, #0
   10592:	f000 80eb 	beq.w	1076c <am_hal_uart_transfer+0x24c>
   10596:	6802      	ldr	r2, [r0, #0]
   10598:	499a      	ldr	r1, [pc, #616]	; (10804 <am_hal_uart_transfer+0x2e4>)
   1059a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1059e:	428a      	cmp	r2, r1
   105a0:	f000 80e7 	beq.w	10772 <am_hal_uart_transfer+0x252>
   105a4:	2600      	movs	r6, #0
   105a6:	2702      	movs	r7, #2
   105a8:	f1bb 0f00 	cmp.w	fp, #0
   105ac:	d0c2      	beq.n	10534 <am_hal_uart_transfer+0x14>
   105ae:	f8cb 6000 	str.w	r6, [fp]
   105b2:	e7bf      	b.n	10534 <am_hal_uart_transfer+0x14>
   105b4:	2800      	cmp	r0, #0
   105b6:	d0dd      	beq.n	10574 <am_hal_uart_transfer+0x54>
   105b8:	6803      	ldr	r3, [r0, #0]
   105ba:	4a92      	ldr	r2, [pc, #584]	; (10804 <am_hal_uart_transfer+0x2e4>)
   105bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   105c0:	4293      	cmp	r3, r2
   105c2:	d1d7      	bne.n	10574 <am_hal_uart_transfer+0x54>
   105c4:	9b00      	ldr	r3, [sp, #0]
   105c6:	b10b      	cbz	r3, 105cc <am_hal_uart_transfer+0xac>
   105c8:	f8c3 9000 	str.w	r9, [r3]
   105cc:	b1fe      	cbz	r6, 1060e <am_hal_uart_transfer+0xee>
   105ce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   105d2:	2b00      	cmp	r3, #0
   105d4:	f040 8165 	bne.w	108a2 <am_hal_uart_transfer+0x382>
   105d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   105da:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   105de:	311c      	adds	r1, #28
   105e0:	0309      	lsls	r1, r1, #12
   105e2:	698a      	ldr	r2, [r1, #24]
   105e4:	f3c2 1240 	ubfx	r2, r2, #5, #1
   105e8:	2a00      	cmp	r2, #0
   105ea:	f040 818d 	bne.w	10908 <am_hal_uart_transfer+0x3e8>
   105ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   105f2:	e003      	b.n	105fc <am_hal_uart_transfer+0xdc>
   105f4:	6988      	ldr	r0, [r1, #24]
   105f6:	0680      	lsls	r0, r0, #26
   105f8:	f100 8151 	bmi.w	1089e <am_hal_uart_transfer+0x37e>
   105fc:	3201      	adds	r2, #1
   105fe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   10602:	6008      	str	r0, [r1, #0]
   10604:	4296      	cmp	r6, r2
   10606:	d1f5      	bne.n	105f4 <am_hal_uart_transfer+0xd4>
   10608:	9b00      	ldr	r3, [sp, #0]
   1060a:	b103      	cbz	r3, 1060e <am_hal_uart_transfer+0xee>
   1060c:	601e      	str	r6, [r3, #0]
   1060e:	2700      	movs	r7, #0
   10610:	e790      	b.n	10534 <am_hal_uart_transfer+0x14>
   10612:	2800      	cmp	r0, #0
   10614:	d0ae      	beq.n	10574 <am_hal_uart_transfer+0x54>
   10616:	6802      	ldr	r2, [r0, #0]
   10618:	497a      	ldr	r1, [pc, #488]	; (10804 <am_hal_uart_transfer+0x2e4>)
   1061a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1061e:	428a      	cmp	r2, r1
   10620:	d1a8      	bne.n	10574 <am_hal_uart_transfer+0x54>
   10622:	f1bb 0f00 	cmp.w	fp, #0
   10626:	d001      	beq.n	1062c <am_hal_uart_transfer+0x10c>
   10628:	f8cb 9000 	str.w	r9, [fp]
   1062c:	2f00      	cmp	r7, #0
   1062e:	d0ee      	beq.n	1060e <am_hal_uart_transfer+0xee>
   10630:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   10634:	2c00      	cmp	r4, #0
   10636:	f040 816c 	bne.w	10912 <am_hal_uart_transfer+0x3f2>
   1063a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1063c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10640:	321c      	adds	r2, #28
   10642:	0312      	lsls	r2, r2, #12
   10644:	6990      	ldr	r0, [r2, #24]
   10646:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1064a:	2800      	cmp	r0, #0
   1064c:	f040 819d 	bne.w	1098a <am_hal_uart_transfer+0x46a>
   10650:	6811      	ldr	r1, [r2, #0]
   10652:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   10656:	bf08      	it	eq
   10658:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   1065c:	d008      	beq.n	10670 <am_hal_uart_transfer+0x150>
   1065e:	e190      	b.n	10982 <am_hal_uart_transfer+0x462>
   10660:	6991      	ldr	r1, [r2, #24]
   10662:	06c8      	lsls	r0, r1, #27
   10664:	d409      	bmi.n	1067a <am_hal_uart_transfer+0x15a>
   10666:	6811      	ldr	r1, [r2, #0]
   10668:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1066c:	f040 814e 	bne.w	1090c <am_hal_uart_transfer+0x3ec>
   10670:	3401      	adds	r4, #1
   10672:	42a7      	cmp	r7, r4
   10674:	f803 1f01 	strb.w	r1, [r3, #1]!
   10678:	d1f2      	bne.n	10660 <am_hal_uart_transfer+0x140>
   1067a:	2700      	movs	r7, #0
   1067c:	f1bb 0f00 	cmp.w	fp, #0
   10680:	f43f af58 	beq.w	10534 <am_hal_uart_transfer+0x14>
   10684:	f8cb 4000 	str.w	r4, [fp]
   10688:	e754      	b.n	10534 <am_hal_uart_transfer+0x14>
   1068a:	4680      	mov	r8, r0
   1068c:	e76e      	b.n	1056c <am_hal_uart_transfer+0x4c>
   1068e:	9301      	str	r3, [sp, #4]
   10690:	4651      	mov	r1, sl
   10692:	46bb      	mov	fp, r7
   10694:	46b8      	mov	r8, r7
   10696:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1069a:	b9f2      	cbnz	r2, 106da <am_hal_uart_transfer+0x1ba>
   1069c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1069e:	b19e      	cbz	r6, 106c8 <am_hal_uart_transfer+0x1a8>
   106a0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   106a4:	321c      	adds	r2, #28
   106a6:	0312      	lsls	r2, r2, #12
   106a8:	3901      	subs	r1, #1
   106aa:	6994      	ldr	r4, [r2, #24]
   106ac:	f3c4 1440 	ubfx	r4, r4, #5, #1
   106b0:	b11c      	cbz	r4, 106ba <am_hal_uart_transfer+0x19a>
   106b2:	e047      	b.n	10744 <am_hal_uart_transfer+0x224>
   106b4:	6993      	ldr	r3, [r2, #24]
   106b6:	069b      	lsls	r3, r3, #26
   106b8:	d441      	bmi.n	1073e <am_hal_uart_transfer+0x21e>
   106ba:	3401      	adds	r4, #1
   106bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   106c0:	6013      	str	r3, [r2, #0]
   106c2:	42b4      	cmp	r4, r6
   106c4:	d1f6      	bne.n	106b4 <am_hal_uart_transfer+0x194>
   106c6:	44a0      	add	r8, r4
   106c8:	9b00      	ldr	r3, [sp, #0]
   106ca:	2b00      	cmp	r3, #0
   106cc:	d09f      	beq.n	1060e <am_hal_uart_transfer+0xee>
   106ce:	4638      	mov	r0, r7
   106d0:	f8c3 8000 	str.w	r8, [r3]
   106d4:	b011      	add	sp, #68	; 0x44
   106d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106da:	6baa      	ldr	r2, [r5, #56]	; 0x38
   106dc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   106de:	1b14      	subs	r4, r2, r4
   106e0:	42b4      	cmp	r4, r6
   106e2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   106e6:	bf28      	it	cs
   106e8:	4634      	movcs	r4, r6
   106ea:	4622      	mov	r2, r4
   106ec:	4618      	mov	r0, r3
   106ee:	9302      	str	r3, [sp, #8]
   106f0:	f000 f95c 	bl	109ac <am_hal_queue_item_add>
   106f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   106f6:	9303      	str	r3, [sp, #12]
   106f8:	f7ff fbe4 	bl	fec4 <am_hal_interrupt_master_disable>
   106fc:	9b03      	ldr	r3, [sp, #12]
   106fe:	9008      	str	r0, [sp, #32]
   10700:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10704:	331c      	adds	r3, #28
   10706:	031b      	lsls	r3, r3, #12
   10708:	9303      	str	r3, [sp, #12]
   1070a:	e00d      	b.n	10728 <am_hal_uart_transfer+0x208>
   1070c:	f000 f986 	bl	10a1c <am_hal_queue_item_get>
   10710:	b190      	cbz	r0, 10738 <am_hal_uart_transfer+0x218>
   10712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10714:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10718:	331c      	adds	r3, #28
   1071a:	031b      	lsls	r3, r3, #12
   1071c:	699a      	ldr	r2, [r3, #24]
   1071e:	0692      	lsls	r2, r2, #26
   10720:	bf5c      	itt	pl
   10722:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   10726:	601a      	strpl	r2, [r3, #0]
   10728:	9b03      	ldr	r3, [sp, #12]
   1072a:	9802      	ldr	r0, [sp, #8]
   1072c:	699b      	ldr	r3, [r3, #24]
   1072e:	069b      	lsls	r3, r3, #26
   10730:	f04f 0201 	mov.w	r2, #1
   10734:	a907      	add	r1, sp, #28
   10736:	d5e9      	bpl.n	1070c <am_hal_uart_transfer+0x1ec>
   10738:	9808      	ldr	r0, [sp, #32]
   1073a:	f7ff fbc7 	bl	fecc <am_hal_interrupt_master_set>
   1073e:	1b36      	subs	r6, r6, r4
   10740:	44a0      	add	r8, r4
   10742:	d0c1      	beq.n	106c8 <am_hal_uart_transfer+0x1a8>
   10744:	2010      	movs	r0, #16
   10746:	f7ff fb65 	bl	fe14 <am_hal_flash_delay>
   1074a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1074e:	d001      	beq.n	10754 <am_hal_uart_transfer+0x234>
   10750:	f10b 0b01 	add.w	fp, fp, #1
   10754:	45d9      	cmp	r9, fp
   10756:	d9b7      	bls.n	106c8 <am_hal_uart_transfer+0x1a8>
   10758:	682a      	ldr	r2, [r5, #0]
   1075a:	9b01      	ldr	r3, [sp, #4]
   1075c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10760:	429a      	cmp	r2, r3
   10762:	eb0a 0108 	add.w	r1, sl, r8
   10766:	f47f af01 	bne.w	1056c <am_hal_uart_transfer+0x4c>
   1076a:	e794      	b.n	10696 <am_hal_uart_transfer+0x176>
   1076c:	4606      	mov	r6, r0
   1076e:	2702      	movs	r7, #2
   10770:	e71a      	b.n	105a8 <am_hal_uart_transfer+0x88>
   10772:	9200      	str	r2, [sp, #0]
   10774:	f100 0248 	add.w	r2, r0, #72	; 0x48
   10778:	f04f 0a00 	mov.w	sl, #0
   1077c:	9202      	str	r2, [sp, #8]
   1077e:	465a      	mov	r2, fp
   10780:	4698      	mov	r8, r3
   10782:	469b      	mov	fp, r3
   10784:	4656      	mov	r6, sl
   10786:	4613      	mov	r3, r2
   10788:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   1078c:	2a00      	cmp	r2, #0
   1078e:	d152      	bne.n	10836 <am_hal_uart_transfer+0x316>
   10790:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10792:	b3a7      	cbz	r7, 107fe <am_hal_uart_transfer+0x2de>
   10794:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10798:	311c      	adds	r1, #28
   1079a:	0309      	lsls	r1, r1, #12
   1079c:	698a      	ldr	r2, [r1, #24]
   1079e:	06d0      	lsls	r0, r2, #27
   107a0:	d432      	bmi.n	10808 <am_hal_uart_transfer+0x2e8>
   107a2:	680a      	ldr	r2, [r1, #0]
   107a4:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   107a8:	f040 80aa 	bne.w	10900 <am_hal_uart_transfer+0x3e0>
   107ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   107b0:	e006      	b.n	107c0 <am_hal_uart_transfer+0x2a0>
   107b2:	698a      	ldr	r2, [r1, #24]
   107b4:	06d2      	lsls	r2, r2, #27
   107b6:	d41f      	bmi.n	107f8 <am_hal_uart_transfer+0x2d8>
   107b8:	680a      	ldr	r2, [r1, #0]
   107ba:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   107be:	d161      	bne.n	10884 <am_hal_uart_transfer+0x364>
   107c0:	3401      	adds	r4, #1
   107c2:	42bc      	cmp	r4, r7
   107c4:	f808 2f01 	strb.w	r2, [r8, #1]!
   107c8:	d1f3      	bne.n	107b2 <am_hal_uart_transfer+0x292>
   107ca:	469b      	mov	fp, r3
   107cc:	4426      	add	r6, r4
   107ce:	f1bb 0f00 	cmp.w	fp, #0
   107d2:	f43f af1c 	beq.w	1060e <am_hal_uart_transfer+0xee>
   107d6:	f8cb 6000 	str.w	r6, [fp]
   107da:	2700      	movs	r7, #0
   107dc:	e6aa      	b.n	10534 <am_hal_uart_transfer+0x14>
   107de:	9807      	ldr	r0, [sp, #28]
   107e0:	f7ff fb74 	bl	fecc <am_hal_interrupt_master_set>
   107e4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   107e6:	9802      	ldr	r0, [sp, #8]
   107e8:	42bc      	cmp	r4, r7
   107ea:	bf28      	it	cs
   107ec:	463c      	movcs	r4, r7
   107ee:	4641      	mov	r1, r8
   107f0:	4622      	mov	r2, r4
   107f2:	f000 f913 	bl	10a1c <am_hal_queue_item_get>
   107f6:	9b01      	ldr	r3, [sp, #4]
   107f8:	1b3f      	subs	r7, r7, r4
   107fa:	4426      	add	r6, r4
   107fc:	d104      	bne.n	10808 <am_hal_uart_transfer+0x2e8>
   107fe:	469b      	mov	fp, r3
   10800:	e7e5      	b.n	107ce <am_hal_uart_transfer+0x2ae>
   10802:	bf00      	nop
   10804:	01ea9e06 	.word	0x01ea9e06
   10808:	2010      	movs	r0, #16
   1080a:	9301      	str	r3, [sp, #4]
   1080c:	f7ff fb02 	bl	fe14 <am_hal_flash_delay>
   10810:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10814:	9b01      	ldr	r3, [sp, #4]
   10816:	d001      	beq.n	1081c <am_hal_uart_transfer+0x2fc>
   10818:	f10a 0a01 	add.w	sl, sl, #1
   1081c:	45d1      	cmp	r9, sl
   1081e:	d9ee      	bls.n	107fe <am_hal_uart_transfer+0x2de>
   10820:	682a      	ldr	r2, [r5, #0]
   10822:	9900      	ldr	r1, [sp, #0]
   10824:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10828:	428a      	cmp	r2, r1
   1082a:	eb0b 0806 	add.w	r8, fp, r6
   1082e:	d0ab      	beq.n	10788 <am_hal_uart_transfer+0x268>
   10830:	469b      	mov	fp, r3
   10832:	2702      	movs	r7, #2
   10834:	e6b8      	b.n	105a8 <am_hal_uart_transfer+0x88>
   10836:	9301      	str	r3, [sp, #4]
   10838:	f7ff fb44 	bl	fec4 <am_hal_interrupt_master_disable>
   1083c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1083e:	9007      	str	r0, [sp, #28]
   10840:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   10844:	301c      	adds	r0, #28
   10846:	9b01      	ldr	r3, [sp, #4]
   10848:	0300      	lsls	r0, r0, #12
   1084a:	ac08      	add	r4, sp, #32
   1084c:	2200      	movs	r2, #0
   1084e:	6981      	ldr	r1, [r0, #24]
   10850:	06c9      	lsls	r1, r1, #27
   10852:	d409      	bmi.n	10868 <am_hal_uart_transfer+0x348>
   10854:	6801      	ldr	r1, [r0, #0]
   10856:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1085a:	f102 0201 	add.w	r2, r2, #1
   1085e:	d118      	bne.n	10892 <am_hal_uart_transfer+0x372>
   10860:	2a20      	cmp	r2, #32
   10862:	f804 1b01 	strb.w	r1, [r4], #1
   10866:	d1f2      	bne.n	1084e <am_hal_uart_transfer+0x32e>
   10868:	a908      	add	r1, sp, #32
   1086a:	9802      	ldr	r0, [sp, #8]
   1086c:	9301      	str	r3, [sp, #4]
   1086e:	f000 f89d 	bl	109ac <am_hal_queue_item_add>
   10872:	9b01      	ldr	r3, [sp, #4]
   10874:	2800      	cmp	r0, #0
   10876:	d1b2      	bne.n	107de <am_hal_uart_transfer+0x2be>
   10878:	4f45      	ldr	r7, [pc, #276]	; (10990 <am_hal_uart_transfer+0x470>)
   1087a:	469b      	mov	fp, r3
   1087c:	9807      	ldr	r0, [sp, #28]
   1087e:	f7ff fb25 	bl	fecc <am_hal_interrupt_master_set>
   10882:	e691      	b.n	105a8 <am_hal_uart_transfer+0x88>
   10884:	469b      	mov	fp, r3
   10886:	4426      	add	r6, r4
   10888:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1088c:	e68c      	b.n	105a8 <am_hal_uart_transfer+0x88>
   1088e:	46b8      	mov	r8, r7
   10890:	e71a      	b.n	106c8 <am_hal_uart_transfer+0x1a8>
   10892:	469b      	mov	fp, r3
   10894:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10898:	e7f0      	b.n	1087c <am_hal_uart_transfer+0x35c>
   1089a:	463e      	mov	r6, r7
   1089c:	e797      	b.n	107ce <am_hal_uart_transfer+0x2ae>
   1089e:	4616      	mov	r6, r2
   108a0:	e6b2      	b.n	10608 <am_hal_uart_transfer+0xe8>
   108a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   108a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   108a6:	1a9b      	subs	r3, r3, r2
   108a8:	429e      	cmp	r6, r3
   108aa:	bf28      	it	cs
   108ac:	461e      	movcs	r6, r3
   108ae:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   108b2:	4651      	mov	r1, sl
   108b4:	4632      	mov	r2, r6
   108b6:	4620      	mov	r0, r4
   108b8:	f000 f878 	bl	109ac <am_hal_queue_item_add>
   108bc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   108be:	f7ff fb01 	bl	fec4 <am_hal_interrupt_master_disable>
   108c2:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   108c6:	371c      	adds	r7, #28
   108c8:	033f      	lsls	r7, r7, #12
   108ca:	9005      	str	r0, [sp, #20]
   108cc:	e00d      	b.n	108ea <am_hal_uart_transfer+0x3ca>
   108ce:	f000 f8a5 	bl	10a1c <am_hal_queue_item_get>
   108d2:	b188      	cbz	r0, 108f8 <am_hal_uart_transfer+0x3d8>
   108d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   108d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   108da:	331c      	adds	r3, #28
   108dc:	031b      	lsls	r3, r3, #12
   108de:	699a      	ldr	r2, [r3, #24]
   108e0:	0692      	lsls	r2, r2, #26
   108e2:	bf5c      	itt	pl
   108e4:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   108e8:	601a      	strpl	r2, [r3, #0]
   108ea:	69bb      	ldr	r3, [r7, #24]
   108ec:	069b      	lsls	r3, r3, #26
   108ee:	f04f 0201 	mov.w	r2, #1
   108f2:	a908      	add	r1, sp, #32
   108f4:	4620      	mov	r0, r4
   108f6:	d5ea      	bpl.n	108ce <am_hal_uart_transfer+0x3ae>
   108f8:	9805      	ldr	r0, [sp, #20]
   108fa:	f7ff fae7 	bl	fecc <am_hal_interrupt_master_set>
   108fe:	e683      	b.n	10608 <am_hal_uart_transfer+0xe8>
   10900:	469b      	mov	fp, r3
   10902:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10906:	e64f      	b.n	105a8 <am_hal_uart_transfer+0x88>
   10908:	461e      	mov	r6, r3
   1090a:	e67d      	b.n	10608 <am_hal_uart_transfer+0xe8>
   1090c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10910:	e6b4      	b.n	1067c <am_hal_uart_transfer+0x15c>
   10912:	9300      	str	r3, [sp, #0]
   10914:	f7ff fad6 	bl	fec4 <am_hal_interrupt_master_disable>
   10918:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1091a:	9006      	str	r0, [sp, #24]
   1091c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10920:	321c      	adds	r2, #28
   10922:	0311      	lsls	r1, r2, #12
   10924:	a808      	add	r0, sp, #32
   10926:	2200      	movs	r2, #0
   10928:	9b00      	ldr	r3, [sp, #0]
   1092a:	e009      	b.n	10940 <am_hal_uart_transfer+0x420>
   1092c:	680c      	ldr	r4, [r1, #0]
   1092e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   10932:	f102 0201 	add.w	r2, r2, #1
   10936:	d121      	bne.n	1097c <am_hal_uart_transfer+0x45c>
   10938:	2a20      	cmp	r2, #32
   1093a:	f800 4b01 	strb.w	r4, [r0], #1
   1093e:	d002      	beq.n	10946 <am_hal_uart_transfer+0x426>
   10940:	698c      	ldr	r4, [r1, #24]
   10942:	06e4      	lsls	r4, r4, #27
   10944:	d5f2      	bpl.n	1092c <am_hal_uart_transfer+0x40c>
   10946:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1094a:	a908      	add	r1, sp, #32
   1094c:	4630      	mov	r0, r6
   1094e:	9300      	str	r3, [sp, #0]
   10950:	f000 f82c 	bl	109ac <am_hal_queue_item_add>
   10954:	b920      	cbnz	r0, 10960 <am_hal_uart_transfer+0x440>
   10956:	4f0e      	ldr	r7, [pc, #56]	; (10990 <am_hal_uart_transfer+0x470>)
   10958:	9806      	ldr	r0, [sp, #24]
   1095a:	f7ff fab7 	bl	fecc <am_hal_interrupt_master_set>
   1095e:	e5e9      	b.n	10534 <am_hal_uart_transfer+0x14>
   10960:	9806      	ldr	r0, [sp, #24]
   10962:	f7ff fab3 	bl	fecc <am_hal_interrupt_master_set>
   10966:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   10968:	9b00      	ldr	r3, [sp, #0]
   1096a:	42bc      	cmp	r4, r7
   1096c:	bf28      	it	cs
   1096e:	463c      	movcs	r4, r7
   10970:	4619      	mov	r1, r3
   10972:	4630      	mov	r0, r6
   10974:	4622      	mov	r2, r4
   10976:	f000 f851 	bl	10a1c <am_hal_queue_item_get>
   1097a:	e67e      	b.n	1067a <am_hal_uart_transfer+0x15a>
   1097c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10980:	e7ea      	b.n	10958 <am_hal_uart_transfer+0x438>
   10982:	4604      	mov	r4, r0
   10984:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10988:	e678      	b.n	1067c <am_hal_uart_transfer+0x15c>
   1098a:	4627      	mov	r7, r4
   1098c:	e676      	b.n	1067c <am_hal_uart_transfer+0x15c>
   1098e:	bf00      	nop
   10990:	08000001 	.word	0x08000001

00010994 <am_hal_queue_init>:
   10994:	b410      	push	{r4}
   10996:	2400      	movs	r4, #0
   10998:	6004      	str	r4, [r0, #0]
   1099a:	6044      	str	r4, [r0, #4]
   1099c:	6084      	str	r4, [r0, #8]
   1099e:	60c3      	str	r3, [r0, #12]
   109a0:	6102      	str	r2, [r0, #16]
   109a2:	6141      	str	r1, [r0, #20]
   109a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   109a8:	4770      	bx	lr
   109aa:	bf00      	nop

000109ac <am_hal_queue_item_add>:
   109ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ae:	4604      	mov	r4, r0
   109b0:	6906      	ldr	r6, [r0, #16]
   109b2:	b083      	sub	sp, #12
   109b4:	fb06 f602 	mul.w	r6, r6, r2
   109b8:	460d      	mov	r5, r1
   109ba:	f7ff fa83 	bl	fec4 <am_hal_interrupt_master_disable>
   109be:	68e7      	ldr	r7, [r4, #12]
   109c0:	68a2      	ldr	r2, [r4, #8]
   109c2:	9001      	str	r0, [sp, #4]
   109c4:	1abb      	subs	r3, r7, r2
   109c6:	429e      	cmp	r6, r3
   109c8:	d826      	bhi.n	10a18 <am_hal_queue_item_add+0x6c>
   109ca:	b196      	cbz	r6, 109f2 <am_hal_queue_item_add+0x46>
   109cc:	6823      	ldr	r3, [r4, #0]
   109ce:	4629      	mov	r1, r5
   109d0:	b1c5      	cbz	r5, 10a04 <am_hal_queue_item_add+0x58>
   109d2:	19af      	adds	r7, r5, r6
   109d4:	6962      	ldr	r2, [r4, #20]
   109d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   109da:	54d0      	strb	r0, [r2, r3]
   109dc:	6823      	ldr	r3, [r4, #0]
   109de:	68e5      	ldr	r5, [r4, #12]
   109e0:	3301      	adds	r3, #1
   109e2:	42b9      	cmp	r1, r7
   109e4:	fbb3 f0f5 	udiv	r0, r3, r5
   109e8:	fb05 3310 	mls	r3, r5, r0, r3
   109ec:	6023      	str	r3, [r4, #0]
   109ee:	d1f1      	bne.n	109d4 <am_hal_queue_item_add+0x28>
   109f0:	68a2      	ldr	r2, [r4, #8]
   109f2:	4432      	add	r2, r6
   109f4:	60a2      	str	r2, [r4, #8]
   109f6:	2401      	movs	r4, #1
   109f8:	9801      	ldr	r0, [sp, #4]
   109fa:	f7ff fa67 	bl	fecc <am_hal_interrupt_master_set>
   109fe:	4620      	mov	r0, r4
   10a00:	b003      	add	sp, #12
   10a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a04:	3101      	adds	r1, #1
   10a06:	3301      	adds	r3, #1
   10a08:	428e      	cmp	r6, r1
   10a0a:	fbb3 f0f7 	udiv	r0, r3, r7
   10a0e:	fb07 3310 	mls	r3, r7, r0, r3
   10a12:	d1f7      	bne.n	10a04 <am_hal_queue_item_add+0x58>
   10a14:	6023      	str	r3, [r4, #0]
   10a16:	e7ec      	b.n	109f2 <am_hal_queue_item_add+0x46>
   10a18:	2400      	movs	r4, #0
   10a1a:	e7ed      	b.n	109f8 <am_hal_queue_item_add+0x4c>

00010a1c <am_hal_queue_item_get>:
   10a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a1e:	4604      	mov	r4, r0
   10a20:	6906      	ldr	r6, [r0, #16]
   10a22:	b083      	sub	sp, #12
   10a24:	fb06 f602 	mul.w	r6, r6, r2
   10a28:	460d      	mov	r5, r1
   10a2a:	f7ff fa4b 	bl	fec4 <am_hal_interrupt_master_disable>
   10a2e:	68a2      	ldr	r2, [r4, #8]
   10a30:	9001      	str	r0, [sp, #4]
   10a32:	4296      	cmp	r6, r2
   10a34:	d81c      	bhi.n	10a70 <am_hal_queue_item_get+0x54>
   10a36:	b196      	cbz	r6, 10a5e <am_hal_queue_item_get+0x42>
   10a38:	6863      	ldr	r3, [r4, #4]
   10a3a:	b1dd      	cbz	r5, 10a74 <am_hal_queue_item_get+0x58>
   10a3c:	4629      	mov	r1, r5
   10a3e:	19af      	adds	r7, r5, r6
   10a40:	6962      	ldr	r2, [r4, #20]
   10a42:	5cd3      	ldrb	r3, [r2, r3]
   10a44:	f801 3b01 	strb.w	r3, [r1], #1
   10a48:	6863      	ldr	r3, [r4, #4]
   10a4a:	68e5      	ldr	r5, [r4, #12]
   10a4c:	3301      	adds	r3, #1
   10a4e:	428f      	cmp	r7, r1
   10a50:	fbb3 f0f5 	udiv	r0, r3, r5
   10a54:	fb05 3310 	mls	r3, r5, r0, r3
   10a58:	6063      	str	r3, [r4, #4]
   10a5a:	d1f1      	bne.n	10a40 <am_hal_queue_item_get+0x24>
   10a5c:	68a2      	ldr	r2, [r4, #8]
   10a5e:	1b92      	subs	r2, r2, r6
   10a60:	60a2      	str	r2, [r4, #8]
   10a62:	2401      	movs	r4, #1
   10a64:	9801      	ldr	r0, [sp, #4]
   10a66:	f7ff fa31 	bl	fecc <am_hal_interrupt_master_set>
   10a6a:	4620      	mov	r0, r4
   10a6c:	b003      	add	sp, #12
   10a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a70:	2400      	movs	r4, #0
   10a72:	e7f7      	b.n	10a64 <am_hal_queue_item_get+0x48>
   10a74:	68e0      	ldr	r0, [r4, #12]
   10a76:	4629      	mov	r1, r5
   10a78:	3101      	adds	r1, #1
   10a7a:	3301      	adds	r3, #1
   10a7c:	428e      	cmp	r6, r1
   10a7e:	fbb3 f5f0 	udiv	r5, r3, r0
   10a82:	fb00 3315 	mls	r3, r0, r5, r3
   10a86:	d1f7      	bne.n	10a78 <am_hal_queue_item_get+0x5c>
   10a88:	6063      	str	r3, [r4, #4]
   10a8a:	e7e8      	b.n	10a5e <am_hal_queue_item_get+0x42>

00010a8c <memset>:
   10a8c:	b4f0      	push	{r4, r5, r6, r7}
   10a8e:	0786      	lsls	r6, r0, #30
   10a90:	d043      	beq.n	10b1a <memset+0x8e>
   10a92:	1e54      	subs	r4, r2, #1
   10a94:	2a00      	cmp	r2, #0
   10a96:	d03e      	beq.n	10b16 <memset+0x8a>
   10a98:	b2ca      	uxtb	r2, r1
   10a9a:	4603      	mov	r3, r0
   10a9c:	e002      	b.n	10aa4 <memset+0x18>
   10a9e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   10aa2:	d338      	bcc.n	10b16 <memset+0x8a>
   10aa4:	f803 2b01 	strb.w	r2, [r3], #1
   10aa8:	079d      	lsls	r5, r3, #30
   10aaa:	d1f8      	bne.n	10a9e <memset+0x12>
   10aac:	2c03      	cmp	r4, #3
   10aae:	d92b      	bls.n	10b08 <memset+0x7c>
   10ab0:	b2cd      	uxtb	r5, r1
   10ab2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10ab6:	2c0f      	cmp	r4, #15
   10ab8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10abc:	d916      	bls.n	10aec <memset+0x60>
   10abe:	f1a4 0710 	sub.w	r7, r4, #16
   10ac2:	093f      	lsrs	r7, r7, #4
   10ac4:	f103 0620 	add.w	r6, r3, #32
   10ac8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   10acc:	f103 0210 	add.w	r2, r3, #16
   10ad0:	e942 5504 	strd	r5, r5, [r2, #-16]
   10ad4:	e942 5502 	strd	r5, r5, [r2, #-8]
   10ad8:	3210      	adds	r2, #16
   10ada:	42b2      	cmp	r2, r6
   10adc:	d1f8      	bne.n	10ad0 <memset+0x44>
   10ade:	f004 040f 	and.w	r4, r4, #15
   10ae2:	3701      	adds	r7, #1
   10ae4:	2c03      	cmp	r4, #3
   10ae6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   10aea:	d90d      	bls.n	10b08 <memset+0x7c>
   10aec:	461e      	mov	r6, r3
   10aee:	4622      	mov	r2, r4
   10af0:	3a04      	subs	r2, #4
   10af2:	2a03      	cmp	r2, #3
   10af4:	f846 5b04 	str.w	r5, [r6], #4
   10af8:	d8fa      	bhi.n	10af0 <memset+0x64>
   10afa:	1f22      	subs	r2, r4, #4
   10afc:	f022 0203 	bic.w	r2, r2, #3
   10b00:	3204      	adds	r2, #4
   10b02:	4413      	add	r3, r2
   10b04:	f004 0403 	and.w	r4, r4, #3
   10b08:	b12c      	cbz	r4, 10b16 <memset+0x8a>
   10b0a:	b2c9      	uxtb	r1, r1
   10b0c:	441c      	add	r4, r3
   10b0e:	f803 1b01 	strb.w	r1, [r3], #1
   10b12:	429c      	cmp	r4, r3
   10b14:	d1fb      	bne.n	10b0e <memset+0x82>
   10b16:	bcf0      	pop	{r4, r5, r6, r7}
   10b18:	4770      	bx	lr
   10b1a:	4614      	mov	r4, r2
   10b1c:	4603      	mov	r3, r0
   10b1e:	e7c5      	b.n	10aac <memset+0x20>
   10b20:	7263694d 	.word	0x7263694d
   10b24:	6f68706f 	.word	0x6f68706f
   10b28:	7620656e 	.word	0x7620656e
   10b2c:	66697265 	.word	0x66697265
   10b30:	74616369 	.word	0x74616369
   10b34:	206e6f69 	.word	0x206e6f69
   10b38:	636f7270 	.word	0x636f7270
   10b3c:	72756465 	.word	0x72756465
   10b40:	73692065 	.word	0x73692065
   10b44:	61657220 	.word	0x61657220
   10b48:	0d217964 	.word	0x0d217964
   10b4c:	00000a0a 	.word	0x00000a0a
   10b50:	20414d44 	.word	0x20414d44
   10b54:	6f727245 	.word	0x6f727245
   10b58:	636f2072 	.word	0x636f2072
   10b5c:	65727563 	.word	0x65727563
   10b60:	00000a64 	.word	0x00000a64
   10b64:	6f727245 	.word	0x6f727245
   10b68:	202d2072 	.word	0x202d2072
   10b6c:	61656c63 	.word	0x61656c63
   10b70:	676e6972 	.word	0x676e6972
   10b74:	65687420 	.word	0x65687420
   10b78:	43444120 	.word	0x43444120
   10b7c:	746e6920 	.word	0x746e6920
   10b80:	75727265 	.word	0x75727265
   10b84:	20737470 	.word	0x20737470
   10b88:	6c696166 	.word	0x6c696166
   10b8c:	0a2e6465 	.word	0x0a2e6465
   10b90:	00000000 	.word	0x00000000
   10b94:	6f727245 	.word	0x6f727245
   10b98:	202d2072 	.word	0x202d2072
   10b9c:	67697274 	.word	0x67697274
   10ba0:	69726567 	.word	0x69726567
   10ba4:	7420676e 	.word	0x7420676e
   10ba8:	41206568 	.word	0x41206568
   10bac:	66204344 	.word	0x66204344
   10bb0:	656c6961 	.word	0x656c6961
   10bb4:	000a2e64 	.word	0x000a2e64
   10bb8:	20746547 	.word	0x20746547
   10bbc:	6c616e41 	.word	0x6c616e41
   10bc0:	4d20676f 	.word	0x4d20676f
   10bc4:	64206369 	.word	0x64206369
   10bc8:	20617461 	.word	0x20617461
   10bcc:	62206425 	.word	0x62206425
   10bd0:	73657479 	.word	0x73657479
   10bd4:	000d0a21 	.word	0x000d0a21
   10bd8:	20746547 	.word	0x20746547
   10bdc:	204d4450 	.word	0x204d4450
   10be0:	69647561 	.word	0x69647561
   10be4:	6164206f 	.word	0x6164206f
   10be8:	25206174 	.word	0x25206174
   10bec:	79622064 	.word	0x79622064
   10bf0:	21736574 	.word	0x21736574
   10bf4:	00000d0a 	.word	0x00000d0a
   10bf8:	69647541 	.word	0x69647541
   10bfc:	6164206f 	.word	0x6164206f
   10c00:	63206174 	.word	0x63206174
   10c04:	656c6c6f 	.word	0x656c6c6f
   10c08:	6f697463 	.word	0x6f697463
   10c0c:	6e65206e 	.word	0x6e65206e
   10c10:	2e646564 	.word	0x2e646564
   10c14:	002e2e2e 	.word	0x002e2e2e
   10c18:	6c616e41 	.word	0x6c616e41
   10c1c:	4d20676f 	.word	0x4d20676f
   10c20:	64206369 	.word	0x64206369
   10c24:	20617461 	.word	0x20617461
   10c28:	66207361 	.word	0x66207361
   10c2c:	6f6c6c6f 	.word	0x6f6c6c6f
   10c30:	676e6977 	.word	0x676e6977
   10c34:	0d0a203a 	.word	0x0d0a203a
   10c38:	00000000 	.word	0x00000000
   10c3c:	63694d41 	.word	0x63694d41
   10c40:	6e697220 	.word	0x6e697220
   10c44:	75622067 	.word	0x75622067
   10c48:	72656666 	.word	0x72656666
   10c4c:	20736920 	.word	0x20736920
   10c50:	65726c61 	.word	0x65726c61
   10c54:	20796461 	.word	0x20796461
   10c58:	74706d65 	.word	0x74706d65
   10c5c:	2e2e2e79 	.word	0x2e2e2e79
   10c60:	00000d0a 	.word	0x00000d0a
   10c64:	72656854 	.word	0x72656854
   10c68:	65722765 	.word	0x65722765
   10c6c:	6d6f7320 	.word	0x6d6f7320
   10c70:	69687465 	.word	0x69687465
   10c74:	7720676e 	.word	0x7720676e
   10c78:	65726965 	.word	0x65726965
   10c7c:	2e2e2e64 	.word	0x2e2e2e64
   10c80:	63694d41 	.word	0x63694d41
   10c84:	6e697220 	.word	0x6e697220
   10c88:	75622067 	.word	0x75622067
   10c8c:	72656666 	.word	0x72656666
   10c90:	746f6e20 	.word	0x746f6e20
   10c94:	62203420 	.word	0x62203420
   10c98:	73657479 	.word	0x73657479
   10c9c:	696c6120 	.word	0x696c6120
   10ca0:	64656e67 	.word	0x64656e67
   10ca4:	0a2e2e2e 	.word	0x0a2e2e2e
   10ca8:	0000000d 	.word	0x0000000d
   10cac:	00000020 	.word	0x00000020
   10cb0:	00000d0a 	.word	0x00000d0a
   10cb4:	646e6553 	.word	0x646e6553
   10cb8:	74756f20 	.word	0x74756f20
   10cbc:	4c4c4120 	.word	0x4c4c4120
   10cc0:	694d4120 	.word	0x694d4120
   10cc4:	61642063 	.word	0x61642063
   10cc8:	20216174 	.word	0x20216174
   10ccc:	72656854 	.word	0x72656854
   10cd0:	65722765 	.word	0x65722765
   10cd4:	746f7420 	.word	0x746f7420
   10cd8:	796c6c61 	.word	0x796c6c61
   10cdc:	20642520 	.word	0x20642520
   10ce0:	706d6173 	.word	0x706d6173
   10ce4:	0a73656c 	.word	0x0a73656c
   10ce8:	00000d0a 	.word	0x00000d0a
   10cec:	204d4350 	.word	0x204d4350
   10cf0:	61746164 	.word	0x61746164
   10cf4:	67657220 	.word	0x67657220
   10cf8:	65747369 	.word	0x65747369
   10cfc:	61762072 	.word	0x61762072
   10d00:	7365756c 	.word	0x7365756c
   10d04:	20736120 	.word	0x20736120
   10d08:	6c6c6f66 	.word	0x6c6c6f66
   10d0c:	6e69776f 	.word	0x6e69776f
   10d10:	0a203a67 	.word	0x0a203a67
   10d14:	0000000d 	.word	0x0000000d
   10d18:	63694d44 	.word	0x63694d44
   10d1c:	6e697220 	.word	0x6e697220
   10d20:	75622067 	.word	0x75622067
   10d24:	72656666 	.word	0x72656666
   10d28:	20736920 	.word	0x20736920
   10d2c:	65726c61 	.word	0x65726c61
   10d30:	20796461 	.word	0x20796461
   10d34:	74706d65 	.word	0x74706d65
   10d38:	2e2e2e79 	.word	0x2e2e2e79
   10d3c:	00000d0a 	.word	0x00000d0a
   10d40:	72656854 	.word	0x72656854
   10d44:	65722765 	.word	0x65722765
   10d48:	6d6f7320 	.word	0x6d6f7320
   10d4c:	69687465 	.word	0x69687465
   10d50:	7720676e 	.word	0x7720676e
   10d54:	65726965 	.word	0x65726965
   10d58:	2e2e2e64 	.word	0x2e2e2e64
   10d5c:	63694d44 	.word	0x63694d44
   10d60:	6e697220 	.word	0x6e697220
   10d64:	75622067 	.word	0x75622067
   10d68:	72656666 	.word	0x72656666
   10d6c:	746f6e20 	.word	0x746f6e20
   10d70:	62203420 	.word	0x62203420
   10d74:	73657479 	.word	0x73657479
   10d78:	696c6120 	.word	0x696c6120
   10d7c:	64656e67 	.word	0x64656e67
   10d80:	0a2e2e2e 	.word	0x0a2e2e2e
   10d84:	0000000d 	.word	0x0000000d
   10d88:	646e6553 	.word	0x646e6553
   10d8c:	74756f20 	.word	0x74756f20
   10d90:	4c4c4120 	.word	0x4c4c4120
   10d94:	694d4420 	.word	0x694d4420
   10d98:	61642063 	.word	0x61642063
   10d9c:	20216174 	.word	0x20216174
   10da0:	72656854 	.word	0x72656854
   10da4:	65722765 	.word	0x65722765
   10da8:	746f7420 	.word	0x746f7420
   10dac:	796c6c61 	.word	0x796c6c61
   10db0:	20642520 	.word	0x20642520
   10db4:	706d6173 	.word	0x706d6173
   10db8:	0a73656c 	.word	0x0a73656c
   10dbc:	0000000d 	.word	0x0000000d
   10dc0:	206c6c41 	.word	0x206c6c41
   10dc4:	61746164 	.word	0x61746164
   10dc8:	72657720 	.word	0x72657720
   10dcc:	65732065 	.word	0x65732065
   10dd0:	6465646e 	.word	0x6465646e
   10dd4:	74756f20 	.word	0x74756f20
   10dd8:	0a2e2e2e 	.word	0x0a2e2e2e
   10ddc:	000d0a0a 	.word	0x000d0a0a
   10de0:	74696157 	.word	0x74696157
   10de4:	20676e69 	.word	0x20676e69
   10de8:	65732032 	.word	0x65732032
   10dec:	646e6f63 	.word	0x646e6f63
   10df0:	6f742073 	.word	0x6f742073
   10df4:	61766520 	.word	0x61766520
   10df8:	7461756c 	.word	0x7461756c
   10dfc:	4d412065 	.word	0x4d412065
   10e00:	61206369 	.word	0x61206369
   10e04:	4420646e 	.word	0x4420646e
   10e08:	2e63694d 	.word	0x2e63694d
   10e0c:	0a0d2e2e 	.word	0x0a0d2e2e
   10e10:	00000000 	.word	0x00000000
   10e14:	72617453 	.word	0x72617453
   10e18:	6f742074 	.word	0x6f742074
   10e1c:	74656720 	.word	0x74656720
   10e20:	64756120 	.word	0x64756120
   10e24:	64206f69 	.word	0x64206f69
   10e28:	2e617461 	.word	0x2e617461
   10e2c:	0a0d2e2e 	.word	0x0a0d2e2e
   10e30:	00000000 	.word	0x00000000
   10e34:	00007325 	.word	0x00007325
   10e38:	00006425 	.word	0x00006425
   10e3c:	00007525 	.word	0x00007525
   10e40:	38257830 	.word	0x38257830
   10e44:	00000078 	.word	0x00000078
   10e48:	00006625 	.word	0x00006625
   10e4c:	204d4450 	.word	0x204d4450
   10e50:	74746553 	.word	0x74746553
   10e54:	73676e69 	.word	0x73676e69
   10e58:	000a0d3a 	.word	0x000a0d3a
   10e5c:	204d4450 	.word	0x204d4450
   10e60:	636f6c43 	.word	0x636f6c43
   10e64:	4828206b 	.word	0x4828206b
   10e68:	203a297a 	.word	0x203a297a
   10e6c:	20202020 	.word	0x20202020
   10e70:	20202020 	.word	0x20202020
   10e74:	64323125 	.word	0x64323125
   10e78:	00000a0d 	.word	0x00000a0d
   10e7c:	65666645 	.word	0x65666645
   10e80:	76697463 	.word	0x76697463
   10e84:	61532065 	.word	0x61532065
   10e88:	656c706d 	.word	0x656c706d
   10e8c:	65724620 	.word	0x65724620
   10e90:	203a2e71 	.word	0x203a2e71
   10e94:	64323125 	.word	0x64323125
   10e98:	000a0a0d 	.word	0x000a0a0d
   10e9c:	6f727245 	.word	0x6f727245
   10ea0:	202d2072 	.word	0x202d2072
   10ea4:	666e6f63 	.word	0x666e6f63
   10ea8:	72756769 	.word	0x72756769
   10eac:	20676e69 	.word	0x20676e69
   10eb0:	20434441 	.word	0x20434441
   10eb4:	20414d44 	.word	0x20414d44
   10eb8:	6c696166 	.word	0x6c696166
   10ebc:	0a2e6465 	.word	0x0a2e6465
   10ec0:	00000000 	.word	0x00000000
   10ec4:	6f727245 	.word	0x6f727245
   10ec8:	202d2072 	.word	0x202d2072
   10ecc:	65736572 	.word	0x65736572
   10ed0:	74617672 	.word	0x74617672
   10ed4:	206e6f69 	.word	0x206e6f69
   10ed8:	7420666f 	.word	0x7420666f
   10edc:	41206568 	.word	0x41206568
   10ee0:	69204344 	.word	0x69204344
   10ee4:	6174736e 	.word	0x6174736e
   10ee8:	2065636e 	.word	0x2065636e
   10eec:	6c696166 	.word	0x6c696166
   10ef0:	0a2e6465 	.word	0x0a2e6465
   10ef4:	00000000 	.word	0x00000000
   10ef8:	6f727245 	.word	0x6f727245
   10efc:	202d2072 	.word	0x202d2072
   10f00:	20434441 	.word	0x20434441
   10f04:	65776f70 	.word	0x65776f70
   10f08:	6e6f2072 	.word	0x6e6f2072
   10f0c:	69616620 	.word	0x69616620
   10f10:	2e64656c 	.word	0x2e64656c
   10f14:	0000000a 	.word	0x0000000a
   10f18:	6f727245 	.word	0x6f727245
   10f1c:	202d2072 	.word	0x202d2072
   10f20:	666e6f63 	.word	0x666e6f63
   10f24:	72756769 	.word	0x72756769
   10f28:	20676e69 	.word	0x20676e69
   10f2c:	20434441 	.word	0x20434441
   10f30:	6c696166 	.word	0x6c696166
   10f34:	0a2e6465 	.word	0x0a2e6465
   10f38:	00000000 	.word	0x00000000
   10f3c:	6f727245 	.word	0x6f727245
   10f40:	202d2072 	.word	0x202d2072
   10f44:	666e6f63 	.word	0x666e6f63
   10f48:	72756769 	.word	0x72756769
   10f4c:	20676e69 	.word	0x20676e69
   10f50:	20434441 	.word	0x20434441
   10f54:	746f6c53 	.word	0x746f6c53
   10f58:	66203020 	.word	0x66203020
   10f5c:	656c6961 	.word	0x656c6961
   10f60:	000a2e64 	.word	0x000a2e64
   10f64:	6f727245 	.word	0x6f727245
   10f68:	202d2072 	.word	0x202d2072
   10f6c:	62616e65 	.word	0x62616e65
   10f70:	676e696c 	.word	0x676e696c
   10f74:	43444120 	.word	0x43444120
   10f78:	69616620 	.word	0x69616620
   10f7c:	2e64656c 	.word	0x2e64656c
   10f80:	0000000a 	.word	0x0000000a
   10f84:	6f727245 	.word	0x6f727245
   10f88:	202d2072 	.word	0x202d2072
   10f8c:	61736964 	.word	0x61736964
   10f90:	20656c62 	.word	0x20656c62
   10f94:	20434441 	.word	0x20434441
   10f98:	6c696166 	.word	0x6c696166
   10f9c:	0a2e6465 	.word	0x0a2e6465
   10fa0:	00000000 	.word	0x00000000
   10fa4:	6f727245 	.word	0x6f727245
   10fa8:	202d2072 	.word	0x202d2072
   10fac:	61736964 	.word	0x61736964
   10fb0:	6e696c62 	.word	0x6e696c62
   10fb4:	68742067 	.word	0x68742067
   10fb8:	44412065 	.word	0x44412065
   10fbc:	6f702043 	.word	0x6f702043
   10fc0:	20726577 	.word	0x20726577
   10fc4:	616d6f64 	.word	0x616d6f64
   10fc8:	66206e69 	.word	0x66206e69
   10fcc:	656c6961 	.word	0x656c6961
   10fd0:	000a2e64 	.word	0x000a2e64
   10fd4:	6f727245 	.word	0x6f727245
   10fd8:	202d2072 	.word	0x202d2072
   10fdc:	75746572 	.word	0x75746572
   10fe0:	6f206e72 	.word	0x6f206e72
   10fe4:	68742066 	.word	0x68742066
   10fe8:	44412065 	.word	0x44412065
   10fec:	6e692043 	.word	0x6e692043
   10ff0:	6e617473 	.word	0x6e617473
   10ff4:	66206563 	.word	0x66206563
   10ff8:	656c6961 	.word	0x656c6961
   10ffc:	000a2e64 	.word	0x000a2e64
   11000:	6f727245 	.word	0x6f727245
   11004:	202d2072 	.word	0x202d2072
   11008:	666e6f63 	.word	0x666e6f63
   1100c:	72756769 	.word	0x72756769
   11010:	20676e69 	.word	0x20676e69
   11014:	20656874 	.word	0x20656874
   11018:	74737973 	.word	0x74737973
   1101c:	63206d65 	.word	0x63206d65
   11020:	6b636f6c 	.word	0x6b636f6c
   11024:	69616620 	.word	0x69616620
   11028:	2e64656c 	.word	0x2e64656c
   1102c:	0000000a 	.word	0x0000000a
   11030:	6f727245 	.word	0x6f727245
   11034:	202d2072 	.word	0x202d2072
   11038:	666e6f63 	.word	0x666e6f63
   1103c:	72756769 	.word	0x72756769
   11040:	20676e69 	.word	0x20676e69
   11044:	20656874 	.word	0x20656874
   11048:	74737973 	.word	0x74737973
   1104c:	63206d65 	.word	0x63206d65
   11050:	65686361 	.word	0x65686361
   11054:	69616620 	.word	0x69616620
   11058:	2e64656c 	.word	0x2e64656c
   1105c:	0000000a 	.word	0x0000000a
   11060:	6f727245 	.word	0x6f727245
   11064:	202d2072 	.word	0x202d2072
   11068:	62616e65 	.word	0x62616e65
   1106c:	676e696c 	.word	0x676e696c
   11070:	65687420 	.word	0x65687420
   11074:	73797320 	.word	0x73797320
   11078:	206d6574 	.word	0x206d6574
   1107c:	68636163 	.word	0x68636163
   11080:	61662065 	.word	0x61662065
   11084:	64656c69 	.word	0x64656c69
   11088:	00000a2e 	.word	0x00000a2e
   1108c:	6c6f7041 	.word	0x6c6f7041
   11090:	20336f6c 	.word	0x20336f6c
   11094:	7265706f 	.word	0x7265706f
   11098:	6e697461 	.word	0x6e697461
   1109c:	6e692067 	.word	0x6e692067
   110a0:	72754220 	.word	0x72754220
   110a4:	4d207473 	.word	0x4d207473
   110a8:	2065646f 	.word	0x2065646f
   110ac:	4d363928 	.word	0x4d363928
   110b0:	0d297a48 	.word	0x0d297a48
   110b4:	00000a0a 	.word	0x00000a0a
   110b8:	6f727245 	.word	0x6f727245
   110bc:	202d2072 	.word	0x202d2072
   110c0:	67697274 	.word	0x67697274
   110c4:	69726567 	.word	0x69726567
   110c8:	7420676e 	.word	0x7420676e
   110cc:	41206568 	.word	0x41206568
   110d0:	66204344 	.word	0x66204344
   110d4:	656c6961 	.word	0x656c6961
   110d8:	000a2e64 	.word	0x000a2e64
   110dc:	43434441 	.word	0x43434441
   110e0:	72204c41 	.word	0x72204c41
   110e4:	76206765 	.word	0x76206765
   110e8:	65756c61 	.word	0x65756c61
   110ec:	776f6e20 	.word	0x776f6e20
   110f0:	20736920 	.word	0x20736920
   110f4:	2e207825 	.word	0x2e207825
   110f8:	0a0d2e2e 	.word	0x0a0d2e2e
   110fc:	00000000 	.word	0x00000000
   11100:	6f727245 	.word	0x6f727245
   11104:	65722072 	.word	0x65722072
   11108:	6e696461 	.word	0x6e696461
   1110c:	44412067 	.word	0x44412067
   11110:	6e692043 	.word	0x6e692043
   11114:	72726574 	.word	0x72726574
   11118:	20747075 	.word	0x20747075
   1111c:	74617473 	.word	0x74617473
   11120:	000a7375 	.word	0x000a7375
   11124:	6f727245 	.word	0x6f727245
   11128:	6c632072 	.word	0x6c632072
   1112c:	69726165 	.word	0x69726165
   11130:	4120676e 	.word	0x4120676e
   11134:	69204344 	.word	0x69204344
   11138:	7265746e 	.word	0x7265746e
   1113c:	74707572 	.word	0x74707572
   11140:	61747320 	.word	0x61747320
   11144:	0a737574 	.word	0x0a737574
   11148:	00000000 	.word	0x00000000

0001114c <g_AM_HAL_GPIO_DISABLE>:
   1114c:	00000003                                ....

00011150 <g_AM_HAL_GPIO_TRISTATE>:
   11150:	00000c03                                ....

00011154 <g_AM_HAL_GPIO_OUTPUT>:
   11154:	00000403                                ....

00011158 <g_ui8Inpen>:
   11158:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   11168:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   11178:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   11188:	00003130                                01..

0001118c <g_ui8Bit76Capabilities>:
   1118c:	02800101 80010180 80800101 80808080     ................
   1119c:	80808080 80808008 01800180 80808080     ................
   111ac:	80808080 01800402 01010401 80808080     ................
   111bc:	00000101                                ....

000111c0 <g_ui8nCEpins>:
   111c0:	02070707 00080802 01020202 01010101     ................
   111d0:	01010101 01010101 01010101 01010101     ................
   111e0:	01010101 08010101 01010008 01010101     ................
   111f0:	00000101                                ....

000111f4 <g_ui8NCEtable>:
   111f4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   11204:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   11214:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11224:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11234:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11244:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11254:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11264:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11274:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   11284:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   11294:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   112a4:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   112b4:	32221202 43231303                       .."2..#C

000112bc <g_SysRingBuffSetup>:
   112bc:	00000001 1000ca7c 0000fa00 00000002     ....|...........
   112cc:	1001c47c 0000fa00                       |.......

000112d4 <g_switch_button0>:
   112d4:	00001003                                ....

000112d8 <g_switch_button1>:
   112d8:	00001003                                ....

000112dc <g_switch_button2>:
   112dc:	00001003                                ....

000112e0 <g_AM_PIN_33_ADCSE5>:
   112e0:	00000000                                ....

000112e4 <g_sBspUartConfig>:
   112e4:	0001c200 00000060 00000000 00000000     ....`...........
   112f4:	00000000 00000012 00000000 00000000     ................
	...

0001130c <g_AM_BSP_GPIO_COM_UART_TX>:
   1130c:	00000000                                ....

00011310 <g_AM_BSP_GPIO_COM_UART_RX>:
   11310:	00000000                                ....

00011314 <am_hal_cachectrl_defaults>:
   11314:	00000308                                ....

00011318 <g_am_hal_mcuctrl_flash_size>:
   11318:	00004000 00008000 00010000 00020000     .@..............
   11328:	00040000 00080000 00100000 00200000     .............. .
   11338:	00180000 00000000 00000000 00000000     ................
	...

00011358 <g_am_hal_mcuctrl_sram_size>:
   11358:	00004000 00008000 00010000 00020000     .@..............
   11368:	00040000 00080000 00100000 00060000     ................
   11378:	000c0000 00000000 00000000 00000000     ................
	...

00011398 <am_hal_pwrctrl_peripheral_control>:
	...
   113a4:	00000001 00000004 00000004 00000002     ................
   113b4:	00000008 00000008 00000004 00000008     ................
   113c4:	00000008 00000008 00000008 00000008     ................
   113d4:	00000010 00000010 00000010 00000020     ............ ...
   113e4:	00000010 00000010 00000040 00000010     ........@.......
   113f4:	00000010 00000080 00000004 00000004     ................
   11404:	00000100 00000004 00000004 00000200     ................
   11414:	00000020 00000020 00000400 00000004      ... ...........
   11424:	00000004 00000800 00000040 00000040     ........@...@...
   11434:	00001000 00000080 00000080 00002000     ............. ..
   11444:	00000100 00000100                       ........
