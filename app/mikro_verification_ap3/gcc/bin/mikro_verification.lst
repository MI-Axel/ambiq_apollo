
bin/mikro_verification.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 d9 e1 00 00 41 e2 00 00 25 d0 00 00     ........A...%...
    c010:	25 d0 00 00 25 d0 00 00 25 d0 00 00 00 00 00 00     %...%...%.......
	...
    c02c:	47 e2 00 00 47 e2 00 00 00 00 00 00 47 e2 00 00     G...G.......G...
    c03c:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c04c:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c05c:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c06c:	47 e2 00 00 47 e2 00 00 59 e6 00 00 05 e6 00 00     G...G...Y.......
    c07c:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c08c:	a9 e5 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     ....G...G...G...
    c09c:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c0ac:	47 e2 00 00 47 e2 00 00 47 e2 00 00 47 e2 00 00     G...G...G...G...
    c0bc:	47 e2 00 00                                         G...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:

// sharing variables in whole procedures
volatile uint8_t g_ui8PcmDataReadyFlag = 0;

int main(void)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	af00      	add	r7, sp, #0
    am_app_mic_verif_sys_init();
    c1a4:	f002 f94c 	bl	e440 <am_app_mic_verif_sys_init>
#endif // configUSE_SYSVIEW

    //
    // Print the banner.
    //
    DebugLog("Microphone verification procedure is ready!\r\n\n");
    c1a8:	482a      	ldr	r0, [pc, #168]	; (c254 <main+0xb4>)
    c1aa:	f002 f897 	bl	e2dc <DebugLog>

    while (1)
    {

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c1ae:	4b2a      	ldr	r3, [pc, #168]	; (c258 <main+0xb8>)
    c1b0:	681b      	ldr	r3, [r3, #0]
    c1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c1b6:	d306      	bcc.n	c1c6 <main+0x26>
        {
            g_ui32TimerCount = 0;
    c1b8:	4b27      	ldr	r3, [pc, #156]	; (c258 <main+0xb8>)
    c1ba:	2200      	movs	r2, #0
    c1bc:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c1be:	2100      	movs	r1, #0
    c1c0:	4826      	ldr	r0, [pc, #152]	; (c25c <main+0xbc>)
    c1c2:	f001 ffb9 	bl	e138 <am_devices_led_toggle>

//
// Board key interface for different procedure switch
//

        if((g_sysKeyValue == AM_APP_KEY_0) && (g_ui8ButtonPushedFlag == 1))
    c1c6:	4b26      	ldr	r3, [pc, #152]	; (c260 <main+0xc0>)
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	b2db      	uxtb	r3, r3
    c1cc:	2b01      	cmp	r3, #1
    c1ce:	d11d      	bne.n	c20c <main+0x6c>
    c1d0:	4b24      	ldr	r3, [pc, #144]	; (c264 <main+0xc4>)
    c1d2:	781b      	ldrb	r3, [r3, #0]
    c1d4:	b2db      	uxtb	r3, r3
    c1d6:	2b01      	cmp	r3, #1
    c1d8:	d118      	bne.n	c20c <main+0x6c>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c1da:	4b21      	ldr	r3, [pc, #132]	; (c260 <main+0xc0>)
    c1dc:	2200      	movs	r2, #0
    c1de:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c1e0:	4b20      	ldr	r3, [pc, #128]	; (c264 <main+0xc4>)
    c1e2:	2200      	movs	r2, #0
    c1e4:	701a      	strb	r2, [r3, #0]

#if AM_APP_MIC_CALIBRATION
            if(g_ui8MicCalStatus == 1)
    c1e6:	4b20      	ldr	r3, [pc, #128]	; (c268 <main+0xc8>)
    c1e8:	781b      	ldrb	r3, [r3, #0]
    c1ea:	2b01      	cmp	r3, #1
    c1ec:	d103      	bne.n	c1f6 <main+0x56>
            {
                g_ui8MicCalStatus = 0;
    c1ee:	4b1e      	ldr	r3, [pc, #120]	; (c268 <main+0xc8>)
    c1f0:	2200      	movs	r2, #0
    c1f2:	701a      	strb	r2, [r3, #0]
    c1f4:	e00a      	b.n	c20c <main+0x6c>
            }
            else if(g_ui8MicCalStatus == 0)
    c1f6:	4b1c      	ldr	r3, [pc, #112]	; (c268 <main+0xc8>)
    c1f8:	781b      	ldrb	r3, [r3, #0]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d106      	bne.n	c20c <main+0x6c>
            {
                g_ui8MicCalStatus = 1;
    c1fe:	4b1a      	ldr	r3, [pc, #104]	; (c268 <main+0xc8>)
    c200:	2201      	movs	r2, #1
    c202:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
    c204:	2101      	movs	r1, #1
    c206:	4815      	ldr	r0, [pc, #84]	; (c25c <main+0xbc>)
    c208:	f001 ff1d 	bl	e046 <am_devices_led_on>
            }
#endif // AM_APP_MIC_CALIBRATION

        }

        if((g_sysKeyValue == AM_APP_KEY_1) && (g_ui8ButtonPushedFlag == 1))
    c20c:	4b14      	ldr	r3, [pc, #80]	; (c260 <main+0xc0>)
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	b2db      	uxtb	r3, r3
    c212:	2b02      	cmp	r3, #2
    c214:	d1cb      	bne.n	c1ae <main+0xe>
    c216:	4b13      	ldr	r3, [pc, #76]	; (c264 <main+0xc4>)
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	b2db      	uxtb	r3, r3
    c21c:	2b01      	cmp	r3, #1
    c21e:	d1c6      	bne.n	c1ae <main+0xe>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c220:	4b0f      	ldr	r3, [pc, #60]	; (c260 <main+0xc0>)
    c222:	2200      	movs	r2, #0
    c224:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c226:	4b0f      	ldr	r3, [pc, #60]	; (c264 <main+0xc4>)
    c228:	2200      	movs	r2, #0
    c22a:	701a      	strb	r2, [r3, #0]
#if AM_APP_MIC_THD
            if(g_ui8MicThdStatus == 1)
    c22c:	4b0f      	ldr	r3, [pc, #60]	; (c26c <main+0xcc>)
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	2b01      	cmp	r3, #1
    c232:	d103      	bne.n	c23c <main+0x9c>
            {
                g_ui8MicThdStatus = 0;
    c234:	4b0d      	ldr	r3, [pc, #52]	; (c26c <main+0xcc>)
    c236:	2200      	movs	r2, #0
    c238:	701a      	strb	r2, [r3, #0]
    c23a:	e7b8      	b.n	c1ae <main+0xe>
            }
            else if(g_ui8MicThdStatus == 0)
    c23c:	4b0b      	ldr	r3, [pc, #44]	; (c26c <main+0xcc>)
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	2b00      	cmp	r3, #0
    c242:	d1b4      	bne.n	c1ae <main+0xe>
            {
                g_ui8MicThdStatus = 1;
    c244:	4b09      	ldr	r3, [pc, #36]	; (c26c <main+0xcc>)
    c246:	2201      	movs	r2, #1
    c248:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 2);
    c24a:	2102      	movs	r1, #2
    c24c:	4803      	ldr	r0, [pc, #12]	; (c25c <main+0xbc>)
    c24e:	f001 fefa 	bl	e046 <am_devices_led_on>
        if (g_ui32TimerCount >=1000)
    c252:	e7ac      	b.n	c1ae <main+0xe>
    c254:	0000f954 	.word	0x0000f954
    c258:	1000c14c 	.word	0x1000c14c
    c25c:	1000c00c 	.word	0x1000c00c
    c260:	1000c158 	.word	0x1000c158
    c264:	1000c159 	.word	0x1000c159
    c268:	1000c044 	.word	0x1000c044
    c26c:	1000c045 	.word	0x1000c045

0000c270 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c270:	b480      	push	{r7}
    c272:	b083      	sub	sp, #12
    c274:	af00      	add	r7, sp, #0
    c276:	6078      	str	r0, [r7, #4]
    c278:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c27a:	687b      	ldr	r3, [r7, #4]
    c27c:	2b00      	cmp	r3, #0
    c27e:	d001      	beq.n	c284 <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c280:	2305      	movs	r3, #5
    c282:	e048      	b.n	c316 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c284:	683b      	ldr	r3, [r7, #0]
    c286:	2b00      	cmp	r3, #0
    c288:	d101      	bne.n	c28e <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c28a:	2306      	movs	r3, #6
    c28c:	e043      	b.n	c316 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c28e:	4925      	ldr	r1, [pc, #148]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c290:	687a      	ldr	r2, [r7, #4]
    c292:	4613      	mov	r3, r2
    c294:	005b      	lsls	r3, r3, #1
    c296:	4413      	add	r3, r2
    c298:	009b      	lsls	r3, r3, #2
    c29a:	440b      	add	r3, r1
    c29c:	78db      	ldrb	r3, [r3, #3]
    c29e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c2a2:	b2db      	uxtb	r3, r3
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d001      	beq.n	c2ac <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c2a8:	2307      	movs	r3, #7
    c2aa:	e034      	b.n	c316 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c2ac:	491d      	ldr	r1, [pc, #116]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c2ae:	687a      	ldr	r2, [r7, #4]
    c2b0:	4613      	mov	r3, r2
    c2b2:	005b      	lsls	r3, r3, #1
    c2b4:	4413      	add	r3, r2
    c2b6:	009b      	lsls	r3, r3, #2
    c2b8:	18ca      	adds	r2, r1, r3
    c2ba:	78d3      	ldrb	r3, [r2, #3]
    c2bc:	f043 0301 	orr.w	r3, r3, #1
    c2c0:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c2c2:	4918      	ldr	r1, [pc, #96]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c2c4:	687a      	ldr	r2, [r7, #4]
    c2c6:	4613      	mov	r3, r2
    c2c8:	005b      	lsls	r3, r3, #1
    c2ca:	4413      	add	r3, r2
    c2cc:	009b      	lsls	r3, r3, #2
    c2ce:	18ca      	adds	r2, r1, r3
    c2d0:	6813      	ldr	r3, [r2, #0]
    c2d2:	4915      	ldr	r1, [pc, #84]	; (c328 <am_hal_pdm_initialize+0xb8>)
    c2d4:	f361 0317 	bfi	r3, r1, #0, #24
    c2d8:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    c2da:	4912      	ldr	r1, [pc, #72]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c2dc:	687a      	ldr	r2, [r7, #4]
    c2de:	4613      	mov	r3, r2
    c2e0:	005b      	lsls	r3, r3, #1
    c2e2:	4413      	add	r3, r2
    c2e4:	009b      	lsls	r3, r3, #2
    c2e6:	440b      	add	r3, r1
    c2e8:	3308      	adds	r3, #8
    c2ea:	687a      	ldr	r2, [r7, #4]
    c2ec:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    c2ee:	490d      	ldr	r1, [pc, #52]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c2f0:	687a      	ldr	r2, [r7, #4]
    c2f2:	4613      	mov	r3, r2
    c2f4:	005b      	lsls	r3, r3, #1
    c2f6:	4413      	add	r3, r2
    c2f8:	009b      	lsls	r3, r3, #2
    c2fa:	440b      	add	r3, r1
    c2fc:	3304      	adds	r3, #4
    c2fe:	2200      	movs	r2, #0
    c300:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    c302:	687a      	ldr	r2, [r7, #4]
    c304:	4613      	mov	r3, r2
    c306:	005b      	lsls	r3, r3, #1
    c308:	4413      	add	r3, r2
    c30a:	009b      	lsls	r3, r3, #2
    c30c:	4a05      	ldr	r2, [pc, #20]	; (c324 <am_hal_pdm_initialize+0xb4>)
    c30e:	441a      	add	r2, r3
    c310:	683b      	ldr	r3, [r7, #0]
    c312:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c314:	2300      	movs	r3, #0
}
    c316:	4618      	mov	r0, r3
    c318:	370c      	adds	r7, #12
    c31a:	46bd      	mov	sp, r7
    c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c320:	4770      	bx	lr
    c322:	bf00      	nop
    c324:	1000c16c 	.word	0x1000c16c
    c328:	00f956e2 	.word	0x00f956e2

0000c32c <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    c32c:	b580      	push	{r7, lr}
    c32e:	b088      	sub	sp, #32
    c330:	af00      	add	r7, sp, #0
    c332:	6078      	str	r0, [r7, #4]
    c334:	460b      	mov	r3, r1
    c336:	70fb      	strb	r3, [r7, #3]
    c338:	4613      	mov	r3, r2
    c33a:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c33c:	687b      	ldr	r3, [r7, #4]
    c33e:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c340:	69fb      	ldr	r3, [r7, #28]
    c342:	689b      	ldr	r3, [r3, #8]
    c344:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    c346:	69bb      	ldr	r3, [r7, #24]
    c348:	b2db      	uxtb	r3, r3
    c34a:	330d      	adds	r3, #13
    c34c:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c34e:	687b      	ldr	r3, [r7, #4]
    c350:	2b00      	cmp	r3, #0
    c352:	d00d      	beq.n	c370 <am_hal_pdm_power_control+0x44>
    c354:	687b      	ldr	r3, [r7, #4]
    c356:	78db      	ldrb	r3, [r3, #3]
    c358:	f003 0301 	and.w	r3, r3, #1
    c35c:	b2db      	uxtb	r3, r3
    c35e:	2b00      	cmp	r3, #0
    c360:	d006      	beq.n	c370 <am_hal_pdm_power_control+0x44>
    c362:	687b      	ldr	r3, [r7, #4]
    c364:	681b      	ldr	r3, [r3, #0]
    c366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c36a:	4a23      	ldr	r2, [pc, #140]	; (c3f8 <am_hal_pdm_power_control+0xcc>)
    c36c:	4293      	cmp	r3, r2
    c36e:	d001      	beq.n	c374 <am_hal_pdm_power_control+0x48>
    c370:	2302      	movs	r3, #2
    c372:	e03d      	b.n	c3f0 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    c374:	78fb      	ldrb	r3, [r7, #3]
    c376:	2b00      	cmp	r3, #0
    c378:	d004      	beq.n	c384 <am_hal_pdm_power_control+0x58>
    c37a:	2b00      	cmp	r3, #0
    c37c:	db34      	blt.n	c3e8 <am_hal_pdm_power_control+0xbc>
    c37e:	2b02      	cmp	r3, #2
    c380:	dc32      	bgt.n	c3e8 <am_hal_pdm_power_control+0xbc>
    c382:	e01e      	b.n	c3c2 <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    c384:	78bb      	ldrb	r3, [r7, #2]
    c386:	2b00      	cmp	r3, #0
    c388:	d008      	beq.n	c39c <am_hal_pdm_power_control+0x70>
    c38a:	69fb      	ldr	r3, [r7, #28]
    c38c:	791b      	ldrb	r3, [r3, #4]
    c38e:	f083 0301 	eor.w	r3, r3, #1
    c392:	b2db      	uxtb	r3, r3
    c394:	2b00      	cmp	r3, #0
    c396:	d001      	beq.n	c39c <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    c398:	2307      	movs	r3, #7
    c39a:	e029      	b.n	c3f0 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    c39c:	7dfb      	ldrb	r3, [r7, #23]
    c39e:	4618      	mov	r0, r3
    c3a0:	f002 fd7c 	bl	ee9c <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    c3a4:	78bb      	ldrb	r3, [r7, #2]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d020      	beq.n	c3ec <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    c3aa:	f002 fc83 	bl	ecb4 <am_hal_interrupt_master_disable>
    c3ae:	4603      	mov	r3, r0
    c3b0:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    c3b2:	69fb      	ldr	r3, [r7, #28]
    c3b4:	2200      	movs	r2, #0
    c3b6:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c3b8:	693b      	ldr	r3, [r7, #16]
    c3ba:	4618      	mov	r0, r3
    c3bc:	f002 fc7e 	bl	ecbc <am_hal_interrupt_master_set>
            }
            break;
    c3c0:	e014      	b.n	c3ec <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    c3c2:	78bb      	ldrb	r3, [r7, #2]
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d00a      	beq.n	c3de <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    c3c8:	f002 fc74 	bl	ecb4 <am_hal_interrupt_master_disable>
    c3cc:	4603      	mov	r3, r0
    c3ce:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    c3d0:	69fb      	ldr	r3, [r7, #28]
    c3d2:	2201      	movs	r2, #1
    c3d4:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c3d6:	68fb      	ldr	r3, [r7, #12]
    c3d8:	4618      	mov	r0, r3
    c3da:	f002 fc6f 	bl	ecbc <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    c3de:	7dfb      	ldrb	r3, [r7, #23]
    c3e0:	4618      	mov	r0, r3
    c3e2:	f002 fd85 	bl	eef0 <am_hal_pwrctrl_periph_disable>
            break;
    c3e6:	e002      	b.n	c3ee <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    c3e8:	2306      	movs	r3, #6
    c3ea:	e001      	b.n	c3f0 <am_hal_pdm_power_control+0xc4>
            break;
    c3ec:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c3ee:	2300      	movs	r3, #0
}
    c3f0:	4618      	mov	r0, r3
    c3f2:	3720      	adds	r7, #32
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	00f956e2 	.word	0x00f956e2

0000c3fc <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    c3fc:	b580      	push	{r7, lr}
    c3fe:	b088      	sub	sp, #32
    c400:	af00      	add	r7, sp, #0
    c402:	6078      	str	r0, [r7, #4]
    c404:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c40a:	69fb      	ldr	r3, [r7, #28]
    c40c:	689b      	ldr	r3, [r3, #8]
    c40e:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c410:	687b      	ldr	r3, [r7, #4]
    c412:	2b00      	cmp	r3, #0
    c414:	d00d      	beq.n	c432 <am_hal_pdm_configure+0x36>
    c416:	687b      	ldr	r3, [r7, #4]
    c418:	78db      	ldrb	r3, [r3, #3]
    c41a:	f003 0301 	and.w	r3, r3, #1
    c41e:	b2db      	uxtb	r3, r3
    c420:	2b00      	cmp	r3, #0
    c422:	d006      	beq.n	c432 <am_hal_pdm_configure+0x36>
    c424:	687b      	ldr	r3, [r7, #4]
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c42c:	4a5e      	ldr	r2, [pc, #376]	; (c5a8 <am_hal_pdm_configure+0x1ac>)
    c42e:	4293      	cmp	r3, r2
    c430:	d001      	beq.n	c436 <am_hal_pdm_configure+0x3a>
    c432:	2302      	movs	r3, #2
    c434:	e0b4      	b.n	c5a0 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    c436:	4a5d      	ldr	r2, [pc, #372]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c438:	683b      	ldr	r3, [r7, #0]
    c43a:	7f59      	ldrb	r1, [r3, #29]
    c43c:	6813      	ldr	r3, [r2, #0]
    c43e:	f361 0341 	bfi	r3, r1, #1, #1
    c442:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    c444:	683b      	ldr	r3, [r7, #0]
    c446:	699b      	ldr	r3, [r3, #24]
    c448:	4a58      	ldr	r2, [pc, #352]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c44a:	f003 0307 	and.w	r3, r3, #7
    c44e:	b2d9      	uxtb	r1, r3
    c450:	6813      	ldr	r3, [r2, #0]
    c452:	f361 0384 	bfi	r3, r1, #2, #3
    c456:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    c458:	683b      	ldr	r3, [r7, #0]
    c45a:	68db      	ldr	r3, [r3, #12]
    c45c:	4a53      	ldr	r2, [pc, #332]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c45e:	f003 030f 	and.w	r3, r3, #15
    c462:	b2d9      	uxtb	r1, r3
    c464:	6813      	ldr	r3, [r2, #0]
    c466:	f361 1348 	bfi	r3, r1, #5, #4
    c46a:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    c46c:	4a4f      	ldr	r2, [pc, #316]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c46e:	683b      	ldr	r3, [r7, #0]
    c470:	7a19      	ldrb	r1, [r3, #8]
    c472:	6813      	ldr	r3, [r2, #0]
    c474:	f361 2349 	bfi	r3, r1, #9, #1
    c478:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    c47a:	683b      	ldr	r3, [r7, #0]
    c47c:	685b      	ldr	r3, [r3, #4]
    c47e:	4a4b      	ldr	r2, [pc, #300]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c484:	b2d9      	uxtb	r1, r3
    c486:	6813      	ldr	r3, [r2, #0]
    c488:	f361 2390 	bfi	r3, r1, #10, #7
    c48c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    c48e:	683b      	ldr	r3, [r7, #0]
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	4a46      	ldr	r2, [pc, #280]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c494:	f003 0303 	and.w	r3, r3, #3
    c498:	b2d9      	uxtb	r1, r3
    c49a:	6813      	ldr	r3, [r2, #0]
    c49c:	f361 4352 	bfi	r3, r1, #17, #2
    c4a0:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    c4a2:	683b      	ldr	r3, [r7, #0]
    c4a4:	785b      	ldrb	r3, [r3, #1]
    c4a6:	4a41      	ldr	r2, [pc, #260]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4a8:	f003 031f 	and.w	r3, r3, #31
    c4ac:	b2d9      	uxtb	r1, r3
    c4ae:	6813      	ldr	r3, [r2, #0]
    c4b0:	f361 5359 	bfi	r3, r1, #21, #5
    c4b4:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    c4b6:	683b      	ldr	r3, [r7, #0]
    c4b8:	789b      	ldrb	r3, [r3, #2]
    c4ba:	4a3c      	ldr	r2, [pc, #240]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4bc:	f003 031f 	and.w	r3, r3, #31
    c4c0:	b2d9      	uxtb	r1, r3
    c4c2:	6813      	ldr	r3, [r2, #0]
    c4c4:	f361 639e 	bfi	r3, r1, #26, #5
    c4c8:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    c4ca:	4a38      	ldr	r2, [pc, #224]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4cc:	683b      	ldr	r3, [r7, #0]
    c4ce:	7f99      	ldrb	r1, [r3, #30]
    c4d0:	6813      	ldr	r3, [r2, #0]
    c4d2:	f361 73df 	bfi	r3, r1, #31, #1
    c4d6:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    c4d8:	4a34      	ldr	r2, [pc, #208]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4da:	6813      	ldr	r3, [r2, #0]
    c4dc:	f043 0301 	orr.w	r3, r3, #1
    c4e0:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    c4e2:	4a32      	ldr	r2, [pc, #200]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4e4:	6853      	ldr	r3, [r2, #4]
    c4e6:	f36f 639a 	bfc	r3, #26, #1
    c4ea:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    c4ec:	4a2f      	ldr	r2, [pc, #188]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4ee:	6853      	ldr	r3, [r2, #4]
    c4f0:	f36f 73df 	bfc	r3, #31, #1
    c4f4:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    c4f6:	4a2d      	ldr	r2, [pc, #180]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c4f8:	6853      	ldr	r3, [r2, #4]
    c4fa:	f36f 739e 	bfc	r3, #30, #1
    c4fe:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    c500:	683b      	ldr	r3, [r7, #0]
    c502:	7d5b      	ldrb	r3, [r3, #21]
    c504:	4a29      	ldr	r2, [pc, #164]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c506:	f003 0303 	and.w	r3, r3, #3
    c50a:	b2d9      	uxtb	r1, r3
    c50c:	6853      	ldr	r3, [r2, #4]
    c50e:	f361 03c4 	bfi	r3, r1, #3, #2
    c512:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    c514:	4a25      	ldr	r2, [pc, #148]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c516:	683b      	ldr	r3, [r7, #0]
    c518:	7d19      	ldrb	r1, [r3, #20]
    c51a:	6853      	ldr	r3, [r2, #4]
    c51c:	f361 2308 	bfi	r3, r1, #8, #1
    c520:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    c522:	683b      	ldr	r3, [r7, #0]
    c524:	7c9b      	ldrb	r3, [r3, #18]
    c526:	4a21      	ldr	r2, [pc, #132]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c528:	f003 0301 	and.w	r3, r3, #1
    c52c:	b2d9      	uxtb	r1, r3
    c52e:	6853      	ldr	r3, [r2, #4]
    c530:	f361 4310 	bfi	r3, r1, #16, #1
    c534:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    c536:	4a1d      	ldr	r2, [pc, #116]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c538:	683b      	ldr	r3, [r7, #0]
    c53a:	7cd9      	ldrb	r1, [r3, #19]
    c53c:	6853      	ldr	r3, [r2, #4]
    c53e:	f361 4351 	bfi	r3, r1, #17, #1
    c542:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    c544:	4a19      	ldr	r2, [pc, #100]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c546:	683b      	ldr	r3, [r7, #0]
    c548:	7c59      	ldrb	r1, [r3, #17]
    c54a:	6853      	ldr	r3, [r2, #4]
    c54c:	f361 43d3 	bfi	r3, r1, #19, #1
    c550:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    c552:	4a16      	ldr	r2, [pc, #88]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c554:	683b      	ldr	r3, [r7, #0]
    c556:	7f19      	ldrb	r1, [r3, #28]
    c558:	6853      	ldr	r3, [r2, #4]
    c55a:	f361 5314 	bfi	r3, r1, #20, #1
    c55e:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    c560:	683b      	ldr	r3, [r7, #0]
    c562:	7c1b      	ldrb	r3, [r3, #16]
    c564:	4a11      	ldr	r2, [pc, #68]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c566:	f003 0307 	and.w	r3, r3, #7
    c56a:	b2d9      	uxtb	r1, r3
    c56c:	6853      	ldr	r3, [r2, #4]
    c56e:	f361 63dd 	bfi	r3, r1, #27, #3
    c572:	6053      	str	r3, [r2, #4]

    delay_us(100);
    c574:	f107 030c 	add.w	r3, r7, #12
    c578:	4618      	mov	r0, r3
    c57a:	f002 fa61 	bl	ea40 <am_hal_clkgen_status_get>
    c57e:	68fb      	ldr	r3, [r7, #12]
    c580:	4a0b      	ldr	r2, [pc, #44]	; (c5b0 <am_hal_pdm_configure+0x1b4>)
    c582:	fba2 2303 	umull	r2, r3, r2, r3
    c586:	0c9b      	lsrs	r3, r3, #18
    c588:	2264      	movs	r2, #100	; 0x64
    c58a:	fb02 f303 	mul.w	r3, r2, r3
    c58e:	4618      	mov	r0, r3
    c590:	f002 fb5c 	bl	ec4c <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    c594:	4a05      	ldr	r2, [pc, #20]	; (c5ac <am_hal_pdm_configure+0x1b0>)
    c596:	6853      	ldr	r3, [r2, #4]
    c598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c59c:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c59e:	2300      	movs	r3, #0
}
    c5a0:	4618      	mov	r0, r3
    c5a2:	3720      	adds	r7, #32
    c5a4:	46bd      	mov	sp, r7
    c5a6:	bd80      	pop	{r7, pc}
    c5a8:	00f956e2 	.word	0x00f956e2
    c5ac:	50011000 	.word	0x50011000
    c5b0:	165e9f81 	.word	0x165e9f81

0000c5b4 <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    c5b4:	b480      	push	{r7}
    c5b6:	b085      	sub	sp, #20
    c5b8:	af00      	add	r7, sp, #0
    c5ba:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c5c0:	68fb      	ldr	r3, [r7, #12]
    c5c2:	689b      	ldr	r3, [r3, #8]
    c5c4:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c5c6:	687b      	ldr	r3, [r7, #4]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d00d      	beq.n	c5e8 <am_hal_pdm_enable+0x34>
    c5cc:	687b      	ldr	r3, [r7, #4]
    c5ce:	78db      	ldrb	r3, [r3, #3]
    c5d0:	f003 0301 	and.w	r3, r3, #1
    c5d4:	b2db      	uxtb	r3, r3
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d006      	beq.n	c5e8 <am_hal_pdm_enable+0x34>
    c5da:	687b      	ldr	r3, [r7, #4]
    c5dc:	681b      	ldr	r3, [r3, #0]
    c5de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c5e2:	4a0b      	ldr	r2, [pc, #44]	; (c610 <am_hal_pdm_enable+0x5c>)
    c5e4:	4293      	cmp	r3, r2
    c5e6:	d001      	beq.n	c5ec <am_hal_pdm_enable+0x38>
    c5e8:	2302      	movs	r3, #2
    c5ea:	e00a      	b.n	c602 <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    c5ec:	4a09      	ldr	r2, [pc, #36]	; (c614 <am_hal_pdm_enable+0x60>)
    c5ee:	6853      	ldr	r3, [r2, #4]
    c5f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c5f4:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    c5f6:	4a07      	ldr	r2, [pc, #28]	; (c614 <am_hal_pdm_enable+0x60>)
    c5f8:	6853      	ldr	r3, [r2, #4]
    c5fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c5fe:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c600:	2300      	movs	r3, #0
}
    c602:	4618      	mov	r0, r3
    c604:	3714      	adds	r7, #20
    c606:	46bd      	mov	sp, r7
    c608:	f85d 7b04 	ldr.w	r7, [sp], #4
    c60c:	4770      	bx	lr
    c60e:	bf00      	nop
    c610:	00f956e2 	.word	0x00f956e2
    c614:	50011000 	.word	0x50011000

0000c618 <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    c618:	b480      	push	{r7}
    c61a:	b087      	sub	sp, #28
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
    c620:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c622:	687b      	ldr	r3, [r7, #4]
    c624:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c626:	68fb      	ldr	r3, [r7, #12]
    c628:	689b      	ldr	r3, [r3, #8]
    c62a:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	2b00      	cmp	r3, #0
    c630:	d00d      	beq.n	c64e <am_hal_pdm_dma_start+0x36>
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	78db      	ldrb	r3, [r3, #3]
    c636:	f003 0301 	and.w	r3, r3, #1
    c63a:	b2db      	uxtb	r3, r3
    c63c:	2b00      	cmp	r3, #0
    c63e:	d006      	beq.n	c64e <am_hal_pdm_dma_start+0x36>
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	681b      	ldr	r3, [r3, #0]
    c644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c648:	4a33      	ldr	r2, [pc, #204]	; (c718 <am_hal_pdm_dma_start+0x100>)
    c64a:	4293      	cmp	r3, r2
    c64c:	d001      	beq.n	c652 <am_hal_pdm_dma_start+0x3a>
    c64e:	2302      	movs	r3, #2
    c650:	e05b      	b.n	c70a <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    c652:	2300      	movs	r3, #0
    c654:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    c656:	2301      	movs	r3, #1
    c658:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c65a:	2301      	movs	r3, #1
    c65c:	613b      	str	r3, [r7, #16]
    c65e:	e01b      	b.n	c698 <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c660:	683b      	ldr	r3, [r7, #0]
    c662:	685b      	ldr	r3, [r3, #4]
    c664:	693a      	ldr	r2, [r7, #16]
    c666:	fbb3 f2f2 	udiv	r2, r3, r2
    c66a:	6939      	ldr	r1, [r7, #16]
    c66c:	fb01 f202 	mul.w	r2, r1, r2
    c670:	1a9b      	subs	r3, r3, r2
    c672:	2b00      	cmp	r3, #0
    c674:	d10d      	bne.n	c692 <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    c676:	683b      	ldr	r3, [r7, #0]
    c678:	685a      	ldr	r2, [r3, #4]
    c67a:	693b      	ldr	r3, [r7, #16]
    c67c:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c680:	2b1f      	cmp	r3, #31
    c682:	d806      	bhi.n	c692 <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    c684:	683b      	ldr	r3, [r7, #0]
    c686:	685a      	ldr	r2, [r3, #4]
    c688:	693b      	ldr	r3, [r7, #16]
    c68a:	fbb2 f3f3 	udiv	r3, r2, r3
    c68e:	617b      	str	r3, [r7, #20]
            break;
    c690:	e007      	b.n	c6a2 <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c692:	693b      	ldr	r3, [r7, #16]
    c694:	3301      	adds	r3, #1
    c696:	613b      	str	r3, [r7, #16]
    c698:	683b      	ldr	r3, [r7, #0]
    c69a:	685b      	ldr	r3, [r3, #4]
    c69c:	693a      	ldr	r2, [r7, #16]
    c69e:	429a      	cmp	r2, r3
    c6a0:	d3de      	bcc.n	c660 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    c6a2:	697b      	ldr	r3, [r7, #20]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d102      	bne.n	c6ae <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    c6a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c6ac:	e02d      	b.n	c70a <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    c6ae:	4a1b      	ldr	r2, [pc, #108]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6b0:	697b      	ldr	r3, [r7, #20]
    c6b2:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    c6b4:	4b19      	ldr	r3, [pc, #100]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6b6:	2200      	movs	r2, #0
    c6b8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    c6bc:	4a17      	ldr	r2, [pc, #92]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6be:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c6c2:	f36f 2308 	bfc	r3, #8, #1
    c6c6:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    c6ca:	4a14      	ldr	r2, [pc, #80]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6cc:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c6d0:	f36f 0382 	bfc	r3, #2, #1
    c6d4:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    c6d8:	4a10      	ldr	r2, [pc, #64]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6da:	683b      	ldr	r3, [r7, #0]
    c6dc:	685b      	ldr	r3, [r3, #4]
    c6de:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    c6e2:	4a0e      	ldr	r2, [pc, #56]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6e4:	683b      	ldr	r3, [r7, #0]
    c6e6:	681b      	ldr	r3, [r3, #0]
    c6e8:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    c6ec:	4a0b      	ldr	r2, [pc, #44]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6ee:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    c6f2:	f043 0301 	orr.w	r3, r3, #1
    c6f6:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    c6fa:	4a08      	ldr	r2, [pc, #32]	; (c71c <am_hal_pdm_dma_start+0x104>)
    c6fc:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c700:	f043 0301 	orr.w	r3, r3, #1
    c704:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    c708:	2300      	movs	r3, #0
}
    c70a:	4618      	mov	r0, r3
    c70c:	371c      	adds	r7, #28
    c70e:	46bd      	mov	sp, r7
    c710:	f85d 7b04 	ldr.w	r7, [sp], #4
    c714:	4770      	bx	lr
    c716:	bf00      	nop
    c718:	00f956e2 	.word	0x00f956e2
    c71c:	50011000 	.word	0x50011000

0000c720 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    c720:	b480      	push	{r7}
    c722:	b085      	sub	sp, #20
    c724:	af00      	add	r7, sp, #0
    c726:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c72c:	68fb      	ldr	r3, [r7, #12]
    c72e:	689b      	ldr	r3, [r3, #8]
    c730:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c732:	687b      	ldr	r3, [r7, #4]
    c734:	2b00      	cmp	r3, #0
    c736:	d00d      	beq.n	c754 <am_hal_pdm_fifo_flush+0x34>
    c738:	687b      	ldr	r3, [r7, #4]
    c73a:	78db      	ldrb	r3, [r3, #3]
    c73c:	f003 0301 	and.w	r3, r3, #1
    c740:	b2db      	uxtb	r3, r3
    c742:	2b00      	cmp	r3, #0
    c744:	d006      	beq.n	c754 <am_hal_pdm_fifo_flush+0x34>
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c74e:	4a07      	ldr	r2, [pc, #28]	; (c76c <am_hal_pdm_fifo_flush+0x4c>)
    c750:	4293      	cmp	r3, r2
    c752:	d001      	beq.n	c758 <am_hal_pdm_fifo_flush+0x38>
    c754:	2302      	movs	r3, #2
    c756:	e003      	b.n	c760 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    c758:	4b05      	ldr	r3, [pc, #20]	; (c770 <am_hal_pdm_fifo_flush+0x50>)
    c75a:	2201      	movs	r2, #1
    c75c:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    c75e:	2300      	movs	r3, #0
}
    c760:	4618      	mov	r0, r3
    c762:	3714      	adds	r7, #20
    c764:	46bd      	mov	sp, r7
    c766:	f85d 7b04 	ldr.w	r7, [sp], #4
    c76a:	4770      	bx	lr
    c76c:	00f956e2 	.word	0x00f956e2
    c770:	50011000 	.word	0x50011000

0000c774 <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    c774:	b480      	push	{r7}
    c776:	b085      	sub	sp, #20
    c778:	af00      	add	r7, sp, #0
    c77a:	6078      	str	r0, [r7, #4]
    c77c:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c782:	68fb      	ldr	r3, [r7, #12]
    c784:	689b      	ldr	r3, [r3, #8]
    c786:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	2b00      	cmp	r3, #0
    c78c:	d00d      	beq.n	c7aa <am_hal_pdm_interrupt_enable+0x36>
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	78db      	ldrb	r3, [r3, #3]
    c792:	f003 0301 	and.w	r3, r3, #1
    c796:	b2db      	uxtb	r3, r3
    c798:	2b00      	cmp	r3, #0
    c79a:	d006      	beq.n	c7aa <am_hal_pdm_interrupt_enable+0x36>
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	681b      	ldr	r3, [r3, #0]
    c7a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c7a4:	4a09      	ldr	r2, [pc, #36]	; (c7cc <am_hal_pdm_interrupt_enable+0x58>)
    c7a6:	4293      	cmp	r3, r2
    c7a8:	d001      	beq.n	c7ae <am_hal_pdm_interrupt_enable+0x3a>
    c7aa:	2302      	movs	r3, #2
    c7ac:	e008      	b.n	c7c0 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    c7ae:	4b08      	ldr	r3, [pc, #32]	; (c7d0 <am_hal_pdm_interrupt_enable+0x5c>)
    c7b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    c7b4:	4906      	ldr	r1, [pc, #24]	; (c7d0 <am_hal_pdm_interrupt_enable+0x5c>)
    c7b6:	683b      	ldr	r3, [r7, #0]
    c7b8:	4313      	orrs	r3, r2
    c7ba:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    c7be:	2300      	movs	r3, #0
}
    c7c0:	4618      	mov	r0, r3
    c7c2:	3714      	adds	r7, #20
    c7c4:	46bd      	mov	sp, r7
    c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ca:	4770      	bx	lr
    c7cc:	00f956e2 	.word	0x00f956e2
    c7d0:	50011000 	.word	0x50011000

0000c7d4 <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    c7d4:	b480      	push	{r7}
    c7d6:	b085      	sub	sp, #20
    c7d8:	af00      	add	r7, sp, #0
    c7da:	6078      	str	r0, [r7, #4]
    c7dc:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c7de:	687b      	ldr	r3, [r7, #4]
    c7e0:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c7e2:	68fb      	ldr	r3, [r7, #12]
    c7e4:	689b      	ldr	r3, [r3, #8]
    c7e6:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c7e8:	687b      	ldr	r3, [r7, #4]
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d00d      	beq.n	c80a <am_hal_pdm_interrupt_clear+0x36>
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	78db      	ldrb	r3, [r3, #3]
    c7f2:	f003 0301 	and.w	r3, r3, #1
    c7f6:	b2db      	uxtb	r3, r3
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d006      	beq.n	c80a <am_hal_pdm_interrupt_clear+0x36>
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c804:	4a07      	ldr	r2, [pc, #28]	; (c824 <am_hal_pdm_interrupt_clear+0x50>)
    c806:	4293      	cmp	r3, r2
    c808:	d001      	beq.n	c80e <am_hal_pdm_interrupt_clear+0x3a>
    c80a:	2302      	movs	r3, #2
    c80c:	e004      	b.n	c818 <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    c80e:	4a06      	ldr	r2, [pc, #24]	; (c828 <am_hal_pdm_interrupt_clear+0x54>)
    c810:	683b      	ldr	r3, [r7, #0]
    c812:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    c816:	2300      	movs	r3, #0
}
    c818:	4618      	mov	r0, r3
    c81a:	3714      	adds	r7, #20
    c81c:	46bd      	mov	sp, r7
    c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c822:	4770      	bx	lr
    c824:	00f956e2 	.word	0x00f956e2
    c828:	50011000 	.word	0x50011000

0000c82c <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    c82c:	b480      	push	{r7}
    c82e:	b087      	sub	sp, #28
    c830:	af00      	add	r7, sp, #0
    c832:	60f8      	str	r0, [r7, #12]
    c834:	60b9      	str	r1, [r7, #8]
    c836:	4613      	mov	r3, r2
    c838:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c83a:	68fb      	ldr	r3, [r7, #12]
    c83c:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    c83e:	697b      	ldr	r3, [r7, #20]
    c840:	689b      	ldr	r3, [r3, #8]
    c842:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c844:	68fb      	ldr	r3, [r7, #12]
    c846:	2b00      	cmp	r3, #0
    c848:	d00d      	beq.n	c866 <am_hal_pdm_interrupt_status_get+0x3a>
    c84a:	68fb      	ldr	r3, [r7, #12]
    c84c:	78db      	ldrb	r3, [r3, #3]
    c84e:	f003 0301 	and.w	r3, r3, #1
    c852:	b2db      	uxtb	r3, r3
    c854:	2b00      	cmp	r3, #0
    c856:	d006      	beq.n	c866 <am_hal_pdm_interrupt_status_get+0x3a>
    c858:	68fb      	ldr	r3, [r7, #12]
    c85a:	681b      	ldr	r3, [r3, #0]
    c85c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c860:	4a10      	ldr	r2, [pc, #64]	; (c8a4 <am_hal_pdm_interrupt_status_get+0x78>)
    c862:	4293      	cmp	r3, r2
    c864:	d001      	beq.n	c86a <am_hal_pdm_interrupt_status_get+0x3e>
    c866:	2302      	movs	r3, #2
    c868:	e016      	b.n	c898 <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    c86a:	79fb      	ldrb	r3, [r7, #7]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d00d      	beq.n	c88c <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    c870:	4b0d      	ldr	r3, [pc, #52]	; (c8a8 <am_hal_pdm_interrupt_status_get+0x7c>)
    c872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    c876:	68bb      	ldr	r3, [r7, #8]
    c878:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    c87a:	4b0b      	ldr	r3, [pc, #44]	; (c8a8 <am_hal_pdm_interrupt_status_get+0x7c>)
    c87c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    c880:	68bb      	ldr	r3, [r7, #8]
    c882:	681b      	ldr	r3, [r3, #0]
    c884:	401a      	ands	r2, r3
    c886:	68bb      	ldr	r3, [r7, #8]
    c888:	601a      	str	r2, [r3, #0]
    c88a:	e004      	b.n	c896 <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    c88c:	4b06      	ldr	r3, [pc, #24]	; (c8a8 <am_hal_pdm_interrupt_status_get+0x7c>)
    c88e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    c892:	68bb      	ldr	r3, [r7, #8]
    c894:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    c896:	2300      	movs	r3, #0
}
    c898:	4618      	mov	r0, r3
    c89a:	371c      	adds	r7, #28
    c89c:	46bd      	mov	sp, r7
    c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8a2:	4770      	bx	lr
    c8a4:	00f956e2 	.word	0x00f956e2
    c8a8:	50011000 	.word	0x50011000

0000c8ac <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    c8ac:	b480      	push	{r7}
    c8ae:	b085      	sub	sp, #20
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
    c8b4:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    c8b6:	687b      	ldr	r3, [r7, #4]
    c8b8:	681b      	ldr	r3, [r3, #0]
    c8ba:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    c8bc:	683b      	ldr	r3, [r7, #0]
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    c8c2:	68fa      	ldr	r2, [r7, #12]
    c8c4:	68bb      	ldr	r3, [r7, #8]
    c8c6:	429a      	cmp	r2, r3
    c8c8:	bf0c      	ite	eq
    c8ca:	2301      	moveq	r3, #1
    c8cc:	2300      	movne	r3, #0
    c8ce:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    c8d0:	4618      	mov	r0, r3
    c8d2:	3714      	adds	r7, #20
    c8d4:	46bd      	mov	sp, r7
    c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8da:	4770      	bx	lr

0000c8dc <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b092      	sub	sp, #72	; 0x48
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
    c8e4:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    c8e6:	2300      	movs	r3, #0
    c8e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    c8ec:	687b      	ldr	r3, [r7, #4]
    c8ee:	2b31      	cmp	r3, #49	; 0x31
    c8f0:	d901      	bls.n	c8f6 <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c8f2:	2306      	movs	r3, #6
    c8f4:	e1c1      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    c8f6:	2300      	movs	r3, #0
    c8f8:	643b      	str	r3, [r7, #64]	; 0x40
    c8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8fc:	647b      	str	r3, [r7, #68]	; 0x44
    c8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c900:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    c902:	783b      	ldrb	r3, [r7, #0]
    c904:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c908:	b2db      	uxtb	r3, r3
    c90a:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    c90c:	783b      	ldrb	r3, [r7, #0]
    c90e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    c912:	b2db      	uxtb	r3, r3
    c914:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c918:	00db      	lsls	r3, r3, #3
    c91a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c91c:	4313      	orrs	r3, r2
    c91e:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    c920:	783b      	ldrb	r3, [r7, #0]
    c922:	f023 031f 	bic.w	r3, r3, #31
    c926:	b2db      	uxtb	r3, r3
    c928:	2b00      	cmp	r3, #0
    c92a:	d03e      	beq.n	c9aa <am_hal_gpio_pinconfig+0xce>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    c92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c92e:	f043 0301 	orr.w	r3, r3, #1
    c932:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    c934:	783b      	ldrb	r3, [r7, #0]
    c936:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c93a:	b2db      	uxtb	r3, r3
    c93c:	2b01      	cmp	r3, #1
    c93e:	d919      	bls.n	c974 <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    c940:	783b      	ldrb	r3, [r7, #0]
    c942:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c946:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    c948:	2b05      	cmp	r3, #5
    c94a:	d813      	bhi.n	c974 <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    c94c:	783b      	ldrb	r3, [r7, #0]
    c94e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c952:	b2db      	uxtb	r3, r3
    c954:	3b02      	subs	r3, #2
    c956:	019b      	lsls	r3, r3, #6
    c958:	461a      	mov	r2, r3
    c95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c95c:	4313      	orrs	r3, r2
    c95e:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    c960:	4a7b      	ldr	r2, [pc, #492]	; (cb50 <am_hal_gpio_pinconfig+0x274>)
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	4413      	add	r3, r2
    c966:	781b      	ldrb	r3, [r3, #0]
    c968:	f003 0301 	and.w	r3, r3, #1
    c96c:	2b00      	cmp	r3, #0
    c96e:	d11c      	bne.n	c9aa <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    c970:	4b78      	ldr	r3, [pc, #480]	; (cb54 <am_hal_gpio_pinconfig+0x278>)
    c972:	e182      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    c974:	783b      	ldrb	r3, [r7, #0]
    c976:	f023 031f 	bic.w	r3, r3, #31
    c97a:	b2db      	uxtb	r3, r3
    c97c:	2bc0      	cmp	r3, #192	; 0xc0
    c97e:	d104      	bne.n	c98a <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	2b14      	cmp	r3, #20
    c984:	d011      	beq.n	c9aa <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    c986:	4b74      	ldr	r3, [pc, #464]	; (cb58 <am_hal_gpio_pinconfig+0x27c>)
    c988:	e177      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    c98a:	783b      	ldrb	r3, [r7, #0]
    c98c:	f023 031f 	bic.w	r3, r3, #31
    c990:	b2db      	uxtb	r3, r3
    c992:	2b20      	cmp	r3, #32
    c994:	d109      	bne.n	c9aa <am_hal_gpio_pinconfig+0xce>
        {
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    c996:	4a6e      	ldr	r2, [pc, #440]	; (cb50 <am_hal_gpio_pinconfig+0x274>)
    c998:	687b      	ldr	r3, [r7, #4]
    c99a:	4413      	add	r3, r2
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	f003 0309 	and.w	r3, r3, #9
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d001      	beq.n	c9aa <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    c9a6:	4b6b      	ldr	r3, [pc, #428]	; (cb54 <am_hal_gpio_pinconfig+0x278>)
    c9a8:	e167      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d021      	beq.n	c9f4 <am_hal_gpio_pinconfig+0x118>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9b2:	2b01      	cmp	r3, #1
    c9b4:	d10c      	bne.n	c9d0 <am_hal_gpio_pinconfig+0xf4>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    c9b6:	4a66      	ldr	r2, [pc, #408]	; (cb50 <am_hal_gpio_pinconfig+0x274>)
    c9b8:	687b      	ldr	r3, [r7, #4]
    c9ba:	4413      	add	r3, r2
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d004      	beq.n	c9d0 <am_hal_gpio_pinconfig+0xf4>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    c9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9cc:	647b      	str	r3, [r7, #68]	; 0x44
    c9ce:	e011      	b.n	c9f4 <am_hal_gpio_pinconfig+0x118>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9d2:	2b02      	cmp	r3, #2
    c9d4:	d10c      	bne.n	c9f0 <am_hal_gpio_pinconfig+0x114>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    c9d6:	4a5e      	ldr	r2, [pc, #376]	; (cb50 <am_hal_gpio_pinconfig+0x274>)
    c9d8:	687b      	ldr	r3, [r7, #4]
    c9da:	4413      	add	r3, r2
    c9dc:	781b      	ldrb	r3, [r3, #0]
    c9de:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    c9e2:	2b00      	cmp	r3, #0
    c9e4:	d004      	beq.n	c9f0 <am_hal_gpio_pinconfig+0x114>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    c9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c9ec:	647b      	str	r3, [r7, #68]	; 0x44
    c9ee:	e001      	b.n	c9f4 <am_hal_gpio_pinconfig+0x118>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    c9f0:	4b5a      	ldr	r3, [pc, #360]	; (cb5c <am_hal_gpio_pinconfig+0x280>)
    c9f2:	e142      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    c9f4:	4a5a      	ldr	r2, [pc, #360]	; (cb60 <am_hal_gpio_pinconfig+0x284>)
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	4413      	add	r3, r2
    c9fa:	781b      	ldrb	r3, [r3, #0]
    c9fc:	461a      	mov	r2, r3
    c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca00:	fa42 f303 	asr.w	r3, r2, r3
    ca04:	005b      	lsls	r3, r3, #1
    ca06:	f003 0302 	and.w	r3, r3, #2
    ca0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ca0c:	4313      	orrs	r3, r2
    ca0e:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ca10:	4a54      	ldr	r2, [pc, #336]	; (cb64 <am_hal_gpio_pinconfig+0x288>)
    ca12:	687b      	ldr	r3, [r7, #4]
    ca14:	4413      	add	r3, r2
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	461a      	mov	r2, r3
    ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca1c:	4293      	cmp	r3, r2
    ca1e:	d13d      	bne.n	ca9c <am_hal_gpio_pinconfig+0x1c0>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    ca20:	78bb      	ldrb	r3, [r7, #2]
    ca22:	f003 0307 	and.w	r3, r3, #7
    ca26:	b2db      	uxtb	r3, r3
    ca28:	2b07      	cmp	r3, #7
    ca2a:	d101      	bne.n	ca30 <am_hal_gpio_pinconfig+0x154>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    ca2c:	4b4e      	ldr	r3, [pc, #312]	; (cb68 <am_hal_gpio_pinconfig+0x28c>)
    ca2e:	e124      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    ca30:	78bb      	ldrb	r3, [r7, #2]
    ca32:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ca36:	b2db      	uxtb	r3, r3
    ca38:	011b      	lsls	r3, r3, #4
    ca3a:	b25a      	sxtb	r2, r3
    ca3c:	78bb      	ldrb	r3, [r7, #2]
    ca3e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    ca42:	b2db      	uxtb	r3, r3
    ca44:	b25b      	sxtb	r3, r3
    ca46:	4313      	orrs	r3, r2
    ca48:	b25b      	sxtb	r3, r3
    ca4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    ca4e:	2300      	movs	r3, #0
    ca50:	637b      	str	r3, [r7, #52]	; 0x34
    ca52:	e00d      	b.n	ca70 <am_hal_gpio_pinconfig+0x194>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    ca54:	4a45      	ldr	r2, [pc, #276]	; (cb6c <am_hal_gpio_pinconfig+0x290>)
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	009b      	lsls	r3, r3, #2
    ca5a:	441a      	add	r2, r3
    ca5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca5e:	4413      	add	r3, r2
    ca60:	781b      	ldrb	r3, [r3, #0]
    ca62:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    ca66:	429a      	cmp	r2, r3
    ca68:	d006      	beq.n	ca78 <am_hal_gpio_pinconfig+0x19c>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca6c:	3301      	adds	r3, #1
    ca6e:	637b      	str	r3, [r7, #52]	; 0x34
    ca70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca72:	2b03      	cmp	r3, #3
    ca74:	d9ee      	bls.n	ca54 <am_hal_gpio_pinconfig+0x178>
    ca76:	e000      	b.n	ca7a <am_hal_gpio_pinconfig+0x19e>
            {
                break;
    ca78:	bf00      	nop
            }
        }

#ifdef AM_HAL_ENABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    ca7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca7c:	2b03      	cmp	r3, #3
    ca7e:	d901      	bls.n	ca84 <am_hal_gpio_pinconfig+0x1a8>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    ca80:	4b3b      	ldr	r3, [pc, #236]	; (cb70 <am_hal_gpio_pinconfig+0x294>)
    ca82:	e0fa      	b.n	cc7a <am_hal_gpio_pinconfig+0x39e>
        }
#endif // AM_HAL_ENABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca86:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    ca88:	78ba      	ldrb	r2, [r7, #2]
    ca8a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ca8e:	b2d2      	uxtb	r2, r2
    ca90:	00d2      	lsls	r2, r2, #3
    ca92:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    ca94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ca96:	4313      	orrs	r3, r2
    ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
    ca9a:	e044      	b.n	cb26 <am_hal_gpio_pinconfig+0x24a>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ca9c:	787b      	ldrb	r3, [r7, #1]
    ca9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    caa2:	b2db      	uxtb	r3, r3
    caa4:	005b      	lsls	r3, r3, #1
    caa6:	461a      	mov	r2, r3
    caa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    caaa:	4313      	orrs	r3, r2
    caac:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    caae:	787b      	ldrb	r3, [r7, #1]
    cab0:	f3c3 0381 	ubfx	r3, r3, #2, #2
    cab4:	b2db      	uxtb	r3, r3
    cab6:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cab8:	787b      	ldrb	r3, [r7, #1]
    caba:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cabe:	b2db      	uxtb	r3, r3
    cac0:	00db      	lsls	r3, r3, #3
    cac2:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cac6:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    cac8:	787b      	ldrb	r3, [r7, #1]
    caca:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cace:	b2db      	uxtb	r3, r3
    cad0:	105b      	asrs	r3, r3, #1
    cad2:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cad6:	4313      	orrs	r3, r2
    cad8:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cadc:	4313      	orrs	r3, r2
    cade:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cae0:	787b      	ldrb	r3, [r7, #1]
    cae2:	f003 030c 	and.w	r3, r3, #12
    cae6:	b2db      	uxtb	r3, r3
    cae8:	2b04      	cmp	r3, #4
    caea:	d007      	beq.n	cafc <am_hal_gpio_pinconfig+0x220>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    caec:	463b      	mov	r3, r7
    caee:	4921      	ldr	r1, [pc, #132]	; (cb74 <am_hal_gpio_pinconfig+0x298>)
    caf0:	4618      	mov	r0, r3
    caf2:	f7ff fedb 	bl	c8ac <pincfg_equ>
    caf6:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    caf8:	2b00      	cmp	r3, #0
    cafa:	d002      	beq.n	cb02 <am_hal_gpio_pinconfig+0x226>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    cafc:	2301      	movs	r3, #1
    cafe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    cb02:	787b      	ldrb	r3, [r7, #1]
    cb04:	f003 0360 	and.w	r3, r3, #96	; 0x60
    cb08:	b2db      	uxtb	r3, r3
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d10b      	bne.n	cb26 <am_hal_gpio_pinconfig+0x24a>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb10:	f023 0301 	bic.w	r3, r3, #1
    cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    cb16:	787b      	ldrb	r3, [r7, #1]
    cb18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cb1c:	b2db      	uxtb	r3, r3
    cb1e:	461a      	mov	r2, r3
    cb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb22:	4313      	orrs	r3, r2
    cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    cb26:	787b      	ldrb	r3, [r7, #1]
    cb28:	f3c3 0301 	ubfx	r3, r3, #0, #2
    cb2c:	b2db      	uxtb	r3, r3
    cb2e:	2b02      	cmp	r3, #2
    cb30:	d009      	beq.n	cb46 <am_hal_gpio_pinconfig+0x26a>
    cb32:	2b03      	cmp	r3, #3
    cb34:	d020      	beq.n	cb78 <am_hal_gpio_pinconfig+0x29c>
    cb36:	2b01      	cmp	r3, #1
    cb38:	d000      	beq.n	cb3c <am_hal_gpio_pinconfig+0x260>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    cb3a:	e026      	b.n	cb8a <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    cb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb3e:	f043 0304 	orr.w	r3, r3, #4
    cb42:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    cb44:	e021      	b.n	cb8a <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    cb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cb48:	f043 0301 	orr.w	r3, r3, #1
    cb4c:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    cb4e:	e01c      	b.n	cb8a <am_hal_gpio_pinconfig+0x2ae>
    cb50:	0000faa8 	.word	0x0000faa8
    cb54:	08000100 	.word	0x08000100
    cb58:	08000101 	.word	0x08000101
    cb5c:	08000102 	.word	0x08000102
    cb60:	0000fa74 	.word	0x0000fa74
    cb64:	0000fadc 	.word	0x0000fadc
    cb68:	08000103 	.word	0x08000103
    cb6c:	0000fb10 	.word	0x0000fb10
    cb70:	08000104 	.word	0x08000104
    cb74:	0000fa68 	.word	0x0000fa68
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb7a:	f043 0304 	orr.w	r3, r3, #4
    cb7e:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    cb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cb82:	f043 0301 	orr.w	r3, r3, #1
    cb86:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    cb88:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    cb8a:	687b      	ldr	r3, [r7, #4]
    cb8c:	085b      	lsrs	r3, r3, #1
    cb8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    cb92:	f023 0303 	bic.w	r3, r3, #3
    cb96:	4a3b      	ldr	r2, [pc, #236]	; (cc84 <am_hal_gpio_pinconfig+0x3a8>)
    cb98:	441a      	add	r2, r3
    cb9a:	627a      	str	r2, [r7, #36]	; 0x24
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	f023 0303 	bic.w	r3, r3, #3
    cba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cba6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cbaa:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	f023 0203 	bic.w	r2, r3, #3
    cbb2:	4b35      	ldr	r3, [pc, #212]	; (cc88 <am_hal_gpio_pinconfig+0x3ac>)
    cbb4:	4413      	add	r3, r2
    cbb6:	61fb      	str	r3, [r7, #28]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    cbb8:	687b      	ldr	r3, [r7, #4]
    cbba:	009b      	lsls	r3, r3, #2
    cbbc:	f003 031c 	and.w	r3, r3, #28
    cbc0:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	00db      	lsls	r3, r3, #3
    cbc6:	f003 0318 	and.w	r3, r3, #24
    cbca:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    cbcc:	220f      	movs	r2, #15
    cbce:	69bb      	ldr	r3, [r7, #24]
    cbd0:	fa02 f303 	lsl.w	r3, r2, r3
    cbd4:	43db      	mvns	r3, r3
    cbd6:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    cbd8:	22ff      	movs	r2, #255	; 0xff
    cbda:	697b      	ldr	r3, [r7, #20]
    cbdc:	fa02 f303 	lsl.w	r3, r2, r3
    cbe0:	43db      	mvns	r3, r3
    cbe2:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    cbe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cbe6:	697b      	ldr	r3, [r7, #20]
    cbe8:	fa02 f303 	lsl.w	r3, r2, r3
    cbec:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    cbee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cbf0:	697b      	ldr	r3, [r7, #20]
    cbf2:	fa02 f303 	lsl.w	r3, r2, r3
    cbf6:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    cbf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cbfa:	69bb      	ldr	r3, [r7, #24]
    cbfc:	fa02 f303 	lsl.w	r3, r2, r3
    cc00:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    cc02:	f002 f857 	bl	ecb4 <am_hal_interrupt_master_disable>
    cc06:	4603      	mov	r3, r0
    cc08:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    cc0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d00d      	beq.n	cc2e <am_hal_gpio_pinconfig+0x352>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    cc12:	687b      	ldr	r3, [r7, #4]
    cc14:	f003 021f 	and.w	r2, r3, #31
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	095b      	lsrs	r3, r3, #5
    cc1c:	f003 0301 	and.w	r3, r3, #1
    cc20:	0099      	lsls	r1, r3, #2
    cc22:	4b1a      	ldr	r3, [pc, #104]	; (cc8c <am_hal_gpio_pinconfig+0x3b0>)
    cc24:	440b      	add	r3, r1
    cc26:	2101      	movs	r1, #1
    cc28:	fa01 f202 	lsl.w	r2, r1, r2
    cc2c:	601a      	str	r2, [r3, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    cc2e:	4b18      	ldr	r3, [pc, #96]	; (cc90 <am_hal_gpio_pinconfig+0x3b4>)
    cc30:	2273      	movs	r2, #115	; 0x73
    cc32:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    cc34:	6a3b      	ldr	r3, [r7, #32]
    cc36:	681a      	ldr	r2, [r3, #0]
    cc38:	68fb      	ldr	r3, [r7, #12]
    cc3a:	ea02 0103 	and.w	r1, r2, r3
    cc3e:	6a3b      	ldr	r3, [r7, #32]
    cc40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cc42:	430a      	orrs	r2, r1
    cc44:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc48:	681a      	ldr	r2, [r3, #0]
    cc4a:	693b      	ldr	r3, [r7, #16]
    cc4c:	ea02 0103 	and.w	r1, r2, r3
    cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cc54:	430a      	orrs	r2, r1
    cc56:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    cc58:	69fb      	ldr	r3, [r7, #28]
    cc5a:	681a      	ldr	r2, [r3, #0]
    cc5c:	68fb      	ldr	r3, [r7, #12]
    cc5e:	ea02 0103 	and.w	r1, r2, r3
    cc62:	69fb      	ldr	r3, [r7, #28]
    cc64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cc66:	430a      	orrs	r2, r1
    cc68:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    cc6a:	4b09      	ldr	r3, [pc, #36]	; (cc90 <am_hal_gpio_pinconfig+0x3b4>)
    cc6c:	2200      	movs	r2, #0
    cc6e:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    cc70:	68bb      	ldr	r3, [r7, #8]
    cc72:	4618      	mov	r0, r3
    cc74:	f002 f822 	bl	ecbc <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    cc78:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    cc7a:	4618      	mov	r0, r3
    cc7c:	3748      	adds	r7, #72	; 0x48
    cc7e:	46bd      	mov	sp, r7
    cc80:	bd80      	pop	{r7, pc}
    cc82:	bf00      	nop
    cc84:	40010040 	.word	0x40010040
    cc88:	400100e0 	.word	0x400100e0
    cc8c:	400100b4 	.word	0x400100b4
    cc90:	40010000 	.word	0x40010000

0000cc94 <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    cc94:	b480      	push	{r7}
    cc96:	b089      	sub	sp, #36	; 0x24
    cc98:	af00      	add	r7, sp, #0
    cc9a:	60f8      	str	r0, [r7, #12]
    cc9c:	460b      	mov	r3, r1
    cc9e:	607a      	str	r2, [r7, #4]
    cca0:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    cca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cca6:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    cca8:	687b      	ldr	r3, [r7, #4]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d101      	bne.n	ccb2 <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    ccae:	2306      	movs	r3, #6
    ccb0:	e047      	b.n	cd42 <am_hal_gpio_state_read+0xae>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    ccb2:	68fb      	ldr	r3, [r7, #12]
    ccb4:	2b31      	cmp	r3, #49	; 0x31
    ccb6:	d904      	bls.n	ccc2 <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    ccb8:	687b      	ldr	r3, [r7, #4]
    ccba:	69fa      	ldr	r2, [r7, #28]
    ccbc:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    ccbe:	2305      	movs	r3, #5
    ccc0:	e03f      	b.n	cd42 <am_hal_gpio_state_read+0xae>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    ccc2:	68fb      	ldr	r3, [r7, #12]
    ccc4:	095b      	lsrs	r3, r3, #5
    ccc6:	f003 0301 	and.w	r3, r3, #1
    ccca:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    cccc:	68fb      	ldr	r3, [r7, #12]
    ccce:	f003 031f 	and.w	r3, r3, #31
    ccd2:	617b      	str	r3, [r7, #20]
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    ccd4:	7afb      	ldrb	r3, [r7, #11]
    ccd6:	2b01      	cmp	r3, #1
    ccd8:	d011      	beq.n	ccfe <am_hal_gpio_state_read+0x6a>
    ccda:	2b02      	cmp	r3, #2
    ccdc:	d01d      	beq.n	cd1a <am_hal_gpio_state_read+0x86>
    ccde:	2b00      	cmp	r3, #0
    cce0:	d129      	bne.n	cd36 <am_hal_gpio_state_read+0xa2>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    cce2:	69bb      	ldr	r3, [r7, #24]
    cce4:	009a      	lsls	r2, r3, #2
    cce6:	4b1a      	ldr	r3, [pc, #104]	; (cd50 <am_hal_gpio_state_read+0xbc>)
    cce8:	4413      	add	r3, r2
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    ccee:	69fa      	ldr	r2, [r7, #28]
    ccf0:	697b      	ldr	r3, [r7, #20]
    ccf2:	fa22 f303 	lsr.w	r3, r2, r3
    ccf6:	f003 0301 	and.w	r3, r3, #1
    ccfa:	61fb      	str	r3, [r7, #28]
            break;
    ccfc:	e01d      	b.n	cd3a <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    ccfe:	69bb      	ldr	r3, [r7, #24]
    cd00:	009a      	lsls	r2, r3, #2
    cd02:	4b14      	ldr	r3, [pc, #80]	; (cd54 <am_hal_gpio_state_read+0xc0>)
    cd04:	4413      	add	r3, r2
    cd06:	681b      	ldr	r3, [r3, #0]
    cd08:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cd0a:	69fa      	ldr	r2, [r7, #28]
    cd0c:	697b      	ldr	r3, [r7, #20]
    cd0e:	fa22 f303 	lsr.w	r3, r2, r3
    cd12:	f003 0301 	and.w	r3, r3, #1
    cd16:	61fb      	str	r3, [r7, #28]
            break;
    cd18:	e00f      	b.n	cd3a <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    cd1a:	69bb      	ldr	r3, [r7, #24]
    cd1c:	009a      	lsls	r2, r3, #2
    cd1e:	4b0e      	ldr	r3, [pc, #56]	; (cd58 <am_hal_gpio_state_read+0xc4>)
    cd20:	4413      	add	r3, r2
    cd22:	681b      	ldr	r3, [r3, #0]
    cd24:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cd26:	69fa      	ldr	r2, [r7, #28]
    cd28:	697b      	ldr	r3, [r7, #20]
    cd2a:	fa22 f303 	lsr.w	r3, r2, r3
    cd2e:	f003 0301 	and.w	r3, r3, #1
    cd32:	61fb      	str	r3, [r7, #28]
            break;
    cd34:	e001      	b.n	cd3a <am_hal_gpio_state_read+0xa6>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    cd36:	2306      	movs	r3, #6
    cd38:	e003      	b.n	cd42 <am_hal_gpio_state_read+0xae>
    }

    *pui32ReadState = ui32ReadValue;
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	69fa      	ldr	r2, [r7, #28]
    cd3e:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    cd40:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    cd42:	4618      	mov	r0, r3
    cd44:	3724      	adds	r7, #36	; 0x24
    cd46:	46bd      	mov	sp, r7
    cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd4c:	4770      	bx	lr
    cd4e:	bf00      	nop
    cd50:	40010080 	.word	0x40010080
    cd54:	40010088 	.word	0x40010088
    cd58:	400100a0 	.word	0x400100a0

0000cd5c <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b086      	sub	sp, #24
    cd60:	af00      	add	r7, sp, #0
    cd62:	6078      	str	r0, [r7, #4]
    cd64:	460b      	mov	r3, r1
    cd66:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    cd68:	2300      	movs	r3, #0
    cd6a:	617b      	str	r3, [r7, #20]

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	2b31      	cmp	r3, #49	; 0x31
    cd70:	d901      	bls.n	cd76 <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    cd72:	2305      	movs	r3, #5
    cd74:	e068      	b.n	ce48 <am_hal_gpio_state_write+0xec>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    cd76:	78fb      	ldrb	r3, [r7, #3]
    cd78:	2b05      	cmp	r3, #5
    cd7a:	d901      	bls.n	cd80 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cd7c:	2306      	movs	r3, #6
    cd7e:	e063      	b.n	ce48 <am_hal_gpio_state_write+0xec>
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    cd80:	687b      	ldr	r3, [r7, #4]
    cd82:	f003 031f 	and.w	r3, r3, #31
    cd86:	2201      	movs	r2, #1
    cd88:	fa02 f303 	lsl.w	r3, r2, r3
    cd8c:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    cd8e:	687b      	ldr	r3, [r7, #4]
    cd90:	08db      	lsrs	r3, r3, #3
    cd92:	f003 0304 	and.w	r3, r3, #4
    cd96:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    cd98:	f001 ff8c 	bl	ecb4 <am_hal_interrupt_master_disable>
    cd9c:	4603      	mov	r3, r0
    cd9e:	60bb      	str	r3, [r7, #8]

    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    cda0:	68fb      	ldr	r3, [r7, #12]
    cda2:	089b      	lsrs	r3, r3, #2
    cda4:	60fb      	str	r3, [r7, #12]
    switch ( eWriteType )
    cda6:	78fb      	ldrb	r3, [r7, #3]
    cda8:	2b05      	cmp	r3, #5
    cdaa:	d845      	bhi.n	ce38 <am_hal_gpio_state_write+0xdc>
    cdac:	a201      	add	r2, pc, #4	; (adr r2, cdb4 <am_hal_gpio_state_write+0x58>)
    cdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cdb2:	bf00      	nop
    cdb4:	0000cddb 	.word	0x0000cddb
    cdb8:	0000cdcd 	.word	0x0000cdcd
    cdbc:	0000cde9 	.word	0x0000cde9
    cdc0:	0000ce11 	.word	0x0000ce11
    cdc4:	0000ce03 	.word	0x0000ce03
    cdc8:	0000ce1f 	.word	0x0000ce1f
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    cdcc:	68fb      	ldr	r3, [r7, #12]
    cdce:	009a      	lsls	r2, r3, #2
    cdd0:	4b1f      	ldr	r3, [pc, #124]	; (ce50 <am_hal_gpio_state_write+0xf4>)
    cdd2:	4413      	add	r3, r2
    cdd4:	693a      	ldr	r2, [r7, #16]
    cdd6:	601a      	str	r2, [r3, #0]
            break;
    cdd8:	e031      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    cdda:	68fb      	ldr	r3, [r7, #12]
    cddc:	009a      	lsls	r2, r3, #2
    cdde:	4b1d      	ldr	r3, [pc, #116]	; (ce54 <am_hal_gpio_state_write+0xf8>)
    cde0:	4413      	add	r3, r2
    cde2:	693a      	ldr	r2, [r7, #16]
    cde4:	601a      	str	r2, [r3, #0]
            break;
    cde6:	e02a      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    cde8:	68fb      	ldr	r3, [r7, #12]
    cdea:	009a      	lsls	r2, r3, #2
    cdec:	4b1a      	ldr	r3, [pc, #104]	; (ce58 <am_hal_gpio_state_write+0xfc>)
    cdee:	4413      	add	r3, r2
    cdf0:	6819      	ldr	r1, [r3, #0]
    cdf2:	68fb      	ldr	r3, [r7, #12]
    cdf4:	009a      	lsls	r2, r3, #2
    cdf6:	4b18      	ldr	r3, [pc, #96]	; (ce58 <am_hal_gpio_state_write+0xfc>)
    cdf8:	4413      	add	r3, r2
    cdfa:	693a      	ldr	r2, [r7, #16]
    cdfc:	404a      	eors	r2, r1
    cdfe:	601a      	str	r2, [r3, #0]
            break;
    ce00:	e01d      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    ce02:	68fb      	ldr	r3, [r7, #12]
    ce04:	009a      	lsls	r2, r3, #2
    ce06:	4b15      	ldr	r3, [pc, #84]	; (ce5c <am_hal_gpio_state_write+0x100>)
    ce08:	4413      	add	r3, r2
    ce0a:	693a      	ldr	r2, [r7, #16]
    ce0c:	601a      	str	r2, [r3, #0]
            break;
    ce0e:	e016      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    ce10:	68fb      	ldr	r3, [r7, #12]
    ce12:	009a      	lsls	r2, r3, #2
    ce14:	4b12      	ldr	r3, [pc, #72]	; (ce60 <am_hal_gpio_state_write+0x104>)
    ce16:	4413      	add	r3, r2
    ce18:	693a      	ldr	r2, [r7, #16]
    ce1a:	601a      	str	r2, [r3, #0]
            break;
    ce1c:	e00f      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    ce1e:	68fb      	ldr	r3, [r7, #12]
    ce20:	009a      	lsls	r2, r3, #2
    ce22:	4b0f      	ldr	r3, [pc, #60]	; (ce60 <am_hal_gpio_state_write+0x104>)
    ce24:	4413      	add	r3, r2
    ce26:	6819      	ldr	r1, [r3, #0]
    ce28:	68fb      	ldr	r3, [r7, #12]
    ce2a:	009a      	lsls	r2, r3, #2
    ce2c:	4b0c      	ldr	r3, [pc, #48]	; (ce60 <am_hal_gpio_state_write+0x104>)
    ce2e:	4413      	add	r3, r2
    ce30:	693a      	ldr	r2, [r7, #16]
    ce32:	404a      	eors	r2, r1
    ce34:	601a      	str	r2, [r3, #0]
            break;
    ce36:	e002      	b.n	ce3e <am_hal_gpio_state_write+0xe2>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    ce38:	2306      	movs	r3, #6
    ce3a:	617b      	str	r3, [r7, #20]
            break;
    ce3c:	bf00      	nop
    }

    AM_CRITICAL_END;
    ce3e:	68bb      	ldr	r3, [r7, #8]
    ce40:	4618      	mov	r0, r3
    ce42:	f001 ff3b 	bl	ecbc <am_hal_interrupt_master_set>

    return ui32Return;
    ce46:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    ce48:	4618      	mov	r0, r3
    ce4a:	3718      	adds	r7, #24
    ce4c:	46bd      	mov	sp, r7
    ce4e:	bd80      	pop	{r7, pc}
    ce50:	40010090 	.word	0x40010090
    ce54:	40010098 	.word	0x40010098
    ce58:	40010088 	.word	0x40010088
    ce5c:	400100a8 	.word	0x400100a8
    ce60:	400100b4 	.word	0x400100b4

0000ce64 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    ce64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    ce68:	b084      	sub	sp, #16
    ce6a:	af00      	add	r7, sp, #0
    ce6c:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    ce70:	e9d7 3400 	ldrd	r3, r4, [r7]
    ce74:	f04f 0100 	mov.w	r1, #0
    ce78:	4a17      	ldr	r2, [pc, #92]	; (ced8 <am_hal_gpio_interrupt_enable+0x74>)
    ce7a:	ea03 0b01 	and.w	fp, r3, r1
    ce7e:	ea04 0c02 	and.w	ip, r4, r2
    ce82:	ea5b 030c 	orrs.w	r3, fp, ip
    ce86:	d001      	beq.n	ce8c <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    ce88:	2305      	movs	r3, #5
    ce8a:	e01f      	b.n	cecc <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    ce8c:	f001 ff12 	bl	ecb4 <am_hal_interrupt_master_disable>
    ce90:	4603      	mov	r3, r0
    ce92:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    ce94:	4b11      	ldr	r3, [pc, #68]	; (cedc <am_hal_gpio_interrupt_enable+0x78>)
    ce96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ce9a:	683b      	ldr	r3, [r7, #0]
    ce9c:	490f      	ldr	r1, [pc, #60]	; (cedc <am_hal_gpio_interrupt_enable+0x78>)
    ce9e:	4313      	orrs	r3, r2
    cea0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    cea4:	4b0d      	ldr	r3, [pc, #52]	; (cedc <am_hal_gpio_interrupt_enable+0x78>)
    cea6:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    ceaa:	e9d7 1200 	ldrd	r1, r2, [r7]
    ceae:	f04f 0300 	mov.w	r3, #0
    ceb2:	f04f 0400 	mov.w	r4, #0
    ceb6:	0013      	movs	r3, r2
    ceb8:	2400      	movs	r4, #0
    ceba:	4a08      	ldr	r2, [pc, #32]	; (cedc <am_hal_gpio_interrupt_enable+0x78>)
    cebc:	4303      	orrs	r3, r0
    cebe:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    cec2:	68fb      	ldr	r3, [r7, #12]
    cec4:	4618      	mov	r0, r3
    cec6:	f001 fef9 	bl	ecbc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    ceca:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    cecc:	4618      	mov	r0, r3
    cece:	3710      	adds	r7, #16
    ced0:	46bd      	mov	sp, r7
    ced2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    ced6:	bf00      	nop
    ced8:	fffc0000 	.word	0xfffc0000
    cedc:	40010000 	.word	0x40010000

0000cee0 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    cee0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    cee4:	b084      	sub	sp, #16
    cee6:	af00      	add	r7, sp, #0
    cee8:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    ceec:	e9d7 3400 	ldrd	r3, r4, [r7]
    cef0:	f04f 0100 	mov.w	r1, #0
    cef4:	4a13      	ldr	r2, [pc, #76]	; (cf44 <am_hal_gpio_interrupt_clear+0x64>)
    cef6:	ea03 0b01 	and.w	fp, r3, r1
    cefa:	ea04 0c02 	and.w	ip, r4, r2
    cefe:	ea5b 030c 	orrs.w	r3, fp, ip
    cf02:	d001      	beq.n	cf08 <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    cf04:	2305      	movs	r3, #5
    cf06:	e017      	b.n	cf38 <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    cf08:	f001 fed4 	bl	ecb4 <am_hal_interrupt_master_disable>
    cf0c:	4603      	mov	r3, r0
    cf0e:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    cf10:	4a0d      	ldr	r2, [pc, #52]	; (cf48 <am_hal_gpio_interrupt_clear+0x68>)
    cf12:	683b      	ldr	r3, [r7, #0]
    cf14:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    cf18:	e9d7 1200 	ldrd	r1, r2, [r7]
    cf1c:	f04f 0300 	mov.w	r3, #0
    cf20:	f04f 0400 	mov.w	r4, #0
    cf24:	0013      	movs	r3, r2
    cf26:	2400      	movs	r4, #0
    cf28:	4a07      	ldr	r2, [pc, #28]	; (cf48 <am_hal_gpio_interrupt_clear+0x68>)
    cf2a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    cf2e:	68fb      	ldr	r3, [r7, #12]
    cf30:	4618      	mov	r0, r3
    cf32:	f001 fec3 	bl	ecbc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    cf36:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    cf38:	4618      	mov	r0, r3
    cf3a:	3710      	adds	r7, #16
    cf3c:	46bd      	mov	sp, r7
    cf3e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    cf42:	bf00      	nop
    cf44:	fffc0000 	.word	0xfffc0000
    cf48:	40010000 	.word	0x40010000

0000cf4c <am_hal_gpio_interrupt_status_get>:
// Get GPIO interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_status_get(bool bEnabledOnly, uint64_t *pui64IntStatus)
{
    cf4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    cf50:	b088      	sub	sp, #32
    cf52:	af00      	add	r7, sp, #0
    cf54:	4603      	mov	r3, r0
    cf56:	6039      	str	r1, [r7, #0]
    cf58:	71fb      	strb	r3, [r7, #7]

    uint64_t ui64RetVal, ui64Mask;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
    cf5a:	683b      	ldr	r3, [r7, #0]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d101      	bne.n	cf64 <am_hal_gpio_interrupt_status_get+0x18>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cf60:	2306      	movs	r3, #6
    cf62:	e058      	b.n	d016 <am_hal_gpio_interrupt_status_get+0xca>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize variable outside critical section
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    cf64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cf6c:	e9c7 3406 	strd	r3, r4, [r7, #24]

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
    cf70:	f001 fea0 	bl	ecb4 <am_hal_interrupt_master_disable>
    cf74:	4603      	mov	r3, r0
    cf76:	60fb      	str	r3, [r7, #12]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
    cf78:	4b29      	ldr	r3, [pc, #164]	; (d020 <am_hal_gpio_interrupt_status_get+0xd4>)
    cf7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    cf7e:	4619      	mov	r1, r3
    cf80:	f04f 0200 	mov.w	r2, #0
    cf84:	f04f 0300 	mov.w	r3, #0
    cf88:	f04f 0400 	mov.w	r4, #0
    cf8c:	000c      	movs	r4, r1
    cf8e:	2300      	movs	r3, #0
    cf90:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
    cf94:	4b22      	ldr	r3, [pc, #136]	; (d020 <am_hal_gpio_interrupt_status_get+0xd4>)
    cf96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    cf9a:	469b      	mov	fp, r3
    cf9c:	f04f 0c00 	mov.w	ip, #0
    cfa0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    cfa4:	ea4b 0301 	orr.w	r3, fp, r1
    cfa8:	ea4c 0402 	orr.w	r4, ip, r2
    cfac:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if ( bEnabledOnly )
    cfb0:	79fb      	ldrb	r3, [r7, #7]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d01b      	beq.n	cfee <am_hal_gpio_interrupt_status_get+0xa2>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
    cfb6:	4b1a      	ldr	r3, [pc, #104]	; (d020 <am_hal_gpio_interrupt_status_get+0xd4>)
    cfb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    cfbc:	4619      	mov	r1, r3
    cfbe:	f04f 0200 	mov.w	r2, #0
    cfc2:	f04f 0300 	mov.w	r3, #0
    cfc6:	f04f 0400 	mov.w	r4, #0
    cfca:	000c      	movs	r4, r1
    cfcc:	2300      	movs	r3, #0
    cfce:	e9c7 3406 	strd	r3, r4, [r7, #24]
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
    cfd2:	4b13      	ldr	r3, [pc, #76]	; (d020 <am_hal_gpio_interrupt_status_get+0xd4>)
    cfd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    cfd8:	469b      	mov	fp, r3
    cfda:	f04f 0c00 	mov.w	ip, #0
    cfde:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    cfe2:	ea4b 0301 	orr.w	r3, fp, r1
    cfe6:	ea4c 0402 	orr.w	r4, ip, r2
    cfea:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }

    ui64RetVal &= ui64Mask;
    cfee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    cff2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cff6:	ea03 0b01 	and.w	fp, r3, r1
    cffa:	ea04 0c02 	and.w	ip, r4, r2
    cffe:	e9c7 bc04 	strd	fp, ip, [r7, #16]

    *pui64IntStatus = ui64RetVal;
    d002:	683a      	ldr	r2, [r7, #0]
    d004:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d008:	e9c2 3400 	strd	r3, r4, [r2]

    AM_CRITICAL_END
    d00c:	68fb      	ldr	r3, [r7, #12]
    d00e:	4618      	mov	r0, r3
    d010:	f001 fe54 	bl	ecbc <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d014:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_status_get()
    d016:	4618      	mov	r0, r3
    d018:	3720      	adds	r7, #32
    d01a:	46bd      	mov	sp, r7
    d01c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d020:	40010000 	.word	0x40010000

0000d024 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d024:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d026:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d02a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d02c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d030:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d034:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d038:	f000 f80a 	bl	d050 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d03c:	bd01      	pop	{r0, pc}
}
    d03e:	bf00      	nop
    d040:	4618      	mov	r0, r3

0000d042 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d042:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d044:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d046:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d048:	4770      	bx	lr
}
    d04a:	bf00      	nop
    d04c:	4618      	mov	r0, r3
	...

0000d050 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d050:	b580      	push	{r7, lr}
    d052:	b096      	sub	sp, #88	; 0x58
    d054:	af00      	add	r7, sp, #0
    d056:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d058:	f107 030c 	add.w	r3, r7, #12
    d05c:	2200      	movs	r2, #0
    d05e:	601a      	str	r2, [r3, #0]
    d060:	605a      	str	r2, [r3, #4]
    d062:	609a      	str	r2, [r3, #8]
    d064:	60da      	str	r2, [r3, #12]
    d066:	611a      	str	r2, [r3, #16]
    d068:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d06a:	2300      	movs	r3, #0
    d06c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d070:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d072:	4b2e      	ldr	r3, [pc, #184]	; (d12c <am_util_faultisr_collect_data+0xdc>)
    d074:	681b      	ldr	r3, [r3, #0]
    d076:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d07a:	b2db      	uxtb	r3, r3
    d07c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d082:	0a1b      	lsrs	r3, r3, #8
    d084:	b2db      	uxtb	r3, r3
    d086:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d08c:	0c1b      	lsrs	r3, r3, #16
    d08e:	b29b      	uxth	r3, r3
    d090:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d094:	4b26      	ldr	r3, [pc, #152]	; (d130 <am_util_faultisr_collect_data+0xe0>)
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d09a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d09e:	b2db      	uxtb	r3, r3
    d0a0:	f003 0302 	and.w	r3, r3, #2
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d005      	beq.n	d0b4 <am_util_faultisr_collect_data+0x64>
    d0a8:	6879      	ldr	r1, [r7, #4]
    d0aa:	2006      	movs	r0, #6
    d0ac:	f7ff ffc9 	bl	d042 <getStackedReg>
    d0b0:	4603      	mov	r3, r0
    d0b2:	e001      	b.n	d0b8 <am_util_faultisr_collect_data+0x68>
    d0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d0b8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d0ba:	6879      	ldr	r1, [r7, #4]
    d0bc:	2000      	movs	r0, #0
    d0be:	f7ff ffc0 	bl	d042 <getStackedReg>
    d0c2:	4603      	mov	r3, r0
    d0c4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d0c6:	6879      	ldr	r1, [r7, #4]
    d0c8:	2001      	movs	r0, #1
    d0ca:	f7ff ffba 	bl	d042 <getStackedReg>
    d0ce:	4603      	mov	r3, r0
    d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d0d2:	6879      	ldr	r1, [r7, #4]
    d0d4:	2002      	movs	r0, #2
    d0d6:	f7ff ffb4 	bl	d042 <getStackedReg>
    d0da:	4603      	mov	r3, r0
    d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d0de:	6879      	ldr	r1, [r7, #4]
    d0e0:	2003      	movs	r0, #3
    d0e2:	f7ff ffae 	bl	d042 <getStackedReg>
    d0e6:	4603      	mov	r3, r0
    d0e8:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d0ea:	6879      	ldr	r1, [r7, #4]
    d0ec:	2004      	movs	r0, #4
    d0ee:	f7ff ffa8 	bl	d042 <getStackedReg>
    d0f2:	4603      	mov	r3, r0
    d0f4:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d0f6:	6879      	ldr	r1, [r7, #4]
    d0f8:	2005      	movs	r0, #5
    d0fa:	f7ff ffa2 	bl	d042 <getStackedReg>
    d0fe:	4603      	mov	r3, r0
    d100:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d102:	6879      	ldr	r1, [r7, #4]
    d104:	2006      	movs	r0, #6
    d106:	f7ff ff9c 	bl	d042 <getStackedReg>
    d10a:	4603      	mov	r3, r0
    d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d10e:	6879      	ldr	r1, [r7, #4]
    d110:	2007      	movs	r0, #7
    d112:	f7ff ff96 	bl	d042 <getStackedReg>
    d116:	4603      	mov	r3, r0
    d118:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d11a:	f107 030c 	add.w	r3, r7, #12
    d11e:	4619      	mov	r1, r3
    d120:	2002      	movs	r0, #2
    d122:	f001 fe25 	bl	ed70 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d126:	2300      	movs	r3, #0
    d128:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d12a:	e7fe      	b.n	d12a <am_util_faultisr_collect_data+0xda>
    d12c:	e000ed28 	.word	0xe000ed28
    d130:	e000ed38 	.word	0xe000ed38

0000d134 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d134:	b480      	push	{r7}
    d136:	b083      	sub	sp, #12
    d138:	af00      	add	r7, sp, #0
    d13a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d13c:	4a04      	ldr	r2, [pc, #16]	; (d150 <am_util_stdio_printf_init+0x1c>)
    d13e:	687b      	ldr	r3, [r7, #4]
    d140:	6013      	str	r3, [r2, #0]
}
    d142:	bf00      	nop
    d144:	370c      	adds	r7, #12
    d146:	46bd      	mov	sp, r7
    d148:	f85d 7b04 	ldr.w	r7, [sp], #4
    d14c:	4770      	bx	lr
    d14e:	bf00      	nop
    d150:	1000c178 	.word	0x1000c178

0000d154 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d154:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d158:	b08b      	sub	sp, #44	; 0x2c
    d15a:	af00      	add	r7, sp, #0
    d15c:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d160:	e9d7 1200 	ldrd	r1, r2, [r7]
    d164:	f04f 0300 	mov.w	r3, #0
    d168:	f04f 0400 	mov.w	r4, #0
    d16c:	0013      	movs	r3, r2
    d16e:	2400      	movs	r4, #0
    d170:	4323      	orrs	r3, r4
    d172:	f000 809d 	beq.w	d2b0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d176:	e9d7 3400 	ldrd	r3, r4, [r7]
    d17a:	0866      	lsrs	r6, r4, #1
    d17c:	ea4f 0533 	mov.w	r5, r3, rrx
    d180:	e9d7 1200 	ldrd	r1, r2, [r7]
    d184:	f04f 0b00 	mov.w	fp, #0
    d188:	f04f 0c00 	mov.w	ip, #0
    d18c:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d190:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d194:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d198:	eb1b 0305 	adds.w	r3, fp, r5
    d19c:	eb4c 0406 	adc.w	r4, ip, r6
    d1a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d1a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d1a8:	f04f 0500 	mov.w	r5, #0
    d1ac:	f04f 0600 	mov.w	r6, #0
    d1b0:	090d      	lsrs	r5, r1, #4
    d1b2:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d1b6:	0916      	lsrs	r6, r2, #4
    d1b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d1bc:	186b      	adds	r3, r5, r1
    d1be:	eb46 0402 	adc.w	r4, r6, r2
    d1c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d1c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d1ca:	f04f 0500 	mov.w	r5, #0
    d1ce:	f04f 0600 	mov.w	r6, #0
    d1d2:	0a0d      	lsrs	r5, r1, #8
    d1d4:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d1d8:	0a16      	lsrs	r6, r2, #8
    d1da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d1de:	186b      	adds	r3, r5, r1
    d1e0:	eb46 0402 	adc.w	r4, r6, r2
    d1e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d1e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d1ec:	f04f 0500 	mov.w	r5, #0
    d1f0:	f04f 0600 	mov.w	r6, #0
    d1f4:	0c0d      	lsrs	r5, r1, #16
    d1f6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d1fa:	0c16      	lsrs	r6, r2, #16
    d1fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d200:	186b      	adds	r3, r5, r1
    d202:	eb46 0402 	adc.w	r4, r6, r2
    d206:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d20a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d20e:	f04f 0500 	mov.w	r5, #0
    d212:	f04f 0600 	mov.w	r6, #0
    d216:	0015      	movs	r5, r2
    d218:	2600      	movs	r6, #0
    d21a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d21e:	186b      	adds	r3, r5, r1
    d220:	eb46 0402 	adc.w	r4, r6, r2
    d224:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d228:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d22c:	f04f 0300 	mov.w	r3, #0
    d230:	f04f 0400 	mov.w	r4, #0
    d234:	08cb      	lsrs	r3, r1, #3
    d236:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d23a:	08d4      	lsrs	r4, r2, #3
    d23c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d240:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d244:	46ab      	mov	fp, r5
    d246:	46b4      	mov	ip, r6
    d248:	f04f 0100 	mov.w	r1, #0
    d24c:	f04f 0200 	mov.w	r2, #0
    d250:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d254:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d258:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d25c:	468b      	mov	fp, r1
    d25e:	4694      	mov	ip, r2
    d260:	eb1b 0b05 	adds.w	fp, fp, r5
    d264:	eb4c 0c06 	adc.w	ip, ip, r6
    d268:	eb1b 030b 	adds.w	r3, fp, fp
    d26c:	eb4c 040c 	adc.w	r4, ip, ip
    d270:	469b      	mov	fp, r3
    d272:	46a4      	mov	ip, r4
    d274:	4659      	mov	r1, fp
    d276:	4662      	mov	r2, ip
    d278:	e9d7 3400 	ldrd	r3, r4, [r7]
    d27c:	1a5b      	subs	r3, r3, r1
    d27e:	eb64 0402 	sbc.w	r4, r4, r2
    d282:	461d      	mov	r5, r3
    d284:	4626      	mov	r6, r4
    d286:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d28a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d28e:	1d99      	adds	r1, r3, #6
    d290:	f144 0200 	adc.w	r2, r4, #0
    d294:	f04f 0500 	mov.w	r5, #0
    d298:	f04f 0600 	mov.w	r6, #0
    d29c:	090d      	lsrs	r5, r1, #4
    d29e:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d2a2:	0916      	lsrs	r6, r2, #4
    d2a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d2a8:	186b      	adds	r3, r5, r1
    d2aa:	eb46 0402 	adc.w	r4, r6, r2
    d2ae:	e029      	b.n	d304 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d2b0:	683b      	ldr	r3, [r7, #0]
    d2b2:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2b6:	085a      	lsrs	r2, r3, #1
    d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2ba:	089b      	lsrs	r3, r3, #2
    d2bc:	4413      	add	r3, r2
    d2be:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d2c0:	6a3b      	ldr	r3, [r7, #32]
    d2c2:	091b      	lsrs	r3, r3, #4
    d2c4:	6a3a      	ldr	r2, [r7, #32]
    d2c6:	4413      	add	r3, r2
    d2c8:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d2ca:	6a3b      	ldr	r3, [r7, #32]
    d2cc:	0a1b      	lsrs	r3, r3, #8
    d2ce:	6a3a      	ldr	r2, [r7, #32]
    d2d0:	4413      	add	r3, r2
    d2d2:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d2d4:	6a3b      	ldr	r3, [r7, #32]
    d2d6:	0c1b      	lsrs	r3, r3, #16
    d2d8:	6a3a      	ldr	r2, [r7, #32]
    d2da:	4413      	add	r3, r2
    d2dc:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d2de:	6a3b      	ldr	r3, [r7, #32]
    d2e0:	08db      	lsrs	r3, r3, #3
    d2e2:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d2e4:	6a3a      	ldr	r2, [r7, #32]
    d2e6:	4613      	mov	r3, r2
    d2e8:	009b      	lsls	r3, r3, #2
    d2ea:	4413      	add	r3, r2
    d2ec:	005b      	lsls	r3, r3, #1
    d2ee:	461a      	mov	r2, r3
    d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2f2:	1a9b      	subs	r3, r3, r2
    d2f4:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d2f6:	69fb      	ldr	r3, [r7, #28]
    d2f8:	3306      	adds	r3, #6
    d2fa:	091a      	lsrs	r2, r3, #4
    d2fc:	6a3b      	ldr	r3, [r7, #32]
    d2fe:	4413      	add	r3, r2
    d300:	f04f 0400 	mov.w	r4, #0
    }
}
    d304:	4618      	mov	r0, r3
    d306:	4621      	mov	r1, r4
    d308:	372c      	adds	r7, #44	; 0x2c
    d30a:	46bd      	mov	sp, r7
    d30c:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d310:	4770      	bx	lr

0000d312 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d312:	b590      	push	{r4, r7, lr}
    d314:	b085      	sub	sp, #20
    d316:	af00      	add	r7, sp, #0
    d318:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d31c:	683a      	ldr	r2, [r7, #0]
    d31e:	687b      	ldr	r3, [r7, #4]
    d320:	4313      	orrs	r3, r2
    d322:	2b00      	cmp	r3, #0
    d324:	bf0c      	ite	eq
    d326:	2301      	moveq	r3, #1
    d328:	2300      	movne	r3, #0
    d32a:	b2db      	uxtb	r3, r3
    d32c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d32e:	e008      	b.n	d342 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d330:	e9d7 0100 	ldrd	r0, r1, [r7]
    d334:	f7ff ff0e 	bl	d154 <divu64_10>
    d338:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d33c:	68fb      	ldr	r3, [r7, #12]
    d33e:	3301      	adds	r3, #1
    d340:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d342:	e9d7 3400 	ldrd	r3, r4, [r7]
    d346:	4323      	orrs	r3, r4
    d348:	d1f2      	bne.n	d330 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d34a:	68fb      	ldr	r3, [r7, #12]
}
    d34c:	4618      	mov	r0, r3
    d34e:	3714      	adds	r7, #20
    d350:	46bd      	mov	sp, r7
    d352:	bd90      	pop	{r4, r7, pc}

0000d354 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d354:	b590      	push	{r4, r7, lr}
    d356:	b083      	sub	sp, #12
    d358:	af00      	add	r7, sp, #0
    d35a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d35e:	e9d7 3400 	ldrd	r3, r4, [r7]
    d362:	2b00      	cmp	r3, #0
    d364:	f174 0300 	sbcs.w	r3, r4, #0
    d368:	da06      	bge.n	d378 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d36a:	e9d7 3400 	ldrd	r3, r4, [r7]
    d36e:	425b      	negs	r3, r3
    d370:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d374:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d378:	e9d7 3400 	ldrd	r3, r4, [r7]
    d37c:	4618      	mov	r0, r3
    d37e:	4621      	mov	r1, r4
    d380:	f7ff ffc7 	bl	d312 <ndigits_in_u64>
    d384:	4603      	mov	r3, r0
}
    d386:	4618      	mov	r0, r3
    d388:	370c      	adds	r7, #12
    d38a:	46bd      	mov	sp, r7
    d38c:	bd90      	pop	{r4, r7, pc}

0000d38e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d38e:	b490      	push	{r4, r7}
    d390:	b084      	sub	sp, #16
    d392:	af00      	add	r7, sp, #0
    d394:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d398:	683a      	ldr	r2, [r7, #0]
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	4313      	orrs	r3, r2
    d39e:	2b00      	cmp	r3, #0
    d3a0:	bf0c      	ite	eq
    d3a2:	2301      	moveq	r3, #1
    d3a4:	2300      	movne	r3, #0
    d3a6:	b2db      	uxtb	r3, r3
    d3a8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d3aa:	e00e      	b.n	d3ca <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    d3ac:	e9d7 1200 	ldrd	r1, r2, [r7]
    d3b0:	f04f 0300 	mov.w	r3, #0
    d3b4:	f04f 0400 	mov.w	r4, #0
    d3b8:	090b      	lsrs	r3, r1, #4
    d3ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d3be:	0914      	lsrs	r4, r2, #4
    d3c0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    d3c4:	68fb      	ldr	r3, [r7, #12]
    d3c6:	3301      	adds	r3, #1
    d3c8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d3ca:	e9d7 3400 	ldrd	r3, r4, [r7]
    d3ce:	4323      	orrs	r3, r4
    d3d0:	d1ec      	bne.n	d3ac <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d3d2:	68fb      	ldr	r3, [r7, #12]
}
    d3d4:	4618      	mov	r0, r3
    d3d6:	3710      	adds	r7, #16
    d3d8:	46bd      	mov	sp, r7
    d3da:	bc90      	pop	{r4, r7}
    d3dc:	4770      	bx	lr

0000d3de <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d3de:	b480      	push	{r7}
    d3e0:	b087      	sub	sp, #28
    d3e2:	af00      	add	r7, sp, #0
    d3e4:	6078      	str	r0, [r7, #4]
    d3e6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d3e8:	2300      	movs	r3, #0
    d3ea:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d3ec:	2300      	movs	r3, #0
    d3ee:	613b      	str	r3, [r7, #16]
    d3f0:	2300      	movs	r3, #0
    d3f2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	781b      	ldrb	r3, [r3, #0]
    d3f8:	2b2d      	cmp	r3, #45	; 0x2d
    d3fa:	d11b      	bne.n	d434 <decstr_to_int+0x56>
    {
        bNeg = true;
    d3fc:	2301      	movs	r3, #1
    d3fe:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	3301      	adds	r3, #1
    d404:	607b      	str	r3, [r7, #4]
        uCnt++;
    d406:	68fb      	ldr	r3, [r7, #12]
    d408:	3301      	adds	r3, #1
    d40a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d40c:	e012      	b.n	d434 <decstr_to_int+0x56>
    {
        ++uCnt;
    d40e:	68fb      	ldr	r3, [r7, #12]
    d410:	3301      	adds	r3, #1
    d412:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d414:	693a      	ldr	r2, [r7, #16]
    d416:	4613      	mov	r3, r2
    d418:	009b      	lsls	r3, r3, #2
    d41a:	4413      	add	r3, r2
    d41c:	005b      	lsls	r3, r3, #1
    d41e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	781b      	ldrb	r3, [r3, #0]
    d424:	461a      	mov	r2, r3
    d426:	693b      	ldr	r3, [r7, #16]
    d428:	4413      	add	r3, r2
    d42a:	3b30      	subs	r3, #48	; 0x30
    d42c:	613b      	str	r3, [r7, #16]
        pcStr++;
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	3301      	adds	r3, #1
    d432:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	781b      	ldrb	r3, [r3, #0]
    d438:	2b2f      	cmp	r3, #47	; 0x2f
    d43a:	d903      	bls.n	d444 <decstr_to_int+0x66>
    d43c:	687b      	ldr	r3, [r7, #4]
    d43e:	781b      	ldrb	r3, [r3, #0]
    d440:	2b39      	cmp	r3, #57	; 0x39
    d442:	d9e4      	bls.n	d40e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d444:	683b      	ldr	r3, [r7, #0]
    d446:	2b00      	cmp	r3, #0
    d448:	d002      	beq.n	d450 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d44a:	683b      	ldr	r3, [r7, #0]
    d44c:	68fa      	ldr	r2, [r7, #12]
    d44e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d450:	7dfb      	ldrb	r3, [r7, #23]
    d452:	2b00      	cmp	r3, #0
    d454:	d002      	beq.n	d45c <decstr_to_int+0x7e>
    d456:	693b      	ldr	r3, [r7, #16]
    d458:	425b      	negs	r3, r3
    d45a:	e000      	b.n	d45e <decstr_to_int+0x80>
    d45c:	693b      	ldr	r3, [r7, #16]
}
    d45e:	4618      	mov	r0, r3
    d460:	371c      	adds	r7, #28
    d462:	46bd      	mov	sp, r7
    d464:	f85d 7b04 	ldr.w	r7, [sp], #4
    d468:	4770      	bx	lr

0000d46a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d46a:	b590      	push	{r4, r7, lr}
    d46c:	b091      	sub	sp, #68	; 0x44
    d46e:	af00      	add	r7, sp, #0
    d470:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d474:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d476:	2300      	movs	r3, #0
    d478:	63fb      	str	r3, [r7, #60]	; 0x3c
    d47a:	2300      	movs	r3, #0
    d47c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d47e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d482:	f7ff fe67 	bl	d154 <divu64_10>
    d486:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d48a:	68b9      	ldr	r1, [r7, #8]
    d48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d48e:	4613      	mov	r3, r2
    d490:	009b      	lsls	r3, r3, #2
    d492:	4413      	add	r3, r2
    d494:	005b      	lsls	r3, r3, #1
    d496:	1acb      	subs	r3, r1, r3
    d498:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d49c:	b2da      	uxtb	r2, r3
    d49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4a0:	1c59      	adds	r1, r3, #1
    d4a2:	63f9      	str	r1, [r7, #60]	; 0x3c
    d4a4:	3230      	adds	r2, #48	; 0x30
    d4a6:	b2d2      	uxtb	r2, r2
    d4a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d4ac:	440b      	add	r3, r1
    d4ae:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d4b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d4b6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d4ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d4be:	4323      	orrs	r3, r4
    d4c0:	d1dd      	bne.n	d47e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4c4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d4c6:	687b      	ldr	r3, [r7, #4]
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d011      	beq.n	d4f0 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d4cc:	e008      	b.n	d4e0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	1c5a      	adds	r2, r3, #1
    d4d2:	607a      	str	r2, [r7, #4]
    d4d4:	f107 0110 	add.w	r1, r7, #16
    d4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4da:	440a      	add	r2, r1
    d4dc:	7812      	ldrb	r2, [r2, #0]
    d4de:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4e2:	1e5a      	subs	r2, r3, #1
    d4e4:	63fa      	str	r2, [r7, #60]	; 0x3c
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d1f1      	bne.n	d4ce <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	2200      	movs	r2, #0
    d4ee:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d4f2:	4618      	mov	r0, r3
    d4f4:	3744      	adds	r7, #68	; 0x44
    d4f6:	46bd      	mov	sp, r7
    d4f8:	bd90      	pop	{r4, r7, pc}

0000d4fa <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d4fa:	b490      	push	{r4, r7}
    d4fc:	b08c      	sub	sp, #48	; 0x30
    d4fe:	af00      	add	r7, sp, #0
    d500:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d504:	607a      	str	r2, [r7, #4]
    d506:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d508:	2300      	movs	r3, #0
    d50a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d50c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d510:	4323      	orrs	r3, r4
    d512:	d135      	bne.n	d580 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d516:	1c5a      	adds	r2, r3, #1
    d518:	62fa      	str	r2, [r7, #44]	; 0x2c
    d51a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d51e:	4413      	add	r3, r2
    d520:	2230      	movs	r2, #48	; 0x30
    d522:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d526:	e02b      	b.n	d580 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    d528:	7a3b      	ldrb	r3, [r7, #8]
    d52a:	f003 030f 	and.w	r3, r3, #15
    d52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d536:	2b09      	cmp	r3, #9
    d538:	d90a      	bls.n	d550 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d53a:	78fb      	ldrb	r3, [r7, #3]
    d53c:	2b00      	cmp	r3, #0
    d53e:	d001      	beq.n	d544 <uint64_to_hexstr+0x4a>
    d540:	2227      	movs	r2, #39	; 0x27
    d542:	e000      	b.n	d546 <uint64_to_hexstr+0x4c>
    d544:	2207      	movs	r2, #7
    d546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d54a:	4413      	add	r3, r2
    d54c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d552:	1c5a      	adds	r2, r3, #1
    d554:	62fa      	str	r2, [r7, #44]	; 0x2c
    d556:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d55a:	3230      	adds	r2, #48	; 0x30
    d55c:	b2d2      	uxtb	r2, r2
    d55e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d562:	440b      	add	r3, r1
    d564:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d568:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    d56c:	f04f 0300 	mov.w	r3, #0
    d570:	f04f 0400 	mov.w	r4, #0
    d574:	090b      	lsrs	r3, r1, #4
    d576:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d57a:	0914      	lsrs	r4, r2, #4
    d57c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    d580:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d584:	4323      	orrs	r3, r4
    d586:	d1cf      	bne.n	d528 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d58a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	2b00      	cmp	r3, #0
    d590:	d011      	beq.n	d5b6 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    d592:	e008      	b.n	d5a6 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	1c5a      	adds	r2, r3, #1
    d598:	607a      	str	r2, [r7, #4]
    d59a:	f107 0110 	add.w	r1, r7, #16
    d59e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d5a0:	440a      	add	r2, r1
    d5a2:	7812      	ldrb	r2, [r2, #0]
    d5a4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5a8:	1e5a      	subs	r2, r3, #1
    d5aa:	62fa      	str	r2, [r7, #44]	; 0x2c
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d1f1      	bne.n	d594 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d5b0:	687b      	ldr	r3, [r7, #4]
    d5b2:	2200      	movs	r2, #0
    d5b4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d5b8:	4618      	mov	r0, r3
    d5ba:	3730      	adds	r7, #48	; 0x30
    d5bc:	46bd      	mov	sp, r7
    d5be:	bc90      	pop	{r4, r7}
    d5c0:	4770      	bx	lr

0000d5c2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d5c2:	b480      	push	{r7}
    d5c4:	b085      	sub	sp, #20
    d5c6:	af00      	add	r7, sp, #0
    d5c8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d5ca:	2300      	movs	r3, #0
    d5cc:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d5ce:	687b      	ldr	r3, [r7, #4]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d104      	bne.n	d5de <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d5d4:	68fb      	ldr	r3, [r7, #12]
    d5d6:	e009      	b.n	d5ec <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d5d8:	68fb      	ldr	r3, [r7, #12]
    d5da:	3301      	adds	r3, #1
    d5dc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d5de:	687b      	ldr	r3, [r7, #4]
    d5e0:	1c5a      	adds	r2, r3, #1
    d5e2:	607a      	str	r2, [r7, #4]
    d5e4:	781b      	ldrb	r3, [r3, #0]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d1f6      	bne.n	d5d8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d5ea:	68fb      	ldr	r3, [r7, #12]
}
    d5ec:	4618      	mov	r0, r3
    d5ee:	3714      	adds	r7, #20
    d5f0:	46bd      	mov	sp, r7
    d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5f6:	4770      	bx	lr

0000d5f8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d5f8:	b480      	push	{r7}
    d5fa:	b087      	sub	sp, #28
    d5fc:	af00      	add	r7, sp, #0
    d5fe:	60f8      	str	r0, [r7, #12]
    d600:	460b      	mov	r3, r1
    d602:	607a      	str	r2, [r7, #4]
    d604:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d606:	2300      	movs	r3, #0
    d608:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d60a:	687b      	ldr	r3, [r7, #4]
    d60c:	2b00      	cmp	r3, #0
    d60e:	dc0c      	bgt.n	d62a <padbuffer+0x32>
    {
        return i32Cnt;
    d610:	697b      	ldr	r3, [r7, #20]
    d612:	e010      	b.n	d636 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d614:	68fb      	ldr	r3, [r7, #12]
    d616:	2b00      	cmp	r3, #0
    d618:	d004      	beq.n	d624 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d61a:	68fb      	ldr	r3, [r7, #12]
    d61c:	1c5a      	adds	r2, r3, #1
    d61e:	60fa      	str	r2, [r7, #12]
    d620:	7afa      	ldrb	r2, [r7, #11]
    d622:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d624:	697b      	ldr	r3, [r7, #20]
    d626:	3301      	adds	r3, #1
    d628:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d62a:	687b      	ldr	r3, [r7, #4]
    d62c:	1e5a      	subs	r2, r3, #1
    d62e:	607a      	str	r2, [r7, #4]
    d630:	2b00      	cmp	r3, #0
    d632:	d1ef      	bne.n	d614 <padbuffer+0x1c>
    }

    return i32Cnt;
    d634:	697b      	ldr	r3, [r7, #20]
}
    d636:	4618      	mov	r0, r3
    d638:	371c      	adds	r7, #28
    d63a:	46bd      	mov	sp, r7
    d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d640:	4770      	bx	lr
	...

0000d644 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d644:	b590      	push	{r4, r7, lr}
    d646:	b08f      	sub	sp, #60	; 0x3c
    d648:	af00      	add	r7, sp, #0
    d64a:	ed87 0a03 	vstr	s0, [r7, #12]
    d64e:	60b8      	str	r0, [r7, #8]
    d650:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d652:	68bb      	ldr	r3, [r7, #8]
    d654:	681b      	ldr	r3, [r3, #0]
    d656:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d65a:	2b03      	cmp	r3, #3
    d65c:	dc02      	bgt.n	d664 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d65e:	f06f 0302 	mvn.w	r3, #2
    d662:	e0e7      	b.n	d834 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    d664:	edd7 7a03 	vldr	s15, [r7, #12]
    d668:	eef5 7a40 	vcmp.f32	s15, #0.0
    d66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d670:	d104      	bne.n	d67c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d672:	68bb      	ldr	r3, [r7, #8]
    d674:	4a71      	ldr	r2, [pc, #452]	; (d83c <ftoa+0x1f8>)
    d676:	601a      	str	r2, [r3, #0]
        return 3;
    d678:	2303      	movs	r3, #3
    d67a:	e0db      	b.n	d834 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    d67c:	68bb      	ldr	r3, [r7, #8]
    d67e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d680:	68fb      	ldr	r3, [r7, #12]
    d682:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d684:	693b      	ldr	r3, [r7, #16]
    d686:	15db      	asrs	r3, r3, #23
    d688:	b2db      	uxtb	r3, r3
    d68a:	3b7f      	subs	r3, #127	; 0x7f
    d68c:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d68e:	693b      	ldr	r3, [r7, #16]
    d690:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d694:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d698:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d69a:	2300      	movs	r3, #0
    d69c:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d69e:	2300      	movs	r3, #0
    d6a0:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d6a2:	69fb      	ldr	r3, [r7, #28]
    d6a4:	2b1e      	cmp	r3, #30
    d6a6:	dd02      	ble.n	d6ae <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d6a8:	f06f 0301 	mvn.w	r3, #1
    d6ac:	e0c2      	b.n	d834 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    d6ae:	69fb      	ldr	r3, [r7, #28]
    d6b0:	f113 0f17 	cmn.w	r3, #23
    d6b4:	da02      	bge.n	d6bc <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d6b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d6ba:	e0bb      	b.n	d834 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    d6bc:	69fb      	ldr	r3, [r7, #28]
    d6be:	2b16      	cmp	r3, #22
    d6c0:	dd06      	ble.n	d6d0 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d6c2:	69fb      	ldr	r3, [r7, #28]
    d6c4:	3b17      	subs	r3, #23
    d6c6:	69ba      	ldr	r2, [r7, #24]
    d6c8:	fa02 f303 	lsl.w	r3, r2, r3
    d6cc:	637b      	str	r3, [r7, #52]	; 0x34
    d6ce:	e01a      	b.n	d706 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    d6d0:	69fb      	ldr	r3, [r7, #28]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	db0f      	blt.n	d6f6 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d6d6:	69fb      	ldr	r3, [r7, #28]
    d6d8:	f1c3 0317 	rsb	r3, r3, #23
    d6dc:	69ba      	ldr	r2, [r7, #24]
    d6de:	fa42 f303 	asr.w	r3, r2, r3
    d6e2:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d6e4:	69fb      	ldr	r3, [r7, #28]
    d6e6:	3301      	adds	r3, #1
    d6e8:	69ba      	ldr	r2, [r7, #24]
    d6ea:	fa02 f303 	lsl.w	r3, r2, r3
    d6ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d6f2:	633b      	str	r3, [r7, #48]	; 0x30
    d6f4:	e007      	b.n	d706 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d6f6:	69bb      	ldr	r3, [r7, #24]
    d6f8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d6fc:	69fb      	ldr	r3, [r7, #28]
    d6fe:	43db      	mvns	r3, r3
    d700:	fa42 f303 	asr.w	r3, r2, r3
    d704:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d706:	693b      	ldr	r3, [r7, #16]
    d708:	2b00      	cmp	r3, #0
    d70a:	da04      	bge.n	d716 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    d70c:	68bb      	ldr	r3, [r7, #8]
    d70e:	1c5a      	adds	r2, r3, #1
    d710:	60ba      	str	r2, [r7, #8]
    d712:	222d      	movs	r2, #45	; 0x2d
    d714:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d718:	2b00      	cmp	r3, #0
    d71a:	d105      	bne.n	d728 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    d71c:	68bb      	ldr	r3, [r7, #8]
    d71e:	1c5a      	adds	r2, r3, #1
    d720:	60ba      	str	r2, [r7, #8]
    d722:	2230      	movs	r2, #48	; 0x30
    d724:	701a      	strb	r2, [r3, #0]
    d726:	e021      	b.n	d76c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    d728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d72a:	2b00      	cmp	r3, #0
    d72c:	dd08      	ble.n	d740 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d730:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d734:	68ba      	ldr	r2, [r7, #8]
    d736:	4618      	mov	r0, r3
    d738:	4621      	mov	r1, r4
    d73a:	f7ff fe96 	bl	d46a <uint64_to_str>
    d73e:	e011      	b.n	d764 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    d740:	68bb      	ldr	r3, [r7, #8]
    d742:	1c5a      	adds	r2, r3, #1
    d744:	60ba      	str	r2, [r7, #8]
    d746:	222d      	movs	r2, #45	; 0x2d
    d748:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d74c:	425b      	negs	r3, r3
    d74e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d752:	68ba      	ldr	r2, [r7, #8]
    d754:	4618      	mov	r0, r3
    d756:	4621      	mov	r1, r4
    d758:	f7ff fe87 	bl	d46a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d75c:	e002      	b.n	d764 <ftoa+0x120>
        {
            pcBuf++;
    d75e:	68bb      	ldr	r3, [r7, #8]
    d760:	3301      	adds	r3, #1
    d762:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    d764:	68bb      	ldr	r3, [r7, #8]
    d766:	781b      	ldrb	r3, [r3, #0]
    d768:	2b00      	cmp	r3, #0
    d76a:	d1f8      	bne.n	d75e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d76c:	68bb      	ldr	r3, [r7, #8]
    d76e:	1c5a      	adds	r2, r3, #1
    d770:	60ba      	str	r2, [r7, #8]
    d772:	222e      	movs	r2, #46	; 0x2e
    d774:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d778:	2b00      	cmp	r3, #0
    d77a:	d105      	bne.n	d788 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    d77c:	68bb      	ldr	r3, [r7, #8]
    d77e:	1c5a      	adds	r2, r3, #1
    d780:	60ba      	str	r2, [r7, #8]
    d782:	2230      	movs	r2, #48	; 0x30
    d784:	701a      	strb	r2, [r3, #0]
    d786:	e04f      	b.n	d828 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d788:	68ba      	ldr	r2, [r7, #8]
    d78a:	6a3b      	ldr	r3, [r7, #32]
    d78c:	1ad3      	subs	r3, r2, r3
    d78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d790:	1ad3      	subs	r3, r2, r3
    d792:	3b01      	subs	r3, #1
    d794:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d796:	697a      	ldr	r2, [r7, #20]
    d798:	687b      	ldr	r3, [r7, #4]
    d79a:	4293      	cmp	r3, r2
    d79c:	bfa8      	it	ge
    d79e:	4613      	movge	r3, r2
    d7a0:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    d7a2:	2300      	movs	r3, #0
    d7a4:	62bb      	str	r3, [r7, #40]	; 0x28
    d7a6:	e015      	b.n	d7d4 <ftoa+0x190>
        {
            i32FracPart *= 10;
    d7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7aa:	4613      	mov	r3, r2
    d7ac:	009b      	lsls	r3, r3, #2
    d7ae:	4413      	add	r3, r2
    d7b0:	005b      	lsls	r3, r3, #1
    d7b2:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d7b6:	161b      	asrs	r3, r3, #24
    d7b8:	b2da      	uxtb	r2, r3
    d7ba:	68bb      	ldr	r3, [r7, #8]
    d7bc:	1c59      	adds	r1, r3, #1
    d7be:	60b9      	str	r1, [r7, #8]
    d7c0:	3230      	adds	r2, #48	; 0x30
    d7c2:	b2d2      	uxtb	r2, r2
    d7c4:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d7c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d7cc:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7d0:	3301      	adds	r3, #1
    d7d2:	62bb      	str	r3, [r7, #40]	; 0x28
    d7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d7d6:	697b      	ldr	r3, [r7, #20]
    d7d8:	429a      	cmp	r2, r3
    d7da:	dbe5      	blt.n	d7a8 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7de:	4613      	mov	r3, r2
    d7e0:	009b      	lsls	r3, r3, #2
    d7e2:	4413      	add	r3, r2
    d7e4:	005b      	lsls	r3, r3, #1
    d7e6:	161b      	asrs	r3, r3, #24
    d7e8:	2b04      	cmp	r3, #4
    d7ea:	dd1d      	ble.n	d828 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d7ec:	68bb      	ldr	r3, [r7, #8]
    d7ee:	3b01      	subs	r3, #1
    d7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d7f2:	e015      	b.n	d820 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7f6:	781b      	ldrb	r3, [r3, #0]
    d7f8:	2b2e      	cmp	r3, #46	; 0x2e
    d7fa:	d00e      	beq.n	d81a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7fe:	781b      	ldrb	r3, [r3, #0]
    d800:	2b39      	cmp	r3, #57	; 0x39
    d802:	d103      	bne.n	d80c <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d806:	2230      	movs	r2, #48	; 0x30
    d808:	701a      	strb	r2, [r3, #0]
    d80a:	e006      	b.n	d81a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d80e:	781b      	ldrb	r3, [r3, #0]
    d810:	3301      	adds	r3, #1
    d812:	b2da      	uxtb	r2, r3
    d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d816:	701a      	strb	r2, [r3, #0]
                    break;
    d818:	e006      	b.n	d828 <ftoa+0x1e4>
                }
                pcBuftmp--;
    d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d81c:	3b01      	subs	r3, #1
    d81e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d822:	6a3b      	ldr	r3, [r7, #32]
    d824:	429a      	cmp	r2, r3
    d826:	d2e5      	bcs.n	d7f4 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d828:	68bb      	ldr	r3, [r7, #8]
    d82a:	2200      	movs	r2, #0
    d82c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d82e:	68ba      	ldr	r2, [r7, #8]
    d830:	6a3b      	ldr	r3, [r7, #32]
    d832:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d834:	4618      	mov	r0, r3
    d836:	373c      	adds	r7, #60	; 0x3c
    d838:	46bd      	mov	sp, r7
    d83a:	bd90      	pop	{r4, r7, pc}
    d83c:	00302e30 	.word	0x00302e30

0000d840 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d840:	b590      	push	{r4, r7, lr}
    d842:	b097      	sub	sp, #92	; 0x5c
    d844:	af00      	add	r7, sp, #0
    d846:	60f8      	str	r0, [r7, #12]
    d848:	60b9      	str	r1, [r7, #8]
    d84a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d84c:	2300      	movs	r3, #0
    d84e:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d850:	2300      	movs	r3, #0
    d852:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d854:	e2e7      	b.n	de26 <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d856:	2306      	movs	r3, #6
    d858:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    d85a:	68bb      	ldr	r3, [r7, #8]
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	2b25      	cmp	r3, #37	; 0x25
    d860:	d01f      	beq.n	d8a2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d862:	68fb      	ldr	r3, [r7, #12]
    d864:	2b00      	cmp	r3, #0
    d866:	d015      	beq.n	d894 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d868:	68bb      	ldr	r3, [r7, #8]
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	2b0a      	cmp	r3, #10
    d86e:	d10b      	bne.n	d888 <am_util_stdio_vsprintf+0x48>
    d870:	4bb1      	ldr	r3, [pc, #708]	; (db38 <am_util_stdio_vsprintf+0x2f8>)
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	2b00      	cmp	r3, #0
    d876:	d007      	beq.n	d888 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d878:	68fb      	ldr	r3, [r7, #12]
    d87a:	1c5a      	adds	r2, r3, #1
    d87c:	60fa      	str	r2, [r7, #12]
    d87e:	220d      	movs	r2, #13
    d880:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d884:	3301      	adds	r3, #1
    d886:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d888:	68fb      	ldr	r3, [r7, #12]
    d88a:	1c5a      	adds	r2, r3, #1
    d88c:	60fa      	str	r2, [r7, #12]
    d88e:	68ba      	ldr	r2, [r7, #8]
    d890:	7812      	ldrb	r2, [r2, #0]
    d892:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d894:	68bb      	ldr	r3, [r7, #8]
    d896:	3301      	adds	r3, #1
    d898:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    d89a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d89c:	3301      	adds	r3, #1
    d89e:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    d8a0:	e2c1      	b.n	de26 <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d8a2:	68bb      	ldr	r3, [r7, #8]
    d8a4:	3301      	adds	r3, #1
    d8a6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    d8a8:	2300      	movs	r3, #0
    d8aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    d8ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    d8b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d8b6:	2320      	movs	r3, #32
    d8b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    d8bc:	68bb      	ldr	r3, [r7, #8]
    d8be:	781b      	ldrb	r3, [r3, #0]
    d8c0:	2b30      	cmp	r3, #48	; 0x30
    d8c2:	d105      	bne.n	d8d0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d8c4:	2330      	movs	r3, #48	; 0x30
    d8c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    d8ca:	68bb      	ldr	r3, [r7, #8]
    d8cc:	3301      	adds	r3, #1
    d8ce:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d8d0:	f107 0314 	add.w	r3, r7, #20
    d8d4:	4619      	mov	r1, r3
    d8d6:	68b8      	ldr	r0, [r7, #8]
    d8d8:	f7ff fd81 	bl	d3de <decstr_to_int>
    d8dc:	4603      	mov	r3, r0
    d8de:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    d8e0:	697b      	ldr	r3, [r7, #20]
    d8e2:	68ba      	ldr	r2, [r7, #8]
    d8e4:	4413      	add	r3, r2
    d8e6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d8e8:	68bb      	ldr	r3, [r7, #8]
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	2b73      	cmp	r3, #115	; 0x73
    d8ee:	d005      	beq.n	d8fc <am_util_stdio_vsprintf+0xbc>
    d8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d8f2:	2b00      	cmp	r3, #0
    d8f4:	da02      	bge.n	d8fc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d8f8:	425b      	negs	r3, r3
    d8fa:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d8fc:	68bb      	ldr	r3, [r7, #8]
    d8fe:	781b      	ldrb	r3, [r3, #0]
    d900:	2b2e      	cmp	r3, #46	; 0x2e
    d902:	d10e      	bne.n	d922 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d904:	68bb      	ldr	r3, [r7, #8]
    d906:	3301      	adds	r3, #1
    d908:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d90a:	f107 0314 	add.w	r3, r7, #20
    d90e:	4619      	mov	r1, r3
    d910:	68b8      	ldr	r0, [r7, #8]
    d912:	f7ff fd64 	bl	d3de <decstr_to_int>
    d916:	4603      	mov	r3, r0
    d918:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    d91a:	697b      	ldr	r3, [r7, #20]
    d91c:	68ba      	ldr	r2, [r7, #8]
    d91e:	4413      	add	r3, r2
    d920:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d922:	68bb      	ldr	r3, [r7, #8]
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	2b6c      	cmp	r3, #108	; 0x6c
    d928:	d10c      	bne.n	d944 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d92a:	68bb      	ldr	r3, [r7, #8]
    d92c:	3301      	adds	r3, #1
    d92e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d930:	68bb      	ldr	r3, [r7, #8]
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	2b6c      	cmp	r3, #108	; 0x6c
    d936:	d105      	bne.n	d944 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d938:	68bb      	ldr	r3, [r7, #8]
    d93a:	3301      	adds	r3, #1
    d93c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d93e:	2301      	movs	r3, #1
    d940:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d944:	68bb      	ldr	r3, [r7, #8]
    d946:	781b      	ldrb	r3, [r3, #0]
    d948:	3b46      	subs	r3, #70	; 0x46
    d94a:	2b32      	cmp	r3, #50	; 0x32
    d94c:	f200 8258 	bhi.w	de00 <am_util_stdio_vsprintf+0x5c0>
    d950:	a201      	add	r2, pc, #4	; (adr r2, d958 <am_util_stdio_vsprintf+0x118>)
    d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d956:	bf00      	nop
    d958:	0000dd87 	.word	0x0000dd87
    d95c:	0000de01 	.word	0x0000de01
    d960:	0000de01 	.word	0x0000de01
    d964:	0000de01 	.word	0x0000de01
    d968:	0000de01 	.word	0x0000de01
    d96c:	0000de01 	.word	0x0000de01
    d970:	0000de01 	.word	0x0000de01
    d974:	0000de01 	.word	0x0000de01
    d978:	0000de01 	.word	0x0000de01
    d97c:	0000de01 	.word	0x0000de01
    d980:	0000de01 	.word	0x0000de01
    d984:	0000de01 	.word	0x0000de01
    d988:	0000de01 	.word	0x0000de01
    d98c:	0000de01 	.word	0x0000de01
    d990:	0000de01 	.word	0x0000de01
    d994:	0000de01 	.word	0x0000de01
    d998:	0000de01 	.word	0x0000de01
    d99c:	0000de01 	.word	0x0000de01
    d9a0:	0000db1b 	.word	0x0000db1b
    d9a4:	0000de01 	.word	0x0000de01
    d9a8:	0000de01 	.word	0x0000de01
    d9ac:	0000de01 	.word	0x0000de01
    d9b0:	0000de01 	.word	0x0000de01
    d9b4:	0000de01 	.word	0x0000de01
    d9b8:	0000de01 	.word	0x0000de01
    d9bc:	0000de01 	.word	0x0000de01
    d9c0:	0000de01 	.word	0x0000de01
    d9c4:	0000de01 	.word	0x0000de01
    d9c8:	0000de01 	.word	0x0000de01
    d9cc:	0000da25 	.word	0x0000da25
    d9d0:	0000dc4d 	.word	0x0000dc4d
    d9d4:	0000de01 	.word	0x0000de01
    d9d8:	0000dd87 	.word	0x0000dd87
    d9dc:	0000de01 	.word	0x0000de01
    d9e0:	0000de01 	.word	0x0000de01
    d9e4:	0000dc4d 	.word	0x0000dc4d
    d9e8:	0000de01 	.word	0x0000de01
    d9ec:	0000de01 	.word	0x0000de01
    d9f0:	0000de01 	.word	0x0000de01
    d9f4:	0000de01 	.word	0x0000de01
    d9f8:	0000de01 	.word	0x0000de01
    d9fc:	0000de01 	.word	0x0000de01
    da00:	0000de01 	.word	0x0000de01
    da04:	0000de01 	.word	0x0000de01
    da08:	0000de01 	.word	0x0000de01
    da0c:	0000da47 	.word	0x0000da47
    da10:	0000de01 	.word	0x0000de01
    da14:	0000dbb9 	.word	0x0000dbb9
    da18:	0000de01 	.word	0x0000de01
    da1c:	0000de01 	.word	0x0000de01
    da20:	0000db15 	.word	0x0000db15
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	1d1a      	adds	r2, r3, #4
    da28:	607a      	str	r2, [r7, #4]
    da2a:	681b      	ldr	r3, [r3, #0]
    da2c:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    da2e:	68fb      	ldr	r3, [r7, #12]
    da30:	2b00      	cmp	r3, #0
    da32:	d004      	beq.n	da3e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    da34:	68fb      	ldr	r3, [r7, #12]
    da36:	1c5a      	adds	r2, r3, #1
    da38:	60fa      	str	r2, [r7, #12]
    da3a:	7ffa      	ldrb	r2, [r7, #31]
    da3c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    da3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    da40:	3301      	adds	r3, #1
    da42:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    da44:	e1ec      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    da46:	687b      	ldr	r3, [r7, #4]
    da48:	1d1a      	adds	r2, r3, #4
    da4a:	607a      	str	r2, [r7, #4]
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    da50:	6d78      	ldr	r0, [r7, #84]	; 0x54
    da52:	f7ff fdb6 	bl	d5c2 <simple_strlen>
    da56:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    da58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da5a:	2b00      	cmp	r3, #0
    da5c:	dd2e      	ble.n	dabc <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    da5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    da62:	429a      	cmp	r2, r3
    da64:	d22a      	bcs.n	dabc <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    da66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da6a:	1ad3      	subs	r3, r2, r3
    da6c:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    da6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    da72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    da74:	4619      	mov	r1, r3
    da76:	68f8      	ldr	r0, [r7, #12]
    da78:	f7ff fdbe 	bl	d5f8 <padbuffer>
    da7c:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    da7e:	68fb      	ldr	r3, [r7, #12]
    da80:	2b00      	cmp	r3, #0
    da82:	d001      	beq.n	da88 <am_util_stdio_vsprintf+0x248>
    da84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da86:	e000      	b.n	da8a <am_util_stdio_vsprintf+0x24a>
    da88:	2300      	movs	r3, #0
    da8a:	68fa      	ldr	r2, [r7, #12]
    da8c:	4413      	add	r3, r2
    da8e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    da90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    da94:	4413      	add	r3, r2
    da96:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    da98:	2300      	movs	r3, #0
    da9a:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    da9c:	e00e      	b.n	dabc <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    da9e:	68fb      	ldr	r3, [r7, #12]
    daa0:	2b00      	cmp	r3, #0
    daa2:	d005      	beq.n	dab0 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    daa4:	68fb      	ldr	r3, [r7, #12]
    daa6:	1c5a      	adds	r2, r3, #1
    daa8:	60fa      	str	r2, [r7, #12]
    daaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    daac:	7812      	ldrb	r2, [r2, #0]
    daae:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    dab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    dab2:	3301      	adds	r3, #1
    dab4:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    dab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dab8:	3301      	adds	r3, #1
    daba:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    dabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    dabe:	781b      	ldrb	r3, [r3, #0]
    dac0:	2b00      	cmp	r3, #0
    dac2:	d1ec      	bne.n	da9e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    dac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dac6:	2b00      	cmp	r3, #0
    dac8:	f000 81a7 	beq.w	de1a <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    dacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dace:	425b      	negs	r3, r3
    dad0:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    dad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dad6:	429a      	cmp	r2, r3
    dad8:	f080 819f 	bcs.w	de1a <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    dadc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dae0:	1ad3      	subs	r3, r2, r3
    dae2:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    daea:	4619      	mov	r1, r3
    daec:	68f8      	ldr	r0, [r7, #12]
    daee:	f7ff fd83 	bl	d5f8 <padbuffer>
    daf2:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    daf4:	68fb      	ldr	r3, [r7, #12]
    daf6:	2b00      	cmp	r3, #0
    daf8:	d001      	beq.n	dafe <am_util_stdio_vsprintf+0x2be>
    dafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dafc:	e000      	b.n	db00 <am_util_stdio_vsprintf+0x2c0>
    dafe:	2300      	movs	r3, #0
    db00:	68fa      	ldr	r2, [r7, #12]
    db02:	4413      	add	r3, r2
    db04:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    db06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    db08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    db0a:	4413      	add	r3, r2
    db0c:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    db0e:	2300      	movs	r3, #0
    db10:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    db12:	e182      	b.n	de1a <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    db14:	2301      	movs	r3, #1
    db16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    db1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    db1e:	2b00      	cmp	r3, #0
    db20:	d00c      	beq.n	db3c <am_util_stdio_vsprintf+0x2fc>
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	3307      	adds	r3, #7
    db26:	f023 0307 	bic.w	r3, r3, #7
    db2a:	f103 0208 	add.w	r2, r3, #8
    db2e:	607a      	str	r2, [r7, #4]
    db30:	e9d3 3400 	ldrd	r3, r4, [r3]
    db34:	e008      	b.n	db48 <am_util_stdio_vsprintf+0x308>
    db36:	bf00      	nop
    db38:	1000c148 	.word	0x1000c148
                                      va_arg(pArgs, uint32_t);
    db3c:	687b      	ldr	r3, [r7, #4]
    db3e:	1d1a      	adds	r2, r3, #4
    db40:	607a      	str	r2, [r7, #4]
    db42:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    db44:	f04f 0400 	mov.w	r4, #0
    db48:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    db4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    db4e:	2b00      	cmp	r3, #0
    db50:	d01e      	beq.n	db90 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    db52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    db56:	f7ff fc1a 	bl	d38e <ndigits_in_hex>
    db5a:	4602      	mov	r2, r0
    db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    db5e:	1a9b      	subs	r3, r3, r2
    db60:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    db62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    db66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    db68:	4619      	mov	r1, r3
    db6a:	68f8      	ldr	r0, [r7, #12]
    db6c:	f7ff fd44 	bl	d5f8 <padbuffer>
    db70:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    db72:	68fb      	ldr	r3, [r7, #12]
    db74:	2b00      	cmp	r3, #0
    db76:	d001      	beq.n	db7c <am_util_stdio_vsprintf+0x33c>
    db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    db7a:	e000      	b.n	db7e <am_util_stdio_vsprintf+0x33e>
    db7c:	2300      	movs	r3, #0
    db7e:	68fa      	ldr	r2, [r7, #12]
    db80:	4413      	add	r3, r2
    db82:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    db84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    db86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    db88:	4413      	add	r3, r2
    db8a:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    db8c:	2300      	movs	r3, #0
    db8e:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    db90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    db94:	68fa      	ldr	r2, [r7, #12]
    db96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    db9a:	f7ff fcae 	bl	d4fa <uint64_to_hexstr>
    db9e:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dba0:	68fb      	ldr	r3, [r7, #12]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d003      	beq.n	dbae <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    dba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dba8:	68fa      	ldr	r2, [r7, #12]
    dbaa:	4413      	add	r3, r2
    dbac:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dbb2:	4413      	add	r3, r2
    dbb4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dbb6:	e133      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dbb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d009      	beq.n	dbd4 <am_util_stdio_vsprintf+0x394>
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	3307      	adds	r3, #7
    dbc4:	f023 0307 	bic.w	r3, r3, #7
    dbc8:	f103 0208 	add.w	r2, r3, #8
    dbcc:	607a      	str	r2, [r7, #4]
    dbce:	e9d3 3400 	ldrd	r3, r4, [r3]
    dbd2:	e005      	b.n	dbe0 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    dbd4:	687b      	ldr	r3, [r7, #4]
    dbd6:	1d1a      	adds	r2, r3, #4
    dbd8:	607a      	str	r2, [r7, #4]
    dbda:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dbdc:	f04f 0400 	mov.w	r4, #0
    dbe0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    dbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d01e      	beq.n	dc28 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    dbea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    dbee:	f7ff fb90 	bl	d312 <ndigits_in_u64>
    dbf2:	4602      	mov	r2, r0
    dbf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dbf6:	1a9b      	subs	r3, r3, r2
    dbf8:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dbfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dbfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dc00:	4619      	mov	r1, r3
    dc02:	68f8      	ldr	r0, [r7, #12]
    dc04:	f7ff fcf8 	bl	d5f8 <padbuffer>
    dc08:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    dc0a:	68fb      	ldr	r3, [r7, #12]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d001      	beq.n	dc14 <am_util_stdio_vsprintf+0x3d4>
    dc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc12:	e000      	b.n	dc16 <am_util_stdio_vsprintf+0x3d6>
    dc14:	2300      	movs	r3, #0
    dc16:	68fa      	ldr	r2, [r7, #12]
    dc18:	4413      	add	r3, r2
    dc1a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dc20:	4413      	add	r3, r2
    dc22:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    dc24:	2300      	movs	r3, #0
    dc26:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dc28:	68fa      	ldr	r2, [r7, #12]
    dc2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    dc2e:	f7ff fc1c 	bl	d46a <uint64_to_str>
    dc32:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dc34:	68fb      	ldr	r3, [r7, #12]
    dc36:	2b00      	cmp	r3, #0
    dc38:	d003      	beq.n	dc42 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    dc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc3c:	68fa      	ldr	r2, [r7, #12]
    dc3e:	4413      	add	r3, r2
    dc40:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dc46:	4413      	add	r3, r2
    dc48:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dc4a:	e0e9      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dc4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dc50:	2b00      	cmp	r3, #0
    dc52:	d009      	beq.n	dc68 <am_util_stdio_vsprintf+0x428>
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	3307      	adds	r3, #7
    dc58:	f023 0307 	bic.w	r3, r3, #7
    dc5c:	f103 0208 	add.w	r2, r3, #8
    dc60:	607a      	str	r2, [r7, #4]
    dc62:	e9d3 3400 	ldrd	r3, r4, [r3]
    dc66:	e005      	b.n	dc74 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    dc68:	687b      	ldr	r3, [r7, #4]
    dc6a:	1d1a      	adds	r2, r3, #4
    dc6c:	607a      	str	r2, [r7, #4]
    dc6e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dc70:	ea4f 74e3 	mov.w	r4, r3, asr #31
    dc74:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    dc78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	f174 0300 	sbcs.w	r3, r4, #0
    dc82:	da0a      	bge.n	dc9a <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    dc84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dc88:	425b      	negs	r3, r3
    dc8a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    dc8e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    dc92:	2301      	movs	r3, #1
    dc94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    dc98:	e006      	b.n	dca8 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    dc9a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dc9e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    dca2:	2300      	movs	r3, #0
    dca4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d04a      	beq.n	dd44 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    dcae:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    dcb2:	4618      	mov	r0, r3
    dcb4:	4621      	mov	r1, r4
    dcb6:	f7ff fb4d 	bl	d354 <ndigits_in_i64>
    dcba:	4602      	mov	r2, r0
    dcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dcbe:	1a9b      	subs	r3, r3, r2
    dcc0:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    dcc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dcc6:	2b00      	cmp	r3, #0
    dcc8:	d011      	beq.n	dcee <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    dcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dccc:	3b01      	subs	r3, #1
    dcce:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    dcd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dcd4:	2b30      	cmp	r3, #48	; 0x30
    dcd6:	d10a      	bne.n	dcee <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    dcd8:	68fb      	ldr	r3, [r7, #12]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d004      	beq.n	dce8 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    dcde:	68fb      	ldr	r3, [r7, #12]
    dce0:	1c5a      	adds	r2, r3, #1
    dce2:	60fa      	str	r2, [r7, #12]
    dce4:	222d      	movs	r2, #45	; 0x2d
    dce6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    dce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dcea:	3301      	adds	r3, #1
    dcec:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dcee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dcf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dcf4:	4619      	mov	r1, r3
    dcf6:	68f8      	ldr	r0, [r7, #12]
    dcf8:	f7ff fc7e 	bl	d5f8 <padbuffer>
    dcfc:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    dcfe:	68fb      	ldr	r3, [r7, #12]
    dd00:	2b00      	cmp	r3, #0
    dd02:	d001      	beq.n	dd08 <am_util_stdio_vsprintf+0x4c8>
    dd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd06:	e000      	b.n	dd0a <am_util_stdio_vsprintf+0x4ca>
    dd08:	2300      	movs	r3, #0
    dd0a:	68fa      	ldr	r2, [r7, #12]
    dd0c:	4413      	add	r3, r2
    dd0e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dd14:	4413      	add	r3, r2
    dd16:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    dd18:	2300      	movs	r3, #0
    dd1a:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    dd1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dd20:	2b00      	cmp	r3, #0
    dd22:	d01e      	beq.n	dd62 <am_util_stdio_vsprintf+0x522>
    dd24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dd28:	2b20      	cmp	r3, #32
    dd2a:	d11a      	bne.n	dd62 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d004      	beq.n	dd3c <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    dd32:	68fb      	ldr	r3, [r7, #12]
    dd34:	1c5a      	adds	r2, r3, #1
    dd36:	60fa      	str	r2, [r7, #12]
    dd38:	222d      	movs	r2, #45	; 0x2d
    dd3a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    dd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd3e:	3301      	adds	r3, #1
    dd40:	647b      	str	r3, [r7, #68]	; 0x44
    dd42:	e00e      	b.n	dd62 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    dd44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dd48:	2b00      	cmp	r3, #0
    dd4a:	d00a      	beq.n	dd62 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    dd4c:	68fb      	ldr	r3, [r7, #12]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d004      	beq.n	dd5c <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    dd52:	68fb      	ldr	r3, [r7, #12]
    dd54:	1c5a      	adds	r2, r3, #1
    dd56:	60fa      	str	r2, [r7, #12]
    dd58:	222d      	movs	r2, #45	; 0x2d
    dd5a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    dd5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd5e:	3301      	adds	r3, #1
    dd60:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dd62:	68fa      	ldr	r2, [r7, #12]
    dd64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    dd68:	f7ff fb7f 	bl	d46a <uint64_to_str>
    dd6c:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dd6e:	68fb      	ldr	r3, [r7, #12]
    dd70:	2b00      	cmp	r3, #0
    dd72:	d003      	beq.n	dd7c <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    dd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd76:	68fa      	ldr	r2, [r7, #12]
    dd78:	4413      	add	r3, r2
    dd7a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dd80:	4413      	add	r3, r2
    dd82:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dd84:	e04c      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    dd86:	68fb      	ldr	r3, [r7, #12]
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d048      	beq.n	de1e <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    dd8c:	687b      	ldr	r3, [r7, #4]
    dd8e:	3307      	adds	r3, #7
    dd90:	f023 0307 	bic.w	r3, r3, #7
    dd94:	f103 0208 	add.w	r2, r3, #8
    dd98:	607a      	str	r2, [r7, #4]
    dd9a:	e9d3 3400 	ldrd	r3, r4, [r3]
    dd9e:	4618      	mov	r0, r3
    dda0:	4621      	mov	r1, r4
    dda2:	f7fe f9ad 	bl	c100 <__aeabi_d2f>
    dda6:	4603      	mov	r3, r0
    dda8:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    ddaa:	68fb      	ldr	r3, [r7, #12]
    ddac:	2214      	movs	r2, #20
    ddae:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    ddb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    ddb2:	68f8      	ldr	r0, [r7, #12]
    ddb4:	ed97 0a06 	vldr	s0, [r7, #24]
    ddb8:	f7ff fc44 	bl	d644 <ftoa>
    ddbc:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	da14      	bge.n	ddee <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    ddc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ddca:	d102      	bne.n	ddd2 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    ddcc:	4b1e      	ldr	r3, [pc, #120]	; (de48 <am_util_stdio_vsprintf+0x608>)
    ddce:	633b      	str	r3, [r7, #48]	; 0x30
    ddd0:	e008      	b.n	dde4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    ddd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddd4:	f113 0f02 	cmn.w	r3, #2
    ddd8:	d102      	bne.n	dde0 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    ddda:	4b1c      	ldr	r3, [pc, #112]	; (de4c <am_util_stdio_vsprintf+0x60c>)
    dddc:	633b      	str	r3, [r7, #48]	; 0x30
    ddde:	e001      	b.n	dde4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    dde0:	4b1b      	ldr	r3, [pc, #108]	; (de50 <am_util_stdio_vsprintf+0x610>)
    dde2:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    dde4:	68fb      	ldr	r3, [r7, #12]
    dde6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dde8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    ddea:	2303      	movs	r3, #3
    ddec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    ddee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ddf2:	4413      	add	r3, r2
    ddf4:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    ddf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddf8:	68fa      	ldr	r2, [r7, #12]
    ddfa:	4413      	add	r3, r2
    ddfc:	60fb      	str	r3, [r7, #12]
                }
                break;
    ddfe:	e00e      	b.n	de1e <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    de00:	68fb      	ldr	r3, [r7, #12]
    de02:	2b00      	cmp	r3, #0
    de04:	d005      	beq.n	de12 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    de06:	68fb      	ldr	r3, [r7, #12]
    de08:	1c5a      	adds	r2, r3, #1
    de0a:	60fa      	str	r2, [r7, #12]
    de0c:	68ba      	ldr	r2, [r7, #8]
    de0e:	7812      	ldrb	r2, [r2, #0]
    de10:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    de12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    de14:	3301      	adds	r3, #1
    de16:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    de18:	e002      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>
                break;
    de1a:	bf00      	nop
    de1c:	e000      	b.n	de20 <am_util_stdio_vsprintf+0x5e0>
                break;
    de1e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    de20:	68bb      	ldr	r3, [r7, #8]
    de22:	3301      	adds	r3, #1
    de24:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    de26:	68bb      	ldr	r3, [r7, #8]
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	2b00      	cmp	r3, #0
    de2c:	f47f ad13 	bne.w	d856 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    de30:	68fb      	ldr	r3, [r7, #12]
    de32:	2b00      	cmp	r3, #0
    de34:	d002      	beq.n	de3c <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    de36:	68fb      	ldr	r3, [r7, #12]
    de38:	2200      	movs	r2, #0
    de3a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    de3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    de3e:	4618      	mov	r0, r3
    de40:	375c      	adds	r7, #92	; 0x5c
    de42:	46bd      	mov	sp, r7
    de44:	bd90      	pop	{r4, r7, pc}
    de46:	bf00      	nop
    de48:	00302e30 	.word	0x00302e30
    de4c:	00232e23 	.word	0x00232e23
    de50:	003f2e3f 	.word	0x003f2e3f

0000de54 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    de54:	b40f      	push	{r0, r1, r2, r3}
    de56:	b580      	push	{r7, lr}
    de58:	b082      	sub	sp, #8
    de5a:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    de5c:	4b0d      	ldr	r3, [pc, #52]	; (de94 <am_util_stdio_printf+0x40>)
    de5e:	681b      	ldr	r3, [r3, #0]
    de60:	2b00      	cmp	r3, #0
    de62:	d101      	bne.n	de68 <am_util_stdio_printf+0x14>
    {
        return 0;
    de64:	2300      	movs	r3, #0
    de66:	e00d      	b.n	de84 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    de68:	f107 0314 	add.w	r3, r7, #20
    de6c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    de6e:	683a      	ldr	r2, [r7, #0]
    de70:	6939      	ldr	r1, [r7, #16]
    de72:	4809      	ldr	r0, [pc, #36]	; (de98 <am_util_stdio_printf+0x44>)
    de74:	f7ff fce4 	bl	d840 <am_util_stdio_vsprintf>
    de78:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    de7a:	4b06      	ldr	r3, [pc, #24]	; (de94 <am_util_stdio_printf+0x40>)
    de7c:	681b      	ldr	r3, [r3, #0]
    de7e:	4806      	ldr	r0, [pc, #24]	; (de98 <am_util_stdio_printf+0x44>)
    de80:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    de82:	687b      	ldr	r3, [r7, #4]
}
    de84:	4618      	mov	r0, r3
    de86:	3708      	adds	r7, #8
    de88:	46bd      	mov	sp, r7
    de8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    de8e:	b004      	add	sp, #16
    de90:	4770      	bx	lr
    de92:	bf00      	nop
    de94:	1000c178 	.word	0x1000c178
    de98:	1000c048 	.word	0x1000c048

0000de9c <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    de9c:	b480      	push	{r7}
    de9e:	b085      	sub	sp, #20
    dea0:	af00      	add	r7, sp, #0
    dea2:	60f8      	str	r0, [r7, #12]
    dea4:	4638      	mov	r0, r7
    dea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    deaa:	683b      	ldr	r3, [r7, #0]
    deac:	461a      	mov	r2, r3
    deae:	4613      	mov	r3, r2
    deb0:	009b      	lsls	r3, r3, #2
    deb2:	4413      	add	r3, r2
    deb4:	009b      	lsls	r3, r3, #2
    deb6:	461a      	mov	r2, r3
    deb8:	68fb      	ldr	r3, [r7, #12]
    deba:	4413      	add	r3, r2
    debc:	2200      	movs	r2, #0
    debe:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    dec0:	683b      	ldr	r3, [r7, #0]
    dec2:	461a      	mov	r2, r3
    dec4:	4613      	mov	r3, r2
    dec6:	009b      	lsls	r3, r3, #2
    dec8:	4413      	add	r3, r2
    deca:	009b      	lsls	r3, r3, #2
    decc:	461a      	mov	r2, r3
    dece:	68fb      	ldr	r3, [r7, #12]
    ded0:	4413      	add	r3, r2
    ded2:	2200      	movs	r2, #0
    ded4:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    ded6:	683b      	ldr	r3, [r7, #0]
    ded8:	461a      	mov	r2, r3
    deda:	4613      	mov	r3, r2
    dedc:	009b      	lsls	r3, r3, #2
    dede:	4413      	add	r3, r2
    dee0:	009b      	lsls	r3, r3, #2
    dee2:	461a      	mov	r2, r3
    dee4:	68fb      	ldr	r3, [r7, #12]
    dee6:	4413      	add	r3, r2
    dee8:	2200      	movs	r2, #0
    deea:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    deec:	683b      	ldr	r3, [r7, #0]
    deee:	461a      	mov	r2, r3
    def0:	4613      	mov	r3, r2
    def2:	009b      	lsls	r3, r3, #2
    def4:	4413      	add	r3, r2
    def6:	009b      	lsls	r3, r3, #2
    def8:	461a      	mov	r2, r3
    defa:	68fb      	ldr	r3, [r7, #12]
    defc:	4413      	add	r3, r2
    defe:	68ba      	ldr	r2, [r7, #8]
    df00:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    df02:	683b      	ldr	r3, [r7, #0]
    df04:	461a      	mov	r2, r3
    df06:	4613      	mov	r3, r2
    df08:	009b      	lsls	r3, r3, #2
    df0a:	4413      	add	r3, r2
    df0c:	009b      	lsls	r3, r3, #2
    df0e:	461a      	mov	r2, r3
    df10:	68fb      	ldr	r3, [r7, #12]
    df12:	4413      	add	r3, r2
    df14:	687a      	ldr	r2, [r7, #4]
    df16:	601a      	str	r2, [r3, #0]
}
    df18:	bf00      	nop
    df1a:	3714      	adds	r7, #20
    df1c:	46bd      	mov	sp, r7
    df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df22:	4770      	bx	lr

0000df24 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    df24:	b580      	push	{r7, lr}
    df26:	b086      	sub	sp, #24
    df28:	af00      	add	r7, sp, #0
    df2a:	60f8      	str	r0, [r7, #12]
    df2c:	60b9      	str	r1, [r7, #8]
    df2e:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    df30:	2300      	movs	r3, #0
    df32:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    df34:	2300      	movs	r3, #0
    df36:	617b      	str	r3, [r7, #20]
    df38:	e00e      	b.n	df58 <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    df3a:	697a      	ldr	r2, [r7, #20]
    df3c:	4613      	mov	r3, r2
    df3e:	005b      	lsls	r3, r3, #1
    df40:	4413      	add	r3, r2
    df42:	009b      	lsls	r3, r3, #2
    df44:	461a      	mov	r2, r3
    df46:	68bb      	ldr	r3, [r7, #8]
    df48:	4413      	add	r3, r2
    df4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    df4c:	68f8      	ldr	r0, [r7, #12]
    df4e:	f7ff ffa5 	bl	de9c <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    df52:	697b      	ldr	r3, [r7, #20]
    df54:	3301      	adds	r3, #1
    df56:	617b      	str	r3, [r7, #20]
    df58:	697a      	ldr	r2, [r7, #20]
    df5a:	687b      	ldr	r3, [r7, #4]
    df5c:	429a      	cmp	r2, r3
    df5e:	d3ec      	bcc.n	df3a <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    df60:	bf00      	nop
    df62:	3718      	adds	r7, #24
    df64:	46bd      	mov	sp, r7
    df66:	bd80      	pop	{r7, pc}

0000df68 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    df68:	b580      	push	{r7, lr}
    df6a:	b082      	sub	sp, #8
    df6c:	af00      	add	r7, sp, #0
    df6e:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    df70:	687b      	ldr	r3, [r7, #4]
    df72:	2b00      	cmp	r3, #0
    df74:	d03d      	beq.n	dff2 <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    df76:	687b      	ldr	r3, [r7, #4]
    df78:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    df7a:	2b31      	cmp	r3, #49	; 0x31
    df7c:	d839      	bhi.n	dff2 <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	685b      	ldr	r3, [r3, #4]
    df82:	f003 0302 	and.w	r3, r3, #2
    df86:	2b00      	cmp	r3, #0
    df88:	d019      	beq.n	dfbe <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	681a      	ldr	r2, [r3, #0]
    df8e:	4b1b      	ldr	r3, [pc, #108]	; (dffc <am_devices_led_init+0x94>)
    df90:	6819      	ldr	r1, [r3, #0]
    df92:	4610      	mov	r0, r2
    df94:	f7fe fca2 	bl	c8dc <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	681b      	ldr	r3, [r3, #0]
    df9c:	2103      	movs	r1, #3
    df9e:	4618      	mov	r0, r3
    dfa0:	f7fe fedc 	bl	cd5c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    dfa4:	687b      	ldr	r3, [r7, #4]
    dfa6:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    dfac:	b2db      	uxtb	r3, r3
    dfae:	f003 0301 	and.w	r3, r3, #1
    dfb2:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    dfb4:	4619      	mov	r1, r3
    dfb6:	4610      	mov	r0, r2
    dfb8:	f7fe fed0 	bl	cd5c <am_hal_gpio_state_write>
    dfbc:	e01a      	b.n	dff4 <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	681a      	ldr	r2, [r3, #0]
    dfc2:	4b0f      	ldr	r3, [pc, #60]	; (e000 <am_devices_led_init+0x98>)
    dfc4:	6819      	ldr	r1, [r3, #0]
    dfc6:	4610      	mov	r0, r2
    dfc8:	f7fe fc88 	bl	c8dc <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	681b      	ldr	r3, [r3, #0]
    dfd0:	2103      	movs	r1, #3
    dfd2:	4618      	mov	r0, r3
    dfd4:	f7fe fec2 	bl	cd5c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    dfdc:	687b      	ldr	r3, [r7, #4]
    dfde:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    dfe0:	b2db      	uxtb	r3, r3
    dfe2:	f003 0301 	and.w	r3, r3, #1
    dfe6:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    dfe8:	4619      	mov	r1, r3
    dfea:	4610      	mov	r0, r2
    dfec:	f7fe feb6 	bl	cd5c <am_hal_gpio_state_write>
    dff0:	e000      	b.n	dff4 <am_devices_led_init+0x8c>
        return;
    dff2:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    dff4:	3708      	adds	r7, #8
    dff6:	46bd      	mov	sp, r7
    dff8:	bd80      	pop	{r7, pc}
    dffa:	bf00      	nop
    dffc:	0000fa6c 	.word	0x0000fa6c
    e000:	0000fa70 	.word	0x0000fa70

0000e004 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e004:	b580      	push	{r7, lr}
    e006:	b084      	sub	sp, #16
    e008:	af00      	add	r7, sp, #0
    e00a:	6078      	str	r0, [r7, #4]
    e00c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e00e:	687b      	ldr	r3, [r7, #4]
    e010:	2b00      	cmp	r3, #0
    e012:	d014      	beq.n	e03e <am_devices_led_array_init+0x3a>
    e014:	683b      	ldr	r3, [r7, #0]
    e016:	2b1f      	cmp	r3, #31
    e018:	d811      	bhi.n	e03e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e01a:	2300      	movs	r3, #0
    e01c:	60fb      	str	r3, [r7, #12]
    e01e:	e009      	b.n	e034 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e020:	68fb      	ldr	r3, [r7, #12]
    e022:	00db      	lsls	r3, r3, #3
    e024:	687a      	ldr	r2, [r7, #4]
    e026:	4413      	add	r3, r2
    e028:	4618      	mov	r0, r3
    e02a:	f7ff ff9d 	bl	df68 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e02e:	68fb      	ldr	r3, [r7, #12]
    e030:	3301      	adds	r3, #1
    e032:	60fb      	str	r3, [r7, #12]
    e034:	68fa      	ldr	r2, [r7, #12]
    e036:	683b      	ldr	r3, [r7, #0]
    e038:	429a      	cmp	r2, r3
    e03a:	d3f1      	bcc.n	e020 <am_devices_led_array_init+0x1c>
    e03c:	e000      	b.n	e040 <am_devices_led_array_init+0x3c>
        return;
    e03e:	bf00      	nop
    }
}
    e040:	3710      	adds	r7, #16
    e042:	46bd      	mov	sp, r7
    e044:	bd80      	pop	{r7, pc}

0000e046 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e046:	b580      	push	{r7, lr}
    e048:	b082      	sub	sp, #8
    e04a:	af00      	add	r7, sp, #0
    e04c:	6078      	str	r0, [r7, #4]
    e04e:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	2b00      	cmp	r3, #0
    e054:	d02e      	beq.n	e0b4 <am_devices_led_on+0x6e>
    e056:	683b      	ldr	r3, [r7, #0]
    e058:	2b1e      	cmp	r3, #30
    e05a:	d82b      	bhi.n	e0b4 <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e05c:	683b      	ldr	r3, [r7, #0]
    e05e:	00db      	lsls	r3, r3, #3
    e060:	687a      	ldr	r2, [r7, #4]
    e062:	4413      	add	r3, r2
    e064:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e066:	2b31      	cmp	r3, #49	; 0x31
    e068:	d824      	bhi.n	e0b4 <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e06a:	683b      	ldr	r3, [r7, #0]
    e06c:	00db      	lsls	r3, r3, #3
    e06e:	687a      	ldr	r2, [r7, #4]
    e070:	4413      	add	r3, r2
    e072:	685b      	ldr	r3, [r3, #4]
    e074:	f003 0302 	and.w	r3, r3, #2
    e078:	2b00      	cmp	r3, #0
    e07a:	d011      	beq.n	e0a0 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e07c:	683b      	ldr	r3, [r7, #0]
    e07e:	00db      	lsls	r3, r3, #3
    e080:	687a      	ldr	r2, [r7, #4]
    e082:	4413      	add	r3, r2
    e084:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e086:	683b      	ldr	r3, [r7, #0]
    e088:	00db      	lsls	r3, r3, #3
    e08a:	687a      	ldr	r2, [r7, #4]
    e08c:	4413      	add	r3, r2
    e08e:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e090:	b2db      	uxtb	r3, r3
    e092:	f003 0301 	and.w	r3, r3, #1
    e096:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e098:	4619      	mov	r1, r3
    e09a:	f7fe fe5f 	bl	cd5c <am_hal_gpio_state_write>
    e09e:	e00a      	b.n	e0b6 <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e0a0:	683b      	ldr	r3, [r7, #0]
    e0a2:	00db      	lsls	r3, r3, #3
    e0a4:	687a      	ldr	r2, [r7, #4]
    e0a6:	4413      	add	r3, r2
    e0a8:	681b      	ldr	r3, [r3, #0]
    e0aa:	2104      	movs	r1, #4
    e0ac:	4618      	mov	r0, r3
    e0ae:	f7fe fe55 	bl	cd5c <am_hal_gpio_state_write>
    e0b2:	e000      	b.n	e0b6 <am_devices_led_on+0x70>
        return;
    e0b4:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e0b6:	3708      	adds	r7, #8
    e0b8:	46bd      	mov	sp, r7
    e0ba:	bd80      	pop	{r7, pc}

0000e0bc <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e0bc:	b580      	push	{r7, lr}
    e0be:	b082      	sub	sp, #8
    e0c0:	af00      	add	r7, sp, #0
    e0c2:	6078      	str	r0, [r7, #4]
    e0c4:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e0c6:	687b      	ldr	r3, [r7, #4]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d031      	beq.n	e130 <am_devices_led_off+0x74>
    e0cc:	683b      	ldr	r3, [r7, #0]
    e0ce:	2b1e      	cmp	r3, #30
    e0d0:	d82e      	bhi.n	e130 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e0d2:	683b      	ldr	r3, [r7, #0]
    e0d4:	00db      	lsls	r3, r3, #3
    e0d6:	687a      	ldr	r2, [r7, #4]
    e0d8:	4413      	add	r3, r2
    e0da:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e0dc:	2b31      	cmp	r3, #49	; 0x31
    e0de:	d827      	bhi.n	e130 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e0e0:	683b      	ldr	r3, [r7, #0]
    e0e2:	00db      	lsls	r3, r3, #3
    e0e4:	687a      	ldr	r2, [r7, #4]
    e0e6:	4413      	add	r3, r2
    e0e8:	685b      	ldr	r3, [r3, #4]
    e0ea:	f003 0302 	and.w	r3, r3, #2
    e0ee:	2b00      	cmp	r3, #0
    e0f0:	d014      	beq.n	e11c <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e0f2:	683b      	ldr	r3, [r7, #0]
    e0f4:	00db      	lsls	r3, r3, #3
    e0f6:	687a      	ldr	r2, [r7, #4]
    e0f8:	4413      	add	r3, r2
    e0fa:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e0fc:	683b      	ldr	r3, [r7, #0]
    e0fe:	00db      	lsls	r3, r3, #3
    e100:	687a      	ldr	r2, [r7, #4]
    e102:	4413      	add	r3, r2
    e104:	685b      	ldr	r3, [r3, #4]
    e106:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e10a:	2b00      	cmp	r3, #0
    e10c:	bf0c      	ite	eq
    e10e:	2301      	moveq	r3, #1
    e110:	2300      	movne	r3, #0
    e112:	b2db      	uxtb	r3, r3
    e114:	4619      	mov	r1, r3
    e116:	f7fe fe21 	bl	cd5c <am_hal_gpio_state_write>
    e11a:	e00a      	b.n	e132 <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e11c:	683b      	ldr	r3, [r7, #0]
    e11e:	00db      	lsls	r3, r3, #3
    e120:	687a      	ldr	r2, [r7, #4]
    e122:	4413      	add	r3, r2
    e124:	681b      	ldr	r3, [r3, #0]
    e126:	2103      	movs	r1, #3
    e128:	4618      	mov	r0, r3
    e12a:	f7fe fe17 	bl	cd5c <am_hal_gpio_state_write>
    e12e:	e000      	b.n	e132 <am_devices_led_off+0x76>
        return;
    e130:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e132:	3708      	adds	r7, #8
    e134:	46bd      	mov	sp, r7
    e136:	bd80      	pop	{r7, pc}

0000e138 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b084      	sub	sp, #16
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
    e140:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e142:	687b      	ldr	r3, [r7, #4]
    e144:	2b00      	cmp	r3, #0
    e146:	d042      	beq.n	e1ce <am_devices_led_toggle+0x96>
    e148:	683b      	ldr	r3, [r7, #0]
    e14a:	2b1e      	cmp	r3, #30
    e14c:	d83f      	bhi.n	e1ce <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e14e:	683b      	ldr	r3, [r7, #0]
    e150:	00db      	lsls	r3, r3, #3
    e152:	687a      	ldr	r2, [r7, #4]
    e154:	4413      	add	r3, r2
    e156:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e158:	2b31      	cmp	r3, #49	; 0x31
    e15a:	d838      	bhi.n	e1ce <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e15c:	683b      	ldr	r3, [r7, #0]
    e15e:	00db      	lsls	r3, r3, #3
    e160:	687a      	ldr	r2, [r7, #4]
    e162:	4413      	add	r3, r2
    e164:	685b      	ldr	r3, [r3, #4]
    e166:	f003 0302 	and.w	r3, r3, #2
    e16a:	2b00      	cmp	r3, #0
    e16c:	d009      	beq.n	e182 <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e16e:	683b      	ldr	r3, [r7, #0]
    e170:	00db      	lsls	r3, r3, #3
    e172:	687a      	ldr	r2, [r7, #4]
    e174:	4413      	add	r3, r2
    e176:	681b      	ldr	r3, [r3, #0]
    e178:	2102      	movs	r1, #2
    e17a:	4618      	mov	r0, r3
    e17c:	f7fe fdee 	bl	cd5c <am_hal_gpio_state_write>
    e180:	e026      	b.n	e1d0 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e182:	683b      	ldr	r3, [r7, #0]
    e184:	00db      	lsls	r3, r3, #3
    e186:	687a      	ldr	r2, [r7, #4]
    e188:	4413      	add	r3, r2
    e18a:	681b      	ldr	r3, [r3, #0]
    e18c:	f107 0208 	add.w	r2, r7, #8
    e190:	2102      	movs	r1, #2
    e192:	4618      	mov	r0, r3
    e194:	f7fe fd7e 	bl	cc94 <am_hal_gpio_state_read>
    e198:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e19a:	68fb      	ldr	r3, [r7, #12]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d117      	bne.n	e1d0 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e1a0:	68bb      	ldr	r3, [r7, #8]
    e1a2:	2b00      	cmp	r3, #0
    e1a4:	d009      	beq.n	e1ba <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e1a6:	683b      	ldr	r3, [r7, #0]
    e1a8:	00db      	lsls	r3, r3, #3
    e1aa:	687a      	ldr	r2, [r7, #4]
    e1ac:	4413      	add	r3, r2
    e1ae:	681b      	ldr	r3, [r3, #0]
    e1b0:	2103      	movs	r1, #3
    e1b2:	4618      	mov	r0, r3
    e1b4:	f7fe fdd2 	bl	cd5c <am_hal_gpio_state_write>
    e1b8:	e00a      	b.n	e1d0 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e1ba:	683b      	ldr	r3, [r7, #0]
    e1bc:	00db      	lsls	r3, r3, #3
    e1be:	687a      	ldr	r2, [r7, #4]
    e1c0:	4413      	add	r3, r2
    e1c2:	681b      	ldr	r3, [r3, #0]
    e1c4:	2104      	movs	r1, #4
    e1c6:	4618      	mov	r0, r3
    e1c8:	f7fe fdc8 	bl	cd5c <am_hal_gpio_state_write>
    e1cc:	e000      	b.n	e1d0 <am_devices_led_toggle+0x98>
        return;
    e1ce:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e1d0:	3710      	adds	r7, #16
    e1d2:	46bd      	mov	sp, r7
    e1d4:	bd80      	pop	{r7, pc}
	...

0000e1d8 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e1d8:	4811      	ldr	r0, [pc, #68]	; (e220 <zero_loop+0x12>)
    e1da:	4912      	ldr	r1, [pc, #72]	; (e224 <zero_loop+0x16>)
    e1dc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e1de:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e1e2:	4811      	ldr	r0, [pc, #68]	; (e228 <zero_loop+0x1a>)
    e1e4:	6801      	ldr	r1, [r0, #0]
    e1e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e1ea:	6001      	str	r1, [r0, #0]
    e1ec:	f3bf 8f4f 	dsb	sy
    e1f0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e1f4:	480d      	ldr	r0, [pc, #52]	; (e22c <zero_loop+0x1e>)
    e1f6:	490e      	ldr	r1, [pc, #56]	; (e230 <zero_loop+0x22>)
    e1f8:	4a0e      	ldr	r2, [pc, #56]	; (e234 <zero_loop+0x26>)

0000e1fa <copy_loop>:
    e1fa:	f850 3b04 	ldr.w	r3, [r0], #4
    e1fe:	f841 3b04 	str.w	r3, [r1], #4
    e202:	4291      	cmp	r1, r2
    e204:	dbf9      	blt.n	e1fa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e206:	480c      	ldr	r0, [pc, #48]	; (e238 <zero_loop+0x2a>)
    e208:	490c      	ldr	r1, [pc, #48]	; (e23c <zero_loop+0x2e>)
    e20a:	f04f 0200 	mov.w	r2, #0

0000e20e <zero_loop>:
    e20e:	4288      	cmp	r0, r1
    e210:	bfb8      	it	lt
    e212:	f840 2b04 	strlt.w	r2, [r0], #4
    e216:	dbfa      	blt.n	e20e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e218:	f7fd ffc2 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e21c:	be00      	bkpt	0x0000
}
    e21e:	bf00      	nop
    e220:	e000ed08 	.word	0xe000ed08
    e224:	0000c000 	.word	0x0000c000
    e228:	e000ed88 	.word	0xe000ed88
    e22c:	0000fd58 	.word	0x0000fd58
    e230:	1000c000 	.word	0x1000c000
    e234:	1000c044 	.word	0x1000c044
    e238:	1000c044 	.word	0x1000c044
    e23c:	1001c174 	.word	0x1001c174

0000e240 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e240:	b480      	push	{r7}
    e242:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e244:	e7fe      	b.n	e244 <NMI_Handler+0x4>

0000e246 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e246:	b480      	push	{r7}
    e248:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e24a:	e7fe      	b.n	e24a <DebugMon_Handler+0x4>

0000e24c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e24c:	b480      	push	{r7}
    e24e:	b083      	sub	sp, #12
    e250:	af00      	add	r7, sp, #0
    e252:	4603      	mov	r3, r0
    e254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e256:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e25a:	2b00      	cmp	r3, #0
    e25c:	db0b      	blt.n	e276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e25e:	79fb      	ldrb	r3, [r7, #7]
    e260:	f003 021f 	and.w	r2, r3, #31
    e264:	4907      	ldr	r1, [pc, #28]	; (e284 <__NVIC_EnableIRQ+0x38>)
    e266:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e26a:	095b      	lsrs	r3, r3, #5
    e26c:	2001      	movs	r0, #1
    e26e:	fa00 f202 	lsl.w	r2, r0, r2
    e272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e276:	bf00      	nop
    e278:	370c      	adds	r7, #12
    e27a:	46bd      	mov	sp, r7
    e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e280:	4770      	bx	lr
    e282:	bf00      	nop
    e284:	e000e100 	.word	0xe000e100

0000e288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    e288:	b480      	push	{r7}
    e28a:	b083      	sub	sp, #12
    e28c:	af00      	add	r7, sp, #0
    e28e:	4603      	mov	r3, r0
    e290:	6039      	str	r1, [r7, #0]
    e292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e294:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e298:	2b00      	cmp	r3, #0
    e29a:	db0a      	blt.n	e2b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e29c:	683b      	ldr	r3, [r7, #0]
    e29e:	b2da      	uxtb	r2, r3
    e2a0:	490c      	ldr	r1, [pc, #48]	; (e2d4 <__NVIC_SetPriority+0x4c>)
    e2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e2a6:	0152      	lsls	r2, r2, #5
    e2a8:	b2d2      	uxtb	r2, r2
    e2aa:	440b      	add	r3, r1
    e2ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    e2b0:	e00a      	b.n	e2c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e2b2:	683b      	ldr	r3, [r7, #0]
    e2b4:	b2da      	uxtb	r2, r3
    e2b6:	4908      	ldr	r1, [pc, #32]	; (e2d8 <__NVIC_SetPriority+0x50>)
    e2b8:	79fb      	ldrb	r3, [r7, #7]
    e2ba:	f003 030f 	and.w	r3, r3, #15
    e2be:	3b04      	subs	r3, #4
    e2c0:	0152      	lsls	r2, r2, #5
    e2c2:	b2d2      	uxtb	r2, r2
    e2c4:	440b      	add	r3, r1
    e2c6:	761a      	strb	r2, [r3, #24]
}
    e2c8:	bf00      	nop
    e2ca:	370c      	adds	r7, #12
    e2cc:	46bd      	mov	sp, r7
    e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2d2:	4770      	bx	lr
    e2d4:	e000e100 	.word	0xe000e100
    e2d8:	e000ed00 	.word	0xe000ed00

0000e2dc <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    e2dc:	b580      	push	{r7, lr}
    e2de:	b082      	sub	sp, #8
    e2e0:	af00      	add	r7, sp, #0
    e2e2:	6078      	str	r0, [r7, #4]
    e2e4:	6879      	ldr	r1, [r7, #4]
    e2e6:	4803      	ldr	r0, [pc, #12]	; (e2f4 <DebugLog+0x18>)
    e2e8:	f7ff fdb4 	bl	de54 <am_util_stdio_printf>
    e2ec:	bf00      	nop
    e2ee:	3708      	adds	r7, #8
    e2f0:	46bd      	mov	sp, r7
    e2f2:	bd80      	pop	{r7, pc}
    e2f4:	0000f984 	.word	0x0000f984

0000e2f8 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    e2f8:	b580      	push	{r7, lr}
    e2fa:	b082      	sub	sp, #8
    e2fc:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    e2fe:	2100      	movs	r1, #0
    e300:	2001      	movs	r0, #1
    e302:	f000 fb31 	bl	e968 <am_hal_clkgen_control>
    

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    e306:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e30a:	2000      	movs	r0, #0
    e30c:	f000 fc10 	bl	eb30 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    e310:	490a      	ldr	r1, [pc, #40]	; (e33c <timerA0_init+0x44>)
    e312:	2000      	movs	r0, #0
    e314:	f000 fbb2 	bl	ea7c <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    e318:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    e31c:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	085b      	lsrs	r3, r3, #1
    e322:	687a      	ldr	r2, [r7, #4]
    e324:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e328:	2000      	movs	r0, #0
    e32a:	f000 fc15 	bl	eb58 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e32e:	2001      	movs	r0, #1
    e330:	f000 fc7c 	bl	ec2c <am_hal_ctimer_int_clear>
}
    e334:	bf00      	nop
    e336:	3708      	adds	r7, #8
    e338:	46bd      	mov	sp, r7
    e33a:	bd80      	pop	{r7, pc}
    e33c:	1000c000 	.word	0x1000c000

0000e340 <pdm_trigger_dma>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void pdm_trigger_dma(void)
{
    e340:	b580      	push	{r7, lr}
    e342:	b082      	sub	sp, #8
    e344:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    e346:	4b08      	ldr	r3, [pc, #32]	; (e368 <pdm_trigger_dma+0x28>)
    e348:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    e34a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    e34e:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    e350:	4b06      	ldr	r3, [pc, #24]	; (e36c <pdm_trigger_dma+0x2c>)
    e352:	681b      	ldr	r3, [r3, #0]
    e354:	463a      	mov	r2, r7
    e356:	4611      	mov	r1, r2
    e358:	4618      	mov	r0, r3
    e35a:	f7fe f95d 	bl	c618 <am_hal_pdm_dma_start>
}
    e35e:	bf00      	nop
    e360:	3708      	adds	r7, #8
    e362:	46bd      	mov	sp, r7
    e364:	bd80      	pop	{r7, pc}
    e366:	bf00      	nop
    e368:	1000c17c 	.word	0x1000c17c
    e36c:	1000c680 	.word	0x1000c680

0000e370 <am_app_mic_verif_pdm_init>:

void am_app_mic_verif_pdm_init(void) 
{
    e370:	b580      	push	{r7, lr}
    e372:	b08a      	sub	sp, #40	; 0x28
    e374:	af00      	add	r7, sp, #0
  //
  // Configure the necessary pins.
  //
  am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    e376:	2300      	movs	r3, #0
    e378:	627b      	str	r3, [r7, #36]	; 0x24

  // ARPIT 181019
  // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
  // am_hal_gpio_pinconfig(10, sPinCfg);
  sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    e37a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    e37e:	2205      	movs	r2, #5
    e380:	f362 0302 	bfi	r3, r2, #0, #3
    e384:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(12, sPinCfg);
    e388:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e38a:	200c      	movs	r0, #12
    e38c:	f7fe faa6 	bl	c8dc <am_hal_gpio_pinconfig>

  sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    e390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    e394:	f043 0307 	orr.w	r3, r3, #7
    e398:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(11, sPinCfg);
    e39c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e39e:	200b      	movs	r0, #11
    e3a0:	f7fe fa9c 	bl	c8dc <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    e3a4:	1d3b      	adds	r3, r7, #4
    e3a6:	2220      	movs	r2, #32
    e3a8:	2100      	movs	r1, #0
    e3aa:	4618      	mov	r0, r3
    e3ac:	f001 fa88 	bl	f8c0 <memset>
    e3b0:	230b      	movs	r3, #11
    e3b2:	717b      	strb	r3, [r7, #5]
    e3b4:	230b      	movs	r3, #11
    e3b6:	71bb      	strb	r3, [r7, #6]
    e3b8:	2318      	movs	r3, #24
    e3ba:	60bb      	str	r3, [r7, #8]
    e3bc:	2304      	movs	r3, #4
    e3be:	613b      	str	r3, [r7, #16]
    e3c0:	2305      	movs	r3, #5
    e3c2:	753b      	strb	r3, [r7, #20]
    e3c4:	2301      	movs	r3, #1
    e3c6:	763b      	strb	r3, [r7, #24]
    e3c8:	2303      	movs	r3, #3
    e3ca:	767b      	strb	r3, [r7, #25]
    e3cc:	2301      	movs	r3, #1
    e3ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    };
    
//
  // Initialize, power-up, and configure the PDM.
  //
    am_hal_pdm_initialize(0, &PDMHandle);
    e3d2:	491a      	ldr	r1, [pc, #104]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e3d4:	2000      	movs	r0, #0
    e3d6:	f7fd ff4b 	bl	c270 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    e3da:	4b18      	ldr	r3, [pc, #96]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e3dc:	681b      	ldr	r3, [r3, #0]
    e3de:	2200      	movs	r2, #0
    e3e0:	2100      	movs	r1, #0
    e3e2:	4618      	mov	r0, r3
    e3e4:	f7fd ffa2 	bl	c32c <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    e3e8:	4b14      	ldr	r3, [pc, #80]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e3ea:	681b      	ldr	r3, [r3, #0]
    e3ec:	1d3a      	adds	r2, r7, #4
    e3ee:	4611      	mov	r1, r2
    e3f0:	4618      	mov	r0, r3
    e3f2:	f7fe f803 	bl	c3fc <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    e3f6:	4b11      	ldr	r3, [pc, #68]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e3f8:	681b      	ldr	r3, [r3, #0]
    e3fa:	4618      	mov	r0, r3
    e3fc:	f7fe f990 	bl	c720 <am_hal_pdm_fifo_flush>


  am_hal_pdm_enable(PDMHandle);
    e400:	4b0e      	ldr	r3, [pc, #56]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e402:	681b      	ldr	r3, [r3, #0]
    e404:	4618      	mov	r0, r3
    e406:	f7fe f8d5 	bl	c5b4 <am_hal_pdm_enable>

  //
  // Configure and enable PDM interrupts (set up to trigger on DMA
  // completion).
  //
  am_hal_pdm_interrupt_enable(PDMHandle,
    e40a:	4b0c      	ldr	r3, [pc, #48]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e40c:	681b      	ldr	r3, [r3, #0]
    e40e:	211e      	movs	r1, #30
    e410:	4618      	mov	r0, r3
    e412:	f7fe f9af 	bl	c774 <am_hal_pdm_interrupt_enable>
                              (AM_HAL_PDM_INT_DERR | AM_HAL_PDM_INT_DCMP |
                               AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF));

#if AM_CMSIS_REGS
    NVIC_SetPriority(PDM_IRQn, 4);
    e416:	2104      	movs	r1, #4
    e418:	2013      	movs	r0, #19
    e41a:	f7ff ff35 	bl	e288 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    e41e:	2013      	movs	r0, #19
    e420:	f7ff ff14 	bl	e24c <__NVIC_EnableIRQ>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    e424:	4b05      	ldr	r3, [pc, #20]	; (e43c <am_app_mic_verif_pdm_init+0xcc>)
    e426:	681b      	ldr	r3, [r3, #0]
    e428:	4618      	mov	r0, r3
    e42a:	f7fe f8c3 	bl	c5b4 <am_hal_pdm_enable>
    pdm_trigger_dma();
    e42e:	f7ff ff87 	bl	e340 <pdm_trigger_dma>

}
    e432:	bf00      	nop
    e434:	3728      	adds	r7, #40	; 0x28
    e436:	46bd      	mov	sp, r7
    e438:	bd80      	pop	{r7, pc}
    e43a:	bf00      	nop
    e43c:	1000c680 	.word	0x1000c680

0000e440 <am_app_mic_verif_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_mic_verif_sys_init(void)
{
    e440:	b580      	push	{r7, lr}
    e442:	b082      	sub	sp, #8
    e444:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    e446:	2100      	movs	r1, #0
    e448:	2000      	movs	r0, #0
    e44a:	f000 fa8d 	bl	e968 <am_hal_clkgen_control>
    
    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    e44e:	4848      	ldr	r0, [pc, #288]	; (e570 <am_app_mic_verif_sys_init+0x130>)
    e450:	f000 fa56 	bl	e900 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    e454:	f000 fa7e 	bl	e954 <am_hal_cachectrl_enable>
    
    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    e458:	f000 f97c 	bl	e754 <am_bsp_low_power_init>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_switch_button0);
    e45c:	4b45      	ldr	r3, [pc, #276]	; (e574 <am_app_mic_verif_sys_init+0x134>)
    e45e:	6819      	ldr	r1, [r3, #0]
    e460:	2010      	movs	r0, #16
    e462:	f7fe fa3b 	bl	c8dc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_switch_button1);
    e466:	4b44      	ldr	r3, [pc, #272]	; (e578 <am_app_mic_verif_sys_init+0x138>)
    e468:	6819      	ldr	r1, [r3, #0]
    e46a:	2012      	movs	r0, #18
    e46c:	f7fe fa36 	bl	c8dc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_switch_button2);
    e470:	4b42      	ldr	r3, [pc, #264]	; (e57c <am_app_mic_verif_sys_init+0x13c>)
    e472:	6819      	ldr	r1, [r3, #0]
    e474:	2013      	movs	r0, #19
    e476:	f7fe fa31 	bl	c8dc <am_hal_gpio_pinconfig>
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    e47a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e47e:	f04f 0100 	mov.w	r1, #0
    e482:	f7fe fd2d 	bl	cee0 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    e486:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e48a:	f04f 0100 	mov.w	r1, #0
    e48e:	f7fe fd27 	bl	cee0 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    e492:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e496:	f04f 0100 	mov.w	r1, #0
    e49a:	f7fe fd21 	bl	cee0 <am_hal_gpio_interrupt_clear>
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    e49e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e4a2:	f04f 0100 	mov.w	r1, #0
    e4a6:	f7fe fcdd 	bl	ce64 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    e4aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e4ae:	f04f 0100 	mov.w	r1, #0
    e4b2:	f7fe fcd7 	bl	ce64 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    e4b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e4ba:	f04f 0100 	mov.w	r1, #0
    e4be:	f7fe fcd1 	bl	ce64 <am_hal_gpio_interrupt_enable>
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    e4c2:	2105      	movs	r1, #5
    e4c4:	482e      	ldr	r0, [pc, #184]	; (e580 <am_app_mic_verif_sys_init+0x140>)
    e4c6:	f7ff fd9d 	bl	e004 <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    e4ca:	2300      	movs	r3, #0
    e4cc:	607b      	str	r3, [r7, #4]
    e4ce:	e007      	b.n	e4e0 <am_app_mic_verif_sys_init+0xa0>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    e4d0:	687b      	ldr	r3, [r7, #4]
    e4d2:	4619      	mov	r1, r3
    e4d4:	482a      	ldr	r0, [pc, #168]	; (e580 <am_app_mic_verif_sys_init+0x140>)
    e4d6:	f7ff fdf1 	bl	e0bc <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	3301      	adds	r3, #1
    e4de:	607b      	str	r3, [r7, #4]
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	2b04      	cmp	r3, #4
    e4e4:	ddf4      	ble.n	e4d0 <am_app_mic_verif_sys_init+0x90>
    }
    //
    // TimerA0 init.
    //
    timerA0_init();
    e4e6:	f7ff ff07 	bl	e2f8 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    e4ea:	2001      	movs	r0, #1
    e4ec:	f000 fb8a 	bl	ec04 <am_hal_ctimer_int_enable>

#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)

    // Turn on PDM
    am_app_mic_verif_pdm_init();
    e4f0:	f7ff ff3e 	bl	e370 <am_app_mic_verif_pdm_init>
 
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(GPIO_IRQn);
    e4f4:	200d      	movs	r0, #13
    e4f6:	f7ff fea9 	bl	e24c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    e4fa:	200e      	movs	r0, #14
    e4fc:	f7ff fea6 	bl	e24c <__NVIC_EnableIRQ>
#endif  // AM_CMSIS_REGS

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    e500:	f000 fbd4 	bl	ecac <am_hal_interrupt_master_enable>
   
    //
    // Initialize the printf interface for UART output
    //
    am_bsp_uart_printf_enable();
    e504:	f000 f958 	bl	e7b8 <am_bsp_uart_printf_enable>

    //
    // Configure of burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    e508:	481e      	ldr	r0, [pc, #120]	; (e584 <am_app_mic_verif_sys_init+0x144>)
    e50a:	f000 f983 	bl	e814 <am_hal_burst_mode_initialize>
    e50e:	4603      	mov	r3, r0
    e510:	2b00      	cmp	r3, #0
    e512:	d10b      	bne.n	e52c <am_app_mic_verif_sys_init+0xec>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    e514:	4b1b      	ldr	r3, [pc, #108]	; (e584 <am_app_mic_verif_sys_init+0x144>)
    e516:	781b      	ldrb	r3, [r3, #0]
    e518:	2b00      	cmp	r3, #0
    e51a:	d103      	bne.n	e524 <am_app_mic_verif_sys_init+0xe4>
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Available\r\n");
    e51c:	481a      	ldr	r0, [pc, #104]	; (e588 <am_app_mic_verif_sys_init+0x148>)
    e51e:	f7ff fc99 	bl	de54 <am_util_stdio_printf>
    e522:	e006      	b.n	e532 <am_app_mic_verif_sys_init+0xf2>
        }
        else
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Not Available\r\n");
    e524:	4819      	ldr	r0, [pc, #100]	; (e58c <am_app_mic_verif_sys_init+0x14c>)
    e526:	f7ff fc95 	bl	de54 <am_util_stdio_printf>
    e52a:	e002      	b.n	e532 <am_app_mic_verif_sys_init+0xf2>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\r\n");
    e52c:	4818      	ldr	r0, [pc, #96]	; (e590 <am_app_mic_verif_sys_init+0x150>)
    e52e:	f7ff fc91 	bl	de54 <am_util_stdio_printf>
    }

#if configUSE_BURST_ALWAYS_ON
    // Put the MCU into "Burst" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    e532:	4818      	ldr	r0, [pc, #96]	; (e594 <am_app_mic_verif_sys_init+0x154>)
    e534:	f000 f9b6 	bl	e8a4 <am_hal_burst_mode_enable>
    e538:	4603      	mov	r3, r0
    e53a:	2b00      	cmp	r3, #0
    e53c:	d107      	bne.n	e54e <am_app_mic_verif_sys_init+0x10e>
    {
        if (AM_HAL_BURST_MODE == eBurstMode)
    e53e:	4b15      	ldr	r3, [pc, #84]	; (e594 <am_app_mic_verif_sys_init+0x154>)
    e540:	781b      	ldrb	r3, [r3, #0]
    e542:	2b00      	cmp	r3, #0
    e544:	d106      	bne.n	e554 <am_app_mic_verif_sys_init+0x114>
        {
            am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n");
    e546:	4814      	ldr	r0, [pc, #80]	; (e598 <am_app_mic_verif_sys_init+0x158>)
    e548:	f7ff fc84 	bl	de54 <am_util_stdio_printf>
    e54c:	e002      	b.n	e554 <am_app_mic_verif_sys_init+0x114>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Enable Burst Mode operation\r\n");
    e54e:	4813      	ldr	r0, [pc, #76]	; (e59c <am_app_mic_verif_sys_init+0x15c>)
    e550:	f7ff fc80 	bl	de54 <am_util_stdio_printf>
    }

#endif // configUSE_BURST_ALWAYS_ON

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    e554:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e558:	2000      	movs	r0, #0
    e55a:	f000 fabf 	bl	eadc <am_hal_ctimer_start>

    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    e55e:	2201      	movs	r2, #1
    e560:	490f      	ldr	r1, [pc, #60]	; (e5a0 <am_app_mic_verif_sys_init+0x160>)
    e562:	4810      	ldr	r0, [pc, #64]	; (e5a4 <am_app_mic_verif_sys_init+0x164>)
    e564:	f7ff fcde 	bl	df24 <am_app_utils_ring_buffer_init_all>

}
    e568:	bf00      	nop
    e56a:	3708      	adds	r7, #8
    e56c:	46bd      	mov	sp, r7
    e56e:	bd80      	pop	{r7, pc}
    e570:	0000fc20 	.word	0x0000fc20
    e574:	0000fbe4 	.word	0x0000fbe4
    e578:	0000fbe8 	.word	0x0000fbe8
    e57c:	0000fbec 	.word	0x0000fbec
    e580:	1000c00c 	.word	0x1000c00c
    e584:	1000c67d 	.word	0x1000c67d
    e588:	0000f998 	.word	0x0000f998
    e58c:	0000f9bc 	.word	0x0000f9bc
    e590:	0000f9e4 	.word	0x0000f9e4
    e594:	1000c67c 	.word	0x1000c67c
    e598:	0000fa14 	.word	0x0000fa14
    e59c:	0000fa40 	.word	0x0000fa40
    e5a0:	0000fbd8 	.word	0x0000fbd8
    e5a4:	1001c084 	.word	0x1001c084

0000e5a8 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    e5a8:	b580      	push	{r7, lr}
    e5aa:	b082      	sub	sp, #8
    e5ac:	af00      	add	r7, sp, #0
#endif
    uint32_t ui32Status;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    e5ae:	4b13      	ldr	r3, [pc, #76]	; (e5fc <am_pdm0_isr+0x54>)
    e5b0:	681b      	ldr	r3, [r3, #0]
    e5b2:	1d39      	adds	r1, r7, #4
    e5b4:	2201      	movs	r2, #1
    e5b6:	4618      	mov	r0, r3
    e5b8:	f7fe f938 	bl	c82c <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    e5bc:	4b0f      	ldr	r3, [pc, #60]	; (e5fc <am_pdm0_isr+0x54>)
    e5be:	681b      	ldr	r3, [r3, #0]
    e5c0:	687a      	ldr	r2, [r7, #4]
    e5c2:	4611      	mov	r1, r2
    e5c4:	4618      	mov	r0, r3
    e5c6:	f7fe f905 	bl	c7d4 <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    e5ca:	687b      	ldr	r3, [r7, #4]
    e5cc:	f003 0308 	and.w	r3, r3, #8
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d005      	beq.n	e5e0 <am_pdm0_isr+0x38>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    e5d4:	4b0a      	ldr	r3, [pc, #40]	; (e600 <am_pdm0_isr+0x58>)
    e5d6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    e5da:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    e5de:	e009      	b.n	e5f4 <am_pdm0_isr+0x4c>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    e5e0:	687b      	ldr	r3, [r7, #4]
    e5e2:	f003 0306 	and.w	r3, r3, #6
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d004      	beq.n	e5f4 <am_pdm0_isr+0x4c>
        am_hal_pdm_fifo_flush(PDMHandle);
    e5ea:	4b04      	ldr	r3, [pc, #16]	; (e5fc <am_pdm0_isr+0x54>)
    e5ec:	681b      	ldr	r3, [r3, #0]
    e5ee:	4618      	mov	r0, r3
    e5f0:	f7fe f896 	bl	c720 <am_hal_pdm_fifo_flush>
}
    e5f4:	bf00      	nop
    e5f6:	3708      	adds	r7, #8
    e5f8:	46bd      	mov	sp, r7
    e5fa:	bd80      	pop	{r7, pc}
    e5fc:	1000c680 	.word	0x1000c680
    e600:	50011000 	.word	0x50011000

0000e604 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    e604:	b580      	push	{r7, lr}
    e606:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    e608:	4b0f      	ldr	r3, [pc, #60]	; (e648 <am_ctimer_isr+0x44>)
    e60a:	681b      	ldr	r3, [r3, #0]
    e60c:	3301      	adds	r3, #1
    e60e:	4a0e      	ldr	r2, [pc, #56]	; (e648 <am_ctimer_isr+0x44>)
    e610:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    e612:	4b0e      	ldr	r3, [pc, #56]	; (e64c <am_ctimer_isr+0x48>)
    e614:	781b      	ldrb	r3, [r3, #0]
    e616:	b2db      	uxtb	r3, r3
    e618:	2b01      	cmp	r3, #1
    e61a:	d10f      	bne.n	e63c <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    e61c:	4b0c      	ldr	r3, [pc, #48]	; (e650 <am_ctimer_isr+0x4c>)
    e61e:	681b      	ldr	r3, [r3, #0]
    e620:	3301      	adds	r3, #1
    e622:	4a0b      	ldr	r2, [pc, #44]	; (e650 <am_ctimer_isr+0x4c>)
    e624:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    e626:	4b0a      	ldr	r3, [pc, #40]	; (e650 <am_ctimer_isr+0x4c>)
    e628:	681b      	ldr	r3, [r3, #0]
    e62a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    e62e:	d905      	bls.n	e63c <am_ctimer_isr+0x38>
        {
            g_ui8ButtonPushedFlag = 1;
    e630:	4b08      	ldr	r3, [pc, #32]	; (e654 <am_ctimer_isr+0x50>)
    e632:	2201      	movs	r2, #1
    e634:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    e636:	4b05      	ldr	r3, [pc, #20]	; (e64c <am_ctimer_isr+0x48>)
    e638:	2200      	movs	r2, #0
    e63a:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e63c:	2001      	movs	r0, #1
    e63e:	f000 faf5 	bl	ec2c <am_hal_ctimer_int_clear>
}
    e642:	bf00      	nop
    e644:	bd80      	pop	{r7, pc}
    e646:	bf00      	nop
    e648:	1000c14c 	.word	0x1000c14c
    e64c:	1000c150 	.word	0x1000c150
    e650:	1000c154 	.word	0x1000c154
    e654:	1000c159 	.word	0x1000c159

0000e658 <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    e658:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    e65c:	b082      	sub	sp, #8
    e65e:	af00      	add	r7, sp, #0
    uint64_t ui64Status;
//
// Read and clear GPIO interrupt status
//
    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    e660:	463b      	mov	r3, r7
    e662:	4619      	mov	r1, r3
    e664:	2000      	movs	r0, #0
    e666:	f7fe fc71 	bl	cf4c <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    e66a:	e9d7 3400 	ldrd	r3, r4, [r7]
    e66e:	4618      	mov	r0, r3
    e670:	4621      	mov	r1, r4
    e672:	f7fe fc35 	bl	cee0 <am_hal_gpio_interrupt_clear>
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    e676:	4b22      	ldr	r3, [pc, #136]	; (e700 <am_gpio_isr+0xa8>)
    e678:	781b      	ldrb	r3, [r3, #0]
    e67a:	b2db      	uxtb	r3, r3
    e67c:	2b00      	cmp	r3, #0
    e67e:	d134      	bne.n	e6ea <am_gpio_isr+0x92>
    {
        if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0))
    e680:	e9d7 bc00 	ldrd	fp, ip, [r7]
    e684:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    e688:	f04f 0200 	mov.w	r2, #0
    e68c:	ea0b 0301 	and.w	r3, fp, r1
    e690:	ea0c 0402 	and.w	r4, ip, r2
    e694:	4323      	orrs	r3, r4
    e696:	d003      	beq.n	e6a0 <am_gpio_isr+0x48>
            g_sysKeyValue = AM_APP_KEY_0;
    e698:	4b1a      	ldr	r3, [pc, #104]	; (e704 <am_gpio_isr+0xac>)
    e69a:	2201      	movs	r2, #1
    e69c:	701a      	strb	r2, [r3, #0]
    e69e:	e01e      	b.n	e6de <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1))
    e6a0:	e9d7 bc00 	ldrd	fp, ip, [r7]
    e6a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    e6a8:	f04f 0200 	mov.w	r2, #0
    e6ac:	ea0b 0301 	and.w	r3, fp, r1
    e6b0:	ea0c 0402 	and.w	r4, ip, r2
    e6b4:	4323      	orrs	r3, r4
    e6b6:	d003      	beq.n	e6c0 <am_gpio_isr+0x68>
            g_sysKeyValue = AM_APP_KEY_1;
    e6b8:	4b12      	ldr	r3, [pc, #72]	; (e704 <am_gpio_isr+0xac>)
    e6ba:	2202      	movs	r2, #2
    e6bc:	701a      	strb	r2, [r3, #0]
    e6be:	e00e      	b.n	e6de <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2))
    e6c0:	e9d7 bc00 	ldrd	fp, ip, [r7]
    e6c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    e6c8:	f04f 0200 	mov.w	r2, #0
    e6cc:	ea0b 0301 	and.w	r3, fp, r1
    e6d0:	ea0c 0402 	and.w	r4, ip, r2
    e6d4:	4323      	orrs	r3, r4
    e6d6:	d002      	beq.n	e6de <am_gpio_isr+0x86>
            g_sysKeyValue = AM_APP_KEY_2;
    e6d8:	4b0a      	ldr	r3, [pc, #40]	; (e704 <am_gpio_isr+0xac>)
    e6da:	2203      	movs	r2, #3
    e6dc:	701a      	strb	r2, [r3, #0]

        g_ui8DebounceFlag = 1;
    e6de:	4b08      	ldr	r3, [pc, #32]	; (e700 <am_gpio_isr+0xa8>)
    e6e0:	2201      	movs	r2, #1
    e6e2:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    e6e4:	4b08      	ldr	r3, [pc, #32]	; (e708 <am_gpio_isr+0xb0>)
    e6e6:	2200      	movs	r2, #0
    e6e8:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    e6ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e6ee:	f04f 0100 	mov.w	r1, #0
    e6f2:	f7fe fbf5 	bl	cee0 <am_hal_gpio_interrupt_clear>

}
    e6f6:	bf00      	nop
    e6f8:	3708      	adds	r7, #8
    e6fa:	46bd      	mov	sp, r7
    e6fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    e700:	1000c150 	.word	0x1000c150
    e704:	1000c158 	.word	0x1000c158
    e708:	1000c154 	.word	0x1000c154

0000e70c <am_bsp_uart_string_print>:
    e70c:	b510      	push	{r4, lr}
    e70e:	b086      	sub	sp, #24
    e710:	7803      	ldrb	r3, [r0, #0]
    e712:	2400      	movs	r4, #0
    e714:	9400      	str	r4, [sp, #0]
    e716:	b1bb      	cbz	r3, e748 <am_bsp_uart_string_print+0x3c>
    e718:	4603      	mov	r3, r0
    e71a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e71e:	3401      	adds	r4, #1
    e720:	2a00      	cmp	r2, #0
    e722:	d1fa      	bne.n	e71a <am_bsp_uart_string_print+0xe>
    e724:	4b0a      	ldr	r3, [pc, #40]	; (e750 <am_bsp_uart_string_print+0x44>)
    e726:	9002      	str	r0, [sp, #8]
    e728:	2200      	movs	r2, #0
    e72a:	6818      	ldr	r0, [r3, #0]
    e72c:	9403      	str	r4, [sp, #12]
    e72e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e732:	a901      	add	r1, sp, #4
    e734:	9304      	str	r3, [sp, #16]
    e736:	9201      	str	r2, [sp, #4]
    e738:	f8cd d014 	str.w	sp, [sp, #20]
    e73c:	f000 fe0a 	bl	f354 <am_hal_uart_transfer>
    e740:	9b00      	ldr	r3, [sp, #0]
    e742:	42a3      	cmp	r3, r4
    e744:	d002      	beq.n	e74c <am_bsp_uart_string_print+0x40>
    e746:	e7fe      	b.n	e746 <am_bsp_uart_string_print+0x3a>
    e748:	461c      	mov	r4, r3
    e74a:	e7eb      	b.n	e724 <am_bsp_uart_string_print+0x18>
    e74c:	b006      	add	sp, #24
    e74e:	bd10      	pop	{r4, pc}
    e750:	1000c160 	.word	0x1000c160

0000e754 <am_bsp_low_power_init>:
    e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e756:	f000 fab5 	bl	ecc4 <am_hal_itm_disable>
    e75a:	2000      	movs	r0, #0
    e75c:	f7fe fcea 	bl	d134 <am_util_stdio_printf_init>
    e760:	4b12      	ldr	r3, [pc, #72]	; (e7ac <am_bsp_low_power_init+0x58>)
    e762:	4f13      	ldr	r7, [pc, #76]	; (e7b0 <am_bsp_low_power_init+0x5c>)
    e764:	6819      	ldr	r1, [r3, #0]
    e766:	2029      	movs	r0, #41	; 0x29
    e768:	f7fe f8b8 	bl	c8dc <am_hal_gpio_pinconfig>
    e76c:	f000 fbec 	bl	ef48 <am_hal_pwrctrl_low_power_init>
    e770:	2001      	movs	r0, #1
    e772:	f000 fc33 	bl	efdc <am_hal_rtc_osc_select>
    e776:	2100      	movs	r1, #0
    e778:	2003      	movs	r0, #3
    e77a:	f000 f8f5 	bl	e968 <am_hal_clkgen_control>
    e77e:	f000 fc39 	bl	eff4 <am_hal_rtc_osc_disable>
    e782:	4b0c      	ldr	r3, [pc, #48]	; (e7b4 <am_bsp_low_power_init+0x60>)
    e784:	681e      	ldr	r6, [r3, #0]
    e786:	2400      	movs	r4, #0
    e788:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e78c:	4631      	mov	r1, r6
    e78e:	4628      	mov	r0, r5
    e790:	f7fe f8a4 	bl	c8dc <am_hal_gpio_pinconfig>
    e794:	2103      	movs	r1, #3
    e796:	4628      	mov	r0, r5
    e798:	f7fe fae0 	bl	cd5c <am_hal_gpio_state_write>
    e79c:	3401      	adds	r4, #1
    e79e:	4628      	mov	r0, r5
    e7a0:	2100      	movs	r1, #0
    e7a2:	f7fe fadb 	bl	cd5c <am_hal_gpio_state_write>
    e7a6:	2c05      	cmp	r4, #5
    e7a8:	d1ee      	bne.n	e788 <am_bsp_low_power_init+0x34>
    e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e7ac:	0000fa68 	.word	0x0000fa68
    e7b0:	1000c00c 	.word	0x1000c00c
    e7b4:	0000fa6c 	.word	0x0000fa6c

0000e7b8 <am_bsp_uart_printf_enable>:
    e7b8:	b510      	push	{r4, lr}
    e7ba:	4c10      	ldr	r4, [pc, #64]	; (e7fc <am_bsp_uart_printf_enable+0x44>)
    e7bc:	4b10      	ldr	r3, [pc, #64]	; (e800 <am_bsp_uart_printf_enable+0x48>)
    e7be:	4621      	mov	r1, r4
    e7c0:	2202      	movs	r2, #2
    e7c2:	2000      	movs	r0, #0
    e7c4:	601a      	str	r2, [r3, #0]
    e7c6:	f000 fc1f 	bl	f008 <am_hal_uart_initialize>
    e7ca:	2200      	movs	r2, #0
    e7cc:	4611      	mov	r1, r2
    e7ce:	6820      	ldr	r0, [r4, #0]
    e7d0:	f000 fc42 	bl	f058 <am_hal_uart_power_control>
    e7d4:	6820      	ldr	r0, [r4, #0]
    e7d6:	490b      	ldr	r1, [pc, #44]	; (e804 <am_bsp_uart_printf_enable+0x4c>)
    e7d8:	f000 fcb0 	bl	f13c <am_hal_uart_configure>
    e7dc:	4b0a      	ldr	r3, [pc, #40]	; (e808 <am_bsp_uart_printf_enable+0x50>)
    e7de:	2016      	movs	r0, #22
    e7e0:	6819      	ldr	r1, [r3, #0]
    e7e2:	f7fe f87b 	bl	c8dc <am_hal_gpio_pinconfig>
    e7e6:	4b09      	ldr	r3, [pc, #36]	; (e80c <am_bsp_uart_printf_enable+0x54>)
    e7e8:	2017      	movs	r0, #23
    e7ea:	6819      	ldr	r1, [r3, #0]
    e7ec:	f7fe f876 	bl	c8dc <am_hal_gpio_pinconfig>
    e7f0:	4807      	ldr	r0, [pc, #28]	; (e810 <am_bsp_uart_printf_enable+0x58>)
    e7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f6:	f7fe bc9d 	b.w	d134 <am_util_stdio_printf_init>
    e7fa:	bf00      	nop
    e7fc:	1000c160 	.word	0x1000c160
    e800:	1000c15c 	.word	0x1000c15c
    e804:	0000fbf0 	.word	0x0000fbf0
    e808:	0000fc18 	.word	0x0000fc18
    e80c:	0000fc1c 	.word	0x0000fc1c
    e810:	0000e70d 	.word	0x0000e70d

0000e814 <am_hal_burst_mode_initialize>:
    e814:	b570      	push	{r4, r5, r6, lr}
    e816:	4b1e      	ldr	r3, [pc, #120]	; (e890 <am_hal_burst_mode_initialize+0x7c>)
    e818:	695a      	ldr	r2, [r3, #20]
    e81a:	07d5      	lsls	r5, r2, #31
    e81c:	b082      	sub	sp, #8
    e81e:	4604      	mov	r4, r0
    e820:	d407      	bmi.n	e832 <am_hal_burst_mode_initialize+0x1e>
    e822:	4a1c      	ldr	r2, [pc, #112]	; (e894 <am_hal_burst_mode_initialize+0x80>)
    e824:	2100      	movs	r1, #0
    e826:	2301      	movs	r3, #1
    e828:	7011      	strb	r1, [r2, #0]
    e82a:	2007      	movs	r0, #7
    e82c:	7023      	strb	r3, [r4, #0]
    e82e:	b002      	add	sp, #8
    e830:	bd70      	pop	{r4, r5, r6, pc}
    e832:	4a19      	ldr	r2, [pc, #100]	; (e898 <am_hal_burst_mode_initialize+0x84>)
    e834:	6a91      	ldr	r1, [r2, #40]	; 0x28
    e836:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    e83a:	6291      	str	r1, [r2, #40]	; 0x28
    e83c:	6812      	ldr	r2, [r2, #0]
    e83e:	07d0      	lsls	r0, r2, #31
    e840:	d507      	bpl.n	e852 <am_hal_burst_mode_initialize+0x3e>
    e842:	68db      	ldr	r3, [r3, #12]
    e844:	b2db      	uxtb	r3, r3
    e846:	2b11      	cmp	r3, #17
    e848:	d903      	bls.n	e852 <am_hal_burst_mode_initialize+0x3e>
    e84a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e84e:	4a13      	ldr	r2, [pc, #76]	; (e89c <am_hal_burst_mode_initialize+0x88>)
    e850:	63da      	str	r2, [r3, #60]	; 0x3c
    e852:	4d0f      	ldr	r5, [pc, #60]	; (e890 <am_hal_burst_mode_initialize+0x7c>)
    e854:	4912      	ldr	r1, [pc, #72]	; (e8a0 <am_hal_burst_mode_initialize+0x8c>)
    e856:	7e2a      	ldrb	r2, [r5, #24]
    e858:	2601      	movs	r6, #1
    e85a:	f042 0210 	orr.w	r2, r2, #16
    e85e:	2320      	movs	r3, #32
    e860:	762a      	strb	r2, [r5, #24]
    e862:	f242 7010 	movw	r0, #10000	; 0x2710
    e866:	461a      	mov	r2, r3
    e868:	9600      	str	r6, [sp, #0]
    e86a:	f000 f9f3 	bl	ec54 <am_hal_flash_delay_status_check>
    e86e:	b948      	cbnz	r0, e884 <am_hal_burst_mode_initialize+0x70>
    e870:	69aa      	ldr	r2, [r5, #24]
    e872:	0651      	lsls	r1, r2, #25
    e874:	d5d5      	bpl.n	e822 <am_hal_burst_mode_initialize+0xe>
    e876:	69aa      	ldr	r2, [r5, #24]
    e878:	0692      	lsls	r2, r2, #26
    e87a:	d5d2      	bpl.n	e822 <am_hal_burst_mode_initialize+0xe>
    e87c:	4a05      	ldr	r2, [pc, #20]	; (e894 <am_hal_burst_mode_initialize+0x80>)
    e87e:	7016      	strb	r6, [r2, #0]
    e880:	7020      	strb	r0, [r4, #0]
    e882:	e7d4      	b.n	e82e <am_hal_burst_mode_initialize+0x1a>
    e884:	4a03      	ldr	r2, [pc, #12]	; (e894 <am_hal_burst_mode_initialize+0x80>)
    e886:	2100      	movs	r1, #0
    e888:	7011      	strb	r1, [r2, #0]
    e88a:	7026      	strb	r6, [r4, #0]
    e88c:	b002      	add	sp, #8
    e88e:	bd70      	pop	{r4, r5, r6, pc}
    e890:	40020000 	.word	0x40020000
    e894:	1000c164 	.word	0x1000c164
    e898:	40021000 	.word	0x40021000
    e89c:	0fc0400f 	.word	0x0fc0400f
    e8a0:	40020018 	.word	0x40020018

0000e8a4 <am_hal_burst_mode_enable>:
    e8a4:	4b14      	ldr	r3, [pc, #80]	; (e8f8 <am_hal_burst_mode_enable+0x54>)
    e8a6:	781b      	ldrb	r3, [r3, #0]
    e8a8:	b91b      	cbnz	r3, e8b2 <am_hal_burst_mode_enable+0xe>
    e8aa:	2301      	movs	r3, #1
    e8ac:	7003      	strb	r3, [r0, #0]
    e8ae:	2007      	movs	r0, #7
    e8b0:	4770      	bx	lr
    e8b2:	b570      	push	{r4, r5, r6, lr}
    e8b4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    e8b8:	b082      	sub	sp, #8
    e8ba:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    e8be:	490f      	ldr	r1, [pc, #60]	; (e8fc <am_hal_burst_mode_enable+0x58>)
    e8c0:	2601      	movs	r6, #1
    e8c2:	4332      	orrs	r2, r6
    e8c4:	2304      	movs	r3, #4
    e8c6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    e8ca:	4604      	mov	r4, r0
    e8cc:	461a      	mov	r2, r3
    e8ce:	9600      	str	r6, [sp, #0]
    e8d0:	f242 7010 	movw	r0, #10000	; 0x2710
    e8d4:	f000 f9be 	bl	ec54 <am_hal_flash_delay_status_check>
    e8d8:	b938      	cbnz	r0, e8ea <am_hal_burst_mode_enable+0x46>
    e8da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e8dc:	079a      	lsls	r2, r3, #30
    e8de:	d507      	bpl.n	e8f0 <am_hal_burst_mode_enable+0x4c>
    e8e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e8e2:	075b      	lsls	r3, r3, #29
    e8e4:	d501      	bpl.n	e8ea <am_hal_burst_mode_enable+0x46>
    e8e6:	7020      	strb	r0, [r4, #0]
    e8e8:	e000      	b.n	e8ec <am_hal_burst_mode_enable+0x48>
    e8ea:	7026      	strb	r6, [r4, #0]
    e8ec:	b002      	add	sp, #8
    e8ee:	bd70      	pop	{r4, r5, r6, pc}
    e8f0:	7026      	strb	r6, [r4, #0]
    e8f2:	4630      	mov	r0, r6
    e8f4:	e7fa      	b.n	e8ec <am_hal_burst_mode_enable+0x48>
    e8f6:	bf00      	nop
    e8f8:	1000c164 	.word	0x1000c164
    e8fc:	40004034 	.word	0x40004034

0000e900 <am_hal_cachectrl_config>:
    e900:	b530      	push	{r4, r5, lr}
    e902:	b083      	sub	sp, #12
    e904:	4605      	mov	r5, r0
    e906:	f000 f9d5 	bl	ecb4 <am_hal_interrupt_master_disable>
    e90a:	4c11      	ldr	r4, [pc, #68]	; (e950 <am_hal_cachectrl_config+0x50>)
    e90c:	9001      	str	r0, [sp, #4]
    e90e:	6823      	ldr	r3, [r4, #0]
    e910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e914:	6023      	str	r3, [r4, #0]
    e916:	9801      	ldr	r0, [sp, #4]
    e918:	f000 f9d0 	bl	ecbc <am_hal_interrupt_master_set>
    e91c:	78eb      	ldrb	r3, [r5, #3]
    e91e:	782a      	ldrb	r2, [r5, #0]
    e920:	78a8      	ldrb	r0, [r5, #2]
    e922:	7869      	ldrb	r1, [r5, #1]
    e924:	005b      	lsls	r3, r3, #1
    e926:	0112      	lsls	r2, r2, #4
    e928:	b2d2      	uxtb	r2, r2
    e92a:	f003 0302 	and.w	r3, r3, #2
    e92e:	4313      	orrs	r3, r2
    e930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e934:	0080      	lsls	r0, r0, #2
    e936:	f000 000c 	and.w	r0, r0, #12
    e93a:	020a      	lsls	r2, r1, #8
    e93c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e940:	4303      	orrs	r3, r0
    e942:	f402 7240 	and.w	r2, r2, #768	; 0x300
    e946:	4313      	orrs	r3, r2
    e948:	2000      	movs	r0, #0
    e94a:	6023      	str	r3, [r4, #0]
    e94c:	b003      	add	sp, #12
    e94e:	bd30      	pop	{r4, r5, pc}
    e950:	40018000 	.word	0x40018000

0000e954 <am_hal_cachectrl_enable>:
    e954:	4a03      	ldr	r2, [pc, #12]	; (e964 <am_hal_cachectrl_enable+0x10>)
    e956:	6813      	ldr	r3, [r2, #0]
    e958:	f043 0301 	orr.w	r3, r3, #1
    e95c:	6013      	str	r3, [r2, #0]
    e95e:	2000      	movs	r0, #0
    e960:	4770      	bx	lr
    e962:	bf00      	nop
    e964:	40018000 	.word	0x40018000

0000e968 <am_hal_clkgen_control>:
    e968:	4b32      	ldr	r3, [pc, #200]	; (ea34 <am_hal_clkgen_control+0xcc>)
    e96a:	681a      	ldr	r2, [r3, #0]
    e96c:	b912      	cbnz	r2, e974 <am_hal_clkgen_control+0xc>
    e96e:	4a32      	ldr	r2, [pc, #200]	; (ea38 <am_hal_clkgen_control+0xd0>)
    e970:	6812      	ldr	r2, [r2, #0]
    e972:	601a      	str	r2, [r3, #0]
    e974:	2809      	cmp	r0, #9
    e976:	d85a      	bhi.n	ea2e <am_hal_clkgen_control+0xc6>
    e978:	e8df f000 	tbb	[pc, r0]
    e97c:	261e160d 	.word	0x261e160d
    e980:	4640362e 	.word	0x4640362e
    e984:	054e      	.short	0x054e
    e986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e98a:	2000      	movs	r0, #0
    e98c:	6a1a      	ldr	r2, [r3, #32]
    e98e:	f36f 0200 	bfc	r2, #0, #1
    e992:	621a      	str	r2, [r3, #32]
    e994:	4770      	bx	lr
    e996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e99a:	2200      	movs	r2, #0
    e99c:	2147      	movs	r1, #71	; 0x47
    e99e:	6159      	str	r1, [r3, #20]
    e9a0:	4610      	mov	r0, r2
    e9a2:	619a      	str	r2, [r3, #24]
    e9a4:	615a      	str	r2, [r3, #20]
    e9a6:	4770      	bx	lr
    e9a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e9ac:	2000      	movs	r0, #0
    e9ae:	68d3      	ldr	r3, [r2, #12]
    e9b0:	f023 0301 	bic.w	r3, r3, #1
    e9b4:	60d3      	str	r3, [r2, #12]
    e9b6:	4770      	bx	lr
    e9b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e9bc:	2000      	movs	r0, #0
    e9be:	68d3      	ldr	r3, [r2, #12]
    e9c0:	f023 0302 	bic.w	r3, r3, #2
    e9c4:	60d3      	str	r3, [r2, #12]
    e9c6:	4770      	bx	lr
    e9c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e9cc:	2000      	movs	r0, #0
    e9ce:	68d3      	ldr	r3, [r2, #12]
    e9d0:	f043 0301 	orr.w	r3, r3, #1
    e9d4:	60d3      	str	r3, [r2, #12]
    e9d6:	4770      	bx	lr
    e9d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e9dc:	2000      	movs	r0, #0
    e9de:	68d3      	ldr	r3, [r2, #12]
    e9e0:	f043 0302 	orr.w	r3, r3, #2
    e9e4:	60d3      	str	r3, [r2, #12]
    e9e6:	4770      	bx	lr
    e9e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e9ec:	2200      	movs	r2, #0
    e9ee:	2047      	movs	r0, #71	; 0x47
    e9f0:	2101      	movs	r1, #1
    e9f2:	6158      	str	r0, [r3, #20]
    e9f4:	6199      	str	r1, [r3, #24]
    e9f6:	4610      	mov	r0, r2
    e9f8:	615a      	str	r2, [r3, #20]
    e9fa:	4770      	bx	lr
    e9fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ea00:	2000      	movs	r0, #0
    ea02:	68da      	ldr	r2, [r3, #12]
    ea04:	60da      	str	r2, [r3, #12]
    ea06:	4770      	bx	lr
    ea08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ea0c:	2000      	movs	r0, #0
    ea0e:	68d3      	ldr	r3, [r2, #12]
    ea10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea14:	60d3      	str	r3, [r2, #12]
    ea16:	4770      	bx	lr
    ea18:	b139      	cbz	r1, ea2a <am_hal_clkgen_control+0xc2>
    ea1a:	680b      	ldr	r3, [r1, #0]
    ea1c:	f043 0301 	orr.w	r3, r3, #1
    ea20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ea24:	2000      	movs	r0, #0
    ea26:	6213      	str	r3, [r2, #32]
    ea28:	4770      	bx	lr
    ea2a:	4b04      	ldr	r3, [pc, #16]	; (ea3c <am_hal_clkgen_control+0xd4>)
    ea2c:	e7f8      	b.n	ea20 <am_hal_clkgen_control+0xb8>
    ea2e:	2006      	movs	r0, #6
    ea30:	4770      	bx	lr
    ea32:	bf00      	nop
    ea34:	1000c168 	.word	0x1000c168
    ea38:	4ffff000 	.word	0x4ffff000
    ea3c:	0025b801 	.word	0x0025b801

0000ea40 <am_hal_clkgen_status_get>:
    ea40:	b1a8      	cbz	r0, ea6e <am_hal_clkgen_status_get+0x2e>
    ea42:	b410      	push	{r4}
    ea44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ea48:	490a      	ldr	r1, [pc, #40]	; (ea74 <am_hal_clkgen_status_get+0x34>)
    ea4a:	6994      	ldr	r4, [r2, #24]
    ea4c:	4b0a      	ldr	r3, [pc, #40]	; (ea78 <am_hal_clkgen_status_get+0x38>)
    ea4e:	f014 0f01 	tst.w	r4, #1
    ea52:	bf08      	it	eq
    ea54:	460b      	moveq	r3, r1
    ea56:	6003      	str	r3, [r0, #0]
    ea58:	69d3      	ldr	r3, [r2, #28]
    ea5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea5e:	f003 0201 	and.w	r2, r3, #1
    ea62:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ea66:	6042      	str	r2, [r0, #4]
    ea68:	7203      	strb	r3, [r0, #8]
    ea6a:	2000      	movs	r0, #0
    ea6c:	4770      	bx	lr
    ea6e:	2006      	movs	r0, #6
    ea70:	4770      	bx	lr
    ea72:	bf00      	nop
    ea74:	02dc6c00 	.word	0x02dc6c00
    ea78:	016e3600 	.word	0x016e3600

0000ea7c <am_hal_ctimer_config>:
    ea7c:	b570      	push	{r4, r5, r6, lr}
    ea7e:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    ea82:	2a00      	cmp	r2, #0
    ea84:	b082      	sub	sp, #8
    ea86:	bf18      	it	ne
    ea88:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    ea8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ea90:	ea42 0403 	orr.w	r4, r2, r3
    ea94:	460d      	mov	r5, r1
    ea96:	4606      	mov	r6, r0
    ea98:	f000 f90c 	bl	ecb4 <am_hal_interrupt_master_disable>
    ea9c:	4b0d      	ldr	r3, [pc, #52]	; (ead4 <am_hal_ctimer_config+0x58>)
    ea9e:	9001      	str	r0, [sp, #4]
    eaa0:	0172      	lsls	r2, r6, #5
    eaa2:	50d4      	str	r4, [r2, r3]
    eaa4:	9801      	ldr	r0, [sp, #4]
    eaa6:	f000 f909 	bl	ecbc <am_hal_interrupt_master_set>
    eaaa:	686b      	ldr	r3, [r5, #4]
    eaac:	b90b      	cbnz	r3, eab2 <am_hal_ctimer_config+0x36>
    eaae:	682a      	ldr	r2, [r5, #0]
    eab0:	b142      	cbz	r2, eac4 <am_hal_ctimer_config+0x48>
    eab2:	f3c3 0344 	ubfx	r3, r3, #1, #5
    eab6:	2100      	movs	r1, #0
    eab8:	4a07      	ldr	r2, [pc, #28]	; (ead8 <am_hal_ctimer_config+0x5c>)
    eaba:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    eabe:	5473      	strb	r3, [r6, r1]
    eac0:	b002      	add	sp, #8
    eac2:	bd70      	pop	{r4, r5, r6, pc}
    eac4:	68ab      	ldr	r3, [r5, #8]
    eac6:	2b00      	cmp	r3, #0
    eac8:	d0fa      	beq.n	eac0 <am_hal_ctimer_config+0x44>
    eaca:	f3c3 0344 	ubfx	r3, r3, #1, #5
    eace:	2101      	movs	r1, #1
    ead0:	e7f2      	b.n	eab8 <am_hal_ctimer_config+0x3c>
    ead2:	bf00      	nop
    ead4:	4000800c 	.word	0x4000800c
    ead8:	1000c034 	.word	0x1000c034

0000eadc <am_hal_ctimer_start>:
    eadc:	b570      	push	{r4, r5, r6, lr}
    eade:	b082      	sub	sp, #8
    eae0:	460c      	mov	r4, r1
    eae2:	0146      	lsls	r6, r0, #5
    eae4:	4605      	mov	r5, r0
    eae6:	f000 f8e5 	bl	ecb4 <am_hal_interrupt_master_disable>
    eaea:	4a0f      	ldr	r2, [pc, #60]	; (eb28 <am_hal_ctimer_start+0x4c>)
    eaec:	9001      	str	r0, [sp, #4]
    eaee:	58b3      	ldr	r3, [r6, r2]
    eaf0:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    eaf4:	ea23 0301 	bic.w	r3, r3, r1
    eaf8:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    eafc:	430b      	orrs	r3, r1
    eafe:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    eb02:	bf0c      	ite	eq
    eb04:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    eb08:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    eb0c:	50b3      	str	r3, [r6, r2]
    eb0e:	4b07      	ldr	r3, [pc, #28]	; (eb2c <am_hal_ctimer_start+0x50>)
    eb10:	9801      	ldr	r0, [sp, #4]
    eb12:	bf0c      	ite	eq
    eb14:	2101      	moveq	r1, #1
    eb16:	2100      	movne	r1, #0
    eb18:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    eb1c:	545c      	strb	r4, [r3, r1]
    eb1e:	f000 f8cd 	bl	ecbc <am_hal_interrupt_master_set>
    eb22:	b002      	add	sp, #8
    eb24:	bd70      	pop	{r4, r5, r6, pc}
    eb26:	bf00      	nop
    eb28:	4000800c 	.word	0x4000800c
    eb2c:	1000c034 	.word	0x1000c034

0000eb30 <am_hal_ctimer_clear>:
    eb30:	b570      	push	{r4, r5, r6, lr}
    eb32:	b082      	sub	sp, #8
    eb34:	0146      	lsls	r6, r0, #5
    eb36:	460c      	mov	r4, r1
    eb38:	f000 f8bc 	bl	ecb4 <am_hal_interrupt_master_disable>
    eb3c:	4d05      	ldr	r5, [pc, #20]	; (eb54 <am_hal_ctimer_clear+0x24>)
    eb3e:	9001      	str	r0, [sp, #4]
    eb40:	5973      	ldr	r3, [r6, r5]
    eb42:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    eb46:	4319      	orrs	r1, r3
    eb48:	5171      	str	r1, [r6, r5]
    eb4a:	9801      	ldr	r0, [sp, #4]
    eb4c:	f000 f8b6 	bl	ecbc <am_hal_interrupt_master_set>
    eb50:	b002      	add	sp, #8
    eb52:	bd70      	pop	{r4, r5, r6, pc}
    eb54:	4000800c 	.word	0x4000800c

0000eb58 <am_hal_ctimer_period_set>:
    eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb5c:	b082      	sub	sp, #8
    eb5e:	4689      	mov	r9, r1
    eb60:	4698      	mov	r8, r3
    eb62:	0147      	lsls	r7, r0, #5
    eb64:	4614      	mov	r4, r2
    eb66:	f000 f8a5 	bl	ecb4 <am_hal_interrupt_master_disable>
    eb6a:	f8df a094 	ldr.w	sl, [pc, #148]	; ec00 <am_hal_ctimer_period_set+0xa8>
    eb6e:	9001      	str	r0, [sp, #4]
    eb70:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    eb74:	4d20      	ldr	r5, [pc, #128]	; (ebf8 <am_hal_ctimer_period_set+0xa0>)
    eb76:	4e21      	ldr	r6, [pc, #132]	; (ebfc <am_hal_ctimer_period_set+0xa4>)
    eb78:	f857 300a 	ldr.w	r3, [r7, sl]
    eb7c:	d01a      	beq.n	ebb4 <am_hal_ctimer_period_set+0x5c>
    eb7e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    eb82:	2b80      	cmp	r3, #128	; 0x80
    eb84:	d01b      	beq.n	ebbe <am_hal_ctimer_period_set+0x66>
    eb86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb8a:	2000      	movs	r0, #0
    eb8c:	4591      	cmp	r9, r2
    eb8e:	4603      	mov	r3, r0
    eb90:	d01e      	beq.n	ebd0 <am_hal_ctimer_period_set+0x78>
    eb92:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    eb96:	d025      	beq.n	ebe4 <am_hal_ctimer_period_set+0x8c>
    eb98:	0c1b      	lsrs	r3, r3, #16
    eb9a:	b2a2      	uxth	r2, r4
    eb9c:	041b      	lsls	r3, r3, #16
    eb9e:	4310      	orrs	r0, r2
    eba0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    eba4:	5178      	str	r0, [r7, r5]
    eba6:	51bb      	str	r3, [r7, r6]
    eba8:	9801      	ldr	r0, [sp, #4]
    ebaa:	f000 f887 	bl	ecbc <am_hal_interrupt_master_set>
    ebae:	b002      	add	sp, #8
    ebb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebb4:	0c1b      	lsrs	r3, r3, #16
    ebb6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    ebba:	2b80      	cmp	r3, #128	; 0x80
    ebbc:	d111      	bne.n	ebe2 <am_hal_ctimer_period_set+0x8a>
    ebbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ebc2:	4591      	cmp	r9, r2
    ebc4:	ea4f 4004 	mov.w	r0, r4, lsl #16
    ebc8:	4623      	mov	r3, r4
    ebca:	ebc8 0404 	rsb	r4, r8, r4
    ebce:	d1e0      	bne.n	eb92 <am_hal_ctimer_period_set+0x3a>
    ebd0:	b2a3      	uxth	r3, r4
    ebd2:	4318      	orrs	r0, r3
    ebd4:	5178      	str	r0, [r7, r5]
    ebd6:	9801      	ldr	r0, [sp, #4]
    ebd8:	f000 f870 	bl	ecbc <am_hal_interrupt_master_set>
    ebdc:	b002      	add	sp, #8
    ebde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebe2:	2000      	movs	r0, #0
    ebe4:	b2a3      	uxth	r3, r4
    ebe6:	4318      	orrs	r0, r3
    ebe8:	51b8      	str	r0, [r7, r6]
    ebea:	9801      	ldr	r0, [sp, #4]
    ebec:	f000 f866 	bl	ecbc <am_hal_interrupt_master_set>
    ebf0:	b002      	add	sp, #8
    ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebf6:	bf00      	nop
    ebf8:	40008004 	.word	0x40008004
    ebfc:	40008008 	.word	0x40008008
    ec00:	4000800c 	.word	0x4000800c

0000ec04 <am_hal_ctimer_int_enable>:
    ec04:	b510      	push	{r4, lr}
    ec06:	b082      	sub	sp, #8
    ec08:	4604      	mov	r4, r0
    ec0a:	f000 f853 	bl	ecb4 <am_hal_interrupt_master_disable>
    ec0e:	4b06      	ldr	r3, [pc, #24]	; (ec28 <am_hal_ctimer_int_enable+0x24>)
    ec10:	9001      	str	r0, [sp, #4]
    ec12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ec16:	4314      	orrs	r4, r2
    ec18:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    ec1c:	9801      	ldr	r0, [sp, #4]
    ec1e:	f000 f84d 	bl	ecbc <am_hal_interrupt_master_set>
    ec22:	b002      	add	sp, #8
    ec24:	bd10      	pop	{r4, pc}
    ec26:	bf00      	nop
    ec28:	40008000 	.word	0x40008000

0000ec2c <am_hal_ctimer_int_clear>:
    ec2c:	b510      	push	{r4, lr}
    ec2e:	b082      	sub	sp, #8
    ec30:	4604      	mov	r4, r0
    ec32:	f000 f83f 	bl	ecb4 <am_hal_interrupt_master_disable>
    ec36:	4b04      	ldr	r3, [pc, #16]	; (ec48 <am_hal_ctimer_int_clear+0x1c>)
    ec38:	9001      	str	r0, [sp, #4]
    ec3a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    ec3e:	9801      	ldr	r0, [sp, #4]
    ec40:	f000 f83c 	bl	ecbc <am_hal_interrupt_master_set>
    ec44:	b002      	add	sp, #8
    ec46:	bd10      	pop	{r4, pc}
    ec48:	40008000 	.word	0x40008000

0000ec4c <am_hal_flash_delay>:
    ec4c:	4b00      	ldr	r3, [pc, #0]	; (ec50 <am_hal_flash_delay+0x4>)
    ec4e:	4718      	bx	r3
    ec50:	0800009d 	.word	0x0800009d

0000ec54 <am_hal_flash_delay_status_check>:
    ec54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec58:	f89d 4018 	ldrb.w	r4, [sp, #24]
    ec5c:	460d      	mov	r5, r1
    ec5e:	4616      	mov	r6, r2
    ec60:	461f      	mov	r7, r3
    ec62:	b17c      	cbz	r4, ec84 <am_hal_flash_delay_status_check+0x30>
    ec64:	4604      	mov	r4, r0
    ec66:	f8df 8040 	ldr.w	r8, [pc, #64]	; eca8 <am_hal_flash_delay_status_check+0x54>
    ec6a:	e002      	b.n	ec72 <am_hal_flash_delay_status_check+0x1e>
    ec6c:	b1c4      	cbz	r4, eca0 <am_hal_flash_delay_status_check+0x4c>
    ec6e:	47c0      	blx	r8
    ec70:	3c01      	subs	r4, #1
    ec72:	682b      	ldr	r3, [r5, #0]
    ec74:	4033      	ands	r3, r6
    ec76:	429f      	cmp	r7, r3
    ec78:	f04f 0001 	mov.w	r0, #1
    ec7c:	d1f6      	bne.n	ec6c <am_hal_flash_delay_status_check+0x18>
    ec7e:	2000      	movs	r0, #0
    ec80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec84:	f8df 8020 	ldr.w	r8, [pc, #32]	; eca8 <am_hal_flash_delay_status_check+0x54>
    ec88:	4604      	mov	r4, r0
    ec8a:	e002      	b.n	ec92 <am_hal_flash_delay_status_check+0x3e>
    ec8c:	b144      	cbz	r4, eca0 <am_hal_flash_delay_status_check+0x4c>
    ec8e:	47c0      	blx	r8
    ec90:	3c01      	subs	r4, #1
    ec92:	682b      	ldr	r3, [r5, #0]
    ec94:	4033      	ands	r3, r6
    ec96:	429f      	cmp	r7, r3
    ec98:	f04f 0001 	mov.w	r0, #1
    ec9c:	d0f6      	beq.n	ec8c <am_hal_flash_delay_status_check+0x38>
    ec9e:	e7ee      	b.n	ec7e <am_hal_flash_delay_status_check+0x2a>
    eca0:	2004      	movs	r0, #4
    eca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eca6:	bf00      	nop
    eca8:	0800009d 	.word	0x0800009d

0000ecac <am_hal_interrupt_master_enable>:
    ecac:	f3ef 8010 	mrs	r0, PRIMASK
    ecb0:	b662      	cpsie	i
    ecb2:	4770      	bx	lr

0000ecb4 <am_hal_interrupt_master_disable>:
    ecb4:	f3ef 8010 	mrs	r0, PRIMASK
    ecb8:	b672      	cpsid	i
    ecba:	4770      	bx	lr

0000ecbc <am_hal_interrupt_master_set>:
    ecbc:	f380 8810 	msr	PRIMASK, r0
    ecc0:	4770      	bx	lr
    ecc2:	bf00      	nop

0000ecc4 <am_hal_itm_disable>:
    ecc4:	b510      	push	{r4, lr}
    ecc6:	4b25      	ldr	r3, [pc, #148]	; (ed5c <am_hal_itm_disable+0x98>)
    ecc8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    eccc:	b9b3      	cbnz	r3, ecfc <am_hal_itm_disable+0x38>
    ecce:	4b24      	ldr	r3, [pc, #144]	; (ed60 <am_hal_itm_disable+0x9c>)
    ecd0:	68da      	ldr	r2, [r3, #12]
    ecd2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ecd6:	60da      	str	r2, [r3, #12]
    ecd8:	68da      	ldr	r2, [r3, #12]
    ecda:	01d2      	lsls	r2, r2, #7
    ecdc:	d5fc      	bpl.n	ecd8 <am_hal_itm_disable+0x14>
    ecde:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ece2:	4920      	ldr	r1, [pc, #128]	; (ed64 <am_hal_itm_disable+0xa0>)
    ece4:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ece8:	4a1f      	ldr	r2, [pc, #124]	; (ed68 <am_hal_itm_disable+0xa4>)
    ecea:	200f      	movs	r0, #15
    ecec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecf0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ecf4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ecf8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ecfc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ed00:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ed04:	021b      	lsls	r3, r3, #8
    ed06:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ed0a:	d4f9      	bmi.n	ed00 <am_hal_itm_disable+0x3c>
    ed0c:	f240 20f7 	movw	r0, #759	; 0x2f7
    ed10:	f7ff ff9c 	bl	ec4c <am_hal_flash_delay>
    ed14:	4b13      	ldr	r3, [pc, #76]	; (ed64 <am_hal_itm_disable+0xa0>)
    ed16:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ed1a:	4621      	mov	r1, r4
    ed1c:	2064      	movs	r0, #100	; 0x64
    ed1e:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ed22:	f023 0301 	bic.w	r3, r3, #1
    ed26:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ed2a:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ed2e:	4b0f      	ldr	r3, [pc, #60]	; (ed6c <am_hal_itm_disable+0xa8>)
    ed30:	4013      	ands	r3, r2
    ed32:	2b00      	cmp	r3, #0
    ed34:	d1f9      	bne.n	ed2a <am_hal_itm_disable+0x66>
    ed36:	3801      	subs	r0, #1
    ed38:	d1f1      	bne.n	ed1e <am_hal_itm_disable+0x5a>
    ed3a:	4a09      	ldr	r2, [pc, #36]	; (ed60 <am_hal_itm_disable+0x9c>)
    ed3c:	68d3      	ldr	r3, [r2, #12]
    ed3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ed42:	60d3      	str	r3, [r2, #12]
    ed44:	68d3      	ldr	r3, [r2, #12]
    ed46:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ed4a:	d1fb      	bne.n	ed44 <am_hal_itm_disable+0x80>
    ed4c:	4a03      	ldr	r2, [pc, #12]	; (ed5c <am_hal_itm_disable+0x98>)
    ed4e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ed52:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    ed56:	2b00      	cmp	r3, #0
    ed58:	d1fb      	bne.n	ed52 <am_hal_itm_disable+0x8e>
    ed5a:	bd10      	pop	{r4, pc}
    ed5c:	40020000 	.word	0x40020000
    ed60:	e000edf0 	.word	0xe000edf0
    ed64:	c5acce55 	.word	0xc5acce55
    ed68:	00150511 	.word	0x00150511
    ed6c:	00800001 	.word	0x00800001

0000ed70 <am_hal_mcuctrl_info_get>:
    ed70:	b4f0      	push	{r4, r5, r6, r7}
    ed72:	b121      	cbz	r1, ed7e <am_hal_mcuctrl_info_get+0xe>
    ed74:	2801      	cmp	r0, #1
    ed76:	d038      	beq.n	edea <am_hal_mcuctrl_info_get+0x7a>
    ed78:	d320      	bcc.n	edbc <am_hal_mcuctrl_info_get+0x4c>
    ed7a:	2802      	cmp	r0, #2
    ed7c:	d002      	beq.n	ed84 <am_hal_mcuctrl_info_get+0x14>
    ed7e:	2006      	movs	r0, #6
    ed80:	bcf0      	pop	{r4, r5, r6, r7}
    ed82:	4770      	bx	lr
    ed84:	4a41      	ldr	r2, [pc, #260]	; (ee8c <am_hal_mcuctrl_info_get+0x11c>)
    ed86:	684d      	ldr	r5, [r1, #4]
    ed88:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    ed8c:	694c      	ldr	r4, [r1, #20]
    ed8e:	f003 0601 	and.w	r6, r3, #1
    ed92:	f3c3 0040 	ubfx	r0, r3, #1, #1
    ed96:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ed9a:	700e      	strb	r6, [r1, #0]
    ed9c:	7208      	strb	r0, [r1, #8]
    ed9e:	740b      	strb	r3, [r1, #16]
    eda0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    eda4:	60cb      	str	r3, [r1, #12]
    eda6:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    edaa:	4328      	orrs	r0, r5
    edac:	6048      	str	r0, [r1, #4]
    edae:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    edb2:	4323      	orrs	r3, r4
    edb4:	2000      	movs	r0, #0
    edb6:	614b      	str	r3, [r1, #20]
    edb8:	bcf0      	pop	{r4, r5, r6, r7}
    edba:	4770      	bx	lr
    edbc:	4a33      	ldr	r2, [pc, #204]	; (ee8c <am_hal_mcuctrl_info_get+0x11c>)
    edbe:	6993      	ldr	r3, [r2, #24]
    edc0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    edc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    edc8:	7008      	strb	r0, [r1, #0]
    edca:	704b      	strb	r3, [r1, #1]
    edcc:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    edd0:	f3c3 6381 	ubfx	r3, r3, #26, #2
    edd4:	710b      	strb	r3, [r1, #4]
    edd6:	6953      	ldr	r3, [r2, #20]
    edd8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    eddc:	f003 0301 	and.w	r3, r3, #1
    ede0:	2000      	movs	r0, #0
    ede2:	708a      	strb	r2, [r1, #2]
    ede4:	70cb      	strb	r3, [r1, #3]
    ede6:	bcf0      	pop	{r4, r5, r6, r7}
    ede8:	4770      	bx	lr
    edea:	4b28      	ldr	r3, [pc, #160]	; (ee8c <am_hal_mcuctrl_info_get+0x11c>)
    edec:	4c28      	ldr	r4, [pc, #160]	; (ee90 <am_hal_mcuctrl_info_get+0x120>)
    edee:	681a      	ldr	r2, [r3, #0]
    edf0:	600a      	str	r2, [r1, #0]
    edf2:	6858      	ldr	r0, [r3, #4]
    edf4:	6048      	str	r0, [r1, #4]
    edf6:	6898      	ldr	r0, [r3, #8]
    edf8:	6088      	str	r0, [r1, #8]
    edfa:	68d8      	ldr	r0, [r3, #12]
    edfc:	60c8      	str	r0, [r1, #12]
    edfe:	691d      	ldr	r5, [r3, #16]
    ee00:	4824      	ldr	r0, [pc, #144]	; (ee94 <am_hal_mcuctrl_info_get+0x124>)
    ee02:	610d      	str	r5, [r1, #16]
    ee04:	f3c2 5703 	ubfx	r7, r2, #20, #4
    ee08:	f3c2 4603 	ubfx	r6, r2, #16, #4
    ee0c:	695d      	ldr	r5, [r3, #20]
    ee0e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    ee12:	4b21      	ldr	r3, [pc, #132]	; (ee98 <am_hal_mcuctrl_info_get+0x128>)
    ee14:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    ee18:	6208      	str	r0, [r1, #32]
    ee1a:	f002 0201 	and.w	r2, r2, #1
    ee1e:	614d      	str	r5, [r1, #20]
    ee20:	61cc      	str	r4, [r1, #28]
    ee22:	618a      	str	r2, [r1, #24]
    ee24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    ee28:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ee2c:	b2d0      	uxtb	r0, r2
    ee2e:	f004 020f 	and.w	r2, r4, #15
    ee32:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    ee36:	624a      	str	r2, [r1, #36]	; 0x24
    ee38:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    ee3c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    ee40:	f3c2 1003 	ubfx	r0, r2, #4, #4
    ee44:	f004 020f 	and.w	r2, r4, #15
    ee48:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ee4c:	628a      	str	r2, [r1, #40]	; 0x28
    ee4e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    ee52:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ee56:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ee5a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ee5e:	4302      	orrs	r2, r0
    ee60:	62ca      	str	r2, [r1, #44]	; 0x2c
    ee62:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    ee66:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ee6a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ee6e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ee72:	b2c0      	uxtb	r0, r0
    ee74:	0400      	lsls	r0, r0, #16
    ee76:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ee7a:	b2d2      	uxtb	r2, r2
    ee7c:	431a      	orrs	r2, r3
    ee7e:	b2e3      	uxtb	r3, r4
    ee80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ee84:	630b      	str	r3, [r1, #48]	; 0x30
    ee86:	2000      	movs	r0, #0
    ee88:	bcf0      	pop	{r4, r5, r6, r7}
    ee8a:	4770      	bx	lr
    ee8c:	40020000 	.word	0x40020000
    ee90:	0000fc24 	.word	0x0000fc24
    ee94:	0000fc64 	.word	0x0000fc64
    ee98:	f0000f00 	.word	0xf0000f00

0000ee9c <am_hal_pwrctrl_periph_enable>:
    ee9c:	b570      	push	{r4, r5, r6, lr}
    ee9e:	b082      	sub	sp, #8
    eea0:	4604      	mov	r4, r0
    eea2:	f7ff ff07 	bl	ecb4 <am_hal_interrupt_master_disable>
    eea6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eeaa:	4d0f      	ldr	r5, [pc, #60]	; (eee8 <am_hal_pwrctrl_periph_enable+0x4c>)
    eeac:	4e0f      	ldr	r6, [pc, #60]	; (eeec <am_hal_pwrctrl_periph_enable+0x50>)
    eeae:	9001      	str	r0, [sp, #4]
    eeb0:	00a4      	lsls	r4, r4, #2
    eeb2:	68aa      	ldr	r2, [r5, #8]
    eeb4:	5933      	ldr	r3, [r6, r4]
    eeb6:	4313      	orrs	r3, r2
    eeb8:	60ab      	str	r3, [r5, #8]
    eeba:	9801      	ldr	r0, [sp, #4]
    eebc:	4434      	add	r4, r6
    eebe:	f7ff fefd 	bl	ecbc <am_hal_interrupt_master_set>
    eec2:	2077      	movs	r0, #119	; 0x77
    eec4:	f7ff fec2 	bl	ec4c <am_hal_flash_delay>
    eec8:	69ab      	ldr	r3, [r5, #24]
    eeca:	6864      	ldr	r4, [r4, #4]
    eecc:	4223      	tst	r3, r4
    eece:	d103      	bne.n	eed8 <am_hal_pwrctrl_periph_enable+0x3c>
    eed0:	2077      	movs	r0, #119	; 0x77
    eed2:	f7ff febb 	bl	ec4c <am_hal_flash_delay>
    eed6:	69ab      	ldr	r3, [r5, #24]
    eed8:	4b03      	ldr	r3, [pc, #12]	; (eee8 <am_hal_pwrctrl_periph_enable+0x4c>)
    eeda:	699b      	ldr	r3, [r3, #24]
    eedc:	4223      	tst	r3, r4
    eede:	bf0c      	ite	eq
    eee0:	2001      	moveq	r0, #1
    eee2:	2000      	movne	r0, #0
    eee4:	b002      	add	sp, #8
    eee6:	bd70      	pop	{r4, r5, r6, pc}
    eee8:	40021000 	.word	0x40021000
    eeec:	0000fca4 	.word	0x0000fca4

0000eef0 <am_hal_pwrctrl_periph_disable>:
    eef0:	b570      	push	{r4, r5, r6, lr}
    eef2:	b082      	sub	sp, #8
    eef4:	4604      	mov	r4, r0
    eef6:	f7ff fedd 	bl	ecb4 <am_hal_interrupt_master_disable>
    eefa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eefe:	4d10      	ldr	r5, [pc, #64]	; (ef40 <am_hal_pwrctrl_periph_disable+0x50>)
    ef00:	4e10      	ldr	r6, [pc, #64]	; (ef44 <am_hal_pwrctrl_periph_disable+0x54>)
    ef02:	9001      	str	r0, [sp, #4]
    ef04:	00a4      	lsls	r4, r4, #2
    ef06:	68ab      	ldr	r3, [r5, #8]
    ef08:	5932      	ldr	r2, [r6, r4]
    ef0a:	ea23 0302 	bic.w	r3, r3, r2
    ef0e:	60ab      	str	r3, [r5, #8]
    ef10:	9801      	ldr	r0, [sp, #4]
    ef12:	4434      	add	r4, r6
    ef14:	f7ff fed2 	bl	ecbc <am_hal_interrupt_master_set>
    ef18:	2077      	movs	r0, #119	; 0x77
    ef1a:	f7ff fe97 	bl	ec4c <am_hal_flash_delay>
    ef1e:	69ab      	ldr	r3, [r5, #24]
    ef20:	6864      	ldr	r4, [r4, #4]
    ef22:	4223      	tst	r3, r4
    ef24:	d003      	beq.n	ef2e <am_hal_pwrctrl_periph_disable+0x3e>
    ef26:	2077      	movs	r0, #119	; 0x77
    ef28:	f7ff fe90 	bl	ec4c <am_hal_flash_delay>
    ef2c:	69ab      	ldr	r3, [r5, #24]
    ef2e:	4b04      	ldr	r3, [pc, #16]	; (ef40 <am_hal_pwrctrl_periph_disable+0x50>)
    ef30:	699b      	ldr	r3, [r3, #24]
    ef32:	4223      	tst	r3, r4
    ef34:	bf14      	ite	ne
    ef36:	2001      	movne	r0, #1
    ef38:	2000      	moveq	r0, #0
    ef3a:	b002      	add	sp, #8
    ef3c:	bd70      	pop	{r4, r5, r6, pc}
    ef3e:	bf00      	nop
    ef40:	40021000 	.word	0x40021000
    ef44:	0000fca4 	.word	0x0000fca4

0000ef48 <am_hal_pwrctrl_low_power_init>:
    ef48:	b530      	push	{r4, r5, lr}
    ef4a:	4b1f      	ldr	r3, [pc, #124]	; (efc8 <am_hal_pwrctrl_low_power_init+0x80>)
    ef4c:	681a      	ldr	r2, [r3, #0]
    ef4e:	b083      	sub	sp, #12
    ef50:	b912      	cbnz	r2, ef58 <am_hal_pwrctrl_low_power_init+0x10>
    ef52:	4a1e      	ldr	r2, [pc, #120]	; (efcc <am_hal_pwrctrl_low_power_init+0x84>)
    ef54:	6812      	ldr	r2, [r2, #0]
    ef56:	601a      	str	r2, [r3, #0]
    ef58:	4c1d      	ldr	r4, [pc, #116]	; (efd0 <am_hal_pwrctrl_low_power_init+0x88>)
    ef5a:	69a3      	ldr	r3, [r4, #24]
    ef5c:	05db      	lsls	r3, r3, #23
    ef5e:	d502      	bpl.n	ef66 <am_hal_pwrctrl_low_power_init+0x1e>
    ef60:	2000      	movs	r0, #0
    ef62:	b003      	add	sp, #12
    ef64:	bd30      	pop	{r4, r5, pc}
    ef66:	4d1b      	ldr	r5, [pc, #108]	; (efd4 <am_hal_pwrctrl_low_power_init+0x8c>)
    ef68:	491b      	ldr	r1, [pc, #108]	; (efd8 <am_hal_pwrctrl_low_power_init+0x90>)
    ef6a:	7e2a      	ldrb	r2, [r5, #24]
    ef6c:	2001      	movs	r0, #1
    ef6e:	4302      	orrs	r2, r0
    ef70:	2307      	movs	r3, #7
    ef72:	762a      	strb	r2, [r5, #24]
    ef74:	9000      	str	r0, [sp, #0]
    ef76:	461a      	mov	r2, r3
    ef78:	f242 7010 	movw	r0, #10000	; 0x2710
    ef7c:	f7ff fe6a 	bl	ec54 <am_hal_flash_delay_status_check>
    ef80:	b110      	cbz	r0, ef88 <am_hal_pwrctrl_low_power_init+0x40>
    ef82:	2004      	movs	r0, #4
    ef84:	b003      	add	sp, #12
    ef86:	bd30      	pop	{r4, r5, pc}
    ef88:	6823      	ldr	r3, [r4, #0]
    ef8a:	f043 0301 	orr.w	r3, r3, #1
    ef8e:	6023      	str	r3, [r4, #0]
    ef90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ef92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef96:	6263      	str	r3, [r4, #36]	; 0x24
    ef98:	68eb      	ldr	r3, [r5, #12]
    ef9a:	b2db      	uxtb	r3, r3
    ef9c:	2b11      	cmp	r3, #17
    ef9e:	d1df      	bne.n	ef60 <am_hal_pwrctrl_low_power_init+0x18>
    efa0:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    efa4:	f360 5356 	bfi	r3, r0, #21, #2
    efa8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    efac:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    efb0:	220f      	movs	r2, #15
    efb2:	f362 138b 	bfi	r3, r2, #6, #6
    efb6:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    efba:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    efbe:	f362 0305 	bfi	r3, r2, #0, #6
    efc2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    efc6:	e7cc      	b.n	ef62 <am_hal_pwrctrl_low_power_init+0x1a>
    efc8:	1000c168 	.word	0x1000c168
    efcc:	4ffff000 	.word	0x4ffff000
    efd0:	40021000 	.word	0x40021000
    efd4:	40020000 	.word	0x40020000
    efd8:	40020018 	.word	0x40020018

0000efdc <am_hal_rtc_osc_select>:
    efdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    efe0:	2801      	cmp	r0, #1
    efe2:	68d3      	ldr	r3, [r2, #12]
    efe4:	bf0c      	ite	eq
    efe6:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    efea:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    efee:	60d3      	str	r3, [r2, #12]
    eff0:	4770      	bx	lr
    eff2:	bf00      	nop

0000eff4 <am_hal_rtc_osc_disable>:
    eff4:	4a03      	ldr	r2, [pc, #12]	; (f004 <am_hal_rtc_osc_disable+0x10>)
    eff6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    effa:	f043 0310 	orr.w	r3, r3, #16
    effe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f002:	4770      	bx	lr
    f004:	40004200 	.word	0x40004200

0000f008 <am_hal_uart_initialize>:
    f008:	2801      	cmp	r0, #1
    f00a:	d901      	bls.n	f010 <am_hal_uart_initialize+0x8>
    f00c:	2005      	movs	r0, #5
    f00e:	4770      	bx	lr
    f010:	b169      	cbz	r1, f02e <am_hal_uart_initialize+0x26>
    f012:	b5f0      	push	{r4, r5, r6, r7, lr}
    f014:	2264      	movs	r2, #100	; 0x64
    f016:	4e0e      	ldr	r6, [pc, #56]	; (f050 <am_hal_uart_initialize+0x48>)
    f018:	fb02 f200 	mul.w	r2, r2, r0
    f01c:	18b4      	adds	r4, r6, r2
    f01e:	4603      	mov	r3, r0
    f020:	78e0      	ldrb	r0, [r4, #3]
    f022:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f026:	b2fd      	uxtb	r5, r7
    f028:	b11d      	cbz	r5, f032 <am_hal_uart_initialize+0x2a>
    f02a:	2007      	movs	r0, #7
    f02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f02e:	2006      	movs	r0, #6
    f030:	4770      	bx	lr
    f032:	f040 0001 	orr.w	r0, r0, #1
    f036:	70e0      	strb	r0, [r4, #3]
    f038:	58b0      	ldr	r0, [r6, r2]
    f03a:	f8df e018 	ldr.w	lr, [pc, #24]	; f054 <am_hal_uart_initialize+0x4c>
    f03e:	f36e 0017 	bfi	r0, lr, #0, #24
    f042:	50b0      	str	r0, [r6, r2]
    f044:	6263      	str	r3, [r4, #36]	; 0x24
    f046:	7127      	strb	r7, [r4, #4]
    f048:	6625      	str	r5, [r4, #96]	; 0x60
    f04a:	4628      	mov	r0, r5
    f04c:	600c      	str	r4, [r1, #0]
    f04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f050:	1001c0ac 	.word	0x1001c0ac
    f054:	00ea9e06 	.word	0x00ea9e06

0000f058 <am_hal_uart_power_control>:
    f058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f05c:	6804      	ldr	r4, [r0, #0]
    f05e:	4b36      	ldr	r3, [pc, #216]	; (f138 <am_hal_uart_power_control+0xe0>)
    f060:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f064:	429c      	cmp	r4, r3
    f066:	b083      	sub	sp, #12
    f068:	d003      	beq.n	f072 <am_hal_uart_power_control+0x1a>
    f06a:	2002      	movs	r0, #2
    f06c:	b003      	add	sp, #12
    f06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f072:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f074:	4605      	mov	r5, r0
    f076:	f107 0008 	add.w	r0, r7, #8
    f07a:	4691      	mov	r9, r2
    f07c:	460e      	mov	r6, r1
    f07e:	fa5f f880 	uxtb.w	r8, r0
    f082:	b181      	cbz	r1, f0a6 <am_hal_uart_power_control+0x4e>
    f084:	2902      	cmp	r1, #2
    f086:	d80c      	bhi.n	f0a2 <am_hal_uart_power_control+0x4a>
    f088:	b992      	cbnz	r2, f0b0 <am_hal_uart_power_control+0x58>
    f08a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f08e:	371c      	adds	r7, #28
    f090:	033f      	lsls	r7, r7, #12
    f092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f096:	647b      	str	r3, [r7, #68]	; 0x44
    f098:	4640      	mov	r0, r8
    f09a:	f7ff ff29 	bl	eef0 <am_hal_pwrctrl_periph_disable>
    f09e:	2000      	movs	r0, #0
    f0a0:	e7e4      	b.n	f06c <am_hal_uart_power_control+0x14>
    f0a2:	2006      	movs	r0, #6
    f0a4:	e7e2      	b.n	f06c <am_hal_uart_power_control+0x14>
    f0a6:	b322      	cbz	r2, f0f2 <am_hal_uart_power_control+0x9a>
    f0a8:	792b      	ldrb	r3, [r5, #4]
    f0aa:	bb3b      	cbnz	r3, f0fc <am_hal_uart_power_control+0xa4>
    f0ac:	2007      	movs	r0, #7
    f0ae:	e7dd      	b.n	f06c <am_hal_uart_power_control+0x14>
    f0b0:	f7ff fe00 	bl	ecb4 <am_hal_interrupt_master_disable>
    f0b4:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f0b8:	331c      	adds	r3, #28
    f0ba:	031b      	lsls	r3, r3, #12
    f0bc:	9001      	str	r0, [sp, #4]
    f0be:	6a1a      	ldr	r2, [r3, #32]
    f0c0:	60aa      	str	r2, [r5, #8]
    f0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f0c4:	60ea      	str	r2, [r5, #12]
    f0c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f0c8:	612a      	str	r2, [r5, #16]
    f0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f0cc:	616a      	str	r2, [r5, #20]
    f0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f0d0:	61aa      	str	r2, [r5, #24]
    f0d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f0d4:	61ea      	str	r2, [r5, #28]
    f0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f0d8:	622b      	str	r3, [r5, #32]
    f0da:	2301      	movs	r3, #1
    f0dc:	712b      	strb	r3, [r5, #4]
    f0de:	9801      	ldr	r0, [sp, #4]
    f0e0:	f7ff fdec 	bl	ecbc <am_hal_interrupt_master_set>
    f0e4:	682b      	ldr	r3, [r5, #0]
    f0e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f0ea:	42a3      	cmp	r3, r4
    f0ec:	d1d4      	bne.n	f098 <am_hal_uart_power_control+0x40>
    f0ee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f0f0:	e7cb      	b.n	f08a <am_hal_uart_power_control+0x32>
    f0f2:	4640      	mov	r0, r8
    f0f4:	f7ff fed2 	bl	ee9c <am_hal_pwrctrl_periph_enable>
    f0f8:	4648      	mov	r0, r9
    f0fa:	e7b7      	b.n	f06c <am_hal_uart_power_control+0x14>
    f0fc:	4640      	mov	r0, r8
    f0fe:	f7ff fecd 	bl	ee9c <am_hal_pwrctrl_periph_enable>
    f102:	f7ff fdd7 	bl	ecb4 <am_hal_interrupt_master_disable>
    f106:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f10a:	331c      	adds	r3, #28
    f10c:	031b      	lsls	r3, r3, #12
    f10e:	68aa      	ldr	r2, [r5, #8]
    f110:	9000      	str	r0, [sp, #0]
    f112:	621a      	str	r2, [r3, #32]
    f114:	68ea      	ldr	r2, [r5, #12]
    f116:	625a      	str	r2, [r3, #36]	; 0x24
    f118:	692a      	ldr	r2, [r5, #16]
    f11a:	629a      	str	r2, [r3, #40]	; 0x28
    f11c:	696a      	ldr	r2, [r5, #20]
    f11e:	62da      	str	r2, [r3, #44]	; 0x2c
    f120:	69aa      	ldr	r2, [r5, #24]
    f122:	631a      	str	r2, [r3, #48]	; 0x30
    f124:	69ea      	ldr	r2, [r5, #28]
    f126:	635a      	str	r2, [r3, #52]	; 0x34
    f128:	6a2a      	ldr	r2, [r5, #32]
    f12a:	639a      	str	r2, [r3, #56]	; 0x38
    f12c:	9800      	ldr	r0, [sp, #0]
    f12e:	712e      	strb	r6, [r5, #4]
    f130:	f7ff fdc4 	bl	ecbc <am_hal_interrupt_master_set>
    f134:	4630      	mov	r0, r6
    f136:	e799      	b.n	f06c <am_hal_uart_power_control+0x14>
    f138:	01ea9e06 	.word	0x01ea9e06

0000f13c <am_hal_uart_configure>:
    f13c:	6803      	ldr	r3, [r0, #0]
    f13e:	4a7a      	ldr	r2, [pc, #488]	; (f328 <am_hal_uart_configure+0x1ec>)
    f140:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f144:	4293      	cmp	r3, r2
    f146:	d001      	beq.n	f14c <am_hal_uart_configure+0x10>
    f148:	2002      	movs	r0, #2
    f14a:	4770      	bx	lr
    f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f150:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f152:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f156:	351c      	adds	r5, #28
    f158:	032d      	lsls	r5, r5, #12
    f15a:	2700      	movs	r7, #0
    f15c:	b084      	sub	sp, #16
    f15e:	632f      	str	r7, [r5, #48]	; 0x30
    f160:	460e      	mov	r6, r1
    f162:	4604      	mov	r4, r0
    f164:	f7ff fda6 	bl	ecb4 <am_hal_interrupt_master_disable>
    f168:	9001      	str	r0, [sp, #4]
    f16a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f16c:	f043 0308 	orr.w	r3, r3, #8
    f170:	862b      	strh	r3, [r5, #48]	; 0x30
    f172:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f174:	2201      	movs	r2, #1
    f176:	f362 1306 	bfi	r3, r2, #4, #3
    f17a:	862b      	strh	r3, [r5, #48]	; 0x30
    f17c:	9801      	ldr	r0, [sp, #4]
    f17e:	f7ff fd9d 	bl	ecbc <am_hal_interrupt_master_set>
    f182:	f7ff fd97 	bl	ecb4 <am_hal_interrupt_master_disable>
    f186:	9002      	str	r0, [sp, #8]
    f188:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f18a:	f367 0300 	bfi	r3, r7, #0, #1
    f18e:	862b      	strh	r3, [r5, #48]	; 0x30
    f190:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f192:	f367 2349 	bfi	r3, r7, #9, #1
    f196:	862b      	strh	r3, [r5, #48]	; 0x30
    f198:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f19a:	f367 2308 	bfi	r3, r7, #8, #1
    f19e:	862b      	strh	r3, [r5, #48]	; 0x30
    f1a0:	9802      	ldr	r0, [sp, #8]
    f1a2:	f7ff fd8b 	bl	ecbc <am_hal_interrupt_master_set>
    f1a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f1a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f1ac:	3b01      	subs	r3, #1
    f1ae:	2b03      	cmp	r3, #3
    f1b0:	d854      	bhi.n	f25c <am_hal_uart_configure+0x120>
    f1b2:	e8df f003 	tbb	[pc, r3]
    f1b6:	020e      	.short	0x020e
    f1b8:	1114      	.short	0x1114
    f1ba:	495c      	ldr	r1, [pc, #368]	; (f32c <am_hal_uart_configure+0x1f0>)
    f1bc:	485c      	ldr	r0, [pc, #368]	; (f330 <am_hal_uart_configure+0x1f4>)
    f1be:	6832      	ldr	r2, [r6, #0]
    f1c0:	0112      	lsls	r2, r2, #4
    f1c2:	fbb0 f3f2 	udiv	r3, r0, r2
    f1c6:	b96b      	cbnz	r3, f1e4 <am_hal_uart_configure+0xa8>
    f1c8:	485a      	ldr	r0, [pc, #360]	; (f334 <am_hal_uart_configure+0x1f8>)
    f1ca:	6623      	str	r3, [r4, #96]	; 0x60
    f1cc:	b004      	add	sp, #16
    f1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1d2:	4959      	ldr	r1, [pc, #356]	; (f338 <am_hal_uart_configure+0x1fc>)
    f1d4:	4859      	ldr	r0, [pc, #356]	; (f33c <am_hal_uart_configure+0x200>)
    f1d6:	e7f2      	b.n	f1be <am_hal_uart_configure+0x82>
    f1d8:	4959      	ldr	r1, [pc, #356]	; (f340 <am_hal_uart_configure+0x204>)
    f1da:	485a      	ldr	r0, [pc, #360]	; (f344 <am_hal_uart_configure+0x208>)
    f1dc:	e7ef      	b.n	f1be <am_hal_uart_configure+0x82>
    f1de:	495a      	ldr	r1, [pc, #360]	; (f348 <am_hal_uart_configure+0x20c>)
    f1e0:	485a      	ldr	r0, [pc, #360]	; (f34c <am_hal_uart_configure+0x210>)
    f1e2:	e7ec      	b.n	f1be <am_hal_uart_configure+0x82>
    f1e4:	fbb1 f2f2 	udiv	r2, r1, r2
    f1e8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f1ec:	626b      	str	r3, [r5, #36]	; 0x24
    f1ee:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    f1f2:	626b      	str	r3, [r5, #36]	; 0x24
    f1f4:	fbb0 f0f1 	udiv	r0, r0, r1
    f1f8:	62aa      	str	r2, [r5, #40]	; 0x28
    f1fa:	6620      	str	r0, [r4, #96]	; 0x60
    f1fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f1fe:	f36f 338e 	bfc	r3, #14, #1
    f202:	862b      	strh	r3, [r5, #48]	; 0x30
    f204:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f206:	f36f 33cf 	bfc	r3, #15, #1
    f20a:	862b      	strh	r3, [r5, #48]	; 0x30
    f20c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f20e:	6933      	ldr	r3, [r6, #16]
    f210:	4313      	orrs	r3, r2
    f212:	632b      	str	r3, [r5, #48]	; 0x30
    f214:	6973      	ldr	r3, [r6, #20]
    f216:	636b      	str	r3, [r5, #52]	; 0x34
    f218:	6871      	ldr	r1, [r6, #4]
    f21a:	68b3      	ldr	r3, [r6, #8]
    f21c:	68f2      	ldr	r2, [r6, #12]
    f21e:	430b      	orrs	r3, r1
    f220:	f043 0310 	orr.w	r3, r3, #16
    f224:	4313      	orrs	r3, r2
    f226:	62eb      	str	r3, [r5, #44]	; 0x2c
    f228:	f7ff fd44 	bl	ecb4 <am_hal_interrupt_master_disable>
    f22c:	9003      	str	r0, [sp, #12]
    f22e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f230:	f043 0301 	orr.w	r3, r3, #1
    f234:	862b      	strh	r3, [r5, #48]	; 0x30
    f236:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f23c:	862b      	strh	r3, [r5, #48]	; 0x30
    f23e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f244:	862b      	strh	r3, [r5, #48]	; 0x30
    f246:	9803      	ldr	r0, [sp, #12]
    f248:	f7ff fd38 	bl	ecbc <am_hal_interrupt_master_set>
    f24c:	6825      	ldr	r5, [r4, #0]
    f24e:	4b36      	ldr	r3, [pc, #216]	; (f328 <am_hal_uart_configure+0x1ec>)
    f250:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f254:	429d      	cmp	r5, r3
    f256:	d005      	beq.n	f264 <am_hal_uart_configure+0x128>
    f258:	2000      	movs	r0, #0
    f25a:	e7b7      	b.n	f1cc <am_hal_uart_configure+0x90>
    f25c:	2300      	movs	r3, #0
    f25e:	6623      	str	r3, [r4, #96]	; 0x60
    f260:	483b      	ldr	r0, [pc, #236]	; (f350 <am_hal_uart_configure+0x214>)
    f262:	e7b3      	b.n	f1cc <am_hal_uart_configure+0x90>
    f264:	69b1      	ldr	r1, [r6, #24]
    f266:	6a37      	ldr	r7, [r6, #32]
    f268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    f26c:	b109      	cbz	r1, f272 <am_hal_uart_configure+0x136>
    f26e:	69f3      	ldr	r3, [r6, #28]
    f270:	bb3b      	cbnz	r3, f2c2 <am_hal_uart_configure+0x186>
    f272:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f274:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f278:	f103 021c 	add.w	r2, r3, #28
    f27c:	0312      	lsls	r2, r2, #12
    f27e:	2100      	movs	r1, #0
    f280:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    f284:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f286:	f021 0120 	bic.w	r1, r1, #32
    f28a:	6391      	str	r1, [r2, #56]	; 0x38
    f28c:	b1b7      	cbz	r7, f2bc <am_hal_uart_configure+0x180>
    f28e:	f1b8 0f00 	cmp.w	r8, #0
    f292:	d12e      	bne.n	f2f2 <am_hal_uart_configure+0x1b6>
    f294:	6823      	ldr	r3, [r4, #0]
    f296:	4a24      	ldr	r2, [pc, #144]	; (f328 <am_hal_uart_configure+0x1ec>)
    f298:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f29c:	2100      	movs	r1, #0
    f29e:	4293      	cmp	r3, r2
    f2a0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    f2a4:	d1d8      	bne.n	f258 <am_hal_uart_configure+0x11c>
    f2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f2ac:	331c      	adds	r3, #28
    f2ae:	031b      	lsls	r3, r3, #12
    f2b0:	2000      	movs	r0, #0
    f2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f2b4:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f2b8:	639a      	str	r2, [r3, #56]	; 0x38
    f2ba:	e787      	b.n	f1cc <am_hal_uart_configure+0x90>
    f2bc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f2c0:	e7f4      	b.n	f2ac <am_hal_uart_configure+0x170>
    f2c2:	2201      	movs	r2, #1
    f2c4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f2c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f2cc:	f000 fa7c 	bl	f7c8 <am_hal_queue_init>
    f2d0:	6823      	ldr	r3, [r4, #0]
    f2d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2d6:	42ab      	cmp	r3, r5
    f2d8:	d1be      	bne.n	f258 <am_hal_uart_configure+0x11c>
    f2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f2dc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f2e0:	331c      	adds	r3, #28
    f2e2:	031b      	lsls	r3, r3, #12
    f2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f2e6:	f042 0220 	orr.w	r2, r2, #32
    f2ea:	639a      	str	r2, [r3, #56]	; 0x38
    f2ec:	2f00      	cmp	r7, #0
    f2ee:	d1ce      	bne.n	f28e <am_hal_uart_configure+0x152>
    f2f0:	e7d0      	b.n	f294 <am_hal_uart_configure+0x158>
    f2f2:	2201      	movs	r2, #1
    f2f4:	4643      	mov	r3, r8
    f2f6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f2fa:	4639      	mov	r1, r7
    f2fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f300:	f000 fa62 	bl	f7c8 <am_hal_queue_init>
    f304:	6823      	ldr	r3, [r4, #0]
    f306:	4a08      	ldr	r2, [pc, #32]	; (f328 <am_hal_uart_configure+0x1ec>)
    f308:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f30c:	4293      	cmp	r3, r2
    f30e:	d1a3      	bne.n	f258 <am_hal_uart_configure+0x11c>
    f310:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f312:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f316:	331c      	adds	r3, #28
    f318:	031b      	lsls	r3, r3, #12
    f31a:	2000      	movs	r0, #0
    f31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f31e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f322:	639a      	str	r2, [r3, #56]	; 0x38
    f324:	e752      	b.n	f1cc <am_hal_uart_configure+0x90>
    f326:	bf00      	nop
    f328:	01ea9e06 	.word	0x01ea9e06
    f32c:	2dc6c000 	.word	0x2dc6c000
    f330:	00b71b00 	.word	0x00b71b00
    f334:	08000003 	.word	0x08000003
    f338:	5b8d8000 	.word	0x5b8d8000
    f33c:	016e3600 	.word	0x016e3600
    f340:	0b71b000 	.word	0x0b71b000
    f344:	002dc6c0 	.word	0x002dc6c0
    f348:	16e36000 	.word	0x16e36000
    f34c:	005b8d80 	.word	0x005b8d80
    f350:	08000002 	.word	0x08000002

0000f354 <am_hal_uart_transfer>:
    f354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f358:	680f      	ldr	r7, [r1, #0]
    f35a:	b091      	sub	sp, #68	; 0x44
    f35c:	4605      	mov	r5, r0
    f35e:	b13f      	cbz	r7, f370 <am_hal_uart_transfer+0x1c>
    f360:	2f01      	cmp	r7, #1
    f362:	bf18      	it	ne
    f364:	2707      	movne	r7, #7
    f366:	d024      	beq.n	f3b2 <am_hal_uart_transfer+0x5e>
    f368:	4638      	mov	r0, r7
    f36a:	b011      	add	sp, #68	; 0x44
    f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f370:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f374:	690b      	ldr	r3, [r1, #16]
    f376:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f37a:	688e      	ldr	r6, [r1, #8]
    f37c:	9300      	str	r3, [sp, #0]
    f37e:	f1b9 0f00 	cmp.w	r9, #0
    f382:	d031      	beq.n	f3e8 <am_hal_uart_transfer+0x94>
    f384:	2e00      	cmp	r6, #0
    f386:	f000 819c 	beq.w	f6c2 <am_hal_uart_transfer+0x36e>
    f38a:	2800      	cmp	r0, #0
    f38c:	f000 8097 	beq.w	f4be <am_hal_uart_transfer+0x16a>
    f390:	6803      	ldr	r3, [r0, #0]
    f392:	4aa9      	ldr	r2, [pc, #676]	; (f638 <am_hal_uart_transfer+0x2e4>)
    f394:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f398:	4293      	cmp	r3, r2
    f39a:	f000 8092 	beq.w	f4c2 <am_hal_uart_transfer+0x16e>
    f39e:	46b8      	mov	r8, r7
    f3a0:	9b00      	ldr	r3, [sp, #0]
    f3a2:	b10b      	cbz	r3, f3a8 <am_hal_uart_transfer+0x54>
    f3a4:	f8c3 8000 	str.w	r8, [r3]
    f3a8:	2702      	movs	r7, #2
    f3aa:	4638      	mov	r0, r7
    f3ac:	b011      	add	sp, #68	; 0x44
    f3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3b2:	1d0b      	adds	r3, r1, #4
    f3b4:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f3b8:	f1b9 0f00 	cmp.w	r9, #0
    f3bc:	d043      	beq.n	f446 <am_hal_uart_transfer+0xf2>
    f3be:	2f00      	cmp	r7, #0
    f3c0:	f000 8185 	beq.w	f6ce <am_hal_uart_transfer+0x37a>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f000 80eb 	beq.w	f5a0 <am_hal_uart_transfer+0x24c>
    f3ca:	6802      	ldr	r2, [r0, #0]
    f3cc:	499a      	ldr	r1, [pc, #616]	; (f638 <am_hal_uart_transfer+0x2e4>)
    f3ce:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f3d2:	428a      	cmp	r2, r1
    f3d4:	f000 80e7 	beq.w	f5a6 <am_hal_uart_transfer+0x252>
    f3d8:	2600      	movs	r6, #0
    f3da:	2702      	movs	r7, #2
    f3dc:	f1bb 0f00 	cmp.w	fp, #0
    f3e0:	d0c2      	beq.n	f368 <am_hal_uart_transfer+0x14>
    f3e2:	f8cb 6000 	str.w	r6, [fp]
    f3e6:	e7bf      	b.n	f368 <am_hal_uart_transfer+0x14>
    f3e8:	2800      	cmp	r0, #0
    f3ea:	d0dd      	beq.n	f3a8 <am_hal_uart_transfer+0x54>
    f3ec:	6803      	ldr	r3, [r0, #0]
    f3ee:	4a92      	ldr	r2, [pc, #584]	; (f638 <am_hal_uart_transfer+0x2e4>)
    f3f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3f4:	4293      	cmp	r3, r2
    f3f6:	d1d7      	bne.n	f3a8 <am_hal_uart_transfer+0x54>
    f3f8:	9b00      	ldr	r3, [sp, #0]
    f3fa:	b10b      	cbz	r3, f400 <am_hal_uart_transfer+0xac>
    f3fc:	f8c3 9000 	str.w	r9, [r3]
    f400:	b1fe      	cbz	r6, f442 <am_hal_uart_transfer+0xee>
    f402:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f406:	2b00      	cmp	r3, #0
    f408:	f040 8165 	bne.w	f6d6 <am_hal_uart_transfer+0x382>
    f40c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f40e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f412:	311c      	adds	r1, #28
    f414:	0309      	lsls	r1, r1, #12
    f416:	698a      	ldr	r2, [r1, #24]
    f418:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f41c:	2a00      	cmp	r2, #0
    f41e:	f040 818d 	bne.w	f73c <am_hal_uart_transfer+0x3e8>
    f422:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    f426:	e003      	b.n	f430 <am_hal_uart_transfer+0xdc>
    f428:	6988      	ldr	r0, [r1, #24]
    f42a:	0680      	lsls	r0, r0, #26
    f42c:	f100 8151 	bmi.w	f6d2 <am_hal_uart_transfer+0x37e>
    f430:	3201      	adds	r2, #1
    f432:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f436:	6008      	str	r0, [r1, #0]
    f438:	4296      	cmp	r6, r2
    f43a:	d1f5      	bne.n	f428 <am_hal_uart_transfer+0xd4>
    f43c:	9b00      	ldr	r3, [sp, #0]
    f43e:	b103      	cbz	r3, f442 <am_hal_uart_transfer+0xee>
    f440:	601e      	str	r6, [r3, #0]
    f442:	2700      	movs	r7, #0
    f444:	e790      	b.n	f368 <am_hal_uart_transfer+0x14>
    f446:	2800      	cmp	r0, #0
    f448:	d0ae      	beq.n	f3a8 <am_hal_uart_transfer+0x54>
    f44a:	6802      	ldr	r2, [r0, #0]
    f44c:	497a      	ldr	r1, [pc, #488]	; (f638 <am_hal_uart_transfer+0x2e4>)
    f44e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f452:	428a      	cmp	r2, r1
    f454:	d1a8      	bne.n	f3a8 <am_hal_uart_transfer+0x54>
    f456:	f1bb 0f00 	cmp.w	fp, #0
    f45a:	d001      	beq.n	f460 <am_hal_uart_transfer+0x10c>
    f45c:	f8cb 9000 	str.w	r9, [fp]
    f460:	2f00      	cmp	r7, #0
    f462:	d0ee      	beq.n	f442 <am_hal_uart_transfer+0xee>
    f464:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    f468:	2c00      	cmp	r4, #0
    f46a:	f040 816c 	bne.w	f746 <am_hal_uart_transfer+0x3f2>
    f46e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f470:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f474:	321c      	adds	r2, #28
    f476:	0312      	lsls	r2, r2, #12
    f478:	6990      	ldr	r0, [r2, #24]
    f47a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f47e:	2800      	cmp	r0, #0
    f480:	f040 819d 	bne.w	f7be <am_hal_uart_transfer+0x46a>
    f484:	6811      	ldr	r1, [r2, #0]
    f486:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    f48a:	bf08      	it	eq
    f48c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    f490:	d008      	beq.n	f4a4 <am_hal_uart_transfer+0x150>
    f492:	e190      	b.n	f7b6 <am_hal_uart_transfer+0x462>
    f494:	6991      	ldr	r1, [r2, #24]
    f496:	06c8      	lsls	r0, r1, #27
    f498:	d409      	bmi.n	f4ae <am_hal_uart_transfer+0x15a>
    f49a:	6811      	ldr	r1, [r2, #0]
    f49c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f4a0:	f040 814e 	bne.w	f740 <am_hal_uart_transfer+0x3ec>
    f4a4:	3401      	adds	r4, #1
    f4a6:	42a7      	cmp	r7, r4
    f4a8:	f803 1f01 	strb.w	r1, [r3, #1]!
    f4ac:	d1f2      	bne.n	f494 <am_hal_uart_transfer+0x140>
    f4ae:	2700      	movs	r7, #0
    f4b0:	f1bb 0f00 	cmp.w	fp, #0
    f4b4:	f43f af58 	beq.w	f368 <am_hal_uart_transfer+0x14>
    f4b8:	f8cb 4000 	str.w	r4, [fp]
    f4bc:	e754      	b.n	f368 <am_hal_uart_transfer+0x14>
    f4be:	4680      	mov	r8, r0
    f4c0:	e76e      	b.n	f3a0 <am_hal_uart_transfer+0x4c>
    f4c2:	9301      	str	r3, [sp, #4]
    f4c4:	4651      	mov	r1, sl
    f4c6:	46bb      	mov	fp, r7
    f4c8:	46b8      	mov	r8, r7
    f4ca:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f4ce:	b9f2      	cbnz	r2, f50e <am_hal_uart_transfer+0x1ba>
    f4d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f4d2:	b19e      	cbz	r6, f4fc <am_hal_uart_transfer+0x1a8>
    f4d4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f4d8:	321c      	adds	r2, #28
    f4da:	0312      	lsls	r2, r2, #12
    f4dc:	3901      	subs	r1, #1
    f4de:	6994      	ldr	r4, [r2, #24]
    f4e0:	f3c4 1440 	ubfx	r4, r4, #5, #1
    f4e4:	b11c      	cbz	r4, f4ee <am_hal_uart_transfer+0x19a>
    f4e6:	e047      	b.n	f578 <am_hal_uart_transfer+0x224>
    f4e8:	6993      	ldr	r3, [r2, #24]
    f4ea:	069b      	lsls	r3, r3, #26
    f4ec:	d441      	bmi.n	f572 <am_hal_uart_transfer+0x21e>
    f4ee:	3401      	adds	r4, #1
    f4f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    f4f4:	6013      	str	r3, [r2, #0]
    f4f6:	42b4      	cmp	r4, r6
    f4f8:	d1f6      	bne.n	f4e8 <am_hal_uart_transfer+0x194>
    f4fa:	44a0      	add	r8, r4
    f4fc:	9b00      	ldr	r3, [sp, #0]
    f4fe:	2b00      	cmp	r3, #0
    f500:	d09f      	beq.n	f442 <am_hal_uart_transfer+0xee>
    f502:	4638      	mov	r0, r7
    f504:	f8c3 8000 	str.w	r8, [r3]
    f508:	b011      	add	sp, #68	; 0x44
    f50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f50e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f510:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    f512:	1b14      	subs	r4, r2, r4
    f514:	42b4      	cmp	r4, r6
    f516:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    f51a:	bf28      	it	cs
    f51c:	4634      	movcs	r4, r6
    f51e:	4622      	mov	r2, r4
    f520:	4618      	mov	r0, r3
    f522:	9302      	str	r3, [sp, #8]
    f524:	f000 f95c 	bl	f7e0 <am_hal_queue_item_add>
    f528:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f52a:	9303      	str	r3, [sp, #12]
    f52c:	f7ff fbc2 	bl	ecb4 <am_hal_interrupt_master_disable>
    f530:	9b03      	ldr	r3, [sp, #12]
    f532:	9008      	str	r0, [sp, #32]
    f534:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f538:	331c      	adds	r3, #28
    f53a:	031b      	lsls	r3, r3, #12
    f53c:	9303      	str	r3, [sp, #12]
    f53e:	e00d      	b.n	f55c <am_hal_uart_transfer+0x208>
    f540:	f000 f986 	bl	f850 <am_hal_queue_item_get>
    f544:	b190      	cbz	r0, f56c <am_hal_uart_transfer+0x218>
    f546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f548:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f54c:	331c      	adds	r3, #28
    f54e:	031b      	lsls	r3, r3, #12
    f550:	699a      	ldr	r2, [r3, #24]
    f552:	0692      	lsls	r2, r2, #26
    f554:	bf5c      	itt	pl
    f556:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    f55a:	601a      	strpl	r2, [r3, #0]
    f55c:	9b03      	ldr	r3, [sp, #12]
    f55e:	9802      	ldr	r0, [sp, #8]
    f560:	699b      	ldr	r3, [r3, #24]
    f562:	069b      	lsls	r3, r3, #26
    f564:	f04f 0201 	mov.w	r2, #1
    f568:	a907      	add	r1, sp, #28
    f56a:	d5e9      	bpl.n	f540 <am_hal_uart_transfer+0x1ec>
    f56c:	9808      	ldr	r0, [sp, #32]
    f56e:	f7ff fba5 	bl	ecbc <am_hal_interrupt_master_set>
    f572:	1b36      	subs	r6, r6, r4
    f574:	44a0      	add	r8, r4
    f576:	d0c1      	beq.n	f4fc <am_hal_uart_transfer+0x1a8>
    f578:	2001      	movs	r0, #1
    f57a:	f7ff fb67 	bl	ec4c <am_hal_flash_delay>
    f57e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    f582:	d001      	beq.n	f588 <am_hal_uart_transfer+0x234>
    f584:	f10b 0b01 	add.w	fp, fp, #1
    f588:	45d9      	cmp	r9, fp
    f58a:	d9b7      	bls.n	f4fc <am_hal_uart_transfer+0x1a8>
    f58c:	682a      	ldr	r2, [r5, #0]
    f58e:	9b01      	ldr	r3, [sp, #4]
    f590:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f594:	429a      	cmp	r2, r3
    f596:	eb0a 0108 	add.w	r1, sl, r8
    f59a:	f47f af01 	bne.w	f3a0 <am_hal_uart_transfer+0x4c>
    f59e:	e794      	b.n	f4ca <am_hal_uart_transfer+0x176>
    f5a0:	4606      	mov	r6, r0
    f5a2:	2702      	movs	r7, #2
    f5a4:	e71a      	b.n	f3dc <am_hal_uart_transfer+0x88>
    f5a6:	9200      	str	r2, [sp, #0]
    f5a8:	f100 0248 	add.w	r2, r0, #72	; 0x48
    f5ac:	f04f 0a00 	mov.w	sl, #0
    f5b0:	9202      	str	r2, [sp, #8]
    f5b2:	465a      	mov	r2, fp
    f5b4:	4698      	mov	r8, r3
    f5b6:	469b      	mov	fp, r3
    f5b8:	4656      	mov	r6, sl
    f5ba:	4613      	mov	r3, r2
    f5bc:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    f5c0:	2a00      	cmp	r2, #0
    f5c2:	d152      	bne.n	f66a <am_hal_uart_transfer+0x316>
    f5c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f5c6:	b3a7      	cbz	r7, f632 <am_hal_uart_transfer+0x2de>
    f5c8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f5cc:	311c      	adds	r1, #28
    f5ce:	0309      	lsls	r1, r1, #12
    f5d0:	698a      	ldr	r2, [r1, #24]
    f5d2:	06d0      	lsls	r0, r2, #27
    f5d4:	d432      	bmi.n	f63c <am_hal_uart_transfer+0x2e8>
    f5d6:	680a      	ldr	r2, [r1, #0]
    f5d8:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    f5dc:	f040 80aa 	bne.w	f734 <am_hal_uart_transfer+0x3e0>
    f5e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    f5e4:	e006      	b.n	f5f4 <am_hal_uart_transfer+0x2a0>
    f5e6:	698a      	ldr	r2, [r1, #24]
    f5e8:	06d2      	lsls	r2, r2, #27
    f5ea:	d41f      	bmi.n	f62c <am_hal_uart_transfer+0x2d8>
    f5ec:	680a      	ldr	r2, [r1, #0]
    f5ee:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f5f2:	d161      	bne.n	f6b8 <am_hal_uart_transfer+0x364>
    f5f4:	3401      	adds	r4, #1
    f5f6:	42bc      	cmp	r4, r7
    f5f8:	f808 2f01 	strb.w	r2, [r8, #1]!
    f5fc:	d1f3      	bne.n	f5e6 <am_hal_uart_transfer+0x292>
    f5fe:	469b      	mov	fp, r3
    f600:	4426      	add	r6, r4
    f602:	f1bb 0f00 	cmp.w	fp, #0
    f606:	f43f af1c 	beq.w	f442 <am_hal_uart_transfer+0xee>
    f60a:	f8cb 6000 	str.w	r6, [fp]
    f60e:	2700      	movs	r7, #0
    f610:	e6aa      	b.n	f368 <am_hal_uart_transfer+0x14>
    f612:	9807      	ldr	r0, [sp, #28]
    f614:	f7ff fb52 	bl	ecbc <am_hal_interrupt_master_set>
    f618:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f61a:	9802      	ldr	r0, [sp, #8]
    f61c:	42bc      	cmp	r4, r7
    f61e:	bf28      	it	cs
    f620:	463c      	movcs	r4, r7
    f622:	4641      	mov	r1, r8
    f624:	4622      	mov	r2, r4
    f626:	f000 f913 	bl	f850 <am_hal_queue_item_get>
    f62a:	9b01      	ldr	r3, [sp, #4]
    f62c:	1b3f      	subs	r7, r7, r4
    f62e:	4426      	add	r6, r4
    f630:	d104      	bne.n	f63c <am_hal_uart_transfer+0x2e8>
    f632:	469b      	mov	fp, r3
    f634:	e7e5      	b.n	f602 <am_hal_uart_transfer+0x2ae>
    f636:	bf00      	nop
    f638:	01ea9e06 	.word	0x01ea9e06
    f63c:	2001      	movs	r0, #1
    f63e:	9301      	str	r3, [sp, #4]
    f640:	f7ff fb04 	bl	ec4c <am_hal_flash_delay>
    f644:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    f648:	9b01      	ldr	r3, [sp, #4]
    f64a:	d001      	beq.n	f650 <am_hal_uart_transfer+0x2fc>
    f64c:	f10a 0a01 	add.w	sl, sl, #1
    f650:	45d1      	cmp	r9, sl
    f652:	d9ee      	bls.n	f632 <am_hal_uart_transfer+0x2de>
    f654:	682a      	ldr	r2, [r5, #0]
    f656:	9900      	ldr	r1, [sp, #0]
    f658:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f65c:	428a      	cmp	r2, r1
    f65e:	eb0b 0806 	add.w	r8, fp, r6
    f662:	d0ab      	beq.n	f5bc <am_hal_uart_transfer+0x268>
    f664:	469b      	mov	fp, r3
    f666:	2702      	movs	r7, #2
    f668:	e6b8      	b.n	f3dc <am_hal_uart_transfer+0x88>
    f66a:	9301      	str	r3, [sp, #4]
    f66c:	f7ff fb22 	bl	ecb4 <am_hal_interrupt_master_disable>
    f670:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f672:	9007      	str	r0, [sp, #28]
    f674:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    f678:	301c      	adds	r0, #28
    f67a:	9b01      	ldr	r3, [sp, #4]
    f67c:	0300      	lsls	r0, r0, #12
    f67e:	ac08      	add	r4, sp, #32
    f680:	2200      	movs	r2, #0
    f682:	6981      	ldr	r1, [r0, #24]
    f684:	06c9      	lsls	r1, r1, #27
    f686:	d409      	bmi.n	f69c <am_hal_uart_transfer+0x348>
    f688:	6801      	ldr	r1, [r0, #0]
    f68a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    f68e:	f102 0201 	add.w	r2, r2, #1
    f692:	d118      	bne.n	f6c6 <am_hal_uart_transfer+0x372>
    f694:	2a20      	cmp	r2, #32
    f696:	f804 1b01 	strb.w	r1, [r4], #1
    f69a:	d1f2      	bne.n	f682 <am_hal_uart_transfer+0x32e>
    f69c:	a908      	add	r1, sp, #32
    f69e:	9802      	ldr	r0, [sp, #8]
    f6a0:	9301      	str	r3, [sp, #4]
    f6a2:	f000 f89d 	bl	f7e0 <am_hal_queue_item_add>
    f6a6:	9b01      	ldr	r3, [sp, #4]
    f6a8:	2800      	cmp	r0, #0
    f6aa:	d1b2      	bne.n	f612 <am_hal_uart_transfer+0x2be>
    f6ac:	4f45      	ldr	r7, [pc, #276]	; (f7c4 <am_hal_uart_transfer+0x470>)
    f6ae:	469b      	mov	fp, r3
    f6b0:	9807      	ldr	r0, [sp, #28]
    f6b2:	f7ff fb03 	bl	ecbc <am_hal_interrupt_master_set>
    f6b6:	e691      	b.n	f3dc <am_hal_uart_transfer+0x88>
    f6b8:	469b      	mov	fp, r3
    f6ba:	4426      	add	r6, r4
    f6bc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f6c0:	e68c      	b.n	f3dc <am_hal_uart_transfer+0x88>
    f6c2:	46b8      	mov	r8, r7
    f6c4:	e71a      	b.n	f4fc <am_hal_uart_transfer+0x1a8>
    f6c6:	469b      	mov	fp, r3
    f6c8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f6cc:	e7f0      	b.n	f6b0 <am_hal_uart_transfer+0x35c>
    f6ce:	463e      	mov	r6, r7
    f6d0:	e797      	b.n	f602 <am_hal_uart_transfer+0x2ae>
    f6d2:	4616      	mov	r6, r2
    f6d4:	e6b2      	b.n	f43c <am_hal_uart_transfer+0xe8>
    f6d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f6d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f6da:	1a9b      	subs	r3, r3, r2
    f6dc:	429e      	cmp	r6, r3
    f6de:	bf28      	it	cs
    f6e0:	461e      	movcs	r6, r3
    f6e2:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    f6e6:	4651      	mov	r1, sl
    f6e8:	4632      	mov	r2, r6
    f6ea:	4620      	mov	r0, r4
    f6ec:	f000 f878 	bl	f7e0 <am_hal_queue_item_add>
    f6f0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f6f2:	f7ff fadf 	bl	ecb4 <am_hal_interrupt_master_disable>
    f6f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f6fa:	371c      	adds	r7, #28
    f6fc:	033f      	lsls	r7, r7, #12
    f6fe:	9005      	str	r0, [sp, #20]
    f700:	e00d      	b.n	f71e <am_hal_uart_transfer+0x3ca>
    f702:	f000 f8a5 	bl	f850 <am_hal_queue_item_get>
    f706:	b188      	cbz	r0, f72c <am_hal_uart_transfer+0x3d8>
    f708:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f70a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f70e:	331c      	adds	r3, #28
    f710:	031b      	lsls	r3, r3, #12
    f712:	699a      	ldr	r2, [r3, #24]
    f714:	0692      	lsls	r2, r2, #26
    f716:	bf5c      	itt	pl
    f718:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    f71c:	601a      	strpl	r2, [r3, #0]
    f71e:	69bb      	ldr	r3, [r7, #24]
    f720:	069b      	lsls	r3, r3, #26
    f722:	f04f 0201 	mov.w	r2, #1
    f726:	a908      	add	r1, sp, #32
    f728:	4620      	mov	r0, r4
    f72a:	d5ea      	bpl.n	f702 <am_hal_uart_transfer+0x3ae>
    f72c:	9805      	ldr	r0, [sp, #20]
    f72e:	f7ff fac5 	bl	ecbc <am_hal_interrupt_master_set>
    f732:	e683      	b.n	f43c <am_hal_uart_transfer+0xe8>
    f734:	469b      	mov	fp, r3
    f736:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f73a:	e64f      	b.n	f3dc <am_hal_uart_transfer+0x88>
    f73c:	461e      	mov	r6, r3
    f73e:	e67d      	b.n	f43c <am_hal_uart_transfer+0xe8>
    f740:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f744:	e6b4      	b.n	f4b0 <am_hal_uart_transfer+0x15c>
    f746:	9300      	str	r3, [sp, #0]
    f748:	f7ff fab4 	bl	ecb4 <am_hal_interrupt_master_disable>
    f74c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f74e:	9006      	str	r0, [sp, #24]
    f750:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f754:	321c      	adds	r2, #28
    f756:	0311      	lsls	r1, r2, #12
    f758:	a808      	add	r0, sp, #32
    f75a:	2200      	movs	r2, #0
    f75c:	9b00      	ldr	r3, [sp, #0]
    f75e:	e009      	b.n	f774 <am_hal_uart_transfer+0x420>
    f760:	680c      	ldr	r4, [r1, #0]
    f762:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    f766:	f102 0201 	add.w	r2, r2, #1
    f76a:	d121      	bne.n	f7b0 <am_hal_uart_transfer+0x45c>
    f76c:	2a20      	cmp	r2, #32
    f76e:	f800 4b01 	strb.w	r4, [r0], #1
    f772:	d002      	beq.n	f77a <am_hal_uart_transfer+0x426>
    f774:	698c      	ldr	r4, [r1, #24]
    f776:	06e4      	lsls	r4, r4, #27
    f778:	d5f2      	bpl.n	f760 <am_hal_uart_transfer+0x40c>
    f77a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    f77e:	a908      	add	r1, sp, #32
    f780:	4630      	mov	r0, r6
    f782:	9300      	str	r3, [sp, #0]
    f784:	f000 f82c 	bl	f7e0 <am_hal_queue_item_add>
    f788:	b920      	cbnz	r0, f794 <am_hal_uart_transfer+0x440>
    f78a:	4f0e      	ldr	r7, [pc, #56]	; (f7c4 <am_hal_uart_transfer+0x470>)
    f78c:	9806      	ldr	r0, [sp, #24]
    f78e:	f7ff fa95 	bl	ecbc <am_hal_interrupt_master_set>
    f792:	e5e9      	b.n	f368 <am_hal_uart_transfer+0x14>
    f794:	9806      	ldr	r0, [sp, #24]
    f796:	f7ff fa91 	bl	ecbc <am_hal_interrupt_master_set>
    f79a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    f79c:	9b00      	ldr	r3, [sp, #0]
    f79e:	42bc      	cmp	r4, r7
    f7a0:	bf28      	it	cs
    f7a2:	463c      	movcs	r4, r7
    f7a4:	4619      	mov	r1, r3
    f7a6:	4630      	mov	r0, r6
    f7a8:	4622      	mov	r2, r4
    f7aa:	f000 f851 	bl	f850 <am_hal_queue_item_get>
    f7ae:	e67e      	b.n	f4ae <am_hal_uart_transfer+0x15a>
    f7b0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f7b4:	e7ea      	b.n	f78c <am_hal_uart_transfer+0x438>
    f7b6:	4604      	mov	r4, r0
    f7b8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    f7bc:	e678      	b.n	f4b0 <am_hal_uart_transfer+0x15c>
    f7be:	4627      	mov	r7, r4
    f7c0:	e676      	b.n	f4b0 <am_hal_uart_transfer+0x15c>
    f7c2:	bf00      	nop
    f7c4:	08000001 	.word	0x08000001

0000f7c8 <am_hal_queue_init>:
    f7c8:	b410      	push	{r4}
    f7ca:	2400      	movs	r4, #0
    f7cc:	6004      	str	r4, [r0, #0]
    f7ce:	6044      	str	r4, [r0, #4]
    f7d0:	6084      	str	r4, [r0, #8]
    f7d2:	60c3      	str	r3, [r0, #12]
    f7d4:	6102      	str	r2, [r0, #16]
    f7d6:	6141      	str	r1, [r0, #20]
    f7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7dc:	4770      	bx	lr
    f7de:	bf00      	nop

0000f7e0 <am_hal_queue_item_add>:
    f7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7e2:	4604      	mov	r4, r0
    f7e4:	6906      	ldr	r6, [r0, #16]
    f7e6:	b083      	sub	sp, #12
    f7e8:	fb06 f602 	mul.w	r6, r6, r2
    f7ec:	460d      	mov	r5, r1
    f7ee:	f7ff fa61 	bl	ecb4 <am_hal_interrupt_master_disable>
    f7f2:	68e7      	ldr	r7, [r4, #12]
    f7f4:	68a2      	ldr	r2, [r4, #8]
    f7f6:	9001      	str	r0, [sp, #4]
    f7f8:	1abb      	subs	r3, r7, r2
    f7fa:	429e      	cmp	r6, r3
    f7fc:	d826      	bhi.n	f84c <am_hal_queue_item_add+0x6c>
    f7fe:	b196      	cbz	r6, f826 <am_hal_queue_item_add+0x46>
    f800:	6823      	ldr	r3, [r4, #0]
    f802:	4629      	mov	r1, r5
    f804:	b1c5      	cbz	r5, f838 <am_hal_queue_item_add+0x58>
    f806:	19af      	adds	r7, r5, r6
    f808:	6962      	ldr	r2, [r4, #20]
    f80a:	f811 0b01 	ldrb.w	r0, [r1], #1
    f80e:	54d0      	strb	r0, [r2, r3]
    f810:	6823      	ldr	r3, [r4, #0]
    f812:	68e5      	ldr	r5, [r4, #12]
    f814:	3301      	adds	r3, #1
    f816:	42b9      	cmp	r1, r7
    f818:	fbb3 f0f5 	udiv	r0, r3, r5
    f81c:	fb05 3310 	mls	r3, r5, r0, r3
    f820:	6023      	str	r3, [r4, #0]
    f822:	d1f1      	bne.n	f808 <am_hal_queue_item_add+0x28>
    f824:	68a2      	ldr	r2, [r4, #8]
    f826:	4432      	add	r2, r6
    f828:	60a2      	str	r2, [r4, #8]
    f82a:	2401      	movs	r4, #1
    f82c:	9801      	ldr	r0, [sp, #4]
    f82e:	f7ff fa45 	bl	ecbc <am_hal_interrupt_master_set>
    f832:	4620      	mov	r0, r4
    f834:	b003      	add	sp, #12
    f836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f838:	3101      	adds	r1, #1
    f83a:	3301      	adds	r3, #1
    f83c:	428e      	cmp	r6, r1
    f83e:	fbb3 f0f7 	udiv	r0, r3, r7
    f842:	fb07 3310 	mls	r3, r7, r0, r3
    f846:	d1f7      	bne.n	f838 <am_hal_queue_item_add+0x58>
    f848:	6023      	str	r3, [r4, #0]
    f84a:	e7ec      	b.n	f826 <am_hal_queue_item_add+0x46>
    f84c:	2400      	movs	r4, #0
    f84e:	e7ed      	b.n	f82c <am_hal_queue_item_add+0x4c>

0000f850 <am_hal_queue_item_get>:
    f850:	b5f0      	push	{r4, r5, r6, r7, lr}
    f852:	4604      	mov	r4, r0
    f854:	6906      	ldr	r6, [r0, #16]
    f856:	b083      	sub	sp, #12
    f858:	fb06 f602 	mul.w	r6, r6, r2
    f85c:	460d      	mov	r5, r1
    f85e:	f7ff fa29 	bl	ecb4 <am_hal_interrupt_master_disable>
    f862:	68a2      	ldr	r2, [r4, #8]
    f864:	9001      	str	r0, [sp, #4]
    f866:	4296      	cmp	r6, r2
    f868:	d81c      	bhi.n	f8a4 <am_hal_queue_item_get+0x54>
    f86a:	b196      	cbz	r6, f892 <am_hal_queue_item_get+0x42>
    f86c:	6863      	ldr	r3, [r4, #4]
    f86e:	b1dd      	cbz	r5, f8a8 <am_hal_queue_item_get+0x58>
    f870:	4629      	mov	r1, r5
    f872:	19af      	adds	r7, r5, r6
    f874:	6962      	ldr	r2, [r4, #20]
    f876:	5cd3      	ldrb	r3, [r2, r3]
    f878:	f801 3b01 	strb.w	r3, [r1], #1
    f87c:	6863      	ldr	r3, [r4, #4]
    f87e:	68e5      	ldr	r5, [r4, #12]
    f880:	3301      	adds	r3, #1
    f882:	428f      	cmp	r7, r1
    f884:	fbb3 f0f5 	udiv	r0, r3, r5
    f888:	fb05 3310 	mls	r3, r5, r0, r3
    f88c:	6063      	str	r3, [r4, #4]
    f88e:	d1f1      	bne.n	f874 <am_hal_queue_item_get+0x24>
    f890:	68a2      	ldr	r2, [r4, #8]
    f892:	1b92      	subs	r2, r2, r6
    f894:	60a2      	str	r2, [r4, #8]
    f896:	2401      	movs	r4, #1
    f898:	9801      	ldr	r0, [sp, #4]
    f89a:	f7ff fa0f 	bl	ecbc <am_hal_interrupt_master_set>
    f89e:	4620      	mov	r0, r4
    f8a0:	b003      	add	sp, #12
    f8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8a4:	2400      	movs	r4, #0
    f8a6:	e7f7      	b.n	f898 <am_hal_queue_item_get+0x48>
    f8a8:	68e0      	ldr	r0, [r4, #12]
    f8aa:	4629      	mov	r1, r5
    f8ac:	3101      	adds	r1, #1
    f8ae:	3301      	adds	r3, #1
    f8b0:	428e      	cmp	r6, r1
    f8b2:	fbb3 f5f0 	udiv	r5, r3, r0
    f8b6:	fb00 3315 	mls	r3, r0, r5, r3
    f8ba:	d1f7      	bne.n	f8ac <am_hal_queue_item_get+0x5c>
    f8bc:	6063      	str	r3, [r4, #4]
    f8be:	e7e8      	b.n	f892 <am_hal_queue_item_get+0x42>

0000f8c0 <memset>:
    f8c0:	b4f0      	push	{r4, r5, r6, r7}
    f8c2:	0786      	lsls	r6, r0, #30
    f8c4:	d043      	beq.n	f94e <memset+0x8e>
    f8c6:	1e54      	subs	r4, r2, #1
    f8c8:	2a00      	cmp	r2, #0
    f8ca:	d03e      	beq.n	f94a <memset+0x8a>
    f8cc:	b2ca      	uxtb	r2, r1
    f8ce:	4603      	mov	r3, r0
    f8d0:	e002      	b.n	f8d8 <memset+0x18>
    f8d2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    f8d6:	d338      	bcc.n	f94a <memset+0x8a>
    f8d8:	f803 2b01 	strb.w	r2, [r3], #1
    f8dc:	079d      	lsls	r5, r3, #30
    f8de:	d1f8      	bne.n	f8d2 <memset+0x12>
    f8e0:	2c03      	cmp	r4, #3
    f8e2:	d92b      	bls.n	f93c <memset+0x7c>
    f8e4:	b2cd      	uxtb	r5, r1
    f8e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    f8ea:	2c0f      	cmp	r4, #15
    f8ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    f8f0:	d916      	bls.n	f920 <memset+0x60>
    f8f2:	f1a4 0710 	sub.w	r7, r4, #16
    f8f6:	093f      	lsrs	r7, r7, #4
    f8f8:	f103 0620 	add.w	r6, r3, #32
    f8fc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    f900:	f103 0210 	add.w	r2, r3, #16
    f904:	e942 5504 	strd	r5, r5, [r2, #-16]
    f908:	e942 5502 	strd	r5, r5, [r2, #-8]
    f90c:	3210      	adds	r2, #16
    f90e:	42b2      	cmp	r2, r6
    f910:	d1f8      	bne.n	f904 <memset+0x44>
    f912:	f004 040f 	and.w	r4, r4, #15
    f916:	3701      	adds	r7, #1
    f918:	2c03      	cmp	r4, #3
    f91a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    f91e:	d90d      	bls.n	f93c <memset+0x7c>
    f920:	461e      	mov	r6, r3
    f922:	4622      	mov	r2, r4
    f924:	3a04      	subs	r2, #4
    f926:	2a03      	cmp	r2, #3
    f928:	f846 5b04 	str.w	r5, [r6], #4
    f92c:	d8fa      	bhi.n	f924 <memset+0x64>
    f92e:	1f22      	subs	r2, r4, #4
    f930:	f022 0203 	bic.w	r2, r2, #3
    f934:	3204      	adds	r2, #4
    f936:	4413      	add	r3, r2
    f938:	f004 0403 	and.w	r4, r4, #3
    f93c:	b12c      	cbz	r4, f94a <memset+0x8a>
    f93e:	b2c9      	uxtb	r1, r1
    f940:	441c      	add	r4, r3
    f942:	f803 1b01 	strb.w	r1, [r3], #1
    f946:	429c      	cmp	r4, r3
    f948:	d1fb      	bne.n	f942 <memset+0x82>
    f94a:	bcf0      	pop	{r4, r5, r6, r7}
    f94c:	4770      	bx	lr
    f94e:	4614      	mov	r4, r2
    f950:	4603      	mov	r3, r0
    f952:	e7c5      	b.n	f8e0 <memset+0x20>
    f954:	7263694d 	.word	0x7263694d
    f958:	6f68706f 	.word	0x6f68706f
    f95c:	7620656e 	.word	0x7620656e
    f960:	66697265 	.word	0x66697265
    f964:	74616369 	.word	0x74616369
    f968:	206e6f69 	.word	0x206e6f69
    f96c:	636f7270 	.word	0x636f7270
    f970:	72756465 	.word	0x72756465
    f974:	73692065 	.word	0x73692065
    f978:	61657220 	.word	0x61657220
    f97c:	0d217964 	.word	0x0d217964
    f980:	00000a0a 	.word	0x00000a0a
    f984:	00007325 	.word	0x00007325
    f988:	00006425 	.word	0x00006425
    f98c:	38257830 	.word	0x38257830
    f990:	00000078 	.word	0x00000078
    f994:	00006625 	.word	0x00006625
    f998:	6c6f7041 	.word	0x6c6f7041
    f99c:	20336f6c 	.word	0x20336f6c
    f9a0:	73727542 	.word	0x73727542
    f9a4:	6f4d2074 	.word	0x6f4d2074
    f9a8:	69206564 	.word	0x69206564
    f9ac:	76412073 	.word	0x76412073
    f9b0:	616c6961 	.word	0x616c6961
    f9b4:	0d656c62 	.word	0x0d656c62
    f9b8:	0000000a 	.word	0x0000000a
    f9bc:	6c6f7041 	.word	0x6c6f7041
    f9c0:	20336f6c 	.word	0x20336f6c
    f9c4:	73727542 	.word	0x73727542
    f9c8:	6f4d2074 	.word	0x6f4d2074
    f9cc:	69206564 	.word	0x69206564
    f9d0:	6f4e2073 	.word	0x6f4e2073
    f9d4:	76412074 	.word	0x76412074
    f9d8:	616c6961 	.word	0x616c6961
    f9dc:	0d656c62 	.word	0x0d656c62
    f9e0:	0000000a 	.word	0x0000000a
    f9e4:	6c696146 	.word	0x6c696146
    f9e8:	74206465 	.word	0x74206465
    f9ec:	6e49206f 	.word	0x6e49206f
    f9f0:	61697469 	.word	0x61697469
    f9f4:	657a696c 	.word	0x657a696c
    f9f8:	726f6620 	.word	0x726f6620
    f9fc:	72754220 	.word	0x72754220
    fa00:	4d207473 	.word	0x4d207473
    fa04:	2065646f 	.word	0x2065646f
    fa08:	7265706f 	.word	0x7265706f
    fa0c:	6f697461 	.word	0x6f697461
    fa10:	000a0d6e 	.word	0x000a0d6e
    fa14:	6c6f7041 	.word	0x6c6f7041
    fa18:	20336f6c 	.word	0x20336f6c
    fa1c:	7265706f 	.word	0x7265706f
    fa20:	6e697461 	.word	0x6e697461
    fa24:	6e692067 	.word	0x6e692067
    fa28:	72754220 	.word	0x72754220
    fa2c:	4d207473 	.word	0x4d207473
    fa30:	2065646f 	.word	0x2065646f
    fa34:	4d363928 	.word	0x4d363928
    fa38:	0d297a48 	.word	0x0d297a48
    fa3c:	0000000a 	.word	0x0000000a
    fa40:	6c696146 	.word	0x6c696146
    fa44:	74206465 	.word	0x74206465
    fa48:	6e45206f 	.word	0x6e45206f
    fa4c:	656c6261 	.word	0x656c6261
    fa50:	72754220 	.word	0x72754220
    fa54:	4d207473 	.word	0x4d207473
    fa58:	2065646f 	.word	0x2065646f
    fa5c:	7265706f 	.word	0x7265706f
    fa60:	6f697461 	.word	0x6f697461
    fa64:	000a0d6e 	.word	0x000a0d6e

0000fa68 <g_AM_HAL_GPIO_DISABLE>:
    fa68:	00000003                                ....

0000fa6c <g_AM_HAL_GPIO_OUTPUT>:
    fa6c:	00000403                                ....

0000fa70 <g_AM_HAL_GPIO_TRISTATE>:
    fa70:	00000c03                                ....

0000fa74 <g_ui8Inpen>:
    fa74:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    fa84:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    fa94:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    faa4:	00003130                                01..

0000faa8 <g_ui8Bit76Capabilities>:
    faa8:	02800101 80010180 80800101 80808080     ................
    fab8:	80808080 80808008 01800180 80808080     ................
    fac8:	80808080 01800402 01010401 80808080     ................
    fad8:	00000101                                ....

0000fadc <g_ui8nCEpins>:
    fadc:	02070707 00080802 01020202 01010101     ................
    faec:	01010101 01010101 01010101 01010101     ................
    fafc:	01010101 08010101 01010008 01010101     ................
    fb0c:	00000101                                ....

0000fb10 <g_ui8NCEtable>:
    fb10:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    fb20:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    fb30:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    fb40:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    fb50:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    fb60:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    fb70:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    fb80:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    fb90:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    fba0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    fbb0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    fbc0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    fbd0:	32221202 43231303                       .."2..#C

0000fbd8 <g_SysRingBuffSetup>:
    fbd8:	00000001 1000c684 0000fa00              ............

0000fbe4 <g_switch_button0>:
    fbe4:	00001003                                ....

0000fbe8 <g_switch_button1>:
    fbe8:	00001003                                ....

0000fbec <g_switch_button2>:
    fbec:	00001003                                ....

0000fbf0 <g_sBspUartConfig>:
    fbf0:	0001c200 00000060 00000000 00000000     ....`...........
    fc00:	00000000 00000012 00000000 00000000     ................
	...

0000fc18 <g_AM_BSP_GPIO_COM_UART_TX>:
    fc18:	00000000                                ....

0000fc1c <g_AM_BSP_GPIO_COM_UART_RX>:
    fc1c:	00000000                                ....

0000fc20 <am_hal_cachectrl_defaults>:
    fc20:	00000308                                ....

0000fc24 <g_am_hal_mcuctrl_flash_size>:
    fc24:	00004000 00008000 00010000 00020000     .@..............
    fc34:	00040000 00080000 00100000 00200000     .............. .
	...

0000fc64 <g_am_hal_mcuctrl_sram_size>:
    fc64:	00004000 00008000 00010000 00020000     .@..............
    fc74:	00040000 00080000 00100000 00060000     ................
	...

0000fca4 <am_hal_pwrctrl_peripheral_control>:
	...
    fcb0:	00000001 00000004 00000004 00000002     ................
    fcc0:	00000008 00000008 00000004 00000008     ................
    fcd0:	00000008 00000008 00000008 00000008     ................
    fce0:	00000010 00000010 00000010 00000020     ............ ...
    fcf0:	00000010 00000010 00000040 00000010     ........@.......
    fd00:	00000010 00000080 00000004 00000004     ................
    fd10:	00000100 00000004 00000004 00000200     ................
    fd20:	00000020 00000020 00000400 00000004      ... ...........
    fd30:	00000004 00000800 00000040 00000040     ........@...@...
    fd40:	00001000 00000080 00000080 00002000     ............. ..
    fd50:	00000100 00000100                       ........
