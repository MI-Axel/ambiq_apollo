
bin/mikro_verification.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 91 e8 00 00 f9 e8 00 00 45 d3 00 00     ............E...
    c010:	45 d3 00 00 45 d3 00 00 45 d3 00 00 00 00 00 00     E...E...E.......
	...
    c02c:	ff e8 00 00 ff e8 00 00 00 00 00 00 ff e8 00 00     ................
    c03c:	ff e8 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     ................
    c04c:	ff e8 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     ................
    c05c:	ff e8 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     ................
    c06c:	ff e8 00 00 ff e8 00 00 5d ef 00 00 09 ef 00 00     ........].......
    c07c:	ff e8 00 00 ff e8 00 00 ff e8 00 00 11 f0 00 00     ................
    c08c:	45 ee 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     E...............
    c09c:	ff e8 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     ................
    c0ac:	ff e8 00 00 ff e8 00 00 ff e8 00 00 ff e8 00 00     ................
    c0bc:	ff e8 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:

// sharing variables in whole procedures
volatile uint8_t g_ui8PcmDataReadyFlag = 0;

int main(void)
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b082      	sub	sp, #8
    c2d8:	af00      	add	r7, sp, #0
    am_app_mic_verif_sys_init();
    c2da:	f002 fcd9 	bl	ec90 <am_app_mic_verif_sys_init>
#endif // configUSE_SYSVIEW

    //
    // Print the banner.
    //
    DebugLog("Microphone verification procedure is ready!\r\n\n");
    c2de:	487d      	ldr	r0, [pc, #500]	; (c4d4 <main+0x200>)
    c2e0:	f002 fb58 	bl	e994 <DebugLog>

#if AM_APP_ANALOG_MIC
        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c2e4:	4b7c      	ldr	r3, [pc, #496]	; (c4d8 <main+0x204>)
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <main+0x22>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c2ee:	487b      	ldr	r0, [pc, #492]	; (c4dc <main+0x208>)
    c2f0:	f001 ff40 	bl	e174 <am_util_stdio_printf>
            while(1);
    c2f4:	e7fe      	b.n	c2f4 <main+0x20>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c2f6:	4b7a      	ldr	r3, [pc, #488]	; (c4e0 <main+0x20c>)
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	b2db      	uxtb	r3, r3
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d01c      	beq.n	c33a <main+0x66>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c300:	4b77      	ldr	r3, [pc, #476]	; (c4e0 <main+0x20c>)
    c302:	2200      	movs	r2, #0
    c304:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c306:	f002 fc0b 	bl	eb20 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c30a:	4b76      	ldr	r3, [pc, #472]	; (c4e4 <main+0x210>)
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c312:	4618      	mov	r0, r3
    c314:	f003 f88a 	bl	f42c <am_hal_adc_interrupt_clear>
    c318:	4603      	mov	r3, r0
    c31a:	2b00      	cmp	r3, #0
    c31c:	d002      	beq.n	c324 <main+0x50>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c31e:	4872      	ldr	r0, [pc, #456]	; (c4e8 <main+0x214>)
    c320:	f001 ff28 	bl	e174 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c324:	4b6f      	ldr	r3, [pc, #444]	; (c4e4 <main+0x210>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	4618      	mov	r0, r3
    c32a:	f003 f891 	bl	f450 <am_hal_adc_sw_trigger>
    c32e:	4603      	mov	r3, r0
    c330:	2b00      	cmp	r3, #0
    c332:	d002      	beq.n	c33a <main+0x66>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c334:	486d      	ldr	r0, [pc, #436]	; (c4ec <main+0x218>)
    c336:	f001 ff1d 	bl	e174 <am_util_stdio_printf>
            }
        }
        
        if((g_bAMicDataReady == true) && (g_bAMicEvalFlag == true) && (g_bPDMDataReady == true))
    c33a:	4b6d      	ldr	r3, [pc, #436]	; (c4f0 <main+0x21c>)
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	b2db      	uxtb	r3, r3
    c340:	2b00      	cmp	r3, #0
    c342:	d01e      	beq.n	c382 <main+0xae>
    c344:	4b6b      	ldr	r3, [pc, #428]	; (c4f4 <main+0x220>)
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	2b00      	cmp	r3, #0
    c34c:	d019      	beq.n	c382 <main+0xae>
    c34e:	4b6a      	ldr	r3, [pc, #424]	; (c4f8 <main+0x224>)
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b2db      	uxtb	r3, r3
    c354:	2b00      	cmp	r3, #0
    c356:	d014      	beq.n	c382 <main+0xae>
        {
            am_util_stdio_printf("Get Analog Mic data %d bytes!\n\r", g_ui32AMicDataSumBytes);
    c358:	4b68      	ldr	r3, [pc, #416]	; (c4fc <main+0x228>)
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	4619      	mov	r1, r3
    c35e:	4868      	ldr	r0, [pc, #416]	; (c500 <main+0x22c>)
    c360:	f001 ff08 	bl	e174 <am_util_stdio_printf>

            am_util_stdio_printf("Get PDM audio data %d bytes!\n\r", g_ui32PCMDataSumBytes);
    c364:	4b67      	ldr	r3, [pc, #412]	; (c504 <main+0x230>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4619      	mov	r1, r3
    c36a:	4867      	ldr	r0, [pc, #412]	; (c508 <main+0x234>)
    c36c:	f001 ff02 	bl	e174 <am_util_stdio_printf>

            am_util_stdio_printf("Audio data collection ended....");
    c370:	4866      	ldr	r0, [pc, #408]	; (c50c <main+0x238>)
    c372:	f001 feff 	bl	e174 <am_util_stdio_printf>
            
            //
            // zero clear the counter 
            //
            g_ui32AMicDataSumBytes = 0;
    c376:	4b61      	ldr	r3, [pc, #388]	; (c4fc <main+0x228>)
    c378:	2200      	movs	r2, #0
    c37a:	601a      	str	r2, [r3, #0]
            g_ui32PCMDataSumBytes = 0;
    c37c:	4b61      	ldr	r3, [pc, #388]	; (c504 <main+0x230>)
    c37e:	2200      	movs	r2, #0
    c380:	601a      	str	r2, [r3, #0]
        }

        if((g_bPDMDataReady == true) && (g_bAMicDataReady == true))
    c382:	4b5d      	ldr	r3, [pc, #372]	; (c4f8 <main+0x224>)
    c384:	781b      	ldrb	r3, [r3, #0]
    c386:	b2db      	uxtb	r3, r3
    c388:	2b00      	cmp	r3, #0
    c38a:	d05b      	beq.n	c444 <main+0x170>
    c38c:	4b58      	ldr	r3, [pc, #352]	; (c4f0 <main+0x21c>)
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	b2db      	uxtb	r3, r3
    c392:	2b00      	cmp	r3, #0
    c394:	d056      	beq.n	c444 <main+0x170>
        {
            am_devices_led_off(am_bsp_psLEDs, 1);
    c396:	2101      	movs	r1, #1
    c398:	485d      	ldr	r0, [pc, #372]	; (c510 <main+0x23c>)
    c39a:	f002 f9eb 	bl	e774 <am_devices_led_off>
            g_bAMicEvalFlag = false;
    c39e:	4b55      	ldr	r3, [pc, #340]	; (c4f4 <main+0x220>)
    c3a0:	2200      	movs	r2, #0
    c3a2:	701a      	strb	r2, [r3, #0]
            g_bPDMDataReady = false;
    c3a4:	4b54      	ldr	r3, [pc, #336]	; (c4f8 <main+0x224>)
    c3a6:	2200      	movs	r2, #0
    c3a8:	701a      	strb	r2, [r3, #0]
            g_bAMicDataReady = false;
    c3aa:	4b51      	ldr	r3, [pc, #324]	; (c4f0 <main+0x21c>)
    c3ac:	2200      	movs	r2, #0
    c3ae:	701a      	strb	r2, [r3, #0]
            am_util_stdio_printf("Analog Mic data as following: \n\r");
    c3b0:	4858      	ldr	r0, [pc, #352]	; (c514 <main+0x240>)
    c3b2:	f001 fedf 	bl	e174 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c3b6:	e02f      	b.n	c418 <main+0x144>
            {
                uint8_t indx = 0;
    c3b8:	2300      	movs	r3, #0
    c3ba:	71fb      	strb	r3, [r7, #7]
                uint32_t ringbuff_ret = 0;
    c3bc:	2300      	movs	r3, #0
    c3be:	603b      	str	r3, [r7, #0]
                for(indx==0; indx<16; indx++)
    c3c0:	e024      	b.n	c40c <main+0x138>
                {
                    ringbuff_ret = am_app_utils_ring_buffer_pop(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], &g_ui32AD_Val, 4);
    c3c2:	2204      	movs	r2, #4
    c3c4:	4954      	ldr	r1, [pc, #336]	; (c518 <main+0x244>)
    c3c6:	4855      	ldr	r0, [pc, #340]	; (c51c <main+0x248>)
    c3c8:	f002 f87f 	bl	e4ca <am_app_utils_ring_buffer_pop>
    c3cc:	6038      	str	r0, [r7, #0]
                    if(ringbuff_ret == 4)
    c3ce:	683b      	ldr	r3, [r7, #0]
    c3d0:	2b04      	cmp	r3, #4
    c3d2:	d105      	bne.n	c3e0 <main+0x10c>
                    {    
                        g_ui32OutSamples += 1;
    c3d4:	4b52      	ldr	r3, [pc, #328]	; (c520 <main+0x24c>)
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	3301      	adds	r3, #1
    c3da:	4a51      	ldr	r2, [pc, #324]	; (c520 <main+0x24c>)
    c3dc:	6013      	str	r3, [r2, #0]
    c3de:	e009      	b.n	c3f4 <main+0x120>
                    }
                    else if(ringbuff_ret ==0)
    c3e0:	683b      	ldr	r3, [r7, #0]
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d103      	bne.n	c3ee <main+0x11a>
                    {
                        am_util_stdio_printf("AMic ring buffer is already empty...\n\r");
    c3e6:	484f      	ldr	r0, [pc, #316]	; (c524 <main+0x250>)
    c3e8:	f001 fec4 	bl	e174 <am_util_stdio_printf>
                        break;
    c3ec:	e011      	b.n	c412 <main+0x13e>
                    }
                    else
                    {
                        am_util_stdio_printf("There're something weired...AMic ring buffer not 4 bytes aligned...\n\r");
    c3ee:	484e      	ldr	r0, [pc, #312]	; (c528 <main+0x254>)
    c3f0:	f001 fec0 	bl	e174 <am_util_stdio_printf>
                    }
                    //
                    // follow the ADC data format
                    //
                    DebugLogUInt32(g_ui32AD_Val>>6);
    c3f4:	4b48      	ldr	r3, [pc, #288]	; (c518 <main+0x244>)
    c3f6:	681b      	ldr	r3, [r3, #0]
    c3f8:	099b      	lsrs	r3, r3, #6
    c3fa:	4618      	mov	r0, r3
    c3fc:	f002 fad8 	bl	e9b0 <DebugLogUInt32>
                    DebugLog(" ");
    c400:	484a      	ldr	r0, [pc, #296]	; (c52c <main+0x258>)
    c402:	f002 fac7 	bl	e994 <DebugLog>
                for(indx==0; indx<16; indx++)
    c406:	79fb      	ldrb	r3, [r7, #7]
    c408:	3301      	adds	r3, #1
    c40a:	71fb      	strb	r3, [r7, #7]
    c40c:	79fb      	ldrb	r3, [r7, #7]
    c40e:	2b0f      	cmp	r3, #15
    c410:	d9d7      	bls.n	c3c2 <main+0xee>
                }
                am_util_stdio_printf("\n\r");
    c412:	4847      	ldr	r0, [pc, #284]	; (c530 <main+0x25c>)
    c414:	f001 feae 	bl	e174 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c418:	4b46      	ldr	r3, [pc, #280]	; (c534 <main+0x260>)
    c41a:	699a      	ldr	r2, [r3, #24]
    c41c:	4b45      	ldr	r3, [pc, #276]	; (c534 <main+0x260>)
    c41e:	69db      	ldr	r3, [r3, #28]
    c420:	429a      	cmp	r2, r3
    c422:	d1c9      	bne.n	c3b8 <main+0xe4>
    c424:	4b43      	ldr	r3, [pc, #268]	; (c534 <main+0x260>)
    c426:	6a1b      	ldr	r3, [r3, #32]
    c428:	2b00      	cmp	r3, #0
    c42a:	d1c5      	bne.n	c3b8 <main+0xe4>
            }
            am_util_stdio_printf("Send out ALL AMic data! There're totally %d samples\n\n\r", g_ui32OutSamples); 
    c42c:	4b3c      	ldr	r3, [pc, #240]	; (c520 <main+0x24c>)
    c42e:	681b      	ldr	r3, [r3, #0]
    c430:	4619      	mov	r1, r3
    c432:	4841      	ldr	r0, [pc, #260]	; (c538 <main+0x264>)
    c434:	f001 fe9e 	bl	e174 <am_util_stdio_printf>
            g_ui32OutSamples = 0;
    c438:	4b39      	ldr	r3, [pc, #228]	; (c520 <main+0x24c>)
    c43a:	2200      	movs	r2, #0
    c43c:	601a      	str	r2, [r3, #0]

            }
            am_util_stdio_printf("Send out ALL DMic data! There're totally %d samples\n\r", g_ui32OutSamples); 
            g_ui32OutSamples = 0;
#endif // 0
            am_util_stdio_printf("All data were sended out...\n\n\n\r");
    c43e:	483f      	ldr	r0, [pc, #252]	; (c53c <main+0x268>)
    c440:	f001 fe98 	bl	e174 <am_util_stdio_printf>
        }
#endif // AM_APP_ANALOG_MIC

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c444:	4b3e      	ldr	r3, [pc, #248]	; (c540 <main+0x26c>)
    c446:	681b      	ldr	r3, [r3, #0]
    c448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c44c:	d306      	bcc.n	c45c <main+0x188>
        {
            g_ui32TimerCount = 0;
    c44e:	4b3c      	ldr	r3, [pc, #240]	; (c540 <main+0x26c>)
    c450:	2200      	movs	r2, #0
    c452:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c454:	2100      	movs	r1, #0
    c456:	482e      	ldr	r0, [pc, #184]	; (c510 <main+0x23c>)
    c458:	f002 f9ca 	bl	e7f0 <am_devices_led_toggle>

//
// Board key interface for different procedure switch
//

        if((g_sysKeyValue == AM_APP_KEY_0) && (g_ui8ButtonPushedFlag == 1))
    c45c:	4b39      	ldr	r3, [pc, #228]	; (c544 <main+0x270>)
    c45e:	781b      	ldrb	r3, [r3, #0]
    c460:	b2db      	uxtb	r3, r3
    c462:	2b01      	cmp	r3, #1
    c464:	d123      	bne.n	c4ae <main+0x1da>
    c466:	4b38      	ldr	r3, [pc, #224]	; (c548 <main+0x274>)
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	b2db      	uxtb	r3, r3
    c46c:	2b01      	cmp	r3, #1
    c46e:	d11e      	bne.n	c4ae <main+0x1da>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c470:	4b34      	ldr	r3, [pc, #208]	; (c544 <main+0x270>)
    c472:	2200      	movs	r2, #0
    c474:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c476:	4b34      	ldr	r3, [pc, #208]	; (c548 <main+0x274>)
    c478:	2200      	movs	r2, #0
    c47a:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
            }
#endif // AM_APP_MIC_CALIBRATION

#if AM_APP_ANALOG_MIC
            if(g_bAMicEvalFlag == false)
    c47c:	4b1d      	ldr	r3, [pc, #116]	; (c4f4 <main+0x220>)
    c47e:	781b      	ldrb	r3, [r3, #0]
    c480:	b2db      	uxtb	r3, r3
    c482:	f083 0301 	eor.w	r3, r3, #1
    c486:	b2db      	uxtb	r3, r3
    c488:	2b00      	cmp	r3, #0
    c48a:	d010      	beq.n	c4ae <main+0x1da>
            {
                am_util_stdio_printf("Waiting 2 seconds to evaluate AMic and DMic...\r\n");
    c48c:	482f      	ldr	r0, [pc, #188]	; (c54c <main+0x278>)
    c48e:	f001 fe71 	bl	e174 <am_util_stdio_printf>
                am_util_delay_ms(2000);
    c492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c496:	f000 ff37 	bl	d308 <am_util_delay_ms>
                am_util_stdio_printf("Start to get audio data...\r\n");
    c49a:	482d      	ldr	r0, [pc, #180]	; (c550 <main+0x27c>)
    c49c:	f001 fe6a 	bl	e174 <am_util_stdio_printf>
                am_devices_led_on(am_bsp_psLEDs, 1);
    c4a0:	2101      	movs	r1, #1
    c4a2:	481b      	ldr	r0, [pc, #108]	; (c510 <main+0x23c>)
    c4a4:	f002 f92b 	bl	e6fe <am_devices_led_on>
                g_bAMicEvalFlag = true;
    c4a8:	4b12      	ldr	r3, [pc, #72]	; (c4f4 <main+0x220>)
    c4aa:	2201      	movs	r2, #1
    c4ac:	701a      	strb	r2, [r3, #0]
            }
#endif // AM_APP_ANALOG_MIC

        }

        if((g_sysKeyValue == AM_APP_KEY_1) && (g_ui8ButtonPushedFlag == 1))
    c4ae:	4b25      	ldr	r3, [pc, #148]	; (c544 <main+0x270>)
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	b2db      	uxtb	r3, r3
    c4b4:	2b02      	cmp	r3, #2
    c4b6:	f47f af15 	bne.w	c2e4 <main+0x10>
    c4ba:	4b23      	ldr	r3, [pc, #140]	; (c548 <main+0x274>)
    c4bc:	781b      	ldrb	r3, [r3, #0]
    c4be:	b2db      	uxtb	r3, r3
    c4c0:	2b01      	cmp	r3, #1
    c4c2:	f47f af0f 	bne.w	c2e4 <main+0x10>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c4c6:	4b1f      	ldr	r3, [pc, #124]	; (c544 <main+0x270>)
    c4c8:	2200      	movs	r2, #0
    c4ca:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c4cc:	4b1e      	ldr	r3, [pc, #120]	; (c548 <main+0x274>)
    c4ce:	2200      	movs	r2, #0
    c4d0:	701a      	strb	r2, [r3, #0]
        if (g_bADCDMAError)
    c4d2:	e707      	b.n	c2e4 <main+0x10>
    c4d4:	00010720 	.word	0x00010720
    c4d8:	1002c258 	.word	0x1002c258
    c4dc:	00010750 	.word	0x00010750
    c4e0:	1000ce15 	.word	0x1000ce15
    c4e4:	1000ce10 	.word	0x1000ce10
    c4e8:	00010764 	.word	0x00010764
    c4ec:	00010794 	.word	0x00010794
    c4f0:	1000c168 	.word	0x1000c168
    c4f4:	1000c169 	.word	0x1000c169
    c4f8:	1000c15e 	.word	0x1000c15e
    c4fc:	1000c164 	.word	0x1000c164
    c500:	000107b8 	.word	0x000107b8
    c504:	1000c160 	.word	0x1000c160
    c508:	000107d8 	.word	0x000107d8
    c50c:	000107f8 	.word	0x000107f8
    c510:	1000c00c 	.word	0x1000c00c
    c514:	00010818 	.word	0x00010818
    c518:	1000c044 	.word	0x1000c044
    c51c:	1002c230 	.word	0x1002c230
    c520:	1000c048 	.word	0x1000c048
    c524:	0001083c 	.word	0x0001083c
    c528:	00010864 	.word	0x00010864
    c52c:	000108ac 	.word	0x000108ac
    c530:	000108b0 	.word	0x000108b0
    c534:	1002c21c 	.word	0x1002c21c
    c538:	000108b4 	.word	0x000108b4
    c53c:	000108ec 	.word	0x000108ec
    c540:	1000c150 	.word	0x1000c150
    c544:	1000c15c 	.word	0x1000c15c
    c548:	1000c15d 	.word	0x1000c15d
    c54c:	0001090c 	.word	0x0001090c
    c550:	00010940 	.word	0x00010940

0000c554 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c554:	b480      	push	{r7}
    c556:	b083      	sub	sp, #12
    c558:	af00      	add	r7, sp, #0
    c55a:	6078      	str	r0, [r7, #4]
    c55c:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	2b00      	cmp	r3, #0
    c562:	d001      	beq.n	c568 <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c564:	2305      	movs	r3, #5
    c566:	e048      	b.n	c5fa <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c568:	683b      	ldr	r3, [r7, #0]
    c56a:	2b00      	cmp	r3, #0
    c56c:	d101      	bne.n	c572 <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c56e:	2306      	movs	r3, #6
    c570:	e043      	b.n	c5fa <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c572:	4925      	ldr	r1, [pc, #148]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c574:	687a      	ldr	r2, [r7, #4]
    c576:	4613      	mov	r3, r2
    c578:	005b      	lsls	r3, r3, #1
    c57a:	4413      	add	r3, r2
    c57c:	009b      	lsls	r3, r3, #2
    c57e:	440b      	add	r3, r1
    c580:	78db      	ldrb	r3, [r3, #3]
    c582:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c586:	b2db      	uxtb	r3, r3
    c588:	2b00      	cmp	r3, #0
    c58a:	d001      	beq.n	c590 <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c58c:	2307      	movs	r3, #7
    c58e:	e034      	b.n	c5fa <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c590:	491d      	ldr	r1, [pc, #116]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c592:	687a      	ldr	r2, [r7, #4]
    c594:	4613      	mov	r3, r2
    c596:	005b      	lsls	r3, r3, #1
    c598:	4413      	add	r3, r2
    c59a:	009b      	lsls	r3, r3, #2
    c59c:	18ca      	adds	r2, r1, r3
    c59e:	78d3      	ldrb	r3, [r2, #3]
    c5a0:	f043 0301 	orr.w	r3, r3, #1
    c5a4:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c5a6:	4918      	ldr	r1, [pc, #96]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c5a8:	687a      	ldr	r2, [r7, #4]
    c5aa:	4613      	mov	r3, r2
    c5ac:	005b      	lsls	r3, r3, #1
    c5ae:	4413      	add	r3, r2
    c5b0:	009b      	lsls	r3, r3, #2
    c5b2:	18ca      	adds	r2, r1, r3
    c5b4:	6813      	ldr	r3, [r2, #0]
    c5b6:	4915      	ldr	r1, [pc, #84]	; (c60c <am_hal_pdm_initialize+0xb8>)
    c5b8:	f361 0317 	bfi	r3, r1, #0, #24
    c5bc:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    c5be:	4912      	ldr	r1, [pc, #72]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c5c0:	687a      	ldr	r2, [r7, #4]
    c5c2:	4613      	mov	r3, r2
    c5c4:	005b      	lsls	r3, r3, #1
    c5c6:	4413      	add	r3, r2
    c5c8:	009b      	lsls	r3, r3, #2
    c5ca:	440b      	add	r3, r1
    c5cc:	3308      	adds	r3, #8
    c5ce:	687a      	ldr	r2, [r7, #4]
    c5d0:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    c5d2:	490d      	ldr	r1, [pc, #52]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c5d4:	687a      	ldr	r2, [r7, #4]
    c5d6:	4613      	mov	r3, r2
    c5d8:	005b      	lsls	r3, r3, #1
    c5da:	4413      	add	r3, r2
    c5dc:	009b      	lsls	r3, r3, #2
    c5de:	440b      	add	r3, r1
    c5e0:	3304      	adds	r3, #4
    c5e2:	2200      	movs	r2, #0
    c5e4:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    c5e6:	687a      	ldr	r2, [r7, #4]
    c5e8:	4613      	mov	r3, r2
    c5ea:	005b      	lsls	r3, r3, #1
    c5ec:	4413      	add	r3, r2
    c5ee:	009b      	lsls	r3, r3, #2
    c5f0:	4a05      	ldr	r2, [pc, #20]	; (c608 <am_hal_pdm_initialize+0xb4>)
    c5f2:	441a      	add	r2, r3
    c5f4:	683b      	ldr	r3, [r7, #0]
    c5f6:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c5f8:	2300      	movs	r3, #0
}
    c5fa:	4618      	mov	r0, r3
    c5fc:	370c      	adds	r7, #12
    c5fe:	46bd      	mov	sp, r7
    c600:	f85d 7b04 	ldr.w	r7, [sp], #4
    c604:	4770      	bx	lr
    c606:	bf00      	nop
    c608:	1000c17c 	.word	0x1000c17c
    c60c:	00f956e2 	.word	0x00f956e2

0000c610 <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    c610:	b580      	push	{r7, lr}
    c612:	b088      	sub	sp, #32
    c614:	af00      	add	r7, sp, #0
    c616:	6078      	str	r0, [r7, #4]
    c618:	460b      	mov	r3, r1
    c61a:	70fb      	strb	r3, [r7, #3]
    c61c:	4613      	mov	r3, r2
    c61e:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c620:	687b      	ldr	r3, [r7, #4]
    c622:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c624:	69fb      	ldr	r3, [r7, #28]
    c626:	689b      	ldr	r3, [r3, #8]
    c628:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    c62a:	69bb      	ldr	r3, [r7, #24]
    c62c:	b2db      	uxtb	r3, r3
    c62e:	330d      	adds	r3, #13
    c630:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	2b00      	cmp	r3, #0
    c636:	d00d      	beq.n	c654 <am_hal_pdm_power_control+0x44>
    c638:	687b      	ldr	r3, [r7, #4]
    c63a:	78db      	ldrb	r3, [r3, #3]
    c63c:	f003 0301 	and.w	r3, r3, #1
    c640:	b2db      	uxtb	r3, r3
    c642:	2b00      	cmp	r3, #0
    c644:	d006      	beq.n	c654 <am_hal_pdm_power_control+0x44>
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	681b      	ldr	r3, [r3, #0]
    c64a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c64e:	4a23      	ldr	r2, [pc, #140]	; (c6dc <am_hal_pdm_power_control+0xcc>)
    c650:	4293      	cmp	r3, r2
    c652:	d001      	beq.n	c658 <am_hal_pdm_power_control+0x48>
    c654:	2302      	movs	r3, #2
    c656:	e03d      	b.n	c6d4 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    c658:	78fb      	ldrb	r3, [r7, #3]
    c65a:	2b00      	cmp	r3, #0
    c65c:	d004      	beq.n	c668 <am_hal_pdm_power_control+0x58>
    c65e:	2b00      	cmp	r3, #0
    c660:	db34      	blt.n	c6cc <am_hal_pdm_power_control+0xbc>
    c662:	2b02      	cmp	r3, #2
    c664:	dc32      	bgt.n	c6cc <am_hal_pdm_power_control+0xbc>
    c666:	e01e      	b.n	c6a6 <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    c668:	78bb      	ldrb	r3, [r7, #2]
    c66a:	2b00      	cmp	r3, #0
    c66c:	d008      	beq.n	c680 <am_hal_pdm_power_control+0x70>
    c66e:	69fb      	ldr	r3, [r7, #28]
    c670:	791b      	ldrb	r3, [r3, #4]
    c672:	f083 0301 	eor.w	r3, r3, #1
    c676:	b2db      	uxtb	r3, r3
    c678:	2b00      	cmp	r3, #0
    c67a:	d001      	beq.n	c680 <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    c67c:	2307      	movs	r3, #7
    c67e:	e029      	b.n	c6d4 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    c680:	7dfb      	ldrb	r3, [r7, #23]
    c682:	4618      	mov	r0, r3
    c684:	f003 faf0 	bl	fc68 <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    c688:	78bb      	ldrb	r3, [r7, #2]
    c68a:	2b00      	cmp	r3, #0
    c68c:	d020      	beq.n	c6d0 <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    c68e:	f003 f9f7 	bl	fa80 <am_hal_interrupt_master_disable>
    c692:	4603      	mov	r3, r0
    c694:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    c696:	69fb      	ldr	r3, [r7, #28]
    c698:	2200      	movs	r2, #0
    c69a:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c69c:	693b      	ldr	r3, [r7, #16]
    c69e:	4618      	mov	r0, r3
    c6a0:	f003 f9f2 	bl	fa88 <am_hal_interrupt_master_set>
            }
            break;
    c6a4:	e014      	b.n	c6d0 <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    c6a6:	78bb      	ldrb	r3, [r7, #2]
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d00a      	beq.n	c6c2 <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    c6ac:	f003 f9e8 	bl	fa80 <am_hal_interrupt_master_disable>
    c6b0:	4603      	mov	r3, r0
    c6b2:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    c6b4:	69fb      	ldr	r3, [r7, #28]
    c6b6:	2201      	movs	r2, #1
    c6b8:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c6ba:	68fb      	ldr	r3, [r7, #12]
    c6bc:	4618      	mov	r0, r3
    c6be:	f003 f9e3 	bl	fa88 <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    c6c2:	7dfb      	ldrb	r3, [r7, #23]
    c6c4:	4618      	mov	r0, r3
    c6c6:	f003 faf9 	bl	fcbc <am_hal_pwrctrl_periph_disable>
            break;
    c6ca:	e002      	b.n	c6d2 <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    c6cc:	2306      	movs	r3, #6
    c6ce:	e001      	b.n	c6d4 <am_hal_pdm_power_control+0xc4>
            break;
    c6d0:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c6d2:	2300      	movs	r3, #0
}
    c6d4:	4618      	mov	r0, r3
    c6d6:	3720      	adds	r7, #32
    c6d8:	46bd      	mov	sp, r7
    c6da:	bd80      	pop	{r7, pc}
    c6dc:	00f956e2 	.word	0x00f956e2

0000c6e0 <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    c6e0:	b580      	push	{r7, lr}
    c6e2:	b088      	sub	sp, #32
    c6e4:	af00      	add	r7, sp, #0
    c6e6:	6078      	str	r0, [r7, #4]
    c6e8:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c6ea:	687b      	ldr	r3, [r7, #4]
    c6ec:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c6ee:	69fb      	ldr	r3, [r7, #28]
    c6f0:	689b      	ldr	r3, [r3, #8]
    c6f2:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c6f4:	687b      	ldr	r3, [r7, #4]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	d00d      	beq.n	c716 <am_hal_pdm_configure+0x36>
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	78db      	ldrb	r3, [r3, #3]
    c6fe:	f003 0301 	and.w	r3, r3, #1
    c702:	b2db      	uxtb	r3, r3
    c704:	2b00      	cmp	r3, #0
    c706:	d006      	beq.n	c716 <am_hal_pdm_configure+0x36>
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	681b      	ldr	r3, [r3, #0]
    c70c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c710:	4a5e      	ldr	r2, [pc, #376]	; (c88c <am_hal_pdm_configure+0x1ac>)
    c712:	4293      	cmp	r3, r2
    c714:	d001      	beq.n	c71a <am_hal_pdm_configure+0x3a>
    c716:	2302      	movs	r3, #2
    c718:	e0b4      	b.n	c884 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    c71a:	4a5d      	ldr	r2, [pc, #372]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c71c:	683b      	ldr	r3, [r7, #0]
    c71e:	7f59      	ldrb	r1, [r3, #29]
    c720:	6813      	ldr	r3, [r2, #0]
    c722:	f361 0341 	bfi	r3, r1, #1, #1
    c726:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    c728:	683b      	ldr	r3, [r7, #0]
    c72a:	699b      	ldr	r3, [r3, #24]
    c72c:	4a58      	ldr	r2, [pc, #352]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c72e:	f003 0307 	and.w	r3, r3, #7
    c732:	b2d9      	uxtb	r1, r3
    c734:	6813      	ldr	r3, [r2, #0]
    c736:	f361 0384 	bfi	r3, r1, #2, #3
    c73a:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    c73c:	683b      	ldr	r3, [r7, #0]
    c73e:	68db      	ldr	r3, [r3, #12]
    c740:	4a53      	ldr	r2, [pc, #332]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c742:	f003 030f 	and.w	r3, r3, #15
    c746:	b2d9      	uxtb	r1, r3
    c748:	6813      	ldr	r3, [r2, #0]
    c74a:	f361 1348 	bfi	r3, r1, #5, #4
    c74e:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    c750:	4a4f      	ldr	r2, [pc, #316]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c752:	683b      	ldr	r3, [r7, #0]
    c754:	7a19      	ldrb	r1, [r3, #8]
    c756:	6813      	ldr	r3, [r2, #0]
    c758:	f361 2349 	bfi	r3, r1, #9, #1
    c75c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    c75e:	683b      	ldr	r3, [r7, #0]
    c760:	685b      	ldr	r3, [r3, #4]
    c762:	4a4b      	ldr	r2, [pc, #300]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c768:	b2d9      	uxtb	r1, r3
    c76a:	6813      	ldr	r3, [r2, #0]
    c76c:	f361 2390 	bfi	r3, r1, #10, #7
    c770:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    c772:	683b      	ldr	r3, [r7, #0]
    c774:	781b      	ldrb	r3, [r3, #0]
    c776:	4a46      	ldr	r2, [pc, #280]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c778:	f003 0303 	and.w	r3, r3, #3
    c77c:	b2d9      	uxtb	r1, r3
    c77e:	6813      	ldr	r3, [r2, #0]
    c780:	f361 4352 	bfi	r3, r1, #17, #2
    c784:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    c786:	683b      	ldr	r3, [r7, #0]
    c788:	785b      	ldrb	r3, [r3, #1]
    c78a:	4a41      	ldr	r2, [pc, #260]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c78c:	f003 031f 	and.w	r3, r3, #31
    c790:	b2d9      	uxtb	r1, r3
    c792:	6813      	ldr	r3, [r2, #0]
    c794:	f361 5359 	bfi	r3, r1, #21, #5
    c798:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    c79a:	683b      	ldr	r3, [r7, #0]
    c79c:	789b      	ldrb	r3, [r3, #2]
    c79e:	4a3c      	ldr	r2, [pc, #240]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7a0:	f003 031f 	and.w	r3, r3, #31
    c7a4:	b2d9      	uxtb	r1, r3
    c7a6:	6813      	ldr	r3, [r2, #0]
    c7a8:	f361 639e 	bfi	r3, r1, #26, #5
    c7ac:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    c7ae:	4a38      	ldr	r2, [pc, #224]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7b0:	683b      	ldr	r3, [r7, #0]
    c7b2:	7f99      	ldrb	r1, [r3, #30]
    c7b4:	6813      	ldr	r3, [r2, #0]
    c7b6:	f361 73df 	bfi	r3, r1, #31, #1
    c7ba:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    c7bc:	4a34      	ldr	r2, [pc, #208]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7be:	6813      	ldr	r3, [r2, #0]
    c7c0:	f043 0301 	orr.w	r3, r3, #1
    c7c4:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    c7c6:	4a32      	ldr	r2, [pc, #200]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7c8:	6853      	ldr	r3, [r2, #4]
    c7ca:	f36f 639a 	bfc	r3, #26, #1
    c7ce:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    c7d0:	4a2f      	ldr	r2, [pc, #188]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7d2:	6853      	ldr	r3, [r2, #4]
    c7d4:	f36f 73df 	bfc	r3, #31, #1
    c7d8:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    c7da:	4a2d      	ldr	r2, [pc, #180]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7dc:	6853      	ldr	r3, [r2, #4]
    c7de:	f36f 739e 	bfc	r3, #30, #1
    c7e2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    c7e4:	683b      	ldr	r3, [r7, #0]
    c7e6:	7d5b      	ldrb	r3, [r3, #21]
    c7e8:	4a29      	ldr	r2, [pc, #164]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7ea:	f003 0303 	and.w	r3, r3, #3
    c7ee:	b2d9      	uxtb	r1, r3
    c7f0:	6853      	ldr	r3, [r2, #4]
    c7f2:	f361 03c4 	bfi	r3, r1, #3, #2
    c7f6:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    c7f8:	4a25      	ldr	r2, [pc, #148]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c7fa:	683b      	ldr	r3, [r7, #0]
    c7fc:	7d19      	ldrb	r1, [r3, #20]
    c7fe:	6853      	ldr	r3, [r2, #4]
    c800:	f361 2308 	bfi	r3, r1, #8, #1
    c804:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    c806:	683b      	ldr	r3, [r7, #0]
    c808:	7c9b      	ldrb	r3, [r3, #18]
    c80a:	4a21      	ldr	r2, [pc, #132]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c80c:	f003 0301 	and.w	r3, r3, #1
    c810:	b2d9      	uxtb	r1, r3
    c812:	6853      	ldr	r3, [r2, #4]
    c814:	f361 4310 	bfi	r3, r1, #16, #1
    c818:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    c81a:	4a1d      	ldr	r2, [pc, #116]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c81c:	683b      	ldr	r3, [r7, #0]
    c81e:	7cd9      	ldrb	r1, [r3, #19]
    c820:	6853      	ldr	r3, [r2, #4]
    c822:	f361 4351 	bfi	r3, r1, #17, #1
    c826:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    c828:	4a19      	ldr	r2, [pc, #100]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c82a:	683b      	ldr	r3, [r7, #0]
    c82c:	7c59      	ldrb	r1, [r3, #17]
    c82e:	6853      	ldr	r3, [r2, #4]
    c830:	f361 43d3 	bfi	r3, r1, #19, #1
    c834:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    c836:	4a16      	ldr	r2, [pc, #88]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c838:	683b      	ldr	r3, [r7, #0]
    c83a:	7f19      	ldrb	r1, [r3, #28]
    c83c:	6853      	ldr	r3, [r2, #4]
    c83e:	f361 5314 	bfi	r3, r1, #20, #1
    c842:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    c844:	683b      	ldr	r3, [r7, #0]
    c846:	7c1b      	ldrb	r3, [r3, #16]
    c848:	4a11      	ldr	r2, [pc, #68]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c84a:	f003 0307 	and.w	r3, r3, #7
    c84e:	b2d9      	uxtb	r1, r3
    c850:	6853      	ldr	r3, [r2, #4]
    c852:	f361 63dd 	bfi	r3, r1, #27, #3
    c856:	6053      	str	r3, [r2, #4]

    delay_us(100);
    c858:	f107 030c 	add.w	r3, r7, #12
    c85c:	4618      	mov	r0, r3
    c85e:	f002 ff83 	bl	f768 <am_hal_clkgen_status_get>
    c862:	68fb      	ldr	r3, [r7, #12]
    c864:	4a0b      	ldr	r2, [pc, #44]	; (c894 <am_hal_pdm_configure+0x1b4>)
    c866:	fba2 2303 	umull	r2, r3, r2, r3
    c86a:	0c9b      	lsrs	r3, r3, #18
    c86c:	2264      	movs	r2, #100	; 0x64
    c86e:	fb02 f303 	mul.w	r3, r2, r3
    c872:	4618      	mov	r0, r3
    c874:	f003 f8d0 	bl	fa18 <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    c878:	4a05      	ldr	r2, [pc, #20]	; (c890 <am_hal_pdm_configure+0x1b0>)
    c87a:	6853      	ldr	r3, [r2, #4]
    c87c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c880:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c882:	2300      	movs	r3, #0
}
    c884:	4618      	mov	r0, r3
    c886:	3720      	adds	r7, #32
    c888:	46bd      	mov	sp, r7
    c88a:	bd80      	pop	{r7, pc}
    c88c:	00f956e2 	.word	0x00f956e2
    c890:	50011000 	.word	0x50011000
    c894:	165e9f81 	.word	0x165e9f81

0000c898 <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    c898:	b480      	push	{r7}
    c89a:	b085      	sub	sp, #20
    c89c:	af00      	add	r7, sp, #0
    c89e:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c8a4:	68fb      	ldr	r3, [r7, #12]
    c8a6:	689b      	ldr	r3, [r3, #8]
    c8a8:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c8aa:	687b      	ldr	r3, [r7, #4]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d00d      	beq.n	c8cc <am_hal_pdm_enable+0x34>
    c8b0:	687b      	ldr	r3, [r7, #4]
    c8b2:	78db      	ldrb	r3, [r3, #3]
    c8b4:	f003 0301 	and.w	r3, r3, #1
    c8b8:	b2db      	uxtb	r3, r3
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d006      	beq.n	c8cc <am_hal_pdm_enable+0x34>
    c8be:	687b      	ldr	r3, [r7, #4]
    c8c0:	681b      	ldr	r3, [r3, #0]
    c8c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c8c6:	4a0b      	ldr	r2, [pc, #44]	; (c8f4 <am_hal_pdm_enable+0x5c>)
    c8c8:	4293      	cmp	r3, r2
    c8ca:	d001      	beq.n	c8d0 <am_hal_pdm_enable+0x38>
    c8cc:	2302      	movs	r3, #2
    c8ce:	e00a      	b.n	c8e6 <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    c8d0:	4a09      	ldr	r2, [pc, #36]	; (c8f8 <am_hal_pdm_enable+0x60>)
    c8d2:	6853      	ldr	r3, [r2, #4]
    c8d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c8d8:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    c8da:	4a07      	ldr	r2, [pc, #28]	; (c8f8 <am_hal_pdm_enable+0x60>)
    c8dc:	6853      	ldr	r3, [r2, #4]
    c8de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c8e2:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c8e4:	2300      	movs	r3, #0
}
    c8e6:	4618      	mov	r0, r3
    c8e8:	3714      	adds	r7, #20
    c8ea:	46bd      	mov	sp, r7
    c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8f0:	4770      	bx	lr
    c8f2:	bf00      	nop
    c8f4:	00f956e2 	.word	0x00f956e2
    c8f8:	50011000 	.word	0x50011000

0000c8fc <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    c8fc:	b480      	push	{r7}
    c8fe:	b087      	sub	sp, #28
    c900:	af00      	add	r7, sp, #0
    c902:	6078      	str	r0, [r7, #4]
    c904:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c90a:	68fb      	ldr	r3, [r7, #12]
    c90c:	689b      	ldr	r3, [r3, #8]
    c90e:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	2b00      	cmp	r3, #0
    c914:	d00d      	beq.n	c932 <am_hal_pdm_dma_start+0x36>
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	78db      	ldrb	r3, [r3, #3]
    c91a:	f003 0301 	and.w	r3, r3, #1
    c91e:	b2db      	uxtb	r3, r3
    c920:	2b00      	cmp	r3, #0
    c922:	d006      	beq.n	c932 <am_hal_pdm_dma_start+0x36>
    c924:	687b      	ldr	r3, [r7, #4]
    c926:	681b      	ldr	r3, [r3, #0]
    c928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c92c:	4a33      	ldr	r2, [pc, #204]	; (c9fc <am_hal_pdm_dma_start+0x100>)
    c92e:	4293      	cmp	r3, r2
    c930:	d001      	beq.n	c936 <am_hal_pdm_dma_start+0x3a>
    c932:	2302      	movs	r3, #2
    c934:	e05b      	b.n	c9ee <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    c936:	2300      	movs	r3, #0
    c938:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    c93a:	2301      	movs	r3, #1
    c93c:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c93e:	2301      	movs	r3, #1
    c940:	613b      	str	r3, [r7, #16]
    c942:	e01b      	b.n	c97c <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c944:	683b      	ldr	r3, [r7, #0]
    c946:	685b      	ldr	r3, [r3, #4]
    c948:	693a      	ldr	r2, [r7, #16]
    c94a:	fbb3 f2f2 	udiv	r2, r3, r2
    c94e:	6939      	ldr	r1, [r7, #16]
    c950:	fb01 f202 	mul.w	r2, r1, r2
    c954:	1a9b      	subs	r3, r3, r2
    c956:	2b00      	cmp	r3, #0
    c958:	d10d      	bne.n	c976 <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    c95a:	683b      	ldr	r3, [r7, #0]
    c95c:	685a      	ldr	r2, [r3, #4]
    c95e:	693b      	ldr	r3, [r7, #16]
    c960:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c964:	2b1f      	cmp	r3, #31
    c966:	d806      	bhi.n	c976 <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    c968:	683b      	ldr	r3, [r7, #0]
    c96a:	685a      	ldr	r2, [r3, #4]
    c96c:	693b      	ldr	r3, [r7, #16]
    c96e:	fbb2 f3f3 	udiv	r3, r2, r3
    c972:	617b      	str	r3, [r7, #20]
            break;
    c974:	e007      	b.n	c986 <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c976:	693b      	ldr	r3, [r7, #16]
    c978:	3301      	adds	r3, #1
    c97a:	613b      	str	r3, [r7, #16]
    c97c:	683b      	ldr	r3, [r7, #0]
    c97e:	685b      	ldr	r3, [r3, #4]
    c980:	693a      	ldr	r2, [r7, #16]
    c982:	429a      	cmp	r2, r3
    c984:	d3de      	bcc.n	c944 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    c986:	697b      	ldr	r3, [r7, #20]
    c988:	2b00      	cmp	r3, #0
    c98a:	d102      	bne.n	c992 <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    c98c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c990:	e02d      	b.n	c9ee <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    c992:	4a1b      	ldr	r2, [pc, #108]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c994:	697b      	ldr	r3, [r7, #20]
    c996:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    c998:	4b19      	ldr	r3, [pc, #100]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c99a:	2200      	movs	r2, #0
    c99c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    c9a0:	4a17      	ldr	r2, [pc, #92]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9a2:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9a6:	f36f 2308 	bfc	r3, #8, #1
    c9aa:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    c9ae:	4a14      	ldr	r2, [pc, #80]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9b0:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9b4:	f36f 0382 	bfc	r3, #2, #1
    c9b8:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    c9bc:	4a10      	ldr	r2, [pc, #64]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9be:	683b      	ldr	r3, [r7, #0]
    c9c0:	685b      	ldr	r3, [r3, #4]
    c9c2:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    c9c6:	4a0e      	ldr	r2, [pc, #56]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9c8:	683b      	ldr	r3, [r7, #0]
    c9ca:	681b      	ldr	r3, [r3, #0]
    c9cc:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    c9d0:	4a0b      	ldr	r2, [pc, #44]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9d2:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    c9d6:	f043 0301 	orr.w	r3, r3, #1
    c9da:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    c9de:	4a08      	ldr	r2, [pc, #32]	; (ca00 <am_hal_pdm_dma_start+0x104>)
    c9e0:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9e4:	f043 0301 	orr.w	r3, r3, #1
    c9e8:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    c9ec:	2300      	movs	r3, #0
}
    c9ee:	4618      	mov	r0, r3
    c9f0:	371c      	adds	r7, #28
    c9f2:	46bd      	mov	sp, r7
    c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f8:	4770      	bx	lr
    c9fa:	bf00      	nop
    c9fc:	00f956e2 	.word	0x00f956e2
    ca00:	50011000 	.word	0x50011000

0000ca04 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    ca04:	b480      	push	{r7}
    ca06:	b085      	sub	sp, #20
    ca08:	af00      	add	r7, sp, #0
    ca0a:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca0c:	687b      	ldr	r3, [r7, #4]
    ca0e:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca10:	68fb      	ldr	r3, [r7, #12]
    ca12:	689b      	ldr	r3, [r3, #8]
    ca14:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d00d      	beq.n	ca38 <am_hal_pdm_fifo_flush+0x34>
    ca1c:	687b      	ldr	r3, [r7, #4]
    ca1e:	78db      	ldrb	r3, [r3, #3]
    ca20:	f003 0301 	and.w	r3, r3, #1
    ca24:	b2db      	uxtb	r3, r3
    ca26:	2b00      	cmp	r3, #0
    ca28:	d006      	beq.n	ca38 <am_hal_pdm_fifo_flush+0x34>
    ca2a:	687b      	ldr	r3, [r7, #4]
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca32:	4a07      	ldr	r2, [pc, #28]	; (ca50 <am_hal_pdm_fifo_flush+0x4c>)
    ca34:	4293      	cmp	r3, r2
    ca36:	d001      	beq.n	ca3c <am_hal_pdm_fifo_flush+0x38>
    ca38:	2302      	movs	r3, #2
    ca3a:	e003      	b.n	ca44 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    ca3c:	4b05      	ldr	r3, [pc, #20]	; (ca54 <am_hal_pdm_fifo_flush+0x50>)
    ca3e:	2201      	movs	r2, #1
    ca40:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    ca42:	2300      	movs	r3, #0
}
    ca44:	4618      	mov	r0, r3
    ca46:	3714      	adds	r7, #20
    ca48:	46bd      	mov	sp, r7
    ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca4e:	4770      	bx	lr
    ca50:	00f956e2 	.word	0x00f956e2
    ca54:	50011000 	.word	0x50011000

0000ca58 <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    ca58:	b480      	push	{r7}
    ca5a:	b085      	sub	sp, #20
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	6078      	str	r0, [r7, #4]
    ca60:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca62:	687b      	ldr	r3, [r7, #4]
    ca64:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca66:	68fb      	ldr	r3, [r7, #12]
    ca68:	689b      	ldr	r3, [r3, #8]
    ca6a:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d00d      	beq.n	ca8e <am_hal_pdm_interrupt_enable+0x36>
    ca72:	687b      	ldr	r3, [r7, #4]
    ca74:	78db      	ldrb	r3, [r3, #3]
    ca76:	f003 0301 	and.w	r3, r3, #1
    ca7a:	b2db      	uxtb	r3, r3
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d006      	beq.n	ca8e <am_hal_pdm_interrupt_enable+0x36>
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca88:	4a09      	ldr	r2, [pc, #36]	; (cab0 <am_hal_pdm_interrupt_enable+0x58>)
    ca8a:	4293      	cmp	r3, r2
    ca8c:	d001      	beq.n	ca92 <am_hal_pdm_interrupt_enable+0x3a>
    ca8e:	2302      	movs	r3, #2
    ca90:	e008      	b.n	caa4 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    ca92:	4b08      	ldr	r3, [pc, #32]	; (cab4 <am_hal_pdm_interrupt_enable+0x5c>)
    ca94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ca98:	4906      	ldr	r1, [pc, #24]	; (cab4 <am_hal_pdm_interrupt_enable+0x5c>)
    ca9a:	683b      	ldr	r3, [r7, #0]
    ca9c:	4313      	orrs	r3, r2
    ca9e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    caa2:	2300      	movs	r3, #0
}
    caa4:	4618      	mov	r0, r3
    caa6:	3714      	adds	r7, #20
    caa8:	46bd      	mov	sp, r7
    caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    caae:	4770      	bx	lr
    cab0:	00f956e2 	.word	0x00f956e2
    cab4:	50011000 	.word	0x50011000

0000cab8 <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    cab8:	b480      	push	{r7}
    caba:	b085      	sub	sp, #20
    cabc:	af00      	add	r7, sp, #0
    cabe:	6078      	str	r0, [r7, #4]
    cac0:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cac2:	687b      	ldr	r3, [r7, #4]
    cac4:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cac6:	68fb      	ldr	r3, [r7, #12]
    cac8:	689b      	ldr	r3, [r3, #8]
    caca:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	2b00      	cmp	r3, #0
    cad0:	d00d      	beq.n	caee <am_hal_pdm_interrupt_clear+0x36>
    cad2:	687b      	ldr	r3, [r7, #4]
    cad4:	78db      	ldrb	r3, [r3, #3]
    cad6:	f003 0301 	and.w	r3, r3, #1
    cada:	b2db      	uxtb	r3, r3
    cadc:	2b00      	cmp	r3, #0
    cade:	d006      	beq.n	caee <am_hal_pdm_interrupt_clear+0x36>
    cae0:	687b      	ldr	r3, [r7, #4]
    cae2:	681b      	ldr	r3, [r3, #0]
    cae4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cae8:	4a07      	ldr	r2, [pc, #28]	; (cb08 <am_hal_pdm_interrupt_clear+0x50>)
    caea:	4293      	cmp	r3, r2
    caec:	d001      	beq.n	caf2 <am_hal_pdm_interrupt_clear+0x3a>
    caee:	2302      	movs	r3, #2
    caf0:	e004      	b.n	cafc <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    caf2:	4a06      	ldr	r2, [pc, #24]	; (cb0c <am_hal_pdm_interrupt_clear+0x54>)
    caf4:	683b      	ldr	r3, [r7, #0]
    caf6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    cafa:	2300      	movs	r3, #0
}
    cafc:	4618      	mov	r0, r3
    cafe:	3714      	adds	r7, #20
    cb00:	46bd      	mov	sp, r7
    cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb06:	4770      	bx	lr
    cb08:	00f956e2 	.word	0x00f956e2
    cb0c:	50011000 	.word	0x50011000

0000cb10 <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    cb10:	b480      	push	{r7}
    cb12:	b087      	sub	sp, #28
    cb14:	af00      	add	r7, sp, #0
    cb16:	60f8      	str	r0, [r7, #12]
    cb18:	60b9      	str	r1, [r7, #8]
    cb1a:	4613      	mov	r3, r2
    cb1c:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    cb22:	697b      	ldr	r3, [r7, #20]
    cb24:	689b      	ldr	r3, [r3, #8]
    cb26:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb28:	68fb      	ldr	r3, [r7, #12]
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	d00d      	beq.n	cb4a <am_hal_pdm_interrupt_status_get+0x3a>
    cb2e:	68fb      	ldr	r3, [r7, #12]
    cb30:	78db      	ldrb	r3, [r3, #3]
    cb32:	f003 0301 	and.w	r3, r3, #1
    cb36:	b2db      	uxtb	r3, r3
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d006      	beq.n	cb4a <am_hal_pdm_interrupt_status_get+0x3a>
    cb3c:	68fb      	ldr	r3, [r7, #12]
    cb3e:	681b      	ldr	r3, [r3, #0]
    cb40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb44:	4a10      	ldr	r2, [pc, #64]	; (cb88 <am_hal_pdm_interrupt_status_get+0x78>)
    cb46:	4293      	cmp	r3, r2
    cb48:	d001      	beq.n	cb4e <am_hal_pdm_interrupt_status_get+0x3e>
    cb4a:	2302      	movs	r3, #2
    cb4c:	e016      	b.n	cb7c <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    cb4e:	79fb      	ldrb	r3, [r7, #7]
    cb50:	2b00      	cmp	r3, #0
    cb52:	d00d      	beq.n	cb70 <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb54:	4b0d      	ldr	r3, [pc, #52]	; (cb8c <am_hal_pdm_interrupt_status_get+0x7c>)
    cb56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb5a:	68bb      	ldr	r3, [r7, #8]
    cb5c:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    cb5e:	4b0b      	ldr	r3, [pc, #44]	; (cb8c <am_hal_pdm_interrupt_status_get+0x7c>)
    cb60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cb64:	68bb      	ldr	r3, [r7, #8]
    cb66:	681b      	ldr	r3, [r3, #0]
    cb68:	401a      	ands	r2, r3
    cb6a:	68bb      	ldr	r3, [r7, #8]
    cb6c:	601a      	str	r2, [r3, #0]
    cb6e:	e004      	b.n	cb7a <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb70:	4b06      	ldr	r3, [pc, #24]	; (cb8c <am_hal_pdm_interrupt_status_get+0x7c>)
    cb72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb76:	68bb      	ldr	r3, [r7, #8]
    cb78:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    cb7a:	2300      	movs	r3, #0
}
    cb7c:	4618      	mov	r0, r3
    cb7e:	371c      	adds	r7, #28
    cb80:	46bd      	mov	sp, r7
    cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb86:	4770      	bx	lr
    cb88:	00f956e2 	.word	0x00f956e2
    cb8c:	50011000 	.word	0x50011000

0000cb90 <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    cb90:	b480      	push	{r7}
    cb92:	b085      	sub	sp, #20
    cb94:	af00      	add	r7, sp, #0
    cb96:	6078      	str	r0, [r7, #4]
    cb98:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	681b      	ldr	r3, [r3, #0]
    cb9e:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    cba0:	683b      	ldr	r3, [r7, #0]
    cba2:	681b      	ldr	r3, [r3, #0]
    cba4:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    cba6:	68fa      	ldr	r2, [r7, #12]
    cba8:	68bb      	ldr	r3, [r7, #8]
    cbaa:	429a      	cmp	r2, r3
    cbac:	bf0c      	ite	eq
    cbae:	2301      	moveq	r3, #1
    cbb0:	2300      	movne	r3, #0
    cbb2:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    cbb4:	4618      	mov	r0, r3
    cbb6:	3714      	adds	r7, #20
    cbb8:	46bd      	mov	sp, r7
    cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbbe:	4770      	bx	lr

0000cbc0 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b092      	sub	sp, #72	; 0x48
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
    cbc8:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    cbca:	2300      	movs	r3, #0
    cbcc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	2b31      	cmp	r3, #49	; 0x31
    cbd4:	d901      	bls.n	cbda <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cbd6:	2306      	movs	r3, #6
    cbd8:	e1c1      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    cbda:	2300      	movs	r3, #0
    cbdc:	643b      	str	r3, [r7, #64]	; 0x40
    cbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cbe0:	647b      	str	r3, [r7, #68]	; 0x44
    cbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cbe4:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    cbe6:	783b      	ldrb	r3, [r7, #0]
    cbe8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbec:	b2db      	uxtb	r3, r3
    cbee:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    cbf0:	783b      	ldrb	r3, [r7, #0]
    cbf2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cbf6:	b2db      	uxtb	r3, r3
    cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cbfc:	00db      	lsls	r3, r3, #3
    cbfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cc00:	4313      	orrs	r3, r2
    cc02:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    cc04:	783b      	ldrb	r3, [r7, #0]
    cc06:	f023 031f 	bic.w	r3, r3, #31
    cc0a:	b2db      	uxtb	r3, r3
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	d03e      	beq.n	cc8e <am_hal_gpio_pinconfig+0xce>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    cc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc12:	f043 0301 	orr.w	r3, r3, #1
    cc16:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc18:	783b      	ldrb	r3, [r7, #0]
    cc1a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc1e:	b2db      	uxtb	r3, r3
    cc20:	2b01      	cmp	r3, #1
    cc22:	d919      	bls.n	cc58 <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    cc24:	783b      	ldrb	r3, [r7, #0]
    cc26:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc2a:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc2c:	2b05      	cmp	r3, #5
    cc2e:	d813      	bhi.n	cc58 <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    cc30:	783b      	ldrb	r3, [r7, #0]
    cc32:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc36:	b2db      	uxtb	r3, r3
    cc38:	3b02      	subs	r3, #2
    cc3a:	019b      	lsls	r3, r3, #6
    cc3c:	461a      	mov	r2, r3
    cc3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc40:	4313      	orrs	r3, r2
    cc42:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    cc44:	4a7b      	ldr	r2, [pc, #492]	; (ce34 <am_hal_gpio_pinconfig+0x274>)
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	4413      	add	r3, r2
    cc4a:	781b      	ldrb	r3, [r3, #0]
    cc4c:	f003 0301 	and.w	r3, r3, #1
    cc50:	2b00      	cmp	r3, #0
    cc52:	d11c      	bne.n	cc8e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc54:	4b78      	ldr	r3, [pc, #480]	; (ce38 <am_hal_gpio_pinconfig+0x278>)
    cc56:	e182      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    cc58:	783b      	ldrb	r3, [r7, #0]
    cc5a:	f023 031f 	bic.w	r3, r3, #31
    cc5e:	b2db      	uxtb	r3, r3
    cc60:	2bc0      	cmp	r3, #192	; 0xc0
    cc62:	d104      	bne.n	cc6e <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    cc64:	687b      	ldr	r3, [r7, #4]
    cc66:	2b14      	cmp	r3, #20
    cc68:	d011      	beq.n	cc8e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    cc6a:	4b74      	ldr	r3, [pc, #464]	; (ce3c <am_hal_gpio_pinconfig+0x27c>)
    cc6c:	e177      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    cc6e:	783b      	ldrb	r3, [r7, #0]
    cc70:	f023 031f 	bic.w	r3, r3, #31
    cc74:	b2db      	uxtb	r3, r3
    cc76:	2b20      	cmp	r3, #32
    cc78:	d109      	bne.n	cc8e <am_hal_gpio_pinconfig+0xce>
        {
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    cc7a:	4a6e      	ldr	r2, [pc, #440]	; (ce34 <am_hal_gpio_pinconfig+0x274>)
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	4413      	add	r3, r2
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	f003 0309 	and.w	r3, r3, #9
    cc86:	2b00      	cmp	r3, #0
    cc88:	d001      	beq.n	cc8e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc8a:	4b6b      	ldr	r3, [pc, #428]	; (ce38 <am_hal_gpio_pinconfig+0x278>)
    cc8c:	e167      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc90:	2b00      	cmp	r3, #0
    cc92:	d021      	beq.n	ccd8 <am_hal_gpio_pinconfig+0x118>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc96:	2b01      	cmp	r3, #1
    cc98:	d10c      	bne.n	ccb4 <am_hal_gpio_pinconfig+0xf4>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    cc9a:	4a66      	ldr	r2, [pc, #408]	; (ce34 <am_hal_gpio_pinconfig+0x274>)
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	4413      	add	r3, r2
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cca6:	2b00      	cmp	r3, #0
    cca8:	d004      	beq.n	ccb4 <am_hal_gpio_pinconfig+0xf4>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    ccaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ccb0:	647b      	str	r3, [r7, #68]	; 0x44
    ccb2:	e011      	b.n	ccd8 <am_hal_gpio_pinconfig+0x118>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccb6:	2b02      	cmp	r3, #2
    ccb8:	d10c      	bne.n	ccd4 <am_hal_gpio_pinconfig+0x114>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    ccba:	4a5e      	ldr	r2, [pc, #376]	; (ce34 <am_hal_gpio_pinconfig+0x274>)
    ccbc:	687b      	ldr	r3, [r7, #4]
    ccbe:	4413      	add	r3, r2
    ccc0:	781b      	ldrb	r3, [r3, #0]
    ccc2:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d004      	beq.n	ccd4 <am_hal_gpio_pinconfig+0x114>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    ccca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ccd0:	647b      	str	r3, [r7, #68]	; 0x44
    ccd2:	e001      	b.n	ccd8 <am_hal_gpio_pinconfig+0x118>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    ccd4:	4b5a      	ldr	r3, [pc, #360]	; (ce40 <am_hal_gpio_pinconfig+0x280>)
    ccd6:	e142      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ccd8:	4a5a      	ldr	r2, [pc, #360]	; (ce44 <am_hal_gpio_pinconfig+0x284>)
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	4413      	add	r3, r2
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	461a      	mov	r2, r3
    cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cce4:	fa42 f303 	asr.w	r3, r2, r3
    cce8:	005b      	lsls	r3, r3, #1
    ccea:	f003 0302 	and.w	r3, r3, #2
    ccee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ccf0:	4313      	orrs	r3, r2
    ccf2:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ccf4:	4a54      	ldr	r2, [pc, #336]	; (ce48 <am_hal_gpio_pinconfig+0x288>)
    ccf6:	687b      	ldr	r3, [r7, #4]
    ccf8:	4413      	add	r3, r2
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	461a      	mov	r2, r3
    ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd00:	4293      	cmp	r3, r2
    cd02:	d13d      	bne.n	cd80 <am_hal_gpio_pinconfig+0x1c0>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    cd04:	78bb      	ldrb	r3, [r7, #2]
    cd06:	f003 0307 	and.w	r3, r3, #7
    cd0a:	b2db      	uxtb	r3, r3
    cd0c:	2b07      	cmp	r3, #7
    cd0e:	d101      	bne.n	cd14 <am_hal_gpio_pinconfig+0x154>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    cd10:	4b4e      	ldr	r3, [pc, #312]	; (ce4c <am_hal_gpio_pinconfig+0x28c>)
    cd12:	e124      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    cd14:	78bb      	ldrb	r3, [r7, #2]
    cd16:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cd1a:	b2db      	uxtb	r3, r3
    cd1c:	011b      	lsls	r3, r3, #4
    cd1e:	b25a      	sxtb	r2, r3
    cd20:	78bb      	ldrb	r3, [r7, #2]
    cd22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cd26:	b2db      	uxtb	r3, r3
    cd28:	b25b      	sxtb	r3, r3
    cd2a:	4313      	orrs	r3, r2
    cd2c:	b25b      	sxtb	r3, r3
    cd2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd32:	2300      	movs	r3, #0
    cd34:	637b      	str	r3, [r7, #52]	; 0x34
    cd36:	e00d      	b.n	cd54 <am_hal_gpio_pinconfig+0x194>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    cd38:	4a45      	ldr	r2, [pc, #276]	; (ce50 <am_hal_gpio_pinconfig+0x290>)
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	009b      	lsls	r3, r3, #2
    cd3e:	441a      	add	r2, r3
    cd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd42:	4413      	add	r3, r2
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cd4a:	429a      	cmp	r2, r3
    cd4c:	d006      	beq.n	cd5c <am_hal_gpio_pinconfig+0x19c>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd50:	3301      	adds	r3, #1
    cd52:	637b      	str	r3, [r7, #52]	; 0x34
    cd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd56:	2b03      	cmp	r3, #3
    cd58:	d9ee      	bls.n	cd38 <am_hal_gpio_pinconfig+0x178>
    cd5a:	e000      	b.n	cd5e <am_hal_gpio_pinconfig+0x19e>
            {
                break;
    cd5c:	bf00      	nop
            }
        }

#ifdef AM_HAL_ENABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    cd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd60:	2b03      	cmp	r3, #3
    cd62:	d901      	bls.n	cd68 <am_hal_gpio_pinconfig+0x1a8>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    cd64:	4b3b      	ldr	r3, [pc, #236]	; (ce54 <am_hal_gpio_pinconfig+0x294>)
    cd66:	e0fa      	b.n	cf5e <am_hal_gpio_pinconfig+0x39e>
        }
#endif // AM_HAL_ENABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd6a:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    cd6c:	78ba      	ldrb	r2, [r7, #2]
    cd6e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    cd72:	b2d2      	uxtb	r2, r2
    cd74:	00d2      	lsls	r2, r2, #3
    cd76:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cd7a:	4313      	orrs	r3, r2
    cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    cd7e:	e044      	b.n	ce0a <am_hal_gpio_pinconfig+0x24a>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    cd80:	787b      	ldrb	r3, [r7, #1]
    cd82:	f3c3 1300 	ubfx	r3, r3, #4, #1
    cd86:	b2db      	uxtb	r3, r3
    cd88:	005b      	lsls	r3, r3, #1
    cd8a:	461a      	mov	r2, r3
    cd8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd8e:	4313      	orrs	r3, r2
    cd90:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cd92:	787b      	ldrb	r3, [r7, #1]
    cd94:	f3c3 0381 	ubfx	r3, r3, #2, #2
    cd98:	b2db      	uxtb	r3, r3
    cd9a:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cd9c:	787b      	ldrb	r3, [r7, #1]
    cd9e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cda2:	b2db      	uxtb	r3, r3
    cda4:	00db      	lsls	r3, r3, #3
    cda6:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cdaa:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    cdac:	787b      	ldrb	r3, [r7, #1]
    cdae:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cdb2:	b2db      	uxtb	r3, r3
    cdb4:	105b      	asrs	r3, r3, #1
    cdb6:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cdba:	4313      	orrs	r3, r2
    cdbc:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdc0:	4313      	orrs	r3, r2
    cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cdc4:	787b      	ldrb	r3, [r7, #1]
    cdc6:	f003 030c 	and.w	r3, r3, #12
    cdca:	b2db      	uxtb	r3, r3
    cdcc:	2b04      	cmp	r3, #4
    cdce:	d007      	beq.n	cde0 <am_hal_gpio_pinconfig+0x220>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    cdd0:	463b      	mov	r3, r7
    cdd2:	4921      	ldr	r1, [pc, #132]	; (ce58 <am_hal_gpio_pinconfig+0x298>)
    cdd4:	4618      	mov	r0, r3
    cdd6:	f7ff fedb 	bl	cb90 <pincfg_equ>
    cdda:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cddc:	2b00      	cmp	r3, #0
    cdde:	d002      	beq.n	cde6 <am_hal_gpio_pinconfig+0x226>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    cde0:	2301      	movs	r3, #1
    cde2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    cde6:	787b      	ldrb	r3, [r7, #1]
    cde8:	f003 0360 	and.w	r3, r3, #96	; 0x60
    cdec:	b2db      	uxtb	r3, r3
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d10b      	bne.n	ce0a <am_hal_gpio_pinconfig+0x24a>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    cdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdf4:	f023 0301 	bic.w	r3, r3, #1
    cdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    cdfa:	787b      	ldrb	r3, [r7, #1]
    cdfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ce00:	b2db      	uxtb	r3, r3
    ce02:	461a      	mov	r2, r3
    ce04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce06:	4313      	orrs	r3, r2
    ce08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    ce0a:	787b      	ldrb	r3, [r7, #1]
    ce0c:	f3c3 0301 	ubfx	r3, r3, #0, #2
    ce10:	b2db      	uxtb	r3, r3
    ce12:	2b02      	cmp	r3, #2
    ce14:	d009      	beq.n	ce2a <am_hal_gpio_pinconfig+0x26a>
    ce16:	2b03      	cmp	r3, #3
    ce18:	d020      	beq.n	ce5c <am_hal_gpio_pinconfig+0x29c>
    ce1a:	2b01      	cmp	r3, #1
    ce1c:	d000      	beq.n	ce20 <am_hal_gpio_pinconfig+0x260>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    ce1e:	e026      	b.n	ce6e <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce22:	f043 0304 	orr.w	r3, r3, #4
    ce26:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    ce28:	e021      	b.n	ce6e <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    ce2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce2c:	f043 0301 	orr.w	r3, r3, #1
    ce30:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce32:	e01c      	b.n	ce6e <am_hal_gpio_pinconfig+0x2ae>
    ce34:	00010c94 	.word	0x00010c94
    ce38:	08000100 	.word	0x08000100
    ce3c:	08000101 	.word	0x08000101
    ce40:	08000102 	.word	0x08000102
    ce44:	00010c60 	.word	0x00010c60
    ce48:	00010cc8 	.word	0x00010cc8
    ce4c:	08000103 	.word	0x08000103
    ce50:	00010cfc 	.word	0x00010cfc
    ce54:	08000104 	.word	0x08000104
    ce58:	00010c54 	.word	0x00010c54
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce5e:	f043 0304 	orr.w	r3, r3, #4
    ce62:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    ce64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce66:	f043 0301 	orr.w	r3, r3, #1
    ce6a:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce6c:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    ce6e:	687b      	ldr	r3, [r7, #4]
    ce70:	085b      	lsrs	r3, r3, #1
    ce72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ce76:	f023 0303 	bic.w	r3, r3, #3
    ce7a:	4a3b      	ldr	r2, [pc, #236]	; (cf68 <am_hal_gpio_pinconfig+0x3a8>)
    ce7c:	441a      	add	r2, r3
    ce7e:	627a      	str	r2, [r7, #36]	; 0x24
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    ce80:	687b      	ldr	r3, [r7, #4]
    ce82:	f023 0303 	bic.w	r3, r3, #3
    ce86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ce8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ce8e:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    ce90:	687b      	ldr	r3, [r7, #4]
    ce92:	f023 0203 	bic.w	r2, r3, #3
    ce96:	4b35      	ldr	r3, [pc, #212]	; (cf6c <am_hal_gpio_pinconfig+0x3ac>)
    ce98:	4413      	add	r3, r2
    ce9a:	61fb      	str	r3, [r7, #28]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    ce9c:	687b      	ldr	r3, [r7, #4]
    ce9e:	009b      	lsls	r3, r3, #2
    cea0:	f003 031c 	and.w	r3, r3, #28
    cea4:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    cea6:	687b      	ldr	r3, [r7, #4]
    cea8:	00db      	lsls	r3, r3, #3
    ceaa:	f003 0318 	and.w	r3, r3, #24
    ceae:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    ceb0:	220f      	movs	r2, #15
    ceb2:	69bb      	ldr	r3, [r7, #24]
    ceb4:	fa02 f303 	lsl.w	r3, r2, r3
    ceb8:	43db      	mvns	r3, r3
    ceba:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    cebc:	22ff      	movs	r2, #255	; 0xff
    cebe:	697b      	ldr	r3, [r7, #20]
    cec0:	fa02 f303 	lsl.w	r3, r2, r3
    cec4:	43db      	mvns	r3, r3
    cec6:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    cec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ceca:	697b      	ldr	r3, [r7, #20]
    cecc:	fa02 f303 	lsl.w	r3, r2, r3
    ced0:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    ced2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ced4:	697b      	ldr	r3, [r7, #20]
    ced6:	fa02 f303 	lsl.w	r3, r2, r3
    ceda:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    cedc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cede:	69bb      	ldr	r3, [r7, #24]
    cee0:	fa02 f303 	lsl.w	r3, r2, r3
    cee4:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    cee6:	f002 fdcb 	bl	fa80 <am_hal_interrupt_master_disable>
    ceea:	4603      	mov	r3, r0
    ceec:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    ceee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cef2:	2b00      	cmp	r3, #0
    cef4:	d00d      	beq.n	cf12 <am_hal_gpio_pinconfig+0x352>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    cef6:	687b      	ldr	r3, [r7, #4]
    cef8:	f003 021f 	and.w	r2, r3, #31
    cefc:	687b      	ldr	r3, [r7, #4]
    cefe:	095b      	lsrs	r3, r3, #5
    cf00:	f003 0301 	and.w	r3, r3, #1
    cf04:	0099      	lsls	r1, r3, #2
    cf06:	4b1a      	ldr	r3, [pc, #104]	; (cf70 <am_hal_gpio_pinconfig+0x3b0>)
    cf08:	440b      	add	r3, r1
    cf0a:	2101      	movs	r1, #1
    cf0c:	fa01 f202 	lsl.w	r2, r1, r2
    cf10:	601a      	str	r2, [r3, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    cf12:	4b18      	ldr	r3, [pc, #96]	; (cf74 <am_hal_gpio_pinconfig+0x3b4>)
    cf14:	2273      	movs	r2, #115	; 0x73
    cf16:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    cf18:	6a3b      	ldr	r3, [r7, #32]
    cf1a:	681a      	ldr	r2, [r3, #0]
    cf1c:	68fb      	ldr	r3, [r7, #12]
    cf1e:	ea02 0103 	and.w	r1, r2, r3
    cf22:	6a3b      	ldr	r3, [r7, #32]
    cf24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf26:	430a      	orrs	r2, r1
    cf28:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf2c:	681a      	ldr	r2, [r3, #0]
    cf2e:	693b      	ldr	r3, [r7, #16]
    cf30:	ea02 0103 	and.w	r1, r2, r3
    cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf38:	430a      	orrs	r2, r1
    cf3a:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    cf3c:	69fb      	ldr	r3, [r7, #28]
    cf3e:	681a      	ldr	r2, [r3, #0]
    cf40:	68fb      	ldr	r3, [r7, #12]
    cf42:	ea02 0103 	and.w	r1, r2, r3
    cf46:	69fb      	ldr	r3, [r7, #28]
    cf48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cf4a:	430a      	orrs	r2, r1
    cf4c:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    cf4e:	4b09      	ldr	r3, [pc, #36]	; (cf74 <am_hal_gpio_pinconfig+0x3b4>)
    cf50:	2200      	movs	r2, #0
    cf52:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    cf54:	68bb      	ldr	r3, [r7, #8]
    cf56:	4618      	mov	r0, r3
    cf58:	f002 fd96 	bl	fa88 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    cf5c:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    cf5e:	4618      	mov	r0, r3
    cf60:	3748      	adds	r7, #72	; 0x48
    cf62:	46bd      	mov	sp, r7
    cf64:	bd80      	pop	{r7, pc}
    cf66:	bf00      	nop
    cf68:	40010040 	.word	0x40010040
    cf6c:	400100e0 	.word	0x400100e0
    cf70:	400100b4 	.word	0x400100b4
    cf74:	40010000 	.word	0x40010000

0000cf78 <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    cf78:	b480      	push	{r7}
    cf7a:	b089      	sub	sp, #36	; 0x24
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	60f8      	str	r0, [r7, #12]
    cf80:	460b      	mov	r3, r1
    cf82:	607a      	str	r2, [r7, #4]
    cf84:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    cf86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf8a:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d101      	bne.n	cf96 <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cf92:	2306      	movs	r3, #6
    cf94:	e047      	b.n	d026 <am_hal_gpio_state_read+0xae>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cf96:	68fb      	ldr	r3, [r7, #12]
    cf98:	2b31      	cmp	r3, #49	; 0x31
    cf9a:	d904      	bls.n	cfa6 <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	69fa      	ldr	r2, [r7, #28]
    cfa0:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    cfa2:	2305      	movs	r3, #5
    cfa4:	e03f      	b.n	d026 <am_hal_gpio_state_read+0xae>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    cfa6:	68fb      	ldr	r3, [r7, #12]
    cfa8:	095b      	lsrs	r3, r3, #5
    cfaa:	f003 0301 	and.w	r3, r3, #1
    cfae:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    cfb0:	68fb      	ldr	r3, [r7, #12]
    cfb2:	f003 031f 	and.w	r3, r3, #31
    cfb6:	617b      	str	r3, [r7, #20]
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    cfb8:	7afb      	ldrb	r3, [r7, #11]
    cfba:	2b01      	cmp	r3, #1
    cfbc:	d011      	beq.n	cfe2 <am_hal_gpio_state_read+0x6a>
    cfbe:	2b02      	cmp	r3, #2
    cfc0:	d01d      	beq.n	cffe <am_hal_gpio_state_read+0x86>
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d129      	bne.n	d01a <am_hal_gpio_state_read+0xa2>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    cfc6:	69bb      	ldr	r3, [r7, #24]
    cfc8:	009a      	lsls	r2, r3, #2
    cfca:	4b1a      	ldr	r3, [pc, #104]	; (d034 <am_hal_gpio_state_read+0xbc>)
    cfcc:	4413      	add	r3, r2
    cfce:	681b      	ldr	r3, [r3, #0]
    cfd0:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfd2:	69fa      	ldr	r2, [r7, #28]
    cfd4:	697b      	ldr	r3, [r7, #20]
    cfd6:	fa22 f303 	lsr.w	r3, r2, r3
    cfda:	f003 0301 	and.w	r3, r3, #1
    cfde:	61fb      	str	r3, [r7, #28]
            break;
    cfe0:	e01d      	b.n	d01e <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    cfe2:	69bb      	ldr	r3, [r7, #24]
    cfe4:	009a      	lsls	r2, r3, #2
    cfe6:	4b14      	ldr	r3, [pc, #80]	; (d038 <am_hal_gpio_state_read+0xc0>)
    cfe8:	4413      	add	r3, r2
    cfea:	681b      	ldr	r3, [r3, #0]
    cfec:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfee:	69fa      	ldr	r2, [r7, #28]
    cff0:	697b      	ldr	r3, [r7, #20]
    cff2:	fa22 f303 	lsr.w	r3, r2, r3
    cff6:	f003 0301 	and.w	r3, r3, #1
    cffa:	61fb      	str	r3, [r7, #28]
            break;
    cffc:	e00f      	b.n	d01e <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    cffe:	69bb      	ldr	r3, [r7, #24]
    d000:	009a      	lsls	r2, r3, #2
    d002:	4b0e      	ldr	r3, [pc, #56]	; (d03c <am_hal_gpio_state_read+0xc4>)
    d004:	4413      	add	r3, r2
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d00a:	69fa      	ldr	r2, [r7, #28]
    d00c:	697b      	ldr	r3, [r7, #20]
    d00e:	fa22 f303 	lsr.w	r3, r2, r3
    d012:	f003 0301 	and.w	r3, r3, #1
    d016:	61fb      	str	r3, [r7, #28]
            break;
    d018:	e001      	b.n	d01e <am_hal_gpio_state_read+0xa6>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d01a:	2306      	movs	r3, #6
    d01c:	e003      	b.n	d026 <am_hal_gpio_state_read+0xae>
    }

    *pui32ReadState = ui32ReadValue;
    d01e:	687b      	ldr	r3, [r7, #4]
    d020:	69fa      	ldr	r2, [r7, #28]
    d022:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d024:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d026:	4618      	mov	r0, r3
    d028:	3724      	adds	r7, #36	; 0x24
    d02a:	46bd      	mov	sp, r7
    d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d030:	4770      	bx	lr
    d032:	bf00      	nop
    d034:	40010080 	.word	0x40010080
    d038:	40010088 	.word	0x40010088
    d03c:	400100a0 	.word	0x400100a0

0000d040 <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d040:	b580      	push	{r7, lr}
    d042:	b086      	sub	sp, #24
    d044:	af00      	add	r7, sp, #0
    d046:	6078      	str	r0, [r7, #4]
    d048:	460b      	mov	r3, r1
    d04a:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d04c:	2300      	movs	r3, #0
    d04e:	617b      	str	r3, [r7, #20]

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	2b31      	cmp	r3, #49	; 0x31
    d054:	d901      	bls.n	d05a <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d056:	2305      	movs	r3, #5
    d058:	e068      	b.n	d12c <am_hal_gpio_state_write+0xec>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d05a:	78fb      	ldrb	r3, [r7, #3]
    d05c:	2b05      	cmp	r3, #5
    d05e:	d901      	bls.n	d064 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d060:	2306      	movs	r3, #6
    d062:	e063      	b.n	d12c <am_hal_gpio_state_write+0xec>
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d064:	687b      	ldr	r3, [r7, #4]
    d066:	f003 031f 	and.w	r3, r3, #31
    d06a:	2201      	movs	r2, #1
    d06c:	fa02 f303 	lsl.w	r3, r2, r3
    d070:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d072:	687b      	ldr	r3, [r7, #4]
    d074:	08db      	lsrs	r3, r3, #3
    d076:	f003 0304 	and.w	r3, r3, #4
    d07a:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d07c:	f002 fd00 	bl	fa80 <am_hal_interrupt_master_disable>
    d080:	4603      	mov	r3, r0
    d082:	60bb      	str	r3, [r7, #8]

    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    d084:	68fb      	ldr	r3, [r7, #12]
    d086:	089b      	lsrs	r3, r3, #2
    d088:	60fb      	str	r3, [r7, #12]
    switch ( eWriteType )
    d08a:	78fb      	ldrb	r3, [r7, #3]
    d08c:	2b05      	cmp	r3, #5
    d08e:	d845      	bhi.n	d11c <am_hal_gpio_state_write+0xdc>
    d090:	a201      	add	r2, pc, #4	; (adr r2, d098 <am_hal_gpio_state_write+0x58>)
    d092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d096:	bf00      	nop
    d098:	0000d0bf 	.word	0x0000d0bf
    d09c:	0000d0b1 	.word	0x0000d0b1
    d0a0:	0000d0cd 	.word	0x0000d0cd
    d0a4:	0000d0f5 	.word	0x0000d0f5
    d0a8:	0000d0e7 	.word	0x0000d0e7
    d0ac:	0000d103 	.word	0x0000d103
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    d0b0:	68fb      	ldr	r3, [r7, #12]
    d0b2:	009a      	lsls	r2, r3, #2
    d0b4:	4b1f      	ldr	r3, [pc, #124]	; (d134 <am_hal_gpio_state_write+0xf4>)
    d0b6:	4413      	add	r3, r2
    d0b8:	693a      	ldr	r2, [r7, #16]
    d0ba:	601a      	str	r2, [r3, #0]
            break;
    d0bc:	e031      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    d0be:	68fb      	ldr	r3, [r7, #12]
    d0c0:	009a      	lsls	r2, r3, #2
    d0c2:	4b1d      	ldr	r3, [pc, #116]	; (d138 <am_hal_gpio_state_write+0xf8>)
    d0c4:	4413      	add	r3, r2
    d0c6:	693a      	ldr	r2, [r7, #16]
    d0c8:	601a      	str	r2, [r3, #0]
            break;
    d0ca:	e02a      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    d0cc:	68fb      	ldr	r3, [r7, #12]
    d0ce:	009a      	lsls	r2, r3, #2
    d0d0:	4b1a      	ldr	r3, [pc, #104]	; (d13c <am_hal_gpio_state_write+0xfc>)
    d0d2:	4413      	add	r3, r2
    d0d4:	6819      	ldr	r1, [r3, #0]
    d0d6:	68fb      	ldr	r3, [r7, #12]
    d0d8:	009a      	lsls	r2, r3, #2
    d0da:	4b18      	ldr	r3, [pc, #96]	; (d13c <am_hal_gpio_state_write+0xfc>)
    d0dc:	4413      	add	r3, r2
    d0de:	693a      	ldr	r2, [r7, #16]
    d0e0:	404a      	eors	r2, r1
    d0e2:	601a      	str	r2, [r3, #0]
            break;
    d0e4:	e01d      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    d0e6:	68fb      	ldr	r3, [r7, #12]
    d0e8:	009a      	lsls	r2, r3, #2
    d0ea:	4b15      	ldr	r3, [pc, #84]	; (d140 <am_hal_gpio_state_write+0x100>)
    d0ec:	4413      	add	r3, r2
    d0ee:	693a      	ldr	r2, [r7, #16]
    d0f0:	601a      	str	r2, [r3, #0]
            break;
    d0f2:	e016      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    d0f4:	68fb      	ldr	r3, [r7, #12]
    d0f6:	009a      	lsls	r2, r3, #2
    d0f8:	4b12      	ldr	r3, [pc, #72]	; (d144 <am_hal_gpio_state_write+0x104>)
    d0fa:	4413      	add	r3, r2
    d0fc:	693a      	ldr	r2, [r7, #16]
    d0fe:	601a      	str	r2, [r3, #0]
            break;
    d100:	e00f      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    d102:	68fb      	ldr	r3, [r7, #12]
    d104:	009a      	lsls	r2, r3, #2
    d106:	4b0f      	ldr	r3, [pc, #60]	; (d144 <am_hal_gpio_state_write+0x104>)
    d108:	4413      	add	r3, r2
    d10a:	6819      	ldr	r1, [r3, #0]
    d10c:	68fb      	ldr	r3, [r7, #12]
    d10e:	009a      	lsls	r2, r3, #2
    d110:	4b0c      	ldr	r3, [pc, #48]	; (d144 <am_hal_gpio_state_write+0x104>)
    d112:	4413      	add	r3, r2
    d114:	693a      	ldr	r2, [r7, #16]
    d116:	404a      	eors	r2, r1
    d118:	601a      	str	r2, [r3, #0]
            break;
    d11a:	e002      	b.n	d122 <am_hal_gpio_state_write+0xe2>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d11c:	2306      	movs	r3, #6
    d11e:	617b      	str	r3, [r7, #20]
            break;
    d120:	bf00      	nop
    }

    AM_CRITICAL_END;
    d122:	68bb      	ldr	r3, [r7, #8]
    d124:	4618      	mov	r0, r3
    d126:	f002 fcaf 	bl	fa88 <am_hal_interrupt_master_set>

    return ui32Return;
    d12a:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d12c:	4618      	mov	r0, r3
    d12e:	3718      	adds	r7, #24
    d130:	46bd      	mov	sp, r7
    d132:	bd80      	pop	{r7, pc}
    d134:	40010090 	.word	0x40010090
    d138:	40010098 	.word	0x40010098
    d13c:	40010088 	.word	0x40010088
    d140:	400100a8 	.word	0x400100a8
    d144:	400100b4 	.word	0x400100b4

0000d148 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d148:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d14c:	b084      	sub	sp, #16
    d14e:	af00      	add	r7, sp, #0
    d150:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d154:	e9d7 3400 	ldrd	r3, r4, [r7]
    d158:	f04f 0100 	mov.w	r1, #0
    d15c:	4a17      	ldr	r2, [pc, #92]	; (d1bc <am_hal_gpio_interrupt_enable+0x74>)
    d15e:	ea03 0b01 	and.w	fp, r3, r1
    d162:	ea04 0c02 	and.w	ip, r4, r2
    d166:	ea5b 030c 	orrs.w	r3, fp, ip
    d16a:	d001      	beq.n	d170 <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d16c:	2305      	movs	r3, #5
    d16e:	e01f      	b.n	d1b0 <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d170:	f002 fc86 	bl	fa80 <am_hal_interrupt_master_disable>
    d174:	4603      	mov	r3, r0
    d176:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d178:	4b11      	ldr	r3, [pc, #68]	; (d1c0 <am_hal_gpio_interrupt_enable+0x78>)
    d17a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d17e:	683b      	ldr	r3, [r7, #0]
    d180:	490f      	ldr	r1, [pc, #60]	; (d1c0 <am_hal_gpio_interrupt_enable+0x78>)
    d182:	4313      	orrs	r3, r2
    d184:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d188:	4b0d      	ldr	r3, [pc, #52]	; (d1c0 <am_hal_gpio_interrupt_enable+0x78>)
    d18a:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d18e:	e9d7 1200 	ldrd	r1, r2, [r7]
    d192:	f04f 0300 	mov.w	r3, #0
    d196:	f04f 0400 	mov.w	r4, #0
    d19a:	0013      	movs	r3, r2
    d19c:	2400      	movs	r4, #0
    d19e:	4a08      	ldr	r2, [pc, #32]	; (d1c0 <am_hal_gpio_interrupt_enable+0x78>)
    d1a0:	4303      	orrs	r3, r0
    d1a2:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	4618      	mov	r0, r3
    d1aa:	f002 fc6d 	bl	fa88 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d1ae:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d1b0:	4618      	mov	r0, r3
    d1b2:	3710      	adds	r7, #16
    d1b4:	46bd      	mov	sp, r7
    d1b6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d1ba:	bf00      	nop
    d1bc:	fffc0000 	.word	0xfffc0000
    d1c0:	40010000 	.word	0x40010000

0000d1c4 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d1c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d1c8:	b084      	sub	sp, #16
    d1ca:	af00      	add	r7, sp, #0
    d1cc:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d1d0:	e9d7 3400 	ldrd	r3, r4, [r7]
    d1d4:	f04f 0100 	mov.w	r1, #0
    d1d8:	4a13      	ldr	r2, [pc, #76]	; (d228 <am_hal_gpio_interrupt_clear+0x64>)
    d1da:	ea03 0b01 	and.w	fp, r3, r1
    d1de:	ea04 0c02 	and.w	ip, r4, r2
    d1e2:	ea5b 030c 	orrs.w	r3, fp, ip
    d1e6:	d001      	beq.n	d1ec <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d1e8:	2305      	movs	r3, #5
    d1ea:	e017      	b.n	d21c <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d1ec:	f002 fc48 	bl	fa80 <am_hal_interrupt_master_disable>
    d1f0:	4603      	mov	r3, r0
    d1f2:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d1f4:	4a0d      	ldr	r2, [pc, #52]	; (d22c <am_hal_gpio_interrupt_clear+0x68>)
    d1f6:	683b      	ldr	r3, [r7, #0]
    d1f8:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d1fc:	e9d7 1200 	ldrd	r1, r2, [r7]
    d200:	f04f 0300 	mov.w	r3, #0
    d204:	f04f 0400 	mov.w	r4, #0
    d208:	0013      	movs	r3, r2
    d20a:	2400      	movs	r4, #0
    d20c:	4a07      	ldr	r2, [pc, #28]	; (d22c <am_hal_gpio_interrupt_clear+0x68>)
    d20e:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d212:	68fb      	ldr	r3, [r7, #12]
    d214:	4618      	mov	r0, r3
    d216:	f002 fc37 	bl	fa88 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d21a:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d21c:	4618      	mov	r0, r3
    d21e:	3710      	adds	r7, #16
    d220:	46bd      	mov	sp, r7
    d222:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d226:	bf00      	nop
    d228:	fffc0000 	.word	0xfffc0000
    d22c:	40010000 	.word	0x40010000

0000d230 <am_hal_gpio_interrupt_status_get>:
// Get GPIO interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_status_get(bool bEnabledOnly, uint64_t *pui64IntStatus)
{
    d230:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d234:	b088      	sub	sp, #32
    d236:	af00      	add	r7, sp, #0
    d238:	4603      	mov	r3, r0
    d23a:	6039      	str	r1, [r7, #0]
    d23c:	71fb      	strb	r3, [r7, #7]

    uint64_t ui64RetVal, ui64Mask;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
    d23e:	683b      	ldr	r3, [r7, #0]
    d240:	2b00      	cmp	r3, #0
    d242:	d101      	bne.n	d248 <am_hal_gpio_interrupt_status_get+0x18>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d244:	2306      	movs	r3, #6
    d246:	e058      	b.n	d2fa <am_hal_gpio_interrupt_status_get+0xca>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize variable outside critical section
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    d248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d24c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d250:	e9c7 3406 	strd	r3, r4, [r7, #24]

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
    d254:	f002 fc14 	bl	fa80 <am_hal_interrupt_master_disable>
    d258:	4603      	mov	r3, r0
    d25a:	60fb      	str	r3, [r7, #12]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
    d25c:	4b29      	ldr	r3, [pc, #164]	; (d304 <am_hal_gpio_interrupt_status_get+0xd4>)
    d25e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    d262:	4619      	mov	r1, r3
    d264:	f04f 0200 	mov.w	r2, #0
    d268:	f04f 0300 	mov.w	r3, #0
    d26c:	f04f 0400 	mov.w	r4, #0
    d270:	000c      	movs	r4, r1
    d272:	2300      	movs	r3, #0
    d274:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
    d278:	4b22      	ldr	r3, [pc, #136]	; (d304 <am_hal_gpio_interrupt_status_get+0xd4>)
    d27a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d27e:	469b      	mov	fp, r3
    d280:	f04f 0c00 	mov.w	ip, #0
    d284:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d288:	ea4b 0301 	orr.w	r3, fp, r1
    d28c:	ea4c 0402 	orr.w	r4, ip, r2
    d290:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if ( bEnabledOnly )
    d294:	79fb      	ldrb	r3, [r7, #7]
    d296:	2b00      	cmp	r3, #0
    d298:	d01b      	beq.n	d2d2 <am_hal_gpio_interrupt_status_get+0xa2>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
    d29a:	4b1a      	ldr	r3, [pc, #104]	; (d304 <am_hal_gpio_interrupt_status_get+0xd4>)
    d29c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d2a0:	4619      	mov	r1, r3
    d2a2:	f04f 0200 	mov.w	r2, #0
    d2a6:	f04f 0300 	mov.w	r3, #0
    d2aa:	f04f 0400 	mov.w	r4, #0
    d2ae:	000c      	movs	r4, r1
    d2b0:	2300      	movs	r3, #0
    d2b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
    d2b6:	4b13      	ldr	r3, [pc, #76]	; (d304 <am_hal_gpio_interrupt_status_get+0xd4>)
    d2b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d2bc:	469b      	mov	fp, r3
    d2be:	f04f 0c00 	mov.w	ip, #0
    d2c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d2c6:	ea4b 0301 	orr.w	r3, fp, r1
    d2ca:	ea4c 0402 	orr.w	r4, ip, r2
    d2ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }

    ui64RetVal &= ui64Mask;
    d2d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d2d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d2da:	ea03 0b01 	and.w	fp, r3, r1
    d2de:	ea04 0c02 	and.w	ip, r4, r2
    d2e2:	e9c7 bc04 	strd	fp, ip, [r7, #16]

    *pui64IntStatus = ui64RetVal;
    d2e6:	683a      	ldr	r2, [r7, #0]
    d2e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d2ec:	e9c2 3400 	strd	r3, r4, [r2]

    AM_CRITICAL_END
    d2f0:	68fb      	ldr	r3, [r7, #12]
    d2f2:	4618      	mov	r0, r3
    d2f4:	f002 fbc8 	bl	fa88 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d2f8:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_status_get()
    d2fa:	4618      	mov	r0, r3
    d2fc:	3720      	adds	r7, #32
    d2fe:	46bd      	mov	sp, r7
    d300:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d304:	40010000 	.word	0x40010000

0000d308 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d308:	b580      	push	{r7, lr}
    d30a:	b088      	sub	sp, #32
    d30c:	af00      	add	r7, sp, #0
    d30e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d310:	f107 030c 	add.w	r3, r7, #12
    d314:	4618      	mov	r0, r3
    d316:	f002 fa27 	bl	f768 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    d31a:	68fb      	ldr	r3, [r7, #12]
    d31c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d31e:	69fb      	ldr	r3, [r7, #28]
    d320:	4a07      	ldr	r2, [pc, #28]	; (d340 <am_util_delay_ms+0x38>)
    d322:	fba2 2303 	umull	r2, r3, r2, r3
    d326:	099a      	lsrs	r2, r3, #6
    d328:	687b      	ldr	r3, [r7, #4]
    d32a:	fb02 f303 	mul.w	r3, r2, r3
    d32e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d330:	69b8      	ldr	r0, [r7, #24]
    d332:	f002 fb71 	bl	fa18 <am_hal_flash_delay>
}
    d336:	bf00      	nop
    d338:	3720      	adds	r7, #32
    d33a:	46bd      	mov	sp, r7
    d33c:	bd80      	pop	{r7, pc}
    d33e:	bf00      	nop
    d340:	057619f1 	.word	0x057619f1

0000d344 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d344:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d346:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d34a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d34c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d350:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d354:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d358:	f000 f80a 	bl	d370 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d35c:	bd01      	pop	{r0, pc}
}
    d35e:	bf00      	nop
    d360:	4618      	mov	r0, r3

0000d362 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d362:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d364:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d366:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d368:	4770      	bx	lr
}
    d36a:	bf00      	nop
    d36c:	4618      	mov	r0, r3
	...

0000d370 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d370:	b580      	push	{r7, lr}
    d372:	b096      	sub	sp, #88	; 0x58
    d374:	af00      	add	r7, sp, #0
    d376:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d378:	f107 030c 	add.w	r3, r7, #12
    d37c:	2200      	movs	r2, #0
    d37e:	601a      	str	r2, [r3, #0]
    d380:	605a      	str	r2, [r3, #4]
    d382:	609a      	str	r2, [r3, #8]
    d384:	60da      	str	r2, [r3, #12]
    d386:	611a      	str	r2, [r3, #16]
    d388:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d38a:	2300      	movs	r3, #0
    d38c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d390:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d392:	4b2e      	ldr	r3, [pc, #184]	; (d44c <am_util_faultisr_collect_data+0xdc>)
    d394:	681b      	ldr	r3, [r3, #0]
    d396:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d39a:	b2db      	uxtb	r3, r3
    d39c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3a2:	0a1b      	lsrs	r3, r3, #8
    d3a4:	b2db      	uxtb	r3, r3
    d3a6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3ac:	0c1b      	lsrs	r3, r3, #16
    d3ae:	b29b      	uxth	r3, r3
    d3b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d3b4:	4b26      	ldr	r3, [pc, #152]	; (d450 <am_util_faultisr_collect_data+0xe0>)
    d3b6:	681b      	ldr	r3, [r3, #0]
    d3b8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d3ba:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d3be:	b2db      	uxtb	r3, r3
    d3c0:	f003 0302 	and.w	r3, r3, #2
    d3c4:	2b00      	cmp	r3, #0
    d3c6:	d005      	beq.n	d3d4 <am_util_faultisr_collect_data+0x64>
    d3c8:	6879      	ldr	r1, [r7, #4]
    d3ca:	2006      	movs	r0, #6
    d3cc:	f7ff ffc9 	bl	d362 <getStackedReg>
    d3d0:	4603      	mov	r3, r0
    d3d2:	e001      	b.n	d3d8 <am_util_faultisr_collect_data+0x68>
    d3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3d8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d3da:	6879      	ldr	r1, [r7, #4]
    d3dc:	2000      	movs	r0, #0
    d3de:	f7ff ffc0 	bl	d362 <getStackedReg>
    d3e2:	4603      	mov	r3, r0
    d3e4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d3e6:	6879      	ldr	r1, [r7, #4]
    d3e8:	2001      	movs	r0, #1
    d3ea:	f7ff ffba 	bl	d362 <getStackedReg>
    d3ee:	4603      	mov	r3, r0
    d3f0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d3f2:	6879      	ldr	r1, [r7, #4]
    d3f4:	2002      	movs	r0, #2
    d3f6:	f7ff ffb4 	bl	d362 <getStackedReg>
    d3fa:	4603      	mov	r3, r0
    d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d3fe:	6879      	ldr	r1, [r7, #4]
    d400:	2003      	movs	r0, #3
    d402:	f7ff ffae 	bl	d362 <getStackedReg>
    d406:	4603      	mov	r3, r0
    d408:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d40a:	6879      	ldr	r1, [r7, #4]
    d40c:	2004      	movs	r0, #4
    d40e:	f7ff ffa8 	bl	d362 <getStackedReg>
    d412:	4603      	mov	r3, r0
    d414:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d416:	6879      	ldr	r1, [r7, #4]
    d418:	2005      	movs	r0, #5
    d41a:	f7ff ffa2 	bl	d362 <getStackedReg>
    d41e:	4603      	mov	r3, r0
    d420:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d422:	6879      	ldr	r1, [r7, #4]
    d424:	2006      	movs	r0, #6
    d426:	f7ff ff9c 	bl	d362 <getStackedReg>
    d42a:	4603      	mov	r3, r0
    d42c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d42e:	6879      	ldr	r1, [r7, #4]
    d430:	2007      	movs	r0, #7
    d432:	f7ff ff96 	bl	d362 <getStackedReg>
    d436:	4603      	mov	r3, r0
    d438:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d43a:	f107 030c 	add.w	r3, r7, #12
    d43e:	4619      	mov	r1, r3
    d440:	2002      	movs	r0, #2
    d442:	f002 fb7b 	bl	fb3c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d446:	2300      	movs	r3, #0
    d448:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d44a:	e7fe      	b.n	d44a <am_util_faultisr_collect_data+0xda>
    d44c:	e000ed28 	.word	0xe000ed28
    d450:	e000ed38 	.word	0xe000ed38

0000d454 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d454:	b480      	push	{r7}
    d456:	b083      	sub	sp, #12
    d458:	af00      	add	r7, sp, #0
    d45a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d45c:	4a04      	ldr	r2, [pc, #16]	; (d470 <am_util_stdio_printf_init+0x1c>)
    d45e:	687b      	ldr	r3, [r7, #4]
    d460:	6013      	str	r3, [r2, #0]
}
    d462:	bf00      	nop
    d464:	370c      	adds	r7, #12
    d466:	46bd      	mov	sp, r7
    d468:	f85d 7b04 	ldr.w	r7, [sp], #4
    d46c:	4770      	bx	lr
    d46e:	bf00      	nop
    d470:	1000c188 	.word	0x1000c188

0000d474 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d474:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d478:	b08b      	sub	sp, #44	; 0x2c
    d47a:	af00      	add	r7, sp, #0
    d47c:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d480:	e9d7 1200 	ldrd	r1, r2, [r7]
    d484:	f04f 0300 	mov.w	r3, #0
    d488:	f04f 0400 	mov.w	r4, #0
    d48c:	0013      	movs	r3, r2
    d48e:	2400      	movs	r4, #0
    d490:	4323      	orrs	r3, r4
    d492:	f000 809d 	beq.w	d5d0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d496:	e9d7 3400 	ldrd	r3, r4, [r7]
    d49a:	0866      	lsrs	r6, r4, #1
    d49c:	ea4f 0533 	mov.w	r5, r3, rrx
    d4a0:	e9d7 1200 	ldrd	r1, r2, [r7]
    d4a4:	f04f 0b00 	mov.w	fp, #0
    d4a8:	f04f 0c00 	mov.w	ip, #0
    d4ac:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d4b0:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d4b4:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d4b8:	eb1b 0305 	adds.w	r3, fp, r5
    d4bc:	eb4c 0406 	adc.w	r4, ip, r6
    d4c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d4c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4c8:	f04f 0500 	mov.w	r5, #0
    d4cc:	f04f 0600 	mov.w	r6, #0
    d4d0:	090d      	lsrs	r5, r1, #4
    d4d2:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d4d6:	0916      	lsrs	r6, r2, #4
    d4d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4dc:	186b      	adds	r3, r5, r1
    d4de:	eb46 0402 	adc.w	r4, r6, r2
    d4e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d4e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4ea:	f04f 0500 	mov.w	r5, #0
    d4ee:	f04f 0600 	mov.w	r6, #0
    d4f2:	0a0d      	lsrs	r5, r1, #8
    d4f4:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d4f8:	0a16      	lsrs	r6, r2, #8
    d4fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4fe:	186b      	adds	r3, r5, r1
    d500:	eb46 0402 	adc.w	r4, r6, r2
    d504:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d508:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d50c:	f04f 0500 	mov.w	r5, #0
    d510:	f04f 0600 	mov.w	r6, #0
    d514:	0c0d      	lsrs	r5, r1, #16
    d516:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d51a:	0c16      	lsrs	r6, r2, #16
    d51c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d520:	186b      	adds	r3, r5, r1
    d522:	eb46 0402 	adc.w	r4, r6, r2
    d526:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d52a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d52e:	f04f 0500 	mov.w	r5, #0
    d532:	f04f 0600 	mov.w	r6, #0
    d536:	0015      	movs	r5, r2
    d538:	2600      	movs	r6, #0
    d53a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d53e:	186b      	adds	r3, r5, r1
    d540:	eb46 0402 	adc.w	r4, r6, r2
    d544:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d548:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d54c:	f04f 0300 	mov.w	r3, #0
    d550:	f04f 0400 	mov.w	r4, #0
    d554:	08cb      	lsrs	r3, r1, #3
    d556:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d55a:	08d4      	lsrs	r4, r2, #3
    d55c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d560:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d564:	46ab      	mov	fp, r5
    d566:	46b4      	mov	ip, r6
    d568:	f04f 0100 	mov.w	r1, #0
    d56c:	f04f 0200 	mov.w	r2, #0
    d570:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d574:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d578:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d57c:	468b      	mov	fp, r1
    d57e:	4694      	mov	ip, r2
    d580:	eb1b 0b05 	adds.w	fp, fp, r5
    d584:	eb4c 0c06 	adc.w	ip, ip, r6
    d588:	eb1b 030b 	adds.w	r3, fp, fp
    d58c:	eb4c 040c 	adc.w	r4, ip, ip
    d590:	469b      	mov	fp, r3
    d592:	46a4      	mov	ip, r4
    d594:	4659      	mov	r1, fp
    d596:	4662      	mov	r2, ip
    d598:	e9d7 3400 	ldrd	r3, r4, [r7]
    d59c:	1a5b      	subs	r3, r3, r1
    d59e:	eb64 0402 	sbc.w	r4, r4, r2
    d5a2:	461d      	mov	r5, r3
    d5a4:	4626      	mov	r6, r4
    d5a6:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d5aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d5ae:	1d99      	adds	r1, r3, #6
    d5b0:	f144 0200 	adc.w	r2, r4, #0
    d5b4:	f04f 0500 	mov.w	r5, #0
    d5b8:	f04f 0600 	mov.w	r6, #0
    d5bc:	090d      	lsrs	r5, r1, #4
    d5be:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d5c2:	0916      	lsrs	r6, r2, #4
    d5c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5c8:	186b      	adds	r3, r5, r1
    d5ca:	eb46 0402 	adc.w	r4, r6, r2
    d5ce:	e029      	b.n	d624 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d5d0:	683b      	ldr	r3, [r7, #0]
    d5d2:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5d6:	085a      	lsrs	r2, r3, #1
    d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5da:	089b      	lsrs	r3, r3, #2
    d5dc:	4413      	add	r3, r2
    d5de:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d5e0:	6a3b      	ldr	r3, [r7, #32]
    d5e2:	091b      	lsrs	r3, r3, #4
    d5e4:	6a3a      	ldr	r2, [r7, #32]
    d5e6:	4413      	add	r3, r2
    d5e8:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d5ea:	6a3b      	ldr	r3, [r7, #32]
    d5ec:	0a1b      	lsrs	r3, r3, #8
    d5ee:	6a3a      	ldr	r2, [r7, #32]
    d5f0:	4413      	add	r3, r2
    d5f2:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d5f4:	6a3b      	ldr	r3, [r7, #32]
    d5f6:	0c1b      	lsrs	r3, r3, #16
    d5f8:	6a3a      	ldr	r2, [r7, #32]
    d5fa:	4413      	add	r3, r2
    d5fc:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d5fe:	6a3b      	ldr	r3, [r7, #32]
    d600:	08db      	lsrs	r3, r3, #3
    d602:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d604:	6a3a      	ldr	r2, [r7, #32]
    d606:	4613      	mov	r3, r2
    d608:	009b      	lsls	r3, r3, #2
    d60a:	4413      	add	r3, r2
    d60c:	005b      	lsls	r3, r3, #1
    d60e:	461a      	mov	r2, r3
    d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d612:	1a9b      	subs	r3, r3, r2
    d614:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d616:	69fb      	ldr	r3, [r7, #28]
    d618:	3306      	adds	r3, #6
    d61a:	091a      	lsrs	r2, r3, #4
    d61c:	6a3b      	ldr	r3, [r7, #32]
    d61e:	4413      	add	r3, r2
    d620:	f04f 0400 	mov.w	r4, #0
    }
}
    d624:	4618      	mov	r0, r3
    d626:	4621      	mov	r1, r4
    d628:	372c      	adds	r7, #44	; 0x2c
    d62a:	46bd      	mov	sp, r7
    d62c:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d630:	4770      	bx	lr

0000d632 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d632:	b590      	push	{r4, r7, lr}
    d634:	b085      	sub	sp, #20
    d636:	af00      	add	r7, sp, #0
    d638:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d63c:	683a      	ldr	r2, [r7, #0]
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	4313      	orrs	r3, r2
    d642:	2b00      	cmp	r3, #0
    d644:	bf0c      	ite	eq
    d646:	2301      	moveq	r3, #1
    d648:	2300      	movne	r3, #0
    d64a:	b2db      	uxtb	r3, r3
    d64c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d64e:	e008      	b.n	d662 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d650:	e9d7 0100 	ldrd	r0, r1, [r7]
    d654:	f7ff ff0e 	bl	d474 <divu64_10>
    d658:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d65c:	68fb      	ldr	r3, [r7, #12]
    d65e:	3301      	adds	r3, #1
    d660:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d662:	e9d7 3400 	ldrd	r3, r4, [r7]
    d666:	4323      	orrs	r3, r4
    d668:	d1f2      	bne.n	d650 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d66a:	68fb      	ldr	r3, [r7, #12]
}
    d66c:	4618      	mov	r0, r3
    d66e:	3714      	adds	r7, #20
    d670:	46bd      	mov	sp, r7
    d672:	bd90      	pop	{r4, r7, pc}

0000d674 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d674:	b590      	push	{r4, r7, lr}
    d676:	b083      	sub	sp, #12
    d678:	af00      	add	r7, sp, #0
    d67a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d67e:	e9d7 3400 	ldrd	r3, r4, [r7]
    d682:	2b00      	cmp	r3, #0
    d684:	f174 0300 	sbcs.w	r3, r4, #0
    d688:	da06      	bge.n	d698 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d68a:	e9d7 3400 	ldrd	r3, r4, [r7]
    d68e:	425b      	negs	r3, r3
    d690:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d694:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d698:	e9d7 3400 	ldrd	r3, r4, [r7]
    d69c:	4618      	mov	r0, r3
    d69e:	4621      	mov	r1, r4
    d6a0:	f7ff ffc7 	bl	d632 <ndigits_in_u64>
    d6a4:	4603      	mov	r3, r0
}
    d6a6:	4618      	mov	r0, r3
    d6a8:	370c      	adds	r7, #12
    d6aa:	46bd      	mov	sp, r7
    d6ac:	bd90      	pop	{r4, r7, pc}

0000d6ae <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d6ae:	b490      	push	{r4, r7}
    d6b0:	b084      	sub	sp, #16
    d6b2:	af00      	add	r7, sp, #0
    d6b4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d6b8:	683a      	ldr	r2, [r7, #0]
    d6ba:	687b      	ldr	r3, [r7, #4]
    d6bc:	4313      	orrs	r3, r2
    d6be:	2b00      	cmp	r3, #0
    d6c0:	bf0c      	ite	eq
    d6c2:	2301      	moveq	r3, #1
    d6c4:	2300      	movne	r3, #0
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d6ca:	e00e      	b.n	d6ea <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    d6cc:	e9d7 1200 	ldrd	r1, r2, [r7]
    d6d0:	f04f 0300 	mov.w	r3, #0
    d6d4:	f04f 0400 	mov.w	r4, #0
    d6d8:	090b      	lsrs	r3, r1, #4
    d6da:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d6de:	0914      	lsrs	r4, r2, #4
    d6e0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    d6e4:	68fb      	ldr	r3, [r7, #12]
    d6e6:	3301      	adds	r3, #1
    d6e8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d6ea:	e9d7 3400 	ldrd	r3, r4, [r7]
    d6ee:	4323      	orrs	r3, r4
    d6f0:	d1ec      	bne.n	d6cc <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d6f2:	68fb      	ldr	r3, [r7, #12]
}
    d6f4:	4618      	mov	r0, r3
    d6f6:	3710      	adds	r7, #16
    d6f8:	46bd      	mov	sp, r7
    d6fa:	bc90      	pop	{r4, r7}
    d6fc:	4770      	bx	lr

0000d6fe <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d6fe:	b480      	push	{r7}
    d700:	b087      	sub	sp, #28
    d702:	af00      	add	r7, sp, #0
    d704:	6078      	str	r0, [r7, #4]
    d706:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d708:	2300      	movs	r3, #0
    d70a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d70c:	2300      	movs	r3, #0
    d70e:	613b      	str	r3, [r7, #16]
    d710:	2300      	movs	r3, #0
    d712:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d714:	687b      	ldr	r3, [r7, #4]
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	2b2d      	cmp	r3, #45	; 0x2d
    d71a:	d11b      	bne.n	d754 <decstr_to_int+0x56>
    {
        bNeg = true;
    d71c:	2301      	movs	r3, #1
    d71e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d720:	687b      	ldr	r3, [r7, #4]
    d722:	3301      	adds	r3, #1
    d724:	607b      	str	r3, [r7, #4]
        uCnt++;
    d726:	68fb      	ldr	r3, [r7, #12]
    d728:	3301      	adds	r3, #1
    d72a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d72c:	e012      	b.n	d754 <decstr_to_int+0x56>
    {
        ++uCnt;
    d72e:	68fb      	ldr	r3, [r7, #12]
    d730:	3301      	adds	r3, #1
    d732:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d734:	693a      	ldr	r2, [r7, #16]
    d736:	4613      	mov	r3, r2
    d738:	009b      	lsls	r3, r3, #2
    d73a:	4413      	add	r3, r2
    d73c:	005b      	lsls	r3, r3, #1
    d73e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d740:	687b      	ldr	r3, [r7, #4]
    d742:	781b      	ldrb	r3, [r3, #0]
    d744:	461a      	mov	r2, r3
    d746:	693b      	ldr	r3, [r7, #16]
    d748:	4413      	add	r3, r2
    d74a:	3b30      	subs	r3, #48	; 0x30
    d74c:	613b      	str	r3, [r7, #16]
        pcStr++;
    d74e:	687b      	ldr	r3, [r7, #4]
    d750:	3301      	adds	r3, #1
    d752:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d754:	687b      	ldr	r3, [r7, #4]
    d756:	781b      	ldrb	r3, [r3, #0]
    d758:	2b2f      	cmp	r3, #47	; 0x2f
    d75a:	d903      	bls.n	d764 <decstr_to_int+0x66>
    d75c:	687b      	ldr	r3, [r7, #4]
    d75e:	781b      	ldrb	r3, [r3, #0]
    d760:	2b39      	cmp	r3, #57	; 0x39
    d762:	d9e4      	bls.n	d72e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d764:	683b      	ldr	r3, [r7, #0]
    d766:	2b00      	cmp	r3, #0
    d768:	d002      	beq.n	d770 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d76a:	683b      	ldr	r3, [r7, #0]
    d76c:	68fa      	ldr	r2, [r7, #12]
    d76e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d770:	7dfb      	ldrb	r3, [r7, #23]
    d772:	2b00      	cmp	r3, #0
    d774:	d002      	beq.n	d77c <decstr_to_int+0x7e>
    d776:	693b      	ldr	r3, [r7, #16]
    d778:	425b      	negs	r3, r3
    d77a:	e000      	b.n	d77e <decstr_to_int+0x80>
    d77c:	693b      	ldr	r3, [r7, #16]
}
    d77e:	4618      	mov	r0, r3
    d780:	371c      	adds	r7, #28
    d782:	46bd      	mov	sp, r7
    d784:	f85d 7b04 	ldr.w	r7, [sp], #4
    d788:	4770      	bx	lr

0000d78a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d78a:	b590      	push	{r4, r7, lr}
    d78c:	b091      	sub	sp, #68	; 0x44
    d78e:	af00      	add	r7, sp, #0
    d790:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d794:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d796:	2300      	movs	r3, #0
    d798:	63fb      	str	r3, [r7, #60]	; 0x3c
    d79a:	2300      	movs	r3, #0
    d79c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d79e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d7a2:	f7ff fe67 	bl	d474 <divu64_10>
    d7a6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d7aa:	68b9      	ldr	r1, [r7, #8]
    d7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7ae:	4613      	mov	r3, r2
    d7b0:	009b      	lsls	r3, r3, #2
    d7b2:	4413      	add	r3, r2
    d7b4:	005b      	lsls	r3, r3, #1
    d7b6:	1acb      	subs	r3, r1, r3
    d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7bc:	b2da      	uxtb	r2, r3
    d7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7c0:	1c59      	adds	r1, r3, #1
    d7c2:	63f9      	str	r1, [r7, #60]	; 0x3c
    d7c4:	3230      	adds	r2, #48	; 0x30
    d7c6:	b2d2      	uxtb	r2, r2
    d7c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d7cc:	440b      	add	r3, r1
    d7ce:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d7d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d7d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d7da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d7de:	4323      	orrs	r3, r4
    d7e0:	d1dd      	bne.n	d79e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7e4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d7e6:	687b      	ldr	r3, [r7, #4]
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d011      	beq.n	d810 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d7ec:	e008      	b.n	d800 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	1c5a      	adds	r2, r3, #1
    d7f2:	607a      	str	r2, [r7, #4]
    d7f4:	f107 0110 	add.w	r1, r7, #16
    d7f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d7fa:	440a      	add	r2, r1
    d7fc:	7812      	ldrb	r2, [r2, #0]
    d7fe:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d802:	1e5a      	subs	r2, r3, #1
    d804:	63fa      	str	r2, [r7, #60]	; 0x3c
    d806:	2b00      	cmp	r3, #0
    d808:	d1f1      	bne.n	d7ee <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d80a:	687b      	ldr	r3, [r7, #4]
    d80c:	2200      	movs	r2, #0
    d80e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d812:	4618      	mov	r0, r3
    d814:	3744      	adds	r7, #68	; 0x44
    d816:	46bd      	mov	sp, r7
    d818:	bd90      	pop	{r4, r7, pc}

0000d81a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d81a:	b490      	push	{r4, r7}
    d81c:	b08c      	sub	sp, #48	; 0x30
    d81e:	af00      	add	r7, sp, #0
    d820:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d824:	607a      	str	r2, [r7, #4]
    d826:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d828:	2300      	movs	r3, #0
    d82a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d82c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d830:	4323      	orrs	r3, r4
    d832:	d135      	bne.n	d8a0 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d836:	1c5a      	adds	r2, r3, #1
    d838:	62fa      	str	r2, [r7, #44]	; 0x2c
    d83a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d83e:	4413      	add	r3, r2
    d840:	2230      	movs	r2, #48	; 0x30
    d842:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d846:	e02b      	b.n	d8a0 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    d848:	7a3b      	ldrb	r3, [r7, #8]
    d84a:	f003 030f 	and.w	r3, r3, #15
    d84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d856:	2b09      	cmp	r3, #9
    d858:	d90a      	bls.n	d870 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d85a:	78fb      	ldrb	r3, [r7, #3]
    d85c:	2b00      	cmp	r3, #0
    d85e:	d001      	beq.n	d864 <uint64_to_hexstr+0x4a>
    d860:	2227      	movs	r2, #39	; 0x27
    d862:	e000      	b.n	d866 <uint64_to_hexstr+0x4c>
    d864:	2207      	movs	r2, #7
    d866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d86a:	4413      	add	r3, r2
    d86c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d872:	1c5a      	adds	r2, r3, #1
    d874:	62fa      	str	r2, [r7, #44]	; 0x2c
    d876:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d87a:	3230      	adds	r2, #48	; 0x30
    d87c:	b2d2      	uxtb	r2, r2
    d87e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d882:	440b      	add	r3, r1
    d884:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d888:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    d88c:	f04f 0300 	mov.w	r3, #0
    d890:	f04f 0400 	mov.w	r4, #0
    d894:	090b      	lsrs	r3, r1, #4
    d896:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d89a:	0914      	lsrs	r4, r2, #4
    d89c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    d8a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d8a4:	4323      	orrs	r3, r4
    d8a6:	d1cf      	bne.n	d848 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8aa:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d8ac:	687b      	ldr	r3, [r7, #4]
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d011      	beq.n	d8d6 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    d8b2:	e008      	b.n	d8c6 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	1c5a      	adds	r2, r3, #1
    d8b8:	607a      	str	r2, [r7, #4]
    d8ba:	f107 0110 	add.w	r1, r7, #16
    d8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d8c0:	440a      	add	r2, r1
    d8c2:	7812      	ldrb	r2, [r2, #0]
    d8c4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8c8:	1e5a      	subs	r2, r3, #1
    d8ca:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8cc:	2b00      	cmp	r3, #0
    d8ce:	d1f1      	bne.n	d8b4 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d8d0:	687b      	ldr	r3, [r7, #4]
    d8d2:	2200      	movs	r2, #0
    d8d4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d8d8:	4618      	mov	r0, r3
    d8da:	3730      	adds	r7, #48	; 0x30
    d8dc:	46bd      	mov	sp, r7
    d8de:	bc90      	pop	{r4, r7}
    d8e0:	4770      	bx	lr

0000d8e2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d8e2:	b480      	push	{r7}
    d8e4:	b085      	sub	sp, #20
    d8e6:	af00      	add	r7, sp, #0
    d8e8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d8ea:	2300      	movs	r3, #0
    d8ec:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d8ee:	687b      	ldr	r3, [r7, #4]
    d8f0:	2b00      	cmp	r3, #0
    d8f2:	d104      	bne.n	d8fe <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d8f4:	68fb      	ldr	r3, [r7, #12]
    d8f6:	e009      	b.n	d90c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d8f8:	68fb      	ldr	r3, [r7, #12]
    d8fa:	3301      	adds	r3, #1
    d8fc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	1c5a      	adds	r2, r3, #1
    d902:	607a      	str	r2, [r7, #4]
    d904:	781b      	ldrb	r3, [r3, #0]
    d906:	2b00      	cmp	r3, #0
    d908:	d1f6      	bne.n	d8f8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d90a:	68fb      	ldr	r3, [r7, #12]
}
    d90c:	4618      	mov	r0, r3
    d90e:	3714      	adds	r7, #20
    d910:	46bd      	mov	sp, r7
    d912:	f85d 7b04 	ldr.w	r7, [sp], #4
    d916:	4770      	bx	lr

0000d918 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d918:	b480      	push	{r7}
    d91a:	b087      	sub	sp, #28
    d91c:	af00      	add	r7, sp, #0
    d91e:	60f8      	str	r0, [r7, #12]
    d920:	460b      	mov	r3, r1
    d922:	607a      	str	r2, [r7, #4]
    d924:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d926:	2300      	movs	r3, #0
    d928:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d92a:	687b      	ldr	r3, [r7, #4]
    d92c:	2b00      	cmp	r3, #0
    d92e:	dc0c      	bgt.n	d94a <padbuffer+0x32>
    {
        return i32Cnt;
    d930:	697b      	ldr	r3, [r7, #20]
    d932:	e010      	b.n	d956 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d934:	68fb      	ldr	r3, [r7, #12]
    d936:	2b00      	cmp	r3, #0
    d938:	d004      	beq.n	d944 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d93a:	68fb      	ldr	r3, [r7, #12]
    d93c:	1c5a      	adds	r2, r3, #1
    d93e:	60fa      	str	r2, [r7, #12]
    d940:	7afa      	ldrb	r2, [r7, #11]
    d942:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d944:	697b      	ldr	r3, [r7, #20]
    d946:	3301      	adds	r3, #1
    d948:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d94a:	687b      	ldr	r3, [r7, #4]
    d94c:	1e5a      	subs	r2, r3, #1
    d94e:	607a      	str	r2, [r7, #4]
    d950:	2b00      	cmp	r3, #0
    d952:	d1ef      	bne.n	d934 <padbuffer+0x1c>
    }

    return i32Cnt;
    d954:	697b      	ldr	r3, [r7, #20]
}
    d956:	4618      	mov	r0, r3
    d958:	371c      	adds	r7, #28
    d95a:	46bd      	mov	sp, r7
    d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d960:	4770      	bx	lr
	...

0000d964 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d964:	b590      	push	{r4, r7, lr}
    d966:	b08f      	sub	sp, #60	; 0x3c
    d968:	af00      	add	r7, sp, #0
    d96a:	ed87 0a03 	vstr	s0, [r7, #12]
    d96e:	60b8      	str	r0, [r7, #8]
    d970:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d972:	68bb      	ldr	r3, [r7, #8]
    d974:	681b      	ldr	r3, [r3, #0]
    d976:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d97a:	2b03      	cmp	r3, #3
    d97c:	dc02      	bgt.n	d984 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d97e:	f06f 0302 	mvn.w	r3, #2
    d982:	e0e7      	b.n	db54 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    d984:	edd7 7a03 	vldr	s15, [r7, #12]
    d988:	eef5 7a40 	vcmp.f32	s15, #0.0
    d98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d990:	d104      	bne.n	d99c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d992:	68bb      	ldr	r3, [r7, #8]
    d994:	4a71      	ldr	r2, [pc, #452]	; (db5c <ftoa+0x1f8>)
    d996:	601a      	str	r2, [r3, #0]
        return 3;
    d998:	2303      	movs	r3, #3
    d99a:	e0db      	b.n	db54 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    d99c:	68bb      	ldr	r3, [r7, #8]
    d99e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d9a0:	68fb      	ldr	r3, [r7, #12]
    d9a2:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d9a4:	693b      	ldr	r3, [r7, #16]
    d9a6:	15db      	asrs	r3, r3, #23
    d9a8:	b2db      	uxtb	r3, r3
    d9aa:	3b7f      	subs	r3, #127	; 0x7f
    d9ac:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d9ae:	693b      	ldr	r3, [r7, #16]
    d9b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d9b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d9b8:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d9ba:	2300      	movs	r3, #0
    d9bc:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d9be:	2300      	movs	r3, #0
    d9c0:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d9c2:	69fb      	ldr	r3, [r7, #28]
    d9c4:	2b1e      	cmp	r3, #30
    d9c6:	dd02      	ble.n	d9ce <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d9c8:	f06f 0301 	mvn.w	r3, #1
    d9cc:	e0c2      	b.n	db54 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    d9ce:	69fb      	ldr	r3, [r7, #28]
    d9d0:	f113 0f17 	cmn.w	r3, #23
    d9d4:	da02      	bge.n	d9dc <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9da:	e0bb      	b.n	db54 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    d9dc:	69fb      	ldr	r3, [r7, #28]
    d9de:	2b16      	cmp	r3, #22
    d9e0:	dd06      	ble.n	d9f0 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d9e2:	69fb      	ldr	r3, [r7, #28]
    d9e4:	3b17      	subs	r3, #23
    d9e6:	69ba      	ldr	r2, [r7, #24]
    d9e8:	fa02 f303 	lsl.w	r3, r2, r3
    d9ec:	637b      	str	r3, [r7, #52]	; 0x34
    d9ee:	e01a      	b.n	da26 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    d9f0:	69fb      	ldr	r3, [r7, #28]
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	db0f      	blt.n	da16 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d9f6:	69fb      	ldr	r3, [r7, #28]
    d9f8:	f1c3 0317 	rsb	r3, r3, #23
    d9fc:	69ba      	ldr	r2, [r7, #24]
    d9fe:	fa42 f303 	asr.w	r3, r2, r3
    da02:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    da04:	69fb      	ldr	r3, [r7, #28]
    da06:	3301      	adds	r3, #1
    da08:	69ba      	ldr	r2, [r7, #24]
    da0a:	fa02 f303 	lsl.w	r3, r2, r3
    da0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da12:	633b      	str	r3, [r7, #48]	; 0x30
    da14:	e007      	b.n	da26 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    da16:	69bb      	ldr	r3, [r7, #24]
    da18:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    da1c:	69fb      	ldr	r3, [r7, #28]
    da1e:	43db      	mvns	r3, r3
    da20:	fa42 f303 	asr.w	r3, r2, r3
    da24:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    da26:	693b      	ldr	r3, [r7, #16]
    da28:	2b00      	cmp	r3, #0
    da2a:	da04      	bge.n	da36 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    da2c:	68bb      	ldr	r3, [r7, #8]
    da2e:	1c5a      	adds	r2, r3, #1
    da30:	60ba      	str	r2, [r7, #8]
    da32:	222d      	movs	r2, #45	; 0x2d
    da34:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    da36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da38:	2b00      	cmp	r3, #0
    da3a:	d105      	bne.n	da48 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    da3c:	68bb      	ldr	r3, [r7, #8]
    da3e:	1c5a      	adds	r2, r3, #1
    da40:	60ba      	str	r2, [r7, #8]
    da42:	2230      	movs	r2, #48	; 0x30
    da44:	701a      	strb	r2, [r3, #0]
    da46:	e021      	b.n	da8c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da4a:	2b00      	cmp	r3, #0
    da4c:	dd08      	ble.n	da60 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    da4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da50:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da54:	68ba      	ldr	r2, [r7, #8]
    da56:	4618      	mov	r0, r3
    da58:	4621      	mov	r1, r4
    da5a:	f7ff fe96 	bl	d78a <uint64_to_str>
    da5e:	e011      	b.n	da84 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    da60:	68bb      	ldr	r3, [r7, #8]
    da62:	1c5a      	adds	r2, r3, #1
    da64:	60ba      	str	r2, [r7, #8]
    da66:	222d      	movs	r2, #45	; 0x2d
    da68:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    da6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da6c:	425b      	negs	r3, r3
    da6e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da72:	68ba      	ldr	r2, [r7, #8]
    da74:	4618      	mov	r0, r3
    da76:	4621      	mov	r1, r4
    da78:	f7ff fe87 	bl	d78a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    da7c:	e002      	b.n	da84 <ftoa+0x120>
        {
            pcBuf++;
    da7e:	68bb      	ldr	r3, [r7, #8]
    da80:	3301      	adds	r3, #1
    da82:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    da84:	68bb      	ldr	r3, [r7, #8]
    da86:	781b      	ldrb	r3, [r3, #0]
    da88:	2b00      	cmp	r3, #0
    da8a:	d1f8      	bne.n	da7e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    da8c:	68bb      	ldr	r3, [r7, #8]
    da8e:	1c5a      	adds	r2, r3, #1
    da90:	60ba      	str	r2, [r7, #8]
    da92:	222e      	movs	r2, #46	; 0x2e
    da94:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    da98:	2b00      	cmp	r3, #0
    da9a:	d105      	bne.n	daa8 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    da9c:	68bb      	ldr	r3, [r7, #8]
    da9e:	1c5a      	adds	r2, r3, #1
    daa0:	60ba      	str	r2, [r7, #8]
    daa2:	2230      	movs	r2, #48	; 0x30
    daa4:	701a      	strb	r2, [r3, #0]
    daa6:	e04f      	b.n	db48 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    daa8:	68ba      	ldr	r2, [r7, #8]
    daaa:	6a3b      	ldr	r3, [r7, #32]
    daac:	1ad3      	subs	r3, r2, r3
    daae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dab0:	1ad3      	subs	r3, r2, r3
    dab2:	3b01      	subs	r3, #1
    dab4:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    dab6:	697a      	ldr	r2, [r7, #20]
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	4293      	cmp	r3, r2
    dabc:	bfa8      	it	ge
    dabe:	4613      	movge	r3, r2
    dac0:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    dac2:	2300      	movs	r3, #0
    dac4:	62bb      	str	r3, [r7, #40]	; 0x28
    dac6:	e015      	b.n	daf4 <ftoa+0x190>
        {
            i32FracPart *= 10;
    dac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    daca:	4613      	mov	r3, r2
    dacc:	009b      	lsls	r3, r3, #2
    dace:	4413      	add	r3, r2
    dad0:	005b      	lsls	r3, r3, #1
    dad2:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dad6:	161b      	asrs	r3, r3, #24
    dad8:	b2da      	uxtb	r2, r3
    dada:	68bb      	ldr	r3, [r7, #8]
    dadc:	1c59      	adds	r1, r3, #1
    dade:	60b9      	str	r1, [r7, #8]
    dae0:	3230      	adds	r2, #48	; 0x30
    dae2:	b2d2      	uxtb	r2, r2
    dae4:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    daec:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    daf0:	3301      	adds	r3, #1
    daf2:	62bb      	str	r3, [r7, #40]	; 0x28
    daf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    daf6:	697b      	ldr	r3, [r7, #20]
    daf8:	429a      	cmp	r2, r3
    dafa:	dbe5      	blt.n	dac8 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    dafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dafe:	4613      	mov	r3, r2
    db00:	009b      	lsls	r3, r3, #2
    db02:	4413      	add	r3, r2
    db04:	005b      	lsls	r3, r3, #1
    db06:	161b      	asrs	r3, r3, #24
    db08:	2b04      	cmp	r3, #4
    db0a:	dd1d      	ble.n	db48 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    db0c:	68bb      	ldr	r3, [r7, #8]
    db0e:	3b01      	subs	r3, #1
    db10:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db12:	e015      	b.n	db40 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	2b2e      	cmp	r3, #46	; 0x2e
    db1a:	d00e      	beq.n	db3a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	2b39      	cmp	r3, #57	; 0x39
    db22:	d103      	bne.n	db2c <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db26:	2230      	movs	r2, #48	; 0x30
    db28:	701a      	strb	r2, [r3, #0]
    db2a:	e006      	b.n	db3a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	3301      	adds	r3, #1
    db32:	b2da      	uxtb	r2, r3
    db34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db36:	701a      	strb	r2, [r3, #0]
                    break;
    db38:	e006      	b.n	db48 <ftoa+0x1e4>
                }
                pcBuftmp--;
    db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db3c:	3b01      	subs	r3, #1
    db3e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    db42:	6a3b      	ldr	r3, [r7, #32]
    db44:	429a      	cmp	r2, r3
    db46:	d2e5      	bcs.n	db14 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    db48:	68bb      	ldr	r3, [r7, #8]
    db4a:	2200      	movs	r2, #0
    db4c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    db4e:	68ba      	ldr	r2, [r7, #8]
    db50:	6a3b      	ldr	r3, [r7, #32]
    db52:	1ad3      	subs	r3, r2, r3
} // ftoa()
    db54:	4618      	mov	r0, r3
    db56:	373c      	adds	r7, #60	; 0x3c
    db58:	46bd      	mov	sp, r7
    db5a:	bd90      	pop	{r4, r7, pc}
    db5c:	00302e30 	.word	0x00302e30

0000db60 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    db60:	b590      	push	{r4, r7, lr}
    db62:	b097      	sub	sp, #92	; 0x5c
    db64:	af00      	add	r7, sp, #0
    db66:	60f8      	str	r0, [r7, #12]
    db68:	60b9      	str	r1, [r7, #8]
    db6a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    db6c:	2300      	movs	r3, #0
    db6e:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    db70:	2300      	movs	r3, #0
    db72:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    db74:	e2e7      	b.n	e146 <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    db76:	2306      	movs	r3, #6
    db78:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    db7a:	68bb      	ldr	r3, [r7, #8]
    db7c:	781b      	ldrb	r3, [r3, #0]
    db7e:	2b25      	cmp	r3, #37	; 0x25
    db80:	d01f      	beq.n	dbc2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    db82:	68fb      	ldr	r3, [r7, #12]
    db84:	2b00      	cmp	r3, #0
    db86:	d015      	beq.n	dbb4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    db88:	68bb      	ldr	r3, [r7, #8]
    db8a:	781b      	ldrb	r3, [r3, #0]
    db8c:	2b0a      	cmp	r3, #10
    db8e:	d10b      	bne.n	dba8 <am_util_stdio_vsprintf+0x48>
    db90:	4bb1      	ldr	r3, [pc, #708]	; (de58 <am_util_stdio_vsprintf+0x2f8>)
    db92:	781b      	ldrb	r3, [r3, #0]
    db94:	2b00      	cmp	r3, #0
    db96:	d007      	beq.n	dba8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    db98:	68fb      	ldr	r3, [r7, #12]
    db9a:	1c5a      	adds	r2, r3, #1
    db9c:	60fa      	str	r2, [r7, #12]
    db9e:	220d      	movs	r2, #13
    dba0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    dba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dba4:	3301      	adds	r3, #1
    dba6:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    dba8:	68fb      	ldr	r3, [r7, #12]
    dbaa:	1c5a      	adds	r2, r3, #1
    dbac:	60fa      	str	r2, [r7, #12]
    dbae:	68ba      	ldr	r2, [r7, #8]
    dbb0:	7812      	ldrb	r2, [r2, #0]
    dbb2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    dbb4:	68bb      	ldr	r3, [r7, #8]
    dbb6:	3301      	adds	r3, #1
    dbb8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    dbba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dbbc:	3301      	adds	r3, #1
    dbbe:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    dbc0:	e2c1      	b.n	e146 <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    dbc2:	68bb      	ldr	r3, [r7, #8]
    dbc4:	3301      	adds	r3, #1
    dbc6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    dbc8:	2300      	movs	r3, #0
    dbca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    dbce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dbd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    dbd6:	2320      	movs	r3, #32
    dbd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    dbdc:	68bb      	ldr	r3, [r7, #8]
    dbde:	781b      	ldrb	r3, [r3, #0]
    dbe0:	2b30      	cmp	r3, #48	; 0x30
    dbe2:	d105      	bne.n	dbf0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    dbe4:	2330      	movs	r3, #48	; 0x30
    dbe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    dbea:	68bb      	ldr	r3, [r7, #8]
    dbec:	3301      	adds	r3, #1
    dbee:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    dbf0:	f107 0314 	add.w	r3, r7, #20
    dbf4:	4619      	mov	r1, r3
    dbf6:	68b8      	ldr	r0, [r7, #8]
    dbf8:	f7ff fd81 	bl	d6fe <decstr_to_int>
    dbfc:	4603      	mov	r3, r0
    dbfe:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    dc00:	697b      	ldr	r3, [r7, #20]
    dc02:	68ba      	ldr	r2, [r7, #8]
    dc04:	4413      	add	r3, r2
    dc06:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    dc08:	68bb      	ldr	r3, [r7, #8]
    dc0a:	781b      	ldrb	r3, [r3, #0]
    dc0c:	2b73      	cmp	r3, #115	; 0x73
    dc0e:	d005      	beq.n	dc1c <am_util_stdio_vsprintf+0xbc>
    dc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc12:	2b00      	cmp	r3, #0
    dc14:	da02      	bge.n	dc1c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    dc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc18:	425b      	negs	r3, r3
    dc1a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    dc1c:	68bb      	ldr	r3, [r7, #8]
    dc1e:	781b      	ldrb	r3, [r3, #0]
    dc20:	2b2e      	cmp	r3, #46	; 0x2e
    dc22:	d10e      	bne.n	dc42 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    dc24:	68bb      	ldr	r3, [r7, #8]
    dc26:	3301      	adds	r3, #1
    dc28:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    dc2a:	f107 0314 	add.w	r3, r7, #20
    dc2e:	4619      	mov	r1, r3
    dc30:	68b8      	ldr	r0, [r7, #8]
    dc32:	f7ff fd64 	bl	d6fe <decstr_to_int>
    dc36:	4603      	mov	r3, r0
    dc38:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    dc3a:	697b      	ldr	r3, [r7, #20]
    dc3c:	68ba      	ldr	r2, [r7, #8]
    dc3e:	4413      	add	r3, r2
    dc40:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dc42:	68bb      	ldr	r3, [r7, #8]
    dc44:	781b      	ldrb	r3, [r3, #0]
    dc46:	2b6c      	cmp	r3, #108	; 0x6c
    dc48:	d10c      	bne.n	dc64 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dc4a:	68bb      	ldr	r3, [r7, #8]
    dc4c:	3301      	adds	r3, #1
    dc4e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dc50:	68bb      	ldr	r3, [r7, #8]
    dc52:	781b      	ldrb	r3, [r3, #0]
    dc54:	2b6c      	cmp	r3, #108	; 0x6c
    dc56:	d105      	bne.n	dc64 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dc58:	68bb      	ldr	r3, [r7, #8]
    dc5a:	3301      	adds	r3, #1
    dc5c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dc5e:	2301      	movs	r3, #1
    dc60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    dc64:	68bb      	ldr	r3, [r7, #8]
    dc66:	781b      	ldrb	r3, [r3, #0]
    dc68:	3b46      	subs	r3, #70	; 0x46
    dc6a:	2b32      	cmp	r3, #50	; 0x32
    dc6c:	f200 8258 	bhi.w	e120 <am_util_stdio_vsprintf+0x5c0>
    dc70:	a201      	add	r2, pc, #4	; (adr r2, dc78 <am_util_stdio_vsprintf+0x118>)
    dc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dc76:	bf00      	nop
    dc78:	0000e0a7 	.word	0x0000e0a7
    dc7c:	0000e121 	.word	0x0000e121
    dc80:	0000e121 	.word	0x0000e121
    dc84:	0000e121 	.word	0x0000e121
    dc88:	0000e121 	.word	0x0000e121
    dc8c:	0000e121 	.word	0x0000e121
    dc90:	0000e121 	.word	0x0000e121
    dc94:	0000e121 	.word	0x0000e121
    dc98:	0000e121 	.word	0x0000e121
    dc9c:	0000e121 	.word	0x0000e121
    dca0:	0000e121 	.word	0x0000e121
    dca4:	0000e121 	.word	0x0000e121
    dca8:	0000e121 	.word	0x0000e121
    dcac:	0000e121 	.word	0x0000e121
    dcb0:	0000e121 	.word	0x0000e121
    dcb4:	0000e121 	.word	0x0000e121
    dcb8:	0000e121 	.word	0x0000e121
    dcbc:	0000e121 	.word	0x0000e121
    dcc0:	0000de3b 	.word	0x0000de3b
    dcc4:	0000e121 	.word	0x0000e121
    dcc8:	0000e121 	.word	0x0000e121
    dccc:	0000e121 	.word	0x0000e121
    dcd0:	0000e121 	.word	0x0000e121
    dcd4:	0000e121 	.word	0x0000e121
    dcd8:	0000e121 	.word	0x0000e121
    dcdc:	0000e121 	.word	0x0000e121
    dce0:	0000e121 	.word	0x0000e121
    dce4:	0000e121 	.word	0x0000e121
    dce8:	0000e121 	.word	0x0000e121
    dcec:	0000dd45 	.word	0x0000dd45
    dcf0:	0000df6d 	.word	0x0000df6d
    dcf4:	0000e121 	.word	0x0000e121
    dcf8:	0000e0a7 	.word	0x0000e0a7
    dcfc:	0000e121 	.word	0x0000e121
    dd00:	0000e121 	.word	0x0000e121
    dd04:	0000df6d 	.word	0x0000df6d
    dd08:	0000e121 	.word	0x0000e121
    dd0c:	0000e121 	.word	0x0000e121
    dd10:	0000e121 	.word	0x0000e121
    dd14:	0000e121 	.word	0x0000e121
    dd18:	0000e121 	.word	0x0000e121
    dd1c:	0000e121 	.word	0x0000e121
    dd20:	0000e121 	.word	0x0000e121
    dd24:	0000e121 	.word	0x0000e121
    dd28:	0000e121 	.word	0x0000e121
    dd2c:	0000dd67 	.word	0x0000dd67
    dd30:	0000e121 	.word	0x0000e121
    dd34:	0000ded9 	.word	0x0000ded9
    dd38:	0000e121 	.word	0x0000e121
    dd3c:	0000e121 	.word	0x0000e121
    dd40:	0000de35 	.word	0x0000de35
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    dd44:	687b      	ldr	r3, [r7, #4]
    dd46:	1d1a      	adds	r2, r3, #4
    dd48:	607a      	str	r2, [r7, #4]
    dd4a:	681b      	ldr	r3, [r3, #0]
    dd4c:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    dd4e:	68fb      	ldr	r3, [r7, #12]
    dd50:	2b00      	cmp	r3, #0
    dd52:	d004      	beq.n	dd5e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    dd54:	68fb      	ldr	r3, [r7, #12]
    dd56:	1c5a      	adds	r2, r3, #1
    dd58:	60fa      	str	r2, [r7, #12]
    dd5a:	7ffa      	ldrb	r2, [r7, #31]
    dd5c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    dd5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd60:	3301      	adds	r3, #1
    dd62:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dd64:	e1ec      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    dd66:	687b      	ldr	r3, [r7, #4]
    dd68:	1d1a      	adds	r2, r3, #4
    dd6a:	607a      	str	r2, [r7, #4]
    dd6c:	681b      	ldr	r3, [r3, #0]
    dd6e:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    dd70:	6d78      	ldr	r0, [r7, #84]	; 0x54
    dd72:	f7ff fdb6 	bl	d8e2 <simple_strlen>
    dd76:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    dd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd7a:	2b00      	cmp	r3, #0
    dd7c:	dd2e      	ble.n	dddc <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    dd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dd82:	429a      	cmp	r2, r3
    dd84:	d22a      	bcs.n	dddc <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    dd86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd8a:	1ad3      	subs	r3, r2, r3
    dd8c:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dd8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dd92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd94:	4619      	mov	r1, r3
    dd96:	68f8      	ldr	r0, [r7, #12]
    dd98:	f7ff fdbe 	bl	d918 <padbuffer>
    dd9c:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    dd9e:	68fb      	ldr	r3, [r7, #12]
    dda0:	2b00      	cmp	r3, #0
    dda2:	d001      	beq.n	dda8 <am_util_stdio_vsprintf+0x248>
    dda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dda6:	e000      	b.n	ddaa <am_util_stdio_vsprintf+0x24a>
    dda8:	2300      	movs	r3, #0
    ddaa:	68fa      	ldr	r2, [r7, #12]
    ddac:	4413      	add	r3, r2
    ddae:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ddb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ddb4:	4413      	add	r3, r2
    ddb6:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    ddb8:	2300      	movs	r3, #0
    ddba:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    ddbc:	e00e      	b.n	dddc <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    ddbe:	68fb      	ldr	r3, [r7, #12]
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	d005      	beq.n	ddd0 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    ddc4:	68fb      	ldr	r3, [r7, #12]
    ddc6:	1c5a      	adds	r2, r3, #1
    ddc8:	60fa      	str	r2, [r7, #12]
    ddca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ddcc:	7812      	ldrb	r2, [r2, #0]
    ddce:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ddd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddd2:	3301      	adds	r3, #1
    ddd4:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    ddd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ddd8:	3301      	adds	r3, #1
    ddda:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    dddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddde:	781b      	ldrb	r3, [r3, #0]
    dde0:	2b00      	cmp	r3, #0
    dde2:	d1ec      	bne.n	ddbe <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    dde4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dde6:	2b00      	cmp	r3, #0
    dde8:	f000 81a7 	beq.w	e13a <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    ddec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddee:	425b      	negs	r3, r3
    ddf0:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ddf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ddf6:	429a      	cmp	r2, r3
    ddf8:	f080 819f 	bcs.w	e13a <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ddfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de00:	1ad3      	subs	r3, r2, r3
    de02:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de0a:	4619      	mov	r1, r3
    de0c:	68f8      	ldr	r0, [r7, #12]
    de0e:	f7ff fd83 	bl	d918 <padbuffer>
    de12:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    de14:	68fb      	ldr	r3, [r7, #12]
    de16:	2b00      	cmp	r3, #0
    de18:	d001      	beq.n	de1e <am_util_stdio_vsprintf+0x2be>
    de1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de1c:	e000      	b.n	de20 <am_util_stdio_vsprintf+0x2c0>
    de1e:	2300      	movs	r3, #0
    de20:	68fa      	ldr	r2, [r7, #12]
    de22:	4413      	add	r3, r2
    de24:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    de26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de2a:	4413      	add	r3, r2
    de2c:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    de2e:	2300      	movs	r3, #0
    de30:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    de32:	e182      	b.n	e13a <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    de34:	2301      	movs	r3, #1
    de36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    de3e:	2b00      	cmp	r3, #0
    de40:	d00c      	beq.n	de5c <am_util_stdio_vsprintf+0x2fc>
    de42:	687b      	ldr	r3, [r7, #4]
    de44:	3307      	adds	r3, #7
    de46:	f023 0307 	bic.w	r3, r3, #7
    de4a:	f103 0208 	add.w	r2, r3, #8
    de4e:	607a      	str	r2, [r7, #4]
    de50:	e9d3 3400 	ldrd	r3, r4, [r3]
    de54:	e008      	b.n	de68 <am_util_stdio_vsprintf+0x308>
    de56:	bf00      	nop
    de58:	1000c14c 	.word	0x1000c14c
                                      va_arg(pArgs, uint32_t);
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	1d1a      	adds	r2, r3, #4
    de60:	607a      	str	r2, [r7, #4]
    de62:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de64:	f04f 0400 	mov.w	r4, #0
    de68:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    de6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de6e:	2b00      	cmp	r3, #0
    de70:	d01e      	beq.n	deb0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    de72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    de76:	f7ff fc1a 	bl	d6ae <ndigits_in_hex>
    de7a:	4602      	mov	r2, r0
    de7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de7e:	1a9b      	subs	r3, r3, r2
    de80:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de88:	4619      	mov	r1, r3
    de8a:	68f8      	ldr	r0, [r7, #12]
    de8c:	f7ff fd44 	bl	d918 <padbuffer>
    de90:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    de92:	68fb      	ldr	r3, [r7, #12]
    de94:	2b00      	cmp	r3, #0
    de96:	d001      	beq.n	de9c <am_util_stdio_vsprintf+0x33c>
    de98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de9a:	e000      	b.n	de9e <am_util_stdio_vsprintf+0x33e>
    de9c:	2300      	movs	r3, #0
    de9e:	68fa      	ldr	r2, [r7, #12]
    dea0:	4413      	add	r3, r2
    dea2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dea8:	4413      	add	r3, r2
    deaa:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    deac:	2300      	movs	r3, #0
    deae:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    deb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    deb4:	68fa      	ldr	r2, [r7, #12]
    deb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    deba:	f7ff fcae 	bl	d81a <uint64_to_hexstr>
    debe:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dec0:	68fb      	ldr	r3, [r7, #12]
    dec2:	2b00      	cmp	r3, #0
    dec4:	d003      	beq.n	dece <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    dec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dec8:	68fa      	ldr	r2, [r7, #12]
    deca:	4413      	add	r3, r2
    decc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ded0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ded2:	4413      	add	r3, r2
    ded4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    ded6:	e133      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ded8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dedc:	2b00      	cmp	r3, #0
    dede:	d009      	beq.n	def4 <am_util_stdio_vsprintf+0x394>
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	3307      	adds	r3, #7
    dee4:	f023 0307 	bic.w	r3, r3, #7
    dee8:	f103 0208 	add.w	r2, r3, #8
    deec:	607a      	str	r2, [r7, #4]
    deee:	e9d3 3400 	ldrd	r3, r4, [r3]
    def2:	e005      	b.n	df00 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	1d1a      	adds	r2, r3, #4
    def8:	607a      	str	r2, [r7, #4]
    defa:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    defc:	f04f 0400 	mov.w	r4, #0
    df00:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    df04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df06:	2b00      	cmp	r3, #0
    df08:	d01e      	beq.n	df48 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    df0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df0e:	f7ff fb90 	bl	d632 <ndigits_in_u64>
    df12:	4602      	mov	r2, r0
    df14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df16:	1a9b      	subs	r3, r3, r2
    df18:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    df1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    df1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    df20:	4619      	mov	r1, r3
    df22:	68f8      	ldr	r0, [r7, #12]
    df24:	f7ff fcf8 	bl	d918 <padbuffer>
    df28:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    df2a:	68fb      	ldr	r3, [r7, #12]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d001      	beq.n	df34 <am_util_stdio_vsprintf+0x3d4>
    df30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df32:	e000      	b.n	df36 <am_util_stdio_vsprintf+0x3d6>
    df34:	2300      	movs	r3, #0
    df36:	68fa      	ldr	r2, [r7, #12]
    df38:	4413      	add	r3, r2
    df3a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    df3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df40:	4413      	add	r3, r2
    df42:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    df44:	2300      	movs	r3, #0
    df46:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    df48:	68fa      	ldr	r2, [r7, #12]
    df4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df4e:	f7ff fc1c 	bl	d78a <uint64_to_str>
    df52:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    df54:	68fb      	ldr	r3, [r7, #12]
    df56:	2b00      	cmp	r3, #0
    df58:	d003      	beq.n	df62 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    df5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df5c:	68fa      	ldr	r2, [r7, #12]
    df5e:	4413      	add	r3, r2
    df60:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    df62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df66:	4413      	add	r3, r2
    df68:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    df6a:	e0e9      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    df70:	2b00      	cmp	r3, #0
    df72:	d009      	beq.n	df88 <am_util_stdio_vsprintf+0x428>
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	3307      	adds	r3, #7
    df78:	f023 0307 	bic.w	r3, r3, #7
    df7c:	f103 0208 	add.w	r2, r3, #8
    df80:	607a      	str	r2, [r7, #4]
    df82:	e9d3 3400 	ldrd	r3, r4, [r3]
    df86:	e005      	b.n	df94 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    df88:	687b      	ldr	r3, [r7, #4]
    df8a:	1d1a      	adds	r2, r3, #4
    df8c:	607a      	str	r2, [r7, #4]
    df8e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df90:	ea4f 74e3 	mov.w	r4, r3, asr #31
    df94:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    df98:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df9c:	2b00      	cmp	r3, #0
    df9e:	f174 0300 	sbcs.w	r3, r4, #0
    dfa2:	da0a      	bge.n	dfba <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    dfa4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dfa8:	425b      	negs	r3, r3
    dfaa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    dfae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    dfb2:	2301      	movs	r3, #1
    dfb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    dfb8:	e006      	b.n	dfc8 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    dfba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dfbe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    dfc2:	2300      	movs	r3, #0
    dfc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    dfc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d04a      	beq.n	e064 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    dfce:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    dfd2:	4618      	mov	r0, r3
    dfd4:	4621      	mov	r1, r4
    dfd6:	f7ff fb4d 	bl	d674 <ndigits_in_i64>
    dfda:	4602      	mov	r2, r0
    dfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfde:	1a9b      	subs	r3, r3, r2
    dfe0:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    dfe2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dfe6:	2b00      	cmp	r3, #0
    dfe8:	d011      	beq.n	e00e <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    dfea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfec:	3b01      	subs	r3, #1
    dfee:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    dff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dff4:	2b30      	cmp	r3, #48	; 0x30
    dff6:	d10a      	bne.n	e00e <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    dff8:	68fb      	ldr	r3, [r7, #12]
    dffa:	2b00      	cmp	r3, #0
    dffc:	d004      	beq.n	e008 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    dffe:	68fb      	ldr	r3, [r7, #12]
    e000:	1c5a      	adds	r2, r3, #1
    e002:	60fa      	str	r2, [r7, #12]
    e004:	222d      	movs	r2, #45	; 0x2d
    e006:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    e008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e00a:	3301      	adds	r3, #1
    e00c:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e00e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e014:	4619      	mov	r1, r3
    e016:	68f8      	ldr	r0, [r7, #12]
    e018:	f7ff fc7e 	bl	d918 <padbuffer>
    e01c:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e01e:	68fb      	ldr	r3, [r7, #12]
    e020:	2b00      	cmp	r3, #0
    e022:	d001      	beq.n	e028 <am_util_stdio_vsprintf+0x4c8>
    e024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e026:	e000      	b.n	e02a <am_util_stdio_vsprintf+0x4ca>
    e028:	2300      	movs	r3, #0
    e02a:	68fa      	ldr	r2, [r7, #12]
    e02c:	4413      	add	r3, r2
    e02e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e034:	4413      	add	r3, r2
    e036:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e038:	2300      	movs	r3, #0
    e03a:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e03c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e040:	2b00      	cmp	r3, #0
    e042:	d01e      	beq.n	e082 <am_util_stdio_vsprintf+0x522>
    e044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e048:	2b20      	cmp	r3, #32
    e04a:	d11a      	bne.n	e082 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e04c:	68fb      	ldr	r3, [r7, #12]
    e04e:	2b00      	cmp	r3, #0
    e050:	d004      	beq.n	e05c <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e052:	68fb      	ldr	r3, [r7, #12]
    e054:	1c5a      	adds	r2, r3, #1
    e056:	60fa      	str	r2, [r7, #12]
    e058:	222d      	movs	r2, #45	; 0x2d
    e05a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e05e:	3301      	adds	r3, #1
    e060:	647b      	str	r3, [r7, #68]	; 0x44
    e062:	e00e      	b.n	e082 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e064:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e068:	2b00      	cmp	r3, #0
    e06a:	d00a      	beq.n	e082 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e06c:	68fb      	ldr	r3, [r7, #12]
    e06e:	2b00      	cmp	r3, #0
    e070:	d004      	beq.n	e07c <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e072:	68fb      	ldr	r3, [r7, #12]
    e074:	1c5a      	adds	r2, r3, #1
    e076:	60fa      	str	r2, [r7, #12]
    e078:	222d      	movs	r2, #45	; 0x2d
    e07a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e07e:	3301      	adds	r3, #1
    e080:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e082:	68fa      	ldr	r2, [r7, #12]
    e084:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e088:	f7ff fb7f 	bl	d78a <uint64_to_str>
    e08c:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e08e:	68fb      	ldr	r3, [r7, #12]
    e090:	2b00      	cmp	r3, #0
    e092:	d003      	beq.n	e09c <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e096:	68fa      	ldr	r2, [r7, #12]
    e098:	4413      	add	r3, r2
    e09a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e0a0:	4413      	add	r3, r2
    e0a2:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e0a4:	e04c      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e0a6:	68fb      	ldr	r3, [r7, #12]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d048      	beq.n	e13e <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	3307      	adds	r3, #7
    e0b0:	f023 0307 	bic.w	r3, r3, #7
    e0b4:	f103 0208 	add.w	r2, r3, #8
    e0b8:	607a      	str	r2, [r7, #4]
    e0ba:	e9d3 3400 	ldrd	r3, r4, [r3]
    e0be:	4618      	mov	r0, r3
    e0c0:	4621      	mov	r1, r4
    e0c2:	f7fe f8b7 	bl	c234 <__aeabi_d2f>
    e0c6:	4603      	mov	r3, r0
    e0c8:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e0ca:	68fb      	ldr	r3, [r7, #12]
    e0cc:	2214      	movs	r2, #20
    e0ce:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e0d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e0d2:	68f8      	ldr	r0, [r7, #12]
    e0d4:	ed97 0a06 	vldr	s0, [r7, #24]
    e0d8:	f7ff fc44 	bl	d964 <ftoa>
    e0dc:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	da14      	bge.n	e10e <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e0ea:	d102      	bne.n	e0f2 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e0ec:	4b1e      	ldr	r3, [pc, #120]	; (e168 <am_util_stdio_vsprintf+0x608>)
    e0ee:	633b      	str	r3, [r7, #48]	; 0x30
    e0f0:	e008      	b.n	e104 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0f4:	f113 0f02 	cmn.w	r3, #2
    e0f8:	d102      	bne.n	e100 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e0fa:	4b1c      	ldr	r3, [pc, #112]	; (e16c <am_util_stdio_vsprintf+0x60c>)
    e0fc:	633b      	str	r3, [r7, #48]	; 0x30
    e0fe:	e001      	b.n	e104 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e100:	4b1b      	ldr	r3, [pc, #108]	; (e170 <am_util_stdio_vsprintf+0x610>)
    e102:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e104:	68fb      	ldr	r3, [r7, #12]
    e106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e108:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e10a:	2303      	movs	r3, #3
    e10c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e112:	4413      	add	r3, r2
    e114:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e118:	68fa      	ldr	r2, [r7, #12]
    e11a:	4413      	add	r3, r2
    e11c:	60fb      	str	r3, [r7, #12]
                }
                break;
    e11e:	e00e      	b.n	e13e <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e120:	68fb      	ldr	r3, [r7, #12]
    e122:	2b00      	cmp	r3, #0
    e124:	d005      	beq.n	e132 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e126:	68fb      	ldr	r3, [r7, #12]
    e128:	1c5a      	adds	r2, r3, #1
    e12a:	60fa      	str	r2, [r7, #12]
    e12c:	68ba      	ldr	r2, [r7, #8]
    e12e:	7812      	ldrb	r2, [r2, #0]
    e130:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e134:	3301      	adds	r3, #1
    e136:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e138:	e002      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>
                break;
    e13a:	bf00      	nop
    e13c:	e000      	b.n	e140 <am_util_stdio_vsprintf+0x5e0>
                break;
    e13e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e140:	68bb      	ldr	r3, [r7, #8]
    e142:	3301      	adds	r3, #1
    e144:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e146:	68bb      	ldr	r3, [r7, #8]
    e148:	781b      	ldrb	r3, [r3, #0]
    e14a:	2b00      	cmp	r3, #0
    e14c:	f47f ad13 	bne.w	db76 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e150:	68fb      	ldr	r3, [r7, #12]
    e152:	2b00      	cmp	r3, #0
    e154:	d002      	beq.n	e15c <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e156:	68fb      	ldr	r3, [r7, #12]
    e158:	2200      	movs	r2, #0
    e15a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e15e:	4618      	mov	r0, r3
    e160:	375c      	adds	r7, #92	; 0x5c
    e162:	46bd      	mov	sp, r7
    e164:	bd90      	pop	{r4, r7, pc}
    e166:	bf00      	nop
    e168:	00302e30 	.word	0x00302e30
    e16c:	00232e23 	.word	0x00232e23
    e170:	003f2e3f 	.word	0x003f2e3f

0000e174 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e174:	b40f      	push	{r0, r1, r2, r3}
    e176:	b580      	push	{r7, lr}
    e178:	b082      	sub	sp, #8
    e17a:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e17c:	4b0d      	ldr	r3, [pc, #52]	; (e1b4 <am_util_stdio_printf+0x40>)
    e17e:	681b      	ldr	r3, [r3, #0]
    e180:	2b00      	cmp	r3, #0
    e182:	d101      	bne.n	e188 <am_util_stdio_printf+0x14>
    {
        return 0;
    e184:	2300      	movs	r3, #0
    e186:	e00d      	b.n	e1a4 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e188:	f107 0314 	add.w	r3, r7, #20
    e18c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e18e:	683a      	ldr	r2, [r7, #0]
    e190:	6939      	ldr	r1, [r7, #16]
    e192:	4809      	ldr	r0, [pc, #36]	; (e1b8 <am_util_stdio_printf+0x44>)
    e194:	f7ff fce4 	bl	db60 <am_util_stdio_vsprintf>
    e198:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e19a:	4b06      	ldr	r3, [pc, #24]	; (e1b4 <am_util_stdio_printf+0x40>)
    e19c:	681b      	ldr	r3, [r3, #0]
    e19e:	4806      	ldr	r0, [pc, #24]	; (e1b8 <am_util_stdio_printf+0x44>)
    e1a0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e1a2:	687b      	ldr	r3, [r7, #4]
}
    e1a4:	4618      	mov	r0, r3
    e1a6:	3708      	adds	r7, #8
    e1a8:	46bd      	mov	sp, r7
    e1aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e1ae:	b004      	add	sp, #16
    e1b0:	4770      	bx	lr
    e1b2:	bf00      	nop
    e1b4:	1000c188 	.word	0x1000c188
    e1b8:	1000c04c 	.word	0x1000c04c

0000e1bc <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e1bc:	b480      	push	{r7}
    e1be:	b085      	sub	sp, #20
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	60f8      	str	r0, [r7, #12]
    e1c4:	4638      	mov	r0, r7
    e1c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e1ca:	683b      	ldr	r3, [r7, #0]
    e1cc:	461a      	mov	r2, r3
    e1ce:	4613      	mov	r3, r2
    e1d0:	009b      	lsls	r3, r3, #2
    e1d2:	4413      	add	r3, r2
    e1d4:	009b      	lsls	r3, r3, #2
    e1d6:	461a      	mov	r2, r3
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	4413      	add	r3, r2
    e1dc:	2200      	movs	r2, #0
    e1de:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e1e0:	683b      	ldr	r3, [r7, #0]
    e1e2:	461a      	mov	r2, r3
    e1e4:	4613      	mov	r3, r2
    e1e6:	009b      	lsls	r3, r3, #2
    e1e8:	4413      	add	r3, r2
    e1ea:	009b      	lsls	r3, r3, #2
    e1ec:	461a      	mov	r2, r3
    e1ee:	68fb      	ldr	r3, [r7, #12]
    e1f0:	4413      	add	r3, r2
    e1f2:	2200      	movs	r2, #0
    e1f4:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e1f6:	683b      	ldr	r3, [r7, #0]
    e1f8:	461a      	mov	r2, r3
    e1fa:	4613      	mov	r3, r2
    e1fc:	009b      	lsls	r3, r3, #2
    e1fe:	4413      	add	r3, r2
    e200:	009b      	lsls	r3, r3, #2
    e202:	461a      	mov	r2, r3
    e204:	68fb      	ldr	r3, [r7, #12]
    e206:	4413      	add	r3, r2
    e208:	2200      	movs	r2, #0
    e20a:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e20c:	683b      	ldr	r3, [r7, #0]
    e20e:	461a      	mov	r2, r3
    e210:	4613      	mov	r3, r2
    e212:	009b      	lsls	r3, r3, #2
    e214:	4413      	add	r3, r2
    e216:	009b      	lsls	r3, r3, #2
    e218:	461a      	mov	r2, r3
    e21a:	68fb      	ldr	r3, [r7, #12]
    e21c:	4413      	add	r3, r2
    e21e:	68ba      	ldr	r2, [r7, #8]
    e220:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e222:	683b      	ldr	r3, [r7, #0]
    e224:	461a      	mov	r2, r3
    e226:	4613      	mov	r3, r2
    e228:	009b      	lsls	r3, r3, #2
    e22a:	4413      	add	r3, r2
    e22c:	009b      	lsls	r3, r3, #2
    e22e:	461a      	mov	r2, r3
    e230:	68fb      	ldr	r3, [r7, #12]
    e232:	4413      	add	r3, r2
    e234:	687a      	ldr	r2, [r7, #4]
    e236:	601a      	str	r2, [r3, #0]
}
    e238:	bf00      	nop
    e23a:	3714      	adds	r7, #20
    e23c:	46bd      	mov	sp, r7
    e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e242:	4770      	bx	lr

0000e244 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e244:	b580      	push	{r7, lr}
    e246:	b086      	sub	sp, #24
    e248:	af00      	add	r7, sp, #0
    e24a:	60f8      	str	r0, [r7, #12]
    e24c:	60b9      	str	r1, [r7, #8]
    e24e:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e250:	2300      	movs	r3, #0
    e252:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e254:	2300      	movs	r3, #0
    e256:	617b      	str	r3, [r7, #20]
    e258:	e00e      	b.n	e278 <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e25a:	697a      	ldr	r2, [r7, #20]
    e25c:	4613      	mov	r3, r2
    e25e:	005b      	lsls	r3, r3, #1
    e260:	4413      	add	r3, r2
    e262:	009b      	lsls	r3, r3, #2
    e264:	461a      	mov	r2, r3
    e266:	68bb      	ldr	r3, [r7, #8]
    e268:	4413      	add	r3, r2
    e26a:	cb0e      	ldmia	r3, {r1, r2, r3}
    e26c:	68f8      	ldr	r0, [r7, #12]
    e26e:	f7ff ffa5 	bl	e1bc <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e272:	697b      	ldr	r3, [r7, #20]
    e274:	3301      	adds	r3, #1
    e276:	617b      	str	r3, [r7, #20]
    e278:	697a      	ldr	r2, [r7, #20]
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	429a      	cmp	r2, r3
    e27e:	d3ec      	bcc.n	e25a <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e280:	bf00      	nop
    e282:	3718      	adds	r7, #24
    e284:	46bd      	mov	sp, r7
    e286:	bd80      	pop	{r7, pc}

0000e288 <am_app_utils_ring_buffer_push>:
//                  If false, data could be pushed no matter buffer is full or not.
// Return:
//      bytes pushed into the ring buffer
//*****************************************************************************
uint32_t am_app_utils_ring_buffer_push(am_app_utils_ring_buffer_t *psBuffer, void *pvSource, uint32_t ui32Bytes, bool bFullCheck)
{
    e288:	b580      	push	{r7, lr}
    e28a:	b088      	sub	sp, #32
    e28c:	af00      	add	r7, sp, #0
    e28e:	60f8      	str	r0, [r7, #12]
    e290:	60b9      	str	r1, [r7, #8]
    e292:	607a      	str	r2, [r7, #4]
    e294:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32CopyLen = 0;
    e296:	2300      	movs	r3, #0
    e298:	61fb      	str	r3, [r7, #28]
    uint32_t ui32ReturnPushLen = 0;
    e29a:	2300      	movs	r3, #0
    e29c:	617b      	str	r3, [r7, #20]
    uint32_t ui32TempLen = 0;
    e29e:	2300      	movs	r3, #0
    e2a0:	61bb      	str	r3, [r7, #24]
    uint8_t *pui8Source;
    
    ui32CopyLen = ui32Bytes;
    e2a2:	687b      	ldr	r3, [r7, #4]
    e2a4:	61fb      	str	r3, [r7, #28]
    pui8Source = (uint8_t*)pvSource;
    e2a6:	68bb      	ldr	r3, [r7, #8]
    e2a8:	613b      	str	r3, [r7, #16]

    if(bFullCheck == true)
    e2aa:	78fb      	ldrb	r3, [r7, #3]
    e2ac:	2b00      	cmp	r3, #0
    e2ae:	f000 8092 	beq.w	e3d6 <am_app_utils_ring_buffer_push+0x14e>
    {
        // won't push any data if buffer is full
        if(am_app_utils_ring_buffer_full(psBuffer))
    e2b2:	68fb      	ldr	r3, [r7, #12]
    e2b4:	685a      	ldr	r2, [r3, #4]
    e2b6:	68fb      	ldr	r3, [r7, #12]
    e2b8:	689b      	ldr	r3, [r3, #8]
    e2ba:	429a      	cmp	r2, r3
    e2bc:	d109      	bne.n	e2d2 <am_app_utils_ring_buffer_push+0x4a>
    e2be:	68fb      	ldr	r3, [r7, #12]
    e2c0:	68db      	ldr	r3, [r3, #12]
    e2c2:	2b01      	cmp	r3, #1
    e2c4:	d105      	bne.n	e2d2 <am_app_utils_ring_buffer_push+0x4a>
        {
            ui32CopyLen = 0;
    e2c6:	2300      	movs	r3, #0
    e2c8:	61fb      	str	r3, [r7, #28]
            ui32ReturnPushLen =0;
    e2ca:	2300      	movs	r3, #0
    e2cc:	617b      	str	r3, [r7, #20]
            return ui32ReturnPushLen;
    e2ce:	697b      	ldr	r3, [r7, #20]
    e2d0:	e0f7      	b.n	e4c2 <am_app_utils_ring_buffer_push+0x23a>
        }
    
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e2d2:	68fb      	ldr	r3, [r7, #12]
    e2d4:	685a      	ldr	r2, [r3, #4]
    e2d6:	68fb      	ldr	r3, [r7, #12]
    e2d8:	689b      	ldr	r3, [r3, #8]
    e2da:	429a      	cmp	r2, r3
    e2dc:	d10f      	bne.n	e2fe <am_app_utils_ring_buffer_push+0x76>
    e2de:	68fb      	ldr	r3, [r7, #12]
    e2e0:	68db      	ldr	r3, [r3, #12]
    e2e2:	2b00      	cmp	r3, #0
    e2e4:	d10b      	bne.n	e2fe <am_app_utils_ring_buffer_push+0x76>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2e6:	68fb      	ldr	r3, [r7, #12]
    e2e8:	691b      	ldr	r3, [r3, #16]
    e2ea:	69fa      	ldr	r2, [r7, #28]
    e2ec:	429a      	cmp	r2, r3
    e2ee:	d32b      	bcc.n	e348 <am_app_utils_ring_buffer_push+0xc0>
            {      
                psBuffer->ui32OverWriting = 1;
    e2f0:	68fb      	ldr	r3, [r7, #12]
    e2f2:	2201      	movs	r2, #1
    e2f4:	60da      	str	r2, [r3, #12]
                ui32CopyLen = psBuffer->ui32Capacity;
    e2f6:	68fb      	ldr	r3, [r7, #12]
    e2f8:	691b      	ldr	r3, [r3, #16]
    e2fa:	61fb      	str	r3, [r7, #28]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2fc:	e024      	b.n	e348 <am_app_utils_ring_buffer_push+0xc0>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e2fe:	68fb      	ldr	r3, [r7, #12]
    e300:	689a      	ldr	r2, [r3, #8]
    e302:	68fb      	ldr	r3, [r7, #12]
    e304:	691b      	ldr	r3, [r3, #16]
    e306:	441a      	add	r2, r3
    e308:	68fb      	ldr	r3, [r7, #12]
    e30a:	685b      	ldr	r3, [r3, #4]
    e30c:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e30e:	68fa      	ldr	r2, [r7, #12]
    e310:	6912      	ldr	r2, [r2, #16]
    e312:	fbb3 f1f2 	udiv	r1, r3, r2
    e316:	fb02 f201 	mul.w	r2, r2, r1
    e31a:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e31c:	69fa      	ldr	r2, [r7, #28]
    e31e:	429a      	cmp	r2, r3
    e320:	d312      	bcc.n	e348 <am_app_utils_ring_buffer_push+0xc0>
            {    
                psBuffer->ui32OverWriting = 1;
    e322:	68fb      	ldr	r3, [r7, #12]
    e324:	2201      	movs	r2, #1
    e326:	60da      	str	r2, [r3, #12]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e328:	68fb      	ldr	r3, [r7, #12]
    e32a:	689a      	ldr	r2, [r3, #8]
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	691b      	ldr	r3, [r3, #16]
    e330:	441a      	add	r2, r3
    e332:	68fb      	ldr	r3, [r7, #12]
    e334:	685b      	ldr	r3, [r3, #4]
    e336:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity);
    e338:	68fa      	ldr	r2, [r7, #12]
    e33a:	6912      	ldr	r2, [r2, #16]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e33c:	fbb3 f1f2 	udiv	r1, r3, r2
    e340:	fb02 f201 	mul.w	r2, r2, r1
    e344:	1a9b      	subs	r3, r3, r2
    e346:	61fb      	str	r3, [r7, #28]
            }
    
        }        
            
        ui32ReturnPushLen = ui32CopyLen;
    e348:	69fb      	ldr	r3, [r7, #28]
    e34a:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e34c:	e020      	b.n	e390 <am_app_utils_ring_buffer_push+0x108>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e34e:	68fb      	ldr	r3, [r7, #12]
    e350:	691a      	ldr	r2, [r3, #16]
    e352:	68fb      	ldr	r3, [r7, #12]
    e354:	685b      	ldr	r3, [r3, #4]
    e356:	1ad3      	subs	r3, r2, r3
    e358:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e35a:	68fb      	ldr	r3, [r7, #12]
    e35c:	681a      	ldr	r2, [r3, #0]
    e35e:	68fb      	ldr	r3, [r7, #12]
    e360:	685b      	ldr	r3, [r3, #4]
    e362:	4413      	add	r3, r2
    e364:	69ba      	ldr	r2, [r7, #24]
    e366:	6939      	ldr	r1, [r7, #16]
    e368:	4618      	mov	r0, r3
    e36a:	f7fd fec9 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e36e:	68fb      	ldr	r3, [r7, #12]
    e370:	685a      	ldr	r2, [r3, #4]
    e372:	69bb      	ldr	r3, [r7, #24]
    e374:	4413      	add	r3, r2
    e376:	68fa      	ldr	r2, [r7, #12]
    e378:	6912      	ldr	r2, [r2, #16]
    e37a:	fbb3 f1f2 	udiv	r1, r3, r2
    e37e:	fb02 f201 	mul.w	r2, r2, r1
    e382:	1a9a      	subs	r2, r3, r2
    e384:	68fb      	ldr	r3, [r7, #12]
    e386:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e388:	69fa      	ldr	r2, [r7, #28]
    e38a:	69bb      	ldr	r3, [r7, #24]
    e38c:	1ad3      	subs	r3, r2, r3
    e38e:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e390:	68fb      	ldr	r3, [r7, #12]
    e392:	685a      	ldr	r2, [r3, #4]
    e394:	69fb      	ldr	r3, [r7, #28]
    e396:	441a      	add	r2, r3
    e398:	68fb      	ldr	r3, [r7, #12]
    e39a:	691b      	ldr	r3, [r3, #16]
    e39c:	429a      	cmp	r2, r3
    e39e:	d2d6      	bcs.n	e34e <am_app_utils_ring_buffer_push+0xc6>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e3a0:	68fb      	ldr	r3, [r7, #12]
    e3a2:	681a      	ldr	r2, [r3, #0]
    e3a4:	68fb      	ldr	r3, [r7, #12]
    e3a6:	685b      	ldr	r3, [r3, #4]
    e3a8:	18d0      	adds	r0, r2, r3
    e3aa:	693a      	ldr	r2, [r7, #16]
    e3ac:	69bb      	ldr	r3, [r7, #24]
    e3ae:	4413      	add	r3, r2
    e3b0:	69fa      	ldr	r2, [r7, #28]
    e3b2:	4619      	mov	r1, r3
    e3b4:	f7fd fea4 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e3b8:	68fb      	ldr	r3, [r7, #12]
    e3ba:	685a      	ldr	r2, [r3, #4]
    e3bc:	69fb      	ldr	r3, [r7, #28]
    e3be:	4413      	add	r3, r2
    e3c0:	68fa      	ldr	r2, [r7, #12]
    e3c2:	6912      	ldr	r2, [r2, #16]
    e3c4:	fbb3 f1f2 	udiv	r1, r3, r2
    e3c8:	fb02 f201 	mul.w	r2, r2, r1
    e3cc:	1a9a      	subs	r2, r3, r2
    e3ce:	68fb      	ldr	r3, [r7, #12]
    e3d0:	605a      	str	r2, [r3, #4]
        
        return ui32ReturnPushLen;
    e3d2:	697b      	ldr	r3, [r7, #20]
    e3d4:	e075      	b.n	e4c2 <am_app_utils_ring_buffer_push+0x23a>
    }
    else        // if no full check, the return bytes are always ui32Bytes.
    {
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	685a      	ldr	r2, [r3, #4]
    e3da:	68fb      	ldr	r3, [r7, #12]
    e3dc:	689b      	ldr	r3, [r3, #8]
    e3de:	429a      	cmp	r2, r3
    e3e0:	d10c      	bne.n	e3fc <am_app_utils_ring_buffer_push+0x174>
    e3e2:	68fb      	ldr	r3, [r7, #12]
    e3e4:	68db      	ldr	r3, [r3, #12]
    e3e6:	2b00      	cmp	r3, #0
    e3e8:	d108      	bne.n	e3fc <am_app_utils_ring_buffer_push+0x174>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3ea:	68fb      	ldr	r3, [r7, #12]
    e3ec:	691b      	ldr	r3, [r3, #16]
    e3ee:	69fa      	ldr	r2, [r7, #28]
    e3f0:	429a      	cmp	r2, r3
    e3f2:	d318      	bcc.n	e426 <am_app_utils_ring_buffer_push+0x19e>
            {      
                psBuffer->ui32OverWriting = 1;
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	2201      	movs	r2, #1
    e3f8:	60da      	str	r2, [r3, #12]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3fa:	e014      	b.n	e426 <am_app_utils_ring_buffer_push+0x19e>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3fc:	68fb      	ldr	r3, [r7, #12]
    e3fe:	689a      	ldr	r2, [r3, #8]
    e400:	68fb      	ldr	r3, [r7, #12]
    e402:	691b      	ldr	r3, [r3, #16]
    e404:	441a      	add	r2, r3
    e406:	68fb      	ldr	r3, [r7, #12]
    e408:	685b      	ldr	r3, [r3, #4]
    e40a:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e40c:	68fa      	ldr	r2, [r7, #12]
    e40e:	6912      	ldr	r2, [r2, #16]
    e410:	fbb3 f1f2 	udiv	r1, r3, r2
    e414:	fb02 f201 	mul.w	r2, r2, r1
    e418:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e41a:	69fa      	ldr	r2, [r7, #28]
    e41c:	429a      	cmp	r2, r3
    e41e:	d302      	bcc.n	e426 <am_app_utils_ring_buffer_push+0x19e>
            {    
                psBuffer->ui32OverWriting = 1;
    e420:	68fb      	ldr	r3, [r7, #12]
    e422:	2201      	movs	r2, #1
    e424:	60da      	str	r2, [r3, #12]
            }
        }        

        ui32ReturnPushLen = ui32CopyLen;
    e426:	69fb      	ldr	r3, [r7, #28]
    e428:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e42a:	e020      	b.n	e46e <am_app_utils_ring_buffer_push+0x1e6>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e42c:	68fb      	ldr	r3, [r7, #12]
    e42e:	691a      	ldr	r2, [r3, #16]
    e430:	68fb      	ldr	r3, [r7, #12]
    e432:	685b      	ldr	r3, [r3, #4]
    e434:	1ad3      	subs	r3, r2, r3
    e436:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e438:	68fb      	ldr	r3, [r7, #12]
    e43a:	681a      	ldr	r2, [r3, #0]
    e43c:	68fb      	ldr	r3, [r7, #12]
    e43e:	685b      	ldr	r3, [r3, #4]
    e440:	4413      	add	r3, r2
    e442:	69ba      	ldr	r2, [r7, #24]
    e444:	6939      	ldr	r1, [r7, #16]
    e446:	4618      	mov	r0, r3
    e448:	f7fd fe5a 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e44c:	68fb      	ldr	r3, [r7, #12]
    e44e:	685a      	ldr	r2, [r3, #4]
    e450:	69bb      	ldr	r3, [r7, #24]
    e452:	4413      	add	r3, r2
    e454:	68fa      	ldr	r2, [r7, #12]
    e456:	6912      	ldr	r2, [r2, #16]
    e458:	fbb3 f1f2 	udiv	r1, r3, r2
    e45c:	fb02 f201 	mul.w	r2, r2, r1
    e460:	1a9a      	subs	r2, r3, r2
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e466:	69fa      	ldr	r2, [r7, #28]
    e468:	69bb      	ldr	r3, [r7, #24]
    e46a:	1ad3      	subs	r3, r2, r3
    e46c:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e46e:	68fb      	ldr	r3, [r7, #12]
    e470:	685a      	ldr	r2, [r3, #4]
    e472:	69fb      	ldr	r3, [r7, #28]
    e474:	441a      	add	r2, r3
    e476:	68fb      	ldr	r3, [r7, #12]
    e478:	691b      	ldr	r3, [r3, #16]
    e47a:	429a      	cmp	r2, r3
    e47c:	d2d6      	bcs.n	e42c <am_app_utils_ring_buffer_push+0x1a4>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e47e:	68fb      	ldr	r3, [r7, #12]
    e480:	681a      	ldr	r2, [r3, #0]
    e482:	68fb      	ldr	r3, [r7, #12]
    e484:	685b      	ldr	r3, [r3, #4]
    e486:	18d0      	adds	r0, r2, r3
    e488:	693a      	ldr	r2, [r7, #16]
    e48a:	69bb      	ldr	r3, [r7, #24]
    e48c:	4413      	add	r3, r2
    e48e:	69fa      	ldr	r2, [r7, #28]
    e490:	4619      	mov	r1, r3
    e492:	f7fd fe35 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e496:	68fb      	ldr	r3, [r7, #12]
    e498:	685a      	ldr	r2, [r3, #4]
    e49a:	69fb      	ldr	r3, [r7, #28]
    e49c:	4413      	add	r3, r2
    e49e:	68fa      	ldr	r2, [r7, #12]
    e4a0:	6912      	ldr	r2, [r2, #16]
    e4a2:	fbb3 f1f2 	udiv	r1, r3, r2
    e4a6:	fb02 f201 	mul.w	r2, r2, r1
    e4aa:	1a9a      	subs	r2, r3, r2
    e4ac:	68fb      	ldr	r3, [r7, #12]
    e4ae:	605a      	str	r2, [r3, #4]
        
        //
        // Keep read and write at same position
        //
        if(psBuffer->ui32OverWriting == 1)
    e4b0:	68fb      	ldr	r3, [r7, #12]
    e4b2:	68db      	ldr	r3, [r3, #12]
    e4b4:	2b01      	cmp	r3, #1
    e4b6:	d103      	bne.n	e4c0 <am_app_utils_ring_buffer_push+0x238>
        {
            psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e4b8:	68fb      	ldr	r3, [r7, #12]
    e4ba:	685a      	ldr	r2, [r3, #4]
    e4bc:	68fb      	ldr	r3, [r7, #12]
    e4be:	609a      	str	r2, [r3, #8]
        }
        
        return ui32ReturnPushLen;
    e4c0:	697b      	ldr	r3, [r7, #20]
    }
}
    e4c2:	4618      	mov	r0, r3
    e4c4:	3720      	adds	r7, #32
    e4c6:	46bd      	mov	sp, r7
    e4c8:	bd80      	pop	{r7, pc}

0000e4ca <am_app_utils_ring_buffer_pop>:


uint32_t am_app_utils_ring_buffer_pop(am_app_utils_ring_buffer_t *psBuffer, void *pvDest,
                         uint32_t ui32Bytes)
{
    e4ca:	b580      	push	{r7, lr}
    e4cc:	b08a      	sub	sp, #40	; 0x28
    e4ce:	af00      	add	r7, sp, #0
    e4d0:	60f8      	str	r0, [r7, #12]
    e4d2:	60b9      	str	r1, [r7, #8]
    e4d4:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e4d6:	2300      	movs	r3, #0
    e4d8:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint32_t ui32TempLen = 0;
    e4da:	2300      	movs	r3, #0
    e4dc:	623b      	str	r3, [r7, #32]
    
    uint32_t ui32DataLen = 0;
    e4de:	2300      	movs	r3, #0
    e4e0:	61fb      	str	r3, [r7, #28]

    uint32_t ui32ReturnPopLen = 0;
    e4e2:	2300      	movs	r3, #0
    e4e4:	61bb      	str	r3, [r7, #24]

    uint8_t *pui8Dest;

    pui8Dest = (uint8_t *) pvDest;
    e4e6:	68bb      	ldr	r3, [r7, #8]
    e4e8:	617b      	str	r3, [r7, #20]
    ui32DataLen = am_app_utils_get_ring_buffer_status(psBuffer);
    e4ea:	68f8      	ldr	r0, [r7, #12]
    e4ec:	f000 f862 	bl	e5b4 <am_app_utils_get_ring_buffer_status>
    e4f0:	61f8      	str	r0, [r7, #28]
   
    if(am_app_utils_ring_buffer_overwrite(psBuffer))
    e4f2:	68fb      	ldr	r3, [r7, #12]
    e4f4:	685a      	ldr	r2, [r3, #4]
    e4f6:	68fb      	ldr	r3, [r7, #12]
    e4f8:	689b      	ldr	r3, [r3, #8]
    e4fa:	429a      	cmp	r2, r3
    e4fc:	d007      	beq.n	e50e <am_app_utils_ring_buffer_pop+0x44>
    e4fe:	68fb      	ldr	r3, [r7, #12]
    e500:	68db      	ldr	r3, [r3, #12]
    e502:	2b01      	cmp	r3, #1
    e504:	d103      	bne.n	e50e <am_app_utils_ring_buffer_pop+0x44>
    {
        psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e506:	68fb      	ldr	r3, [r7, #12]
    e508:	685a      	ldr	r2, [r3, #4]
    e50a:	68fb      	ldr	r3, [r7, #12]
    e50c:	609a      	str	r2, [r3, #8]
       
    }

    // pop len can't exceed the length of buffer
    ui32CopyLen = ui32Bytes < ui32DataLen ? ui32Bytes : ui32DataLen;
    e50e:	69fa      	ldr	r2, [r7, #28]
    e510:	687b      	ldr	r3, [r7, #4]
    e512:	4293      	cmp	r3, r2
    e514:	bf28      	it	cs
    e516:	4613      	movcs	r3, r2
    e518:	627b      	str	r3, [r7, #36]	; 0x24
    
    ui32ReturnPopLen = ui32CopyLen;
    e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e51c:	61bb      	str	r3, [r7, #24]

    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e51e:	e020      	b.n	e562 <am_app_utils_ring_buffer_pop+0x98>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read;
    e520:	68fb      	ldr	r3, [r7, #12]
    e522:	691a      	ldr	r2, [r3, #16]
    e524:	68fb      	ldr	r3, [r7, #12]
    e526:	689b      	ldr	r3, [r3, #8]
    e528:	1ad3      	subs	r3, r2, r3
    e52a:	623b      	str	r3, [r7, #32]
        memcpy(pui8Dest, (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32TempLen);
    e52c:	68fb      	ldr	r3, [r7, #12]
    e52e:	681a      	ldr	r2, [r3, #0]
    e530:	68fb      	ldr	r3, [r7, #12]
    e532:	689b      	ldr	r3, [r3, #8]
    e534:	4413      	add	r3, r2
    e536:	6a3a      	ldr	r2, [r7, #32]
    e538:	4619      	mov	r1, r3
    e53a:	6978      	ldr	r0, [r7, #20]
    e53c:	f7fd fde0 	bl	c100 <memcpy>
        psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32TempLen) % psBuffer->ui32Capacity);
    e540:	68fb      	ldr	r3, [r7, #12]
    e542:	689a      	ldr	r2, [r3, #8]
    e544:	6a3b      	ldr	r3, [r7, #32]
    e546:	4413      	add	r3, r2
    e548:	68fa      	ldr	r2, [r7, #12]
    e54a:	6912      	ldr	r2, [r2, #16]
    e54c:	fbb3 f1f2 	udiv	r1, r3, r2
    e550:	fb02 f201 	mul.w	r2, r2, r1
    e554:	1a9a      	subs	r2, r3, r2
    e556:	68fb      	ldr	r3, [r7, #12]
    e558:	609a      	str	r2, [r3, #8]
        ui32CopyLen -= ui32TempLen;
    e55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e55c:	6a3b      	ldr	r3, [r7, #32]
    e55e:	1ad3      	subs	r3, r2, r3
    e560:	627b      	str	r3, [r7, #36]	; 0x24
    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	689a      	ldr	r2, [r3, #8]
    e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e568:	441a      	add	r2, r3
    e56a:	68fb      	ldr	r3, [r7, #12]
    e56c:	691b      	ldr	r3, [r3, #16]
    e56e:	429a      	cmp	r2, r3
    e570:	d2d6      	bcs.n	e520 <am_app_utils_ring_buffer_pop+0x56>
    }

//    configASSERT((psBuffer->ui32BufferHead_read + ui32CopyLen) < psBuffer->ui32Capacity);
    
    memcpy(&pui8Dest[ui32TempLen], (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32CopyLen);
    e572:	697a      	ldr	r2, [r7, #20]
    e574:	6a3b      	ldr	r3, [r7, #32]
    e576:	18d0      	adds	r0, r2, r3
    e578:	68fb      	ldr	r3, [r7, #12]
    e57a:	681a      	ldr	r2, [r3, #0]
    e57c:	68fb      	ldr	r3, [r7, #12]
    e57e:	689b      	ldr	r3, [r3, #8]
    e580:	4413      	add	r3, r2
    e582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e584:	4619      	mov	r1, r3
    e586:	f7fd fdbb 	bl	c100 <memcpy>
    
    psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32CopyLen) % psBuffer->ui32Capacity);
    e58a:	68fb      	ldr	r3, [r7, #12]
    e58c:	689a      	ldr	r2, [r3, #8]
    e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e590:	4413      	add	r3, r2
    e592:	68fa      	ldr	r2, [r7, #12]
    e594:	6912      	ldr	r2, [r2, #16]
    e596:	fbb3 f1f2 	udiv	r1, r3, r2
    e59a:	fb02 f201 	mul.w	r2, r2, r1
    e59e:	1a9a      	subs	r2, r3, r2
    e5a0:	68fb      	ldr	r3, [r7, #12]
    e5a2:	609a      	str	r2, [r3, #8]
      
    psBuffer->ui32OverWriting = 0;
    e5a4:	68fb      	ldr	r3, [r7, #12]
    e5a6:	2200      	movs	r2, #0
    e5a8:	60da      	str	r2, [r3, #12]

    return ui32ReturnPopLen;
    e5aa:	69bb      	ldr	r3, [r7, #24]
}
    e5ac:	4618      	mov	r0, r3
    e5ae:	3728      	adds	r7, #40	; 0x28
    e5b0:	46bd      	mov	sp, r7
    e5b2:	bd80      	pop	{r7, pc}

0000e5b4 <am_app_utils_get_ring_buffer_status>:
//! @return The number of data left.
//
//*****************************************************************************
uint32_t
am_app_utils_get_ring_buffer_status(am_app_utils_ring_buffer_t *psBuffer)
{
    e5b4:	b480      	push	{r7}
    e5b6:	b085      	sub	sp, #20
    e5b8:	af00      	add	r7, sp, #0
    e5ba:	6078      	str	r0, [r7, #4]
    uint32_t ui32NewDataLen = 0;
    e5bc:	2300      	movs	r3, #0
    e5be:	60fb      	str	r3, [r7, #12]
    
    if (am_app_utils_ring_buffer_overwrite(psBuffer) || am_app_utils_ring_buffer_full(psBuffer))
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	685a      	ldr	r2, [r3, #4]
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	689b      	ldr	r3, [r3, #8]
    e5c8:	429a      	cmp	r2, r3
    e5ca:	d003      	beq.n	e5d4 <am_app_utils_get_ring_buffer_status+0x20>
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	68db      	ldr	r3, [r3, #12]
    e5d0:	2b01      	cmp	r3, #1
    e5d2:	d009      	beq.n	e5e8 <am_app_utils_get_ring_buffer_status+0x34>
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	685a      	ldr	r2, [r3, #4]
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	689b      	ldr	r3, [r3, #8]
    e5dc:	429a      	cmp	r2, r3
    e5de:	d108      	bne.n	e5f2 <am_app_utils_get_ring_buffer_status+0x3e>
    e5e0:	687b      	ldr	r3, [r7, #4]
    e5e2:	68db      	ldr	r3, [r3, #12]
    e5e4:	2b01      	cmp	r3, #1
    e5e6:	d104      	bne.n	e5f2 <am_app_utils_get_ring_buffer_status+0x3e>
    {
        ui32NewDataLen = psBuffer->ui32Capacity;
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	691b      	ldr	r3, [r3, #16]
    e5ec:	60fb      	str	r3, [r7, #12]
        return ui32NewDataLen;
    e5ee:	68fb      	ldr	r3, [r7, #12]
    e5f0:	e010      	b.n	e614 <am_app_utils_get_ring_buffer_status+0x60>
    }
    
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	685a      	ldr	r2, [r3, #4]
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	691b      	ldr	r3, [r3, #16]
    e5fa:	441a      	add	r2, r3
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	689b      	ldr	r3, [r3, #8]
    e600:	1ad3      	subs	r3, r2, r3
        psBuffer->ui32Capacity);
    e602:	687a      	ldr	r2, [r7, #4]
    e604:	6912      	ldr	r2, [r2, #16]
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e606:	fbb3 f1f2 	udiv	r1, r3, r2
    e60a:	fb02 f201 	mul.w	r2, r2, r1
    e60e:	1a9b      	subs	r3, r3, r2
    e610:	60fb      	str	r3, [r7, #12]

    return ui32NewDataLen; 
    e612:	68fb      	ldr	r3, [r7, #12]

}
    e614:	4618      	mov	r0, r3
    e616:	3714      	adds	r7, #20
    e618:	46bd      	mov	sp, r7
    e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e61e:	4770      	bx	lr

0000e620 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e620:	b580      	push	{r7, lr}
    e622:	b082      	sub	sp, #8
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	2b00      	cmp	r3, #0
    e62c:	d03d      	beq.n	e6aa <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e632:	2b31      	cmp	r3, #49	; 0x31
    e634:	d839      	bhi.n	e6aa <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	685b      	ldr	r3, [r3, #4]
    e63a:	f003 0302 	and.w	r3, r3, #2
    e63e:	2b00      	cmp	r3, #0
    e640:	d019      	beq.n	e676 <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e642:	687b      	ldr	r3, [r7, #4]
    e644:	681a      	ldr	r2, [r3, #0]
    e646:	4b1b      	ldr	r3, [pc, #108]	; (e6b4 <am_devices_led_init+0x94>)
    e648:	6819      	ldr	r1, [r3, #0]
    e64a:	4610      	mov	r0, r2
    e64c:	f7fe fab8 	bl	cbc0 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	681b      	ldr	r3, [r3, #0]
    e654:	2103      	movs	r1, #3
    e656:	4618      	mov	r0, r3
    e658:	f7fe fcf2 	bl	d040 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e664:	b2db      	uxtb	r3, r3
    e666:	f003 0301 	and.w	r3, r3, #1
    e66a:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e66c:	4619      	mov	r1, r3
    e66e:	4610      	mov	r0, r2
    e670:	f7fe fce6 	bl	d040 <am_hal_gpio_state_write>
    e674:	e01a      	b.n	e6ac <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	681a      	ldr	r2, [r3, #0]
    e67a:	4b0f      	ldr	r3, [pc, #60]	; (e6b8 <am_devices_led_init+0x98>)
    e67c:	6819      	ldr	r1, [r3, #0]
    e67e:	4610      	mov	r0, r2
    e680:	f7fe fa9e 	bl	cbc0 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	681b      	ldr	r3, [r3, #0]
    e688:	2103      	movs	r1, #3
    e68a:	4618      	mov	r0, r3
    e68c:	f7fe fcd8 	bl	d040 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e694:	687b      	ldr	r3, [r7, #4]
    e696:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e698:	b2db      	uxtb	r3, r3
    e69a:	f003 0301 	and.w	r3, r3, #1
    e69e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e6a0:	4619      	mov	r1, r3
    e6a2:	4610      	mov	r0, r2
    e6a4:	f7fe fccc 	bl	d040 <am_hal_gpio_state_write>
    e6a8:	e000      	b.n	e6ac <am_devices_led_init+0x8c>
        return;
    e6aa:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e6ac:	3708      	adds	r7, #8
    e6ae:	46bd      	mov	sp, r7
    e6b0:	bd80      	pop	{r7, pc}
    e6b2:	bf00      	nop
    e6b4:	00010c58 	.word	0x00010c58
    e6b8:	00010c5c 	.word	0x00010c5c

0000e6bc <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e6bc:	b580      	push	{r7, lr}
    e6be:	b084      	sub	sp, #16
    e6c0:	af00      	add	r7, sp, #0
    e6c2:	6078      	str	r0, [r7, #4]
    e6c4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e6c6:	687b      	ldr	r3, [r7, #4]
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	d014      	beq.n	e6f6 <am_devices_led_array_init+0x3a>
    e6cc:	683b      	ldr	r3, [r7, #0]
    e6ce:	2b1f      	cmp	r3, #31
    e6d0:	d811      	bhi.n	e6f6 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6d2:	2300      	movs	r3, #0
    e6d4:	60fb      	str	r3, [r7, #12]
    e6d6:	e009      	b.n	e6ec <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e6d8:	68fb      	ldr	r3, [r7, #12]
    e6da:	00db      	lsls	r3, r3, #3
    e6dc:	687a      	ldr	r2, [r7, #4]
    e6de:	4413      	add	r3, r2
    e6e0:	4618      	mov	r0, r3
    e6e2:	f7ff ff9d 	bl	e620 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6e6:	68fb      	ldr	r3, [r7, #12]
    e6e8:	3301      	adds	r3, #1
    e6ea:	60fb      	str	r3, [r7, #12]
    e6ec:	68fa      	ldr	r2, [r7, #12]
    e6ee:	683b      	ldr	r3, [r7, #0]
    e6f0:	429a      	cmp	r2, r3
    e6f2:	d3f1      	bcc.n	e6d8 <am_devices_led_array_init+0x1c>
    e6f4:	e000      	b.n	e6f8 <am_devices_led_array_init+0x3c>
        return;
    e6f6:	bf00      	nop
    }
}
    e6f8:	3710      	adds	r7, #16
    e6fa:	46bd      	mov	sp, r7
    e6fc:	bd80      	pop	{r7, pc}

0000e6fe <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e6fe:	b580      	push	{r7, lr}
    e700:	b082      	sub	sp, #8
    e702:	af00      	add	r7, sp, #0
    e704:	6078      	str	r0, [r7, #4]
    e706:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e708:	687b      	ldr	r3, [r7, #4]
    e70a:	2b00      	cmp	r3, #0
    e70c:	d02e      	beq.n	e76c <am_devices_led_on+0x6e>
    e70e:	683b      	ldr	r3, [r7, #0]
    e710:	2b1e      	cmp	r3, #30
    e712:	d82b      	bhi.n	e76c <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e714:	683b      	ldr	r3, [r7, #0]
    e716:	00db      	lsls	r3, r3, #3
    e718:	687a      	ldr	r2, [r7, #4]
    e71a:	4413      	add	r3, r2
    e71c:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e71e:	2b31      	cmp	r3, #49	; 0x31
    e720:	d824      	bhi.n	e76c <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e722:	683b      	ldr	r3, [r7, #0]
    e724:	00db      	lsls	r3, r3, #3
    e726:	687a      	ldr	r2, [r7, #4]
    e728:	4413      	add	r3, r2
    e72a:	685b      	ldr	r3, [r3, #4]
    e72c:	f003 0302 	and.w	r3, r3, #2
    e730:	2b00      	cmp	r3, #0
    e732:	d011      	beq.n	e758 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e734:	683b      	ldr	r3, [r7, #0]
    e736:	00db      	lsls	r3, r3, #3
    e738:	687a      	ldr	r2, [r7, #4]
    e73a:	4413      	add	r3, r2
    e73c:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e73e:	683b      	ldr	r3, [r7, #0]
    e740:	00db      	lsls	r3, r3, #3
    e742:	687a      	ldr	r2, [r7, #4]
    e744:	4413      	add	r3, r2
    e746:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e748:	b2db      	uxtb	r3, r3
    e74a:	f003 0301 	and.w	r3, r3, #1
    e74e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e750:	4619      	mov	r1, r3
    e752:	f7fe fc75 	bl	d040 <am_hal_gpio_state_write>
    e756:	e00a      	b.n	e76e <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e758:	683b      	ldr	r3, [r7, #0]
    e75a:	00db      	lsls	r3, r3, #3
    e75c:	687a      	ldr	r2, [r7, #4]
    e75e:	4413      	add	r3, r2
    e760:	681b      	ldr	r3, [r3, #0]
    e762:	2104      	movs	r1, #4
    e764:	4618      	mov	r0, r3
    e766:	f7fe fc6b 	bl	d040 <am_hal_gpio_state_write>
    e76a:	e000      	b.n	e76e <am_devices_led_on+0x70>
        return;
    e76c:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e76e:	3708      	adds	r7, #8
    e770:	46bd      	mov	sp, r7
    e772:	bd80      	pop	{r7, pc}

0000e774 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e774:	b580      	push	{r7, lr}
    e776:	b082      	sub	sp, #8
    e778:	af00      	add	r7, sp, #0
    e77a:	6078      	str	r0, [r7, #4]
    e77c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e77e:	687b      	ldr	r3, [r7, #4]
    e780:	2b00      	cmp	r3, #0
    e782:	d031      	beq.n	e7e8 <am_devices_led_off+0x74>
    e784:	683b      	ldr	r3, [r7, #0]
    e786:	2b1e      	cmp	r3, #30
    e788:	d82e      	bhi.n	e7e8 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e78a:	683b      	ldr	r3, [r7, #0]
    e78c:	00db      	lsls	r3, r3, #3
    e78e:	687a      	ldr	r2, [r7, #4]
    e790:	4413      	add	r3, r2
    e792:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e794:	2b31      	cmp	r3, #49	; 0x31
    e796:	d827      	bhi.n	e7e8 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e798:	683b      	ldr	r3, [r7, #0]
    e79a:	00db      	lsls	r3, r3, #3
    e79c:	687a      	ldr	r2, [r7, #4]
    e79e:	4413      	add	r3, r2
    e7a0:	685b      	ldr	r3, [r3, #4]
    e7a2:	f003 0302 	and.w	r3, r3, #2
    e7a6:	2b00      	cmp	r3, #0
    e7a8:	d014      	beq.n	e7d4 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7aa:	683b      	ldr	r3, [r7, #0]
    e7ac:	00db      	lsls	r3, r3, #3
    e7ae:	687a      	ldr	r2, [r7, #4]
    e7b0:	4413      	add	r3, r2
    e7b2:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e7b4:	683b      	ldr	r3, [r7, #0]
    e7b6:	00db      	lsls	r3, r3, #3
    e7b8:	687a      	ldr	r2, [r7, #4]
    e7ba:	4413      	add	r3, r2
    e7bc:	685b      	ldr	r3, [r3, #4]
    e7be:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	bf0c      	ite	eq
    e7c6:	2301      	moveq	r3, #1
    e7c8:	2300      	movne	r3, #0
    e7ca:	b2db      	uxtb	r3, r3
    e7cc:	4619      	mov	r1, r3
    e7ce:	f7fe fc37 	bl	d040 <am_hal_gpio_state_write>
    e7d2:	e00a      	b.n	e7ea <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7d4:	683b      	ldr	r3, [r7, #0]
    e7d6:	00db      	lsls	r3, r3, #3
    e7d8:	687a      	ldr	r2, [r7, #4]
    e7da:	4413      	add	r3, r2
    e7dc:	681b      	ldr	r3, [r3, #0]
    e7de:	2103      	movs	r1, #3
    e7e0:	4618      	mov	r0, r3
    e7e2:	f7fe fc2d 	bl	d040 <am_hal_gpio_state_write>
    e7e6:	e000      	b.n	e7ea <am_devices_led_off+0x76>
        return;
    e7e8:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e7ea:	3708      	adds	r7, #8
    e7ec:	46bd      	mov	sp, r7
    e7ee:	bd80      	pop	{r7, pc}

0000e7f0 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b084      	sub	sp, #16
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
    e7f8:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e7fa:	687b      	ldr	r3, [r7, #4]
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	d042      	beq.n	e886 <am_devices_led_toggle+0x96>
    e800:	683b      	ldr	r3, [r7, #0]
    e802:	2b1e      	cmp	r3, #30
    e804:	d83f      	bhi.n	e886 <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e806:	683b      	ldr	r3, [r7, #0]
    e808:	00db      	lsls	r3, r3, #3
    e80a:	687a      	ldr	r2, [r7, #4]
    e80c:	4413      	add	r3, r2
    e80e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e810:	2b31      	cmp	r3, #49	; 0x31
    e812:	d838      	bhi.n	e886 <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e814:	683b      	ldr	r3, [r7, #0]
    e816:	00db      	lsls	r3, r3, #3
    e818:	687a      	ldr	r2, [r7, #4]
    e81a:	4413      	add	r3, r2
    e81c:	685b      	ldr	r3, [r3, #4]
    e81e:	f003 0302 	and.w	r3, r3, #2
    e822:	2b00      	cmp	r3, #0
    e824:	d009      	beq.n	e83a <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e826:	683b      	ldr	r3, [r7, #0]
    e828:	00db      	lsls	r3, r3, #3
    e82a:	687a      	ldr	r2, [r7, #4]
    e82c:	4413      	add	r3, r2
    e82e:	681b      	ldr	r3, [r3, #0]
    e830:	2102      	movs	r1, #2
    e832:	4618      	mov	r0, r3
    e834:	f7fe fc04 	bl	d040 <am_hal_gpio_state_write>
    e838:	e026      	b.n	e888 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e83a:	683b      	ldr	r3, [r7, #0]
    e83c:	00db      	lsls	r3, r3, #3
    e83e:	687a      	ldr	r2, [r7, #4]
    e840:	4413      	add	r3, r2
    e842:	681b      	ldr	r3, [r3, #0]
    e844:	f107 0208 	add.w	r2, r7, #8
    e848:	2102      	movs	r1, #2
    e84a:	4618      	mov	r0, r3
    e84c:	f7fe fb94 	bl	cf78 <am_hal_gpio_state_read>
    e850:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e852:	68fb      	ldr	r3, [r7, #12]
    e854:	2b00      	cmp	r3, #0
    e856:	d117      	bne.n	e888 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e858:	68bb      	ldr	r3, [r7, #8]
    e85a:	2b00      	cmp	r3, #0
    e85c:	d009      	beq.n	e872 <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e85e:	683b      	ldr	r3, [r7, #0]
    e860:	00db      	lsls	r3, r3, #3
    e862:	687a      	ldr	r2, [r7, #4]
    e864:	4413      	add	r3, r2
    e866:	681b      	ldr	r3, [r3, #0]
    e868:	2103      	movs	r1, #3
    e86a:	4618      	mov	r0, r3
    e86c:	f7fe fbe8 	bl	d040 <am_hal_gpio_state_write>
    e870:	e00a      	b.n	e888 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e872:	683b      	ldr	r3, [r7, #0]
    e874:	00db      	lsls	r3, r3, #3
    e876:	687a      	ldr	r2, [r7, #4]
    e878:	4413      	add	r3, r2
    e87a:	681b      	ldr	r3, [r3, #0]
    e87c:	2104      	movs	r1, #4
    e87e:	4618      	mov	r0, r3
    e880:	f7fe fbde 	bl	d040 <am_hal_gpio_state_write>
    e884:	e000      	b.n	e888 <am_devices_led_toggle+0x98>
        return;
    e886:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e888:	3710      	adds	r7, #16
    e88a:	46bd      	mov	sp, r7
    e88c:	bd80      	pop	{r7, pc}
	...

0000e890 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e890:	4811      	ldr	r0, [pc, #68]	; (e8d8 <zero_loop+0x12>)
    e892:	4912      	ldr	r1, [pc, #72]	; (e8dc <zero_loop+0x16>)
    e894:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e896:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e89a:	4811      	ldr	r0, [pc, #68]	; (e8e0 <zero_loop+0x1a>)
    e89c:	6801      	ldr	r1, [r0, #0]
    e89e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e8a2:	6001      	str	r1, [r0, #0]
    e8a4:	f3bf 8f4f 	dsb	sy
    e8a8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e8ac:	480d      	ldr	r0, [pc, #52]	; (e8e4 <zero_loop+0x1e>)
    e8ae:	490e      	ldr	r1, [pc, #56]	; (e8e8 <zero_loop+0x22>)
    e8b0:	4a0e      	ldr	r2, [pc, #56]	; (e8ec <zero_loop+0x26>)

0000e8b2 <copy_loop>:
    e8b2:	f850 3b04 	ldr.w	r3, [r0], #4
    e8b6:	f841 3b04 	str.w	r3, [r1], #4
    e8ba:	4291      	cmp	r1, r2
    e8bc:	dbf9      	blt.n	e8b2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e8be:	480c      	ldr	r0, [pc, #48]	; (e8f0 <zero_loop+0x2a>)
    e8c0:	490c      	ldr	r1, [pc, #48]	; (e8f4 <zero_loop+0x2e>)
    e8c2:	f04f 0200 	mov.w	r2, #0

0000e8c6 <zero_loop>:
    e8c6:	4288      	cmp	r0, r1
    e8c8:	bfb8      	it	lt
    e8ca:	f840 2b04 	strlt.w	r2, [r0], #4
    e8ce:	dbfa      	blt.n	e8c6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e8d0:	f7fd fd00 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e8d4:	be00      	bkpt	0x0000
}
    e8d6:	bf00      	nop
    e8d8:	e000ed08 	.word	0xe000ed08
    e8dc:	0000c000 	.word	0x0000c000
    e8e0:	e000ed88 	.word	0xe000ed88
    e8e4:	00010f54 	.word	0x00010f54
    e8e8:	1000c000 	.word	0x1000c000
    e8ec:	1000c044 	.word	0x1000c044
    e8f0:	1000c044 	.word	0x1000c044
    e8f4:	1002c368 	.word	0x1002c368

0000e8f8 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e8f8:	b480      	push	{r7}
    e8fa:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e8fc:	e7fe      	b.n	e8fc <NMI_Handler+0x4>

0000e8fe <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e8fe:	b480      	push	{r7}
    e900:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e902:	e7fe      	b.n	e902 <DebugMon_Handler+0x4>

0000e904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e904:	b480      	push	{r7}
    e906:	b083      	sub	sp, #12
    e908:	af00      	add	r7, sp, #0
    e90a:	4603      	mov	r3, r0
    e90c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e912:	2b00      	cmp	r3, #0
    e914:	db0b      	blt.n	e92e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e916:	79fb      	ldrb	r3, [r7, #7]
    e918:	f003 021f 	and.w	r2, r3, #31
    e91c:	4907      	ldr	r1, [pc, #28]	; (e93c <__NVIC_EnableIRQ+0x38>)
    e91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e922:	095b      	lsrs	r3, r3, #5
    e924:	2001      	movs	r0, #1
    e926:	fa00 f202 	lsl.w	r2, r0, r2
    e92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e92e:	bf00      	nop
    e930:	370c      	adds	r7, #12
    e932:	46bd      	mov	sp, r7
    e934:	f85d 7b04 	ldr.w	r7, [sp], #4
    e938:	4770      	bx	lr
    e93a:	bf00      	nop
    e93c:	e000e100 	.word	0xe000e100

0000e940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    e940:	b480      	push	{r7}
    e942:	b083      	sub	sp, #12
    e944:	af00      	add	r7, sp, #0
    e946:	4603      	mov	r3, r0
    e948:	6039      	str	r1, [r7, #0]
    e94a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e94c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e950:	2b00      	cmp	r3, #0
    e952:	db0a      	blt.n	e96a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e954:	683b      	ldr	r3, [r7, #0]
    e956:	b2da      	uxtb	r2, r3
    e958:	490c      	ldr	r1, [pc, #48]	; (e98c <__NVIC_SetPriority+0x4c>)
    e95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e95e:	0152      	lsls	r2, r2, #5
    e960:	b2d2      	uxtb	r2, r2
    e962:	440b      	add	r3, r1
    e964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    e968:	e00a      	b.n	e980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e96a:	683b      	ldr	r3, [r7, #0]
    e96c:	b2da      	uxtb	r2, r3
    e96e:	4908      	ldr	r1, [pc, #32]	; (e990 <__NVIC_SetPriority+0x50>)
    e970:	79fb      	ldrb	r3, [r7, #7]
    e972:	f003 030f 	and.w	r3, r3, #15
    e976:	3b04      	subs	r3, #4
    e978:	0152      	lsls	r2, r2, #5
    e97a:	b2d2      	uxtb	r2, r2
    e97c:	440b      	add	r3, r1
    e97e:	761a      	strb	r2, [r3, #24]
}
    e980:	bf00      	nop
    e982:	370c      	adds	r7, #12
    e984:	46bd      	mov	sp, r7
    e986:	f85d 7b04 	ldr.w	r7, [sp], #4
    e98a:	4770      	bx	lr
    e98c:	e000e100 	.word	0xe000e100
    e990:	e000ed00 	.word	0xe000ed00

0000e994 <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    e994:	b580      	push	{r7, lr}
    e996:	b082      	sub	sp, #8
    e998:	af00      	add	r7, sp, #0
    e99a:	6078      	str	r0, [r7, #4]
    e99c:	6879      	ldr	r1, [r7, #4]
    e99e:	4803      	ldr	r0, [pc, #12]	; (e9ac <DebugLog+0x18>)
    e9a0:	f7ff fbe8 	bl	e174 <am_util_stdio_printf>
    e9a4:	bf00      	nop
    e9a6:	3708      	adds	r7, #8
    e9a8:	46bd      	mov	sp, r7
    e9aa:	bd80      	pop	{r7, pc}
    e9ac:	00010960 	.word	0x00010960

0000e9b0 <DebugLogUInt32>:
void DebugLogInt32(int32_t i) { am_util_stdio_printf("%d", i); }
void DebugLogUInt32(uint32_t i) { am_util_stdio_printf("%u", i); }
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b082      	sub	sp, #8
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	6078      	str	r0, [r7, #4]
    e9b8:	6879      	ldr	r1, [r7, #4]
    e9ba:	4803      	ldr	r0, [pc, #12]	; (e9c8 <DebugLogUInt32+0x18>)
    e9bc:	f7ff fbda 	bl	e174 <am_util_stdio_printf>
    e9c0:	bf00      	nop
    e9c2:	3708      	adds	r7, #8
    e9c4:	46bd      	mov	sp, r7
    e9c6:	bd80      	pop	{r7, pc}
    e9c8:	00010968 	.word	0x00010968

0000e9cc <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    e9cc:	b580      	push	{r7, lr}
    e9ce:	b082      	sub	sp, #8
    e9d0:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    e9d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9d6:	2000      	movs	r0, #0
    e9d8:	f000 ff7e 	bl	f8d8 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    e9dc:	490a      	ldr	r1, [pc, #40]	; (ea08 <timerA0_init+0x3c>)
    e9de:	2000      	movs	r0, #0
    e9e0:	f000 fee0 	bl	f7a4 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    e9e4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    e9e8:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    e9ea:	687b      	ldr	r3, [r7, #4]
    e9ec:	085b      	lsrs	r3, r3, #1
    e9ee:	687a      	ldr	r2, [r7, #4]
    e9f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9f4:	2000      	movs	r0, #0
    e9f6:	f000 ff83 	bl	f900 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e9fa:	2001      	movs	r0, #1
    e9fc:	f000 fffc 	bl	f9f8 <am_hal_ctimer_int_clear>
}
    ea00:	bf00      	nop
    ea02:	3708      	adds	r7, #8
    ea04:	46bd      	mov	sp, r7
    ea06:	bd80      	pop	{r7, pc}
    ea08:	1000c000 	.word	0x1000c000

0000ea0c <pdm_trigger_dma>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void pdm_trigger_dma(void)
{
    ea0c:	b580      	push	{r7, lr}
    ea0e:	b082      	sub	sp, #8
    ea10:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    ea12:	4b08      	ldr	r3, [pc, #32]	; (ea34 <pdm_trigger_dma+0x28>)
    ea14:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    ea16:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    ea1a:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    ea1c:	4b06      	ldr	r3, [pc, #24]	; (ea38 <pdm_trigger_dma+0x2c>)
    ea1e:	681b      	ldr	r3, [r3, #0]
    ea20:	463a      	mov	r2, r7
    ea22:	4611      	mov	r1, r2
    ea24:	4618      	mov	r0, r3
    ea26:	f7fd ff69 	bl	c8fc <am_hal_pdm_dma_start>
}
    ea2a:	bf00      	nop
    ea2c:	3708      	adds	r7, #8
    ea2e:	46bd      	mov	sp, r7
    ea30:	bd80      	pop	{r7, pc}
    ea32:	bf00      	nop
    ea34:	1000c18c 	.word	0x1000c18c
    ea38:	1000ce18 	.word	0x1000ce18

0000ea3c <am_app_mic_verif_pdm_init>:

void am_app_mic_verif_pdm_init(void) 
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b08a      	sub	sp, #40	; 0x28
    ea40:	af00      	add	r7, sp, #0
    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ea42:	2300      	movs	r3, #0
    ea44:	627b      	str	r3, [r7, #36]	; 0x24

    // ARPIT 181019
    // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
    // am_hal_gpio_pinconfig(10, sPinCfg);
    sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    ea46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea4a:	2205      	movs	r2, #5
    ea4c:	f362 0302 	bfi	r3, r2, #0, #3
    ea50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(12, sPinCfg);
    ea54:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea56:	200c      	movs	r0, #12
    ea58:	f7fe f8b2 	bl	cbc0 <am_hal_gpio_pinconfig>

    sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    ea5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea60:	f043 0307 	orr.w	r3, r3, #7
    ea64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(11, sPinCfg);
    ea68:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea6a:	200b      	movs	r0, #11
    ea6c:	f7fe f8a8 	bl	cbc0 <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    ea70:	1d3b      	adds	r3, r7, #4
    ea72:	2220      	movs	r2, #32
    ea74:	2100      	movs	r1, #0
    ea76:	4618      	mov	r0, r3
    ea78:	f001 fe08 	bl	1068c <memset>
    ea7c:	230b      	movs	r3, #11
    ea7e:	717b      	strb	r3, [r7, #5]
    ea80:	230b      	movs	r3, #11
    ea82:	71bb      	strb	r3, [r7, #6]
    ea84:	2318      	movs	r3, #24
    ea86:	60bb      	str	r3, [r7, #8]
    ea88:	2308      	movs	r3, #8
    ea8a:	613b      	str	r3, [r7, #16]
    ea8c:	2305      	movs	r3, #5
    ea8e:	753b      	strb	r3, [r7, #20]
    ea90:	2301      	movs	r3, #1
    ea92:	763b      	strb	r3, [r7, #24]
    ea94:	2303      	movs	r3, #3
    ea96:	767b      	strb	r3, [r7, #25]
    };
    
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    ea98:	491c      	ldr	r1, [pc, #112]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    ea9a:	2000      	movs	r0, #0
    ea9c:	f7fd fd5a 	bl	c554 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    eaa0:	4b1a      	ldr	r3, [pc, #104]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	2200      	movs	r2, #0
    eaa6:	2100      	movs	r1, #0
    eaa8:	4618      	mov	r0, r3
    eaaa:	f7fd fdb1 	bl	c610 <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    eaae:	4b17      	ldr	r3, [pc, #92]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eab0:	681b      	ldr	r3, [r3, #0]
    eab2:	1d3a      	adds	r2, r7, #4
    eab4:	4611      	mov	r1, r2
    eab6:	4618      	mov	r0, r3
    eab8:	f7fd fe12 	bl	c6e0 <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    eabc:	4b13      	ldr	r3, [pc, #76]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eabe:	681b      	ldr	r3, [r3, #0]
    eac0:	4618      	mov	r0, r3
    eac2:	f7fd ff9f 	bl	ca04 <am_hal_pdm_fifo_flush>

    am_util_stdio_printf("PDM Settings:\r\n");
    eac6:	4812      	ldr	r0, [pc, #72]	; (eb10 <am_app_mic_verif_pdm_init+0xd4>)
    eac8:	f7ff fb54 	bl	e174 <am_util_stdio_printf>
    am_util_stdio_printf("PDM Clock (Hz):         %12d\r\n", 750000);
    eacc:	4911      	ldr	r1, [pc, #68]	; (eb14 <am_app_mic_verif_pdm_init+0xd8>)
    eace:	4812      	ldr	r0, [pc, #72]	; (eb18 <am_app_mic_verif_pdm_init+0xdc>)
    ead0:	f7ff fb50 	bl	e174 <am_util_stdio_printf>
    am_util_stdio_printf("Effective Sample Freq.: %12d\r\n\n", 16000);
    ead4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
    ead8:	4810      	ldr	r0, [pc, #64]	; (eb1c <am_app_mic_verif_pdm_init+0xe0>)
    eada:	f7ff fb4b 	bl	e174 <am_util_stdio_printf>

    am_hal_pdm_enable(PDMHandle);
    eade:	4b0b      	ldr	r3, [pc, #44]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eae0:	681b      	ldr	r3, [r3, #0]
    eae2:	4618      	mov	r0, r3
    eae4:	f7fd fed8 	bl	c898 <am_hal_pdm_enable>

    //
    // Configure and enable PDM interrupts (set up to trigger on DMA
    // completion).
    //
    am_hal_pdm_interrupt_enable(PDMHandle,
    eae8:	4b08      	ldr	r3, [pc, #32]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eaea:	681b      	ldr	r3, [r3, #0]
    eaec:	211e      	movs	r1, #30
    eaee:	4618      	mov	r0, r3
    eaf0:	f7fd ffb2 	bl	ca58 <am_hal_pdm_interrupt_enable>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    eaf4:	4b05      	ldr	r3, [pc, #20]	; (eb0c <am_app_mic_verif_pdm_init+0xd0>)
    eaf6:	681b      	ldr	r3, [r3, #0]
    eaf8:	4618      	mov	r0, r3
    eafa:	f7fd fecd 	bl	c898 <am_hal_pdm_enable>
    pdm_trigger_dma();
    eafe:	f7ff ff85 	bl	ea0c <pdm_trigger_dma>

}
    eb02:	bf00      	nop
    eb04:	3728      	adds	r7, #40	; 0x28
    eb06:	46bd      	mov	sp, r7
    eb08:	bd80      	pop	{r7, pc}
    eb0a:	bf00      	nop
    eb0c:	1000ce18 	.word	0x1000ce18
    eb10:	00010978 	.word	0x00010978
    eb14:	000b71b0 	.word	0x000b71b0
    eb18:	00010988 	.word	0x00010988
    eb1c:	000109a8 	.word	0x000109a8

0000eb20 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    eb20:	b580      	push	{r7, lr}
    eb22:	b084      	sub	sp, #16
    eb24:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    eb26:	2301      	movs	r3, #1
    eb28:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    eb2a:	2301      	movs	r3, #1
    eb2c:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    eb2e:	2301      	movs	r3, #1
    eb30:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_COUNT;
    eb32:	23a0      	movs	r3, #160	; 0xa0
    eb34:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    eb36:	4b0c      	ldr	r3, [pc, #48]	; (eb68 <adc_config_dma+0x48>)
    eb38:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    eb3a:	4b0c      	ldr	r3, [pc, #48]	; (eb6c <adc_config_dma+0x4c>)
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	1d3a      	adds	r2, r7, #4
    eb40:	4611      	mov	r1, r2
    eb42:	4618      	mov	r0, r3
    eb44:	f000 fbe6 	bl	f314 <am_hal_adc_configure_dma>
    eb48:	4603      	mov	r3, r0
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d002      	beq.n	eb54 <adc_config_dma+0x34>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    eb4e:	4808      	ldr	r0, [pc, #32]	; (eb70 <adc_config_dma+0x50>)
    eb50:	f7ff fb10 	bl	e174 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    eb54:	4b07      	ldr	r3, [pc, #28]	; (eb74 <adc_config_dma+0x54>)
    eb56:	2200      	movs	r2, #0
    eb58:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    eb5a:	4b07      	ldr	r3, [pc, #28]	; (eb78 <adc_config_dma+0x58>)
    eb5c:	2200      	movs	r2, #0
    eb5e:	701a      	strb	r2, [r3, #0]
}
    eb60:	bf00      	nop
    eb62:	3710      	adds	r7, #16
    eb64:	46bd      	mov	sp, r7
    eb66:	bd80      	pop	{r7, pc}
    eb68:	1000c690 	.word	0x1000c690
    eb6c:	1000ce10 	.word	0x1000ce10
    eb70:	000109c8 	.word	0x000109c8
    eb74:	1000ce15 	.word	0x1000ce15
    eb78:	1002c258 	.word	0x1002c258

0000eb7c <adc_config>:


void adc_config(void)
{
    eb7c:	b580      	push	{r7, lr}
    eb7e:	b084      	sub	sp, #16
    eb80:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    eb82:	4930      	ldr	r1, [pc, #192]	; (ec44 <adc_config+0xc8>)
    eb84:	2000      	movs	r0, #0
    eb86:	f000 fb35 	bl	f1f4 <am_hal_adc_initialize>
    eb8a:	4603      	mov	r3, r0
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d002      	beq.n	eb96 <adc_config+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    eb90:	482d      	ldr	r0, [pc, #180]	; (ec48 <adc_config+0xcc>)
    eb92:	f7ff faef 	bl	e174 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    eb96:	4b2b      	ldr	r3, [pc, #172]	; (ec44 <adc_config+0xc8>)
    eb98:	681b      	ldr	r3, [r3, #0]
    eb9a:	2200      	movs	r2, #0
    eb9c:	2100      	movs	r1, #0
    eb9e:	4618      	mov	r0, r3
    eba0:	f000 fc68 	bl	f474 <am_hal_adc_power_control>
    eba4:	4603      	mov	r3, r0
    eba6:	2b00      	cmp	r3, #0
    eba8:	d002      	beq.n	ebb0 <adc_config+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    ebaa:	4828      	ldr	r0, [pc, #160]	; (ec4c <adc_config+0xd0>)
    ebac:	f7ff fae2 	bl	e174 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    ebb0:	2301      	movs	r3, #1
    ebb2:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ebb4:	2300      	movs	r3, #0
    ebb6:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ebb8:	2307      	movs	r3, #7
    ebba:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ebbc:	2300      	movs	r3, #0
    ebbe:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    ebc0:	2301      	movs	r3, #1
    ebc2:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ebc4:	2300      	movs	r3, #0
    ebc6:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    ebc8:	2301      	movs	r3, #1
    ebca:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    ebcc:	4b1d      	ldr	r3, [pc, #116]	; (ec44 <adc_config+0xc8>)
    ebce:	681b      	ldr	r3, [r3, #0]
    ebd0:	f107 0208 	add.w	r2, r7, #8
    ebd4:	4611      	mov	r1, r2
    ebd6:	4618      	mov	r0, r3
    ebd8:	f000 fb2e 	bl	f238 <am_hal_adc_configure>
    ebdc:	4603      	mov	r3, r0
    ebde:	2b00      	cmp	r3, #0
    ebe0:	d002      	beq.n	ebe8 <adc_config+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    ebe2:	481b      	ldr	r0, [pc, #108]	; (ec50 <adc_config+0xd4>)
    ebe4:	f7ff fac6 	bl	e174 <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    ebe8:	2300      	movs	r3, #0
    ebea:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ebec:	2300      	movs	r3, #0
    ebee:	707b      	strb	r3, [r7, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE5;
    ebf0:	2305      	movs	r3, #5
    ebf2:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    ebf4:	2300      	movs	r3, #0
    ebf6:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    ebf8:	2301      	movs	r3, #1
    ebfa:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    ebfc:	4b11      	ldr	r3, [pc, #68]	; (ec44 <adc_config+0xc8>)
    ebfe:	681b      	ldr	r3, [r3, #0]
    ec00:	463a      	mov	r2, r7
    ec02:	2100      	movs	r1, #0
    ec04:	4618      	mov	r0, r3
    ec06:	f000 fb4f 	bl	f2a8 <am_hal_adc_configure_slot>
    ec0a:	4603      	mov	r3, r0
    ec0c:	2b00      	cmp	r3, #0
    ec0e:	d002      	beq.n	ec16 <adc_config+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    ec10:	4810      	ldr	r0, [pc, #64]	; (ec54 <adc_config+0xd8>)
    ec12:	f7ff faaf 	bl	e174 <am_util_stdio_printf>
    }
    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    ec16:	f7ff ff83 	bl	eb20 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    ec1a:	4b0a      	ldr	r3, [pc, #40]	; (ec44 <adc_config+0xc8>)
    ec1c:	681b      	ldr	r3, [r3, #0]
    ec1e:	21c0      	movs	r1, #192	; 0xc0
    ec20:	4618      	mov	r0, r3
    ec22:	f000 fbcf 	bl	f3c4 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    ec26:	4b07      	ldr	r3, [pc, #28]	; (ec44 <adc_config+0xc8>)
    ec28:	681b      	ldr	r3, [r3, #0]
    ec2a:	4618      	mov	r0, r3
    ec2c:	f000 fbaa 	bl	f384 <am_hal_adc_enable>
    ec30:	4603      	mov	r3, r0
    ec32:	2b00      	cmp	r3, #0
    ec34:	d002      	beq.n	ec3c <adc_config+0xc0>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    ec36:	4808      	ldr	r0, [pc, #32]	; (ec58 <adc_config+0xdc>)
    ec38:	f7ff fa9c 	bl	e174 <am_util_stdio_printf>
    }
}
    ec3c:	bf00      	nop
    ec3e:	3710      	adds	r7, #16
    ec40:	46bd      	mov	sp, r7
    ec42:	bd80      	pop	{r7, pc}
    ec44:	1000ce10 	.word	0x1000ce10
    ec48:	000109f0 	.word	0x000109f0
    ec4c:	00010a24 	.word	0x00010a24
    ec50:	00010a44 	.word	0x00010a44
    ec54:	00010a68 	.word	0x00010a68
    ec58:	00010a90 	.word	0x00010a90

0000ec5c <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    ec5c:	b580      	push	{r7, lr}
    ec5e:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (16000HZ sample rate).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    ec60:	2242      	movs	r2, #66	; 0x42
    ec62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec66:	2003      	movs	r0, #3
    ec68:	f000 fdcc 	bl	f804 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     );

//    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 375);
    ec6c:	f240 1377 	movw	r3, #375	; 0x177
    ec70:	f240 22ee 	movw	r2, #750	; 0x2ee
    ec74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec78:	2003      	movs	r0, #3
    ec7a:	f000 fe41 	bl	f900 <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    ec7e:	f000 fe95 	bl	f9ac <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    ec82:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec86:	2003      	movs	r0, #3
    ec88:	f000 fdfc 	bl	f884 <am_hal_ctimer_start>
}
    ec8c:	bf00      	nop
    ec8e:	bd80      	pop	{r7, pc}

0000ec90 <am_app_mic_verif_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_mic_verif_sys_init(void)
{
    ec90:	b580      	push	{r7, lr}
    ec92:	b082      	sub	sp, #8
    ec94:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    ec96:	2100      	movs	r1, #0
    ec98:	2000      	movs	r0, #0
    ec9a:	f000 fcf9 	bl	f690 <am_hal_clkgen_control>
    ec9e:	4603      	mov	r3, r0
    eca0:	2b00      	cmp	r3, #0
    eca2:	d002      	beq.n	ecaa <am_app_mic_verif_sys_init+0x1a>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    eca4:	4857      	ldr	r0, [pc, #348]	; (ee04 <am_app_mic_verif_sys_init+0x174>)
    eca6:	f7ff fa65 	bl	e174 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    ecaa:	4857      	ldr	r0, [pc, #348]	; (ee08 <am_app_mic_verif_sys_init+0x178>)
    ecac:	f000 fcbc 	bl	f628 <am_hal_cachectrl_config>
    ecb0:	4603      	mov	r3, r0
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	d002      	beq.n	ecbc <am_app_mic_verif_sys_init+0x2c>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    ecb6:	4855      	ldr	r0, [pc, #340]	; (ee0c <am_app_mic_verif_sys_init+0x17c>)
    ecb8:	f7ff fa5c 	bl	e174 <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    ecbc:	f000 fcde 	bl	f67c <am_hal_cachectrl_enable>
    ecc0:	4603      	mov	r3, r0
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d002      	beq.n	eccc <am_app_mic_verif_sys_init+0x3c>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    ecc6:	4852      	ldr	r0, [pc, #328]	; (ee10 <am_app_mic_verif_sys_init+0x180>)
    ecc8:	f7ff fa54 	bl	e174 <am_util_stdio_printf>
    }

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    eccc:	f000 fa32 	bl	f134 <am_bsp_low_power_init>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_switch_button0);
    ecd0:	4b50      	ldr	r3, [pc, #320]	; (ee14 <am_app_mic_verif_sys_init+0x184>)
    ecd2:	6819      	ldr	r1, [r3, #0]
    ecd4:	2010      	movs	r0, #16
    ecd6:	f7fd ff73 	bl	cbc0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_switch_button1);
    ecda:	4b4f      	ldr	r3, [pc, #316]	; (ee18 <am_app_mic_verif_sys_init+0x188>)
    ecdc:	6819      	ldr	r1, [r3, #0]
    ecde:	2012      	movs	r0, #18
    ece0:	f7fd ff6e 	bl	cbc0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_switch_button2);
    ece4:	4b4d      	ldr	r3, [pc, #308]	; (ee1c <am_app_mic_verif_sys_init+0x18c>)
    ece6:	6819      	ldr	r1, [r3, #0]
    ece8:	2013      	movs	r0, #19
    ecea:	f7fd ff69 	bl	cbc0 <am_hal_gpio_pinconfig>
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ecee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ecf2:	f04f 0100 	mov.w	r1, #0
    ecf6:	f7fe fa65 	bl	d1c4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ecfa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ecfe:	f04f 0100 	mov.w	r1, #0
    ed02:	f7fe fa5f 	bl	d1c4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed0a:	f04f 0100 	mov.w	r1, #0
    ed0e:	f7fe fa59 	bl	d1c4 <am_hal_gpio_interrupt_clear>
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ed16:	f04f 0100 	mov.w	r1, #0
    ed1a:	f7fe fa15 	bl	d148 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ed1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ed22:	f04f 0100 	mov.w	r1, #0
    ed26:	f7fe fa0f 	bl	d148 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed2e:	f04f 0100 	mov.w	r1, #0
    ed32:	f7fe fa09 	bl	d148 <am_hal_gpio_interrupt_enable>
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ed36:	2105      	movs	r1, #5
    ed38:	4839      	ldr	r0, [pc, #228]	; (ee20 <am_app_mic_verif_sys_init+0x190>)
    ed3a:	f7ff fcbf 	bl	e6bc <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed3e:	2300      	movs	r3, #0
    ed40:	607b      	str	r3, [r7, #4]
    ed42:	e007      	b.n	ed54 <am_app_mic_verif_sys_init+0xc4>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ed44:	687b      	ldr	r3, [r7, #4]
    ed46:	4619      	mov	r1, r3
    ed48:	4835      	ldr	r0, [pc, #212]	; (ee20 <am_app_mic_verif_sys_init+0x190>)
    ed4a:	f7ff fd13 	bl	e774 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed4e:	687b      	ldr	r3, [r7, #4]
    ed50:	3301      	adds	r3, #1
    ed52:	607b      	str	r3, [r7, #4]
    ed54:	687b      	ldr	r3, [r7, #4]
    ed56:	2b04      	cmp	r3, #4
    ed58:	ddf4      	ble.n	ed44 <am_app_mic_verif_sys_init+0xb4>
#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    
    //
    // Initiate all ring buffers 
    //
    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    ed5a:	2202      	movs	r2, #2
    ed5c:	4931      	ldr	r1, [pc, #196]	; (ee24 <am_app_mic_verif_sys_init+0x194>)
    ed5e:	4832      	ldr	r0, [pc, #200]	; (ee28 <am_app_mic_verif_sys_init+0x198>)
    ed60:	f7ff fa70 	bl	e244 <am_app_utils_ring_buffer_init_all>
    
    //
    // Turn on PDM
    //
    am_app_mic_verif_pdm_init();
    ed64:	f7ff fe6a 	bl	ea3c <am_app_mic_verif_pdm_init>

#if AM_APP_ANALOG_MIC
    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(33, g_AM_PIN_33_ADCSE5);
    ed68:	4b30      	ldr	r3, [pc, #192]	; (ee2c <am_app_mic_verif_sys_init+0x19c>)
    ed6a:	6819      	ldr	r1, [r3, #0]
    ed6c:	2021      	movs	r0, #33	; 0x21
    ed6e:	f7fd ff27 	bl	cbc0 <am_hal_gpio_pinconfig>
    //
    // Configure the ADC
    //
    adc_config();
    ed72:	f7ff ff03 	bl	eb7c <adc_config>
    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    ed76:	f7ff ff71 	bl	ec5c <init_timerA3_for_ADC>
#endif // AM_APP_ANALOG_MIC
    //
    // TimerA0 init.
    //
    timerA0_init();
    ed7a:	f7ff fe27 	bl	e9cc <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    ed7e:	2001      	movs	r0, #1
    ed80:	f000 fe26 	bl	f9d0 <am_hal_ctimer_int_enable>

    NVIC_SetPriority(PDM_IRQn, 4);
    ed84:	2104      	movs	r1, #4
    ed86:	2013      	movs	r0, #19
    ed88:	f7ff fdda 	bl	e940 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    ed8c:	2013      	movs	r0, #19
    ed8e:	f7ff fdb9 	bl	e904 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPIO_IRQn);
    ed92:	200d      	movs	r0, #13
    ed94:	f7ff fdb6 	bl	e904 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    ed98:	200e      	movs	r0, #14
    ed9a:	f7ff fdb3 	bl	e904 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC_IRQn);
    ed9e:	2012      	movs	r0, #18
    eda0:	f7ff fdb0 	bl	e904 <__NVIC_EnableIRQ>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    eda4:	f000 fe68 	bl	fa78 <am_hal_interrupt_master_enable>
   
    //
    // Initialize the printf interface for UART output
    //
#if configUSE_UART_PRINTF
    am_bsp_uart_printf_enable();
    eda8:	f000 f9f6 	bl	f198 <am_bsp_uart_printf_enable>
    am_bsp_itm_printf_enable();
#endif // configUSE_UART_PRINTF
    //
    // Configure and enable burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    edac:	4820      	ldr	r0, [pc, #128]	; (ee30 <am_app_mic_verif_sys_init+0x1a0>)
    edae:	f000 fbc5 	bl	f53c <am_hal_burst_mode_initialize>
    edb2:	4603      	mov	r3, r0
    edb4:	2b00      	cmp	r3, #0
    edb6:	d110      	bne.n	edda <am_app_mic_verif_sys_init+0x14a>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    edb8:	4b1d      	ldr	r3, [pc, #116]	; (ee30 <am_app_mic_verif_sys_init+0x1a0>)
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	2b00      	cmp	r3, #0
    edbe:	d10c      	bne.n	edda <am_app_mic_verif_sys_init+0x14a>
        {
            // Put the MCU into "Burst" mode.
            if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    edc0:	481c      	ldr	r0, [pc, #112]	; (ee34 <am_app_mic_verif_sys_init+0x1a4>)
    edc2:	f000 fc03 	bl	f5cc <am_hal_burst_mode_enable>
    edc6:	4603      	mov	r3, r0
    edc8:	2b00      	cmp	r3, #0
    edca:	d106      	bne.n	edda <am_app_mic_verif_sys_init+0x14a>
            {
                if (AM_HAL_BURST_MODE == eBurstMode)
    edcc:	4b19      	ldr	r3, [pc, #100]	; (ee34 <am_app_mic_verif_sys_init+0x1a4>)
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	2b00      	cmp	r3, #0
    edd2:	d102      	bne.n	edda <am_app_mic_verif_sys_init+0x14a>
                {
                    am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n\n");
    edd4:	4818      	ldr	r0, [pc, #96]	; (ee38 <am_app_mic_verif_sys_init+0x1a8>)
    edd6:	f7ff f9cd 	bl	e174 <am_util_stdio_printf>
            }

        }
    }

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    edda:	f64f 71ff 	movw	r1, #65535	; 0xffff
    edde:	2000      	movs	r0, #0
    ede0:	f000 fd50 	bl	f884 <am_hal_ctimer_start>

#if AM_APP_ANALOG_MIC
    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    ede4:	4b15      	ldr	r3, [pc, #84]	; (ee3c <am_app_mic_verif_sys_init+0x1ac>)
    ede6:	681b      	ldr	r3, [r3, #0]
    ede8:	4618      	mov	r0, r3
    edea:	f000 fb31 	bl	f450 <am_hal_adc_sw_trigger>
    edee:	4603      	mov	r3, r0
    edf0:	2b00      	cmp	r3, #0
    edf2:	d002      	beq.n	edfa <am_app_mic_verif_sys_init+0x16a>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    edf4:	4812      	ldr	r0, [pc, #72]	; (ee40 <am_app_mic_verif_sys_init+0x1b0>)
    edf6:	f7ff f9bd 	bl	e174 <am_util_stdio_printf>
    }
#endif // AM_APP_ANALOG_MIC

}
    edfa:	bf00      	nop
    edfc:	3708      	adds	r7, #8
    edfe:	46bd      	mov	sp, r7
    ee00:	bd80      	pop	{r7, pc}
    ee02:	bf00      	nop
    ee04:	00010b2c 	.word	0x00010b2c
    ee08:	00010e1c 	.word	0x00010e1c
    ee0c:	00010b5c 	.word	0x00010b5c
    ee10:	00010b8c 	.word	0x00010b8c
    ee14:	00010ddc 	.word	0x00010ddc
    ee18:	00010de0 	.word	0x00010de0
    ee1c:	00010de4 	.word	0x00010de4
    ee20:	1000c00c 	.word	0x1000c00c
    ee24:	00010dc4 	.word	0x00010dc4
    ee28:	1002c21c 	.word	0x1002c21c
    ee2c:	00010de8 	.word	0x00010de8
    ee30:	1000ce14 	.word	0x1000ce14
    ee34:	1000c68c 	.word	0x1000c68c
    ee38:	00010bb8 	.word	0x00010bb8
    ee3c:	1000ce10 	.word	0x1000ce10
    ee40:	00010be4 	.word	0x00010be4

0000ee44 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    ee44:	b580      	push	{r7, lr}
    ee46:	b082      	sub	sp, #8
    ee48:	af00      	add	r7, sp, #0
    uint32_t ui32Status;
    uint32_t ui32PushRet;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    ee4a:	4b27      	ldr	r3, [pc, #156]	; (eee8 <am_pdm0_isr+0xa4>)
    ee4c:	681b      	ldr	r3, [r3, #0]
    ee4e:	4639      	mov	r1, r7
    ee50:	2201      	movs	r2, #1
    ee52:	4618      	mov	r0, r3
    ee54:	f7fd fe5c 	bl	cb10 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ee58:	4b23      	ldr	r3, [pc, #140]	; (eee8 <am_pdm0_isr+0xa4>)
    ee5a:	681b      	ldr	r3, [r3, #0]
    ee5c:	683a      	ldr	r2, [r7, #0]
    ee5e:	4611      	mov	r1, r2
    ee60:	4618      	mov	r0, r3
    ee62:	f7fd fe29 	bl	cab8 <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ee66:	683b      	ldr	r3, [r7, #0]
    ee68:	f003 0308 	and.w	r3, r3, #8
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d02d      	beq.n	eecc <am_pdm0_isr+0x88>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    ee70:	4b1e      	ldr	r3, [pc, #120]	; (eeec <am_pdm0_isr+0xa8>)
    ee72:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ee76:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
            }
        }
#endif // AM_AEP_MIKRO_CALIBRATION

#if AM_APP_ANALOG_MIC
        if((g_bPDMDataReady == false) && (g_bAMicEvalFlag == true))
    ee7a:	4b1d      	ldr	r3, [pc, #116]	; (eef0 <am_pdm0_isr+0xac>)
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	b2db      	uxtb	r3, r3
    ee80:	f083 0301 	eor.w	r3, r3, #1
    ee84:	b2db      	uxtb	r3, r3
    ee86:	2b00      	cmp	r3, #0
    ee88:	d02a      	beq.n	eee0 <am_pdm0_isr+0x9c>
    ee8a:	4b1a      	ldr	r3, [pc, #104]	; (eef4 <am_pdm0_isr+0xb0>)
    ee8c:	781b      	ldrb	r3, [r3, #0]
    ee8e:	b2db      	uxtb	r3, r3
    ee90:	2b00      	cmp	r3, #0
    ee92:	d025      	beq.n	eee0 <am_pdm0_isr+0x9c>
        {
            ui32PushRet = am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], (void*)g_ui32PCMDataBuff, PCM_FRAME_SIZE*PCM_DATA_BYTES, true);
    ee94:	2301      	movs	r3, #1
    ee96:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ee9a:	4917      	ldr	r1, [pc, #92]	; (eef8 <am_pdm0_isr+0xb4>)
    ee9c:	4817      	ldr	r0, [pc, #92]	; (eefc <am_pdm0_isr+0xb8>)
    ee9e:	f7ff f9f3 	bl	e288 <am_app_utils_ring_buffer_push>
    eea2:	6078      	str	r0, [r7, #4]
            g_ui32PCMDataSumBytes += ui32PushRet;
    eea4:	4b16      	ldr	r3, [pc, #88]	; (ef00 <am_pdm0_isr+0xbc>)
    eea6:	681a      	ldr	r2, [r3, #0]
    eea8:	687b      	ldr	r3, [r7, #4]
    eeaa:	4413      	add	r3, r2
    eeac:	4a14      	ldr	r2, [pc, #80]	; (ef00 <am_pdm0_isr+0xbc>)
    eeae:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM]))
    eeb0:	4b14      	ldr	r3, [pc, #80]	; (ef04 <am_pdm0_isr+0xc0>)
    eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eeb4:	4b13      	ldr	r3, [pc, #76]	; (ef04 <am_pdm0_isr+0xc0>)
    eeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    eeb8:	429a      	cmp	r2, r3
    eeba:	d111      	bne.n	eee0 <am_pdm0_isr+0x9c>
    eebc:	4b11      	ldr	r3, [pc, #68]	; (ef04 <am_pdm0_isr+0xc0>)
    eebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eec0:	2b01      	cmp	r3, #1
    eec2:	d10d      	bne.n	eee0 <am_pdm0_isr+0x9c>
            {
                g_bPDMDataReady = true;
    eec4:	4b0a      	ldr	r3, [pc, #40]	; (eef0 <am_pdm0_isr+0xac>)
    eec6:	2201      	movs	r2, #1
    eec8:	701a      	strb	r2, [r3, #0]

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    eeca:	e009      	b.n	eee0 <am_pdm0_isr+0x9c>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    eecc:	683b      	ldr	r3, [r7, #0]
    eece:	f003 0306 	and.w	r3, r3, #6
    eed2:	2b00      	cmp	r3, #0
    eed4:	d004      	beq.n	eee0 <am_pdm0_isr+0x9c>
        am_hal_pdm_fifo_flush(PDMHandle);
    eed6:	4b04      	ldr	r3, [pc, #16]	; (eee8 <am_pdm0_isr+0xa4>)
    eed8:	681b      	ldr	r3, [r3, #0]
    eeda:	4618      	mov	r0, r3
    eedc:	f7fd fd92 	bl	ca04 <am_hal_pdm_fifo_flush>
}
    eee0:	bf00      	nop
    eee2:	3708      	adds	r7, #8
    eee4:	46bd      	mov	sp, r7
    eee6:	bd80      	pop	{r7, pc}
    eee8:	1000ce18 	.word	0x1000ce18
    eeec:	50011000 	.word	0x50011000
    eef0:	1000c15e 	.word	0x1000c15e
    eef4:	1000c169 	.word	0x1000c169
    eef8:	1000c18c 	.word	0x1000c18c
    eefc:	1002c244 	.word	0x1002c244
    ef00:	1000c160 	.word	0x1000c160
    ef04:	1002c21c 	.word	0x1002c21c

0000ef08 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    ef08:	b580      	push	{r7, lr}
    ef0a:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    ef0c:	4b0f      	ldr	r3, [pc, #60]	; (ef4c <am_ctimer_isr+0x44>)
    ef0e:	681b      	ldr	r3, [r3, #0]
    ef10:	3301      	adds	r3, #1
    ef12:	4a0e      	ldr	r2, [pc, #56]	; (ef4c <am_ctimer_isr+0x44>)
    ef14:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    ef16:	4b0e      	ldr	r3, [pc, #56]	; (ef50 <am_ctimer_isr+0x48>)
    ef18:	781b      	ldrb	r3, [r3, #0]
    ef1a:	b2db      	uxtb	r3, r3
    ef1c:	2b01      	cmp	r3, #1
    ef1e:	d10f      	bne.n	ef40 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    ef20:	4b0c      	ldr	r3, [pc, #48]	; (ef54 <am_ctimer_isr+0x4c>)
    ef22:	681b      	ldr	r3, [r3, #0]
    ef24:	3301      	adds	r3, #1
    ef26:	4a0b      	ldr	r2, [pc, #44]	; (ef54 <am_ctimer_isr+0x4c>)
    ef28:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    ef2a:	4b0a      	ldr	r3, [pc, #40]	; (ef54 <am_ctimer_isr+0x4c>)
    ef2c:	681b      	ldr	r3, [r3, #0]
    ef2e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ef32:	d905      	bls.n	ef40 <am_ctimer_isr+0x38>
        {
            g_ui8ButtonPushedFlag = 1;
    ef34:	4b08      	ldr	r3, [pc, #32]	; (ef58 <am_ctimer_isr+0x50>)
    ef36:	2201      	movs	r2, #1
    ef38:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    ef3a:	4b05      	ldr	r3, [pc, #20]	; (ef50 <am_ctimer_isr+0x48>)
    ef3c:	2200      	movs	r2, #0
    ef3e:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ef40:	2001      	movs	r0, #1
    ef42:	f000 fd59 	bl	f9f8 <am_hal_ctimer_int_clear>
}
    ef46:	bf00      	nop
    ef48:	bd80      	pop	{r7, pc}
    ef4a:	bf00      	nop
    ef4c:	1000c150 	.word	0x1000c150
    ef50:	1000c154 	.word	0x1000c154
    ef54:	1000c158 	.word	0x1000c158
    ef58:	1000c15d 	.word	0x1000c15d

0000ef5c <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    ef5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    ef60:	b082      	sub	sp, #8
    ef62:	af00      	add	r7, sp, #0
    uint64_t ui64Status;
//
// Read and clear GPIO interrupt status
//
    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    ef64:	463b      	mov	r3, r7
    ef66:	4619      	mov	r1, r3
    ef68:	2000      	movs	r0, #0
    ef6a:	f7fe f961 	bl	d230 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    ef6e:	e9d7 3400 	ldrd	r3, r4, [r7]
    ef72:	4618      	mov	r0, r3
    ef74:	4621      	mov	r1, r4
    ef76:	f7fe f925 	bl	d1c4 <am_hal_gpio_interrupt_clear>
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    ef7a:	4b22      	ldr	r3, [pc, #136]	; (f004 <am_gpio_isr+0xa8>)
    ef7c:	781b      	ldrb	r3, [r3, #0]
    ef7e:	b2db      	uxtb	r3, r3
    ef80:	2b00      	cmp	r3, #0
    ef82:	d134      	bne.n	efee <am_gpio_isr+0x92>
    {
        if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0))
    ef84:	e9d7 bc00 	ldrd	fp, ip, [r7]
    ef88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ef8c:	f04f 0200 	mov.w	r2, #0
    ef90:	ea0b 0301 	and.w	r3, fp, r1
    ef94:	ea0c 0402 	and.w	r4, ip, r2
    ef98:	4323      	orrs	r3, r4
    ef9a:	d003      	beq.n	efa4 <am_gpio_isr+0x48>
            g_sysKeyValue = AM_APP_KEY_0;
    ef9c:	4b1a      	ldr	r3, [pc, #104]	; (f008 <am_gpio_isr+0xac>)
    ef9e:	2201      	movs	r2, #1
    efa0:	701a      	strb	r2, [r3, #0]
    efa2:	e01e      	b.n	efe2 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1))
    efa4:	e9d7 bc00 	ldrd	fp, ip, [r7]
    efa8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    efac:	f04f 0200 	mov.w	r2, #0
    efb0:	ea0b 0301 	and.w	r3, fp, r1
    efb4:	ea0c 0402 	and.w	r4, ip, r2
    efb8:	4323      	orrs	r3, r4
    efba:	d003      	beq.n	efc4 <am_gpio_isr+0x68>
            g_sysKeyValue = AM_APP_KEY_1;
    efbc:	4b12      	ldr	r3, [pc, #72]	; (f008 <am_gpio_isr+0xac>)
    efbe:	2202      	movs	r2, #2
    efc0:	701a      	strb	r2, [r3, #0]
    efc2:	e00e      	b.n	efe2 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2))
    efc4:	e9d7 bc00 	ldrd	fp, ip, [r7]
    efc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    efcc:	f04f 0200 	mov.w	r2, #0
    efd0:	ea0b 0301 	and.w	r3, fp, r1
    efd4:	ea0c 0402 	and.w	r4, ip, r2
    efd8:	4323      	orrs	r3, r4
    efda:	d002      	beq.n	efe2 <am_gpio_isr+0x86>
            g_sysKeyValue = AM_APP_KEY_2;
    efdc:	4b0a      	ldr	r3, [pc, #40]	; (f008 <am_gpio_isr+0xac>)
    efde:	2203      	movs	r2, #3
    efe0:	701a      	strb	r2, [r3, #0]

        g_ui8DebounceFlag = 1;
    efe2:	4b08      	ldr	r3, [pc, #32]	; (f004 <am_gpio_isr+0xa8>)
    efe4:	2201      	movs	r2, #1
    efe6:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    efe8:	4b08      	ldr	r3, [pc, #32]	; (f00c <am_gpio_isr+0xb0>)
    efea:	2200      	movs	r2, #0
    efec:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    efee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    eff2:	f04f 0100 	mov.w	r1, #0
    eff6:	f7fe f8e5 	bl	d1c4 <am_hal_gpio_interrupt_clear>

}
    effa:	bf00      	nop
    effc:	3708      	adds	r7, #8
    effe:	46bd      	mov	sp, r7
    f000:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    f004:	1000c154 	.word	0x1000c154
    f008:	1000c15c 	.word	0x1000c15c
    f00c:	1000c158 	.word	0x1000c158

0000f010 <am_adc_isr>:
//
//*****************************************************************************
#if AM_APP_ANALOG_MIC
void
am_adc_isr(void)
{
    f010:	b580      	push	{r7, lr}
    f012:	b082      	sub	sp, #8
    f014:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    f016:	4b2a      	ldr	r3, [pc, #168]	; (f0c0 <am_adc_isr+0xb0>)
    f018:	681b      	ldr	r3, [r3, #0]
    f01a:	1d39      	adds	r1, r7, #4
    f01c:	2200      	movs	r2, #0
    f01e:	4618      	mov	r0, r3
    f020:	f000 f9e6 	bl	f3f0 <am_hal_adc_interrupt_status>
    f024:	4603      	mov	r3, r0
    f026:	2b00      	cmp	r3, #0
    f028:	d002      	beq.n	f030 <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    f02a:	4826      	ldr	r0, [pc, #152]	; (f0c4 <am_adc_isr+0xb4>)
    f02c:	f7ff f8a2 	bl	e174 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    f030:	4b23      	ldr	r3, [pc, #140]	; (f0c0 <am_adc_isr+0xb0>)
    f032:	681b      	ldr	r3, [r3, #0]
    f034:	687a      	ldr	r2, [r7, #4]
    f036:	4611      	mov	r1, r2
    f038:	4618      	mov	r0, r3
    f03a:	f000 f9f7 	bl	f42c <am_hal_adc_interrupt_clear>
    f03e:	4603      	mov	r3, r0
    f040:	2b00      	cmp	r3, #0
    f042:	d002      	beq.n	f04a <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    f044:	4820      	ldr	r0, [pc, #128]	; (f0c8 <am_adc_isr+0xb8>)
    f046:	f7ff f895 	bl	e174 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f050:	2b00      	cmp	r3, #0
    f052:	d029      	beq.n	f0a8 <am_adc_isr+0x98>
    {
        g_bADCDMAComplete = true;
    f054:	4b1d      	ldr	r3, [pc, #116]	; (f0cc <am_adc_isr+0xbc>)
    f056:	2201      	movs	r2, #1
    f058:	701a      	strb	r2, [r3, #0]
        if((g_bAMicDataReady == false) && (g_bAMicEvalFlag == true))
    f05a:	4b1d      	ldr	r3, [pc, #116]	; (f0d0 <am_adc_isr+0xc0>)
    f05c:	781b      	ldrb	r3, [r3, #0]
    f05e:	b2db      	uxtb	r3, r3
    f060:	f083 0301 	eor.w	r3, r3, #1
    f064:	b2db      	uxtb	r3, r3
    f066:	2b00      	cmp	r3, #0
    f068:	d01e      	beq.n	f0a8 <am_adc_isr+0x98>
    f06a:	4b1a      	ldr	r3, [pc, #104]	; (f0d4 <am_adc_isr+0xc4>)
    f06c:	781b      	ldrb	r3, [r3, #0]
    f06e:	b2db      	uxtb	r3, r3
    f070:	2b00      	cmp	r3, #0
    f072:	d019      	beq.n	f0a8 <am_adc_isr+0x98>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], (void*)g_ui32ADCSampleBuffer, ADC_SAMPLE_COUNT*ANALOG_MIC_DATA_BYTES, true);
    f074:	2301      	movs	r3, #1
    f076:	f44f 7220 	mov.w	r2, #640	; 0x280
    f07a:	4917      	ldr	r1, [pc, #92]	; (f0d8 <am_adc_isr+0xc8>)
    f07c:	4817      	ldr	r0, [pc, #92]	; (f0dc <am_adc_isr+0xcc>)
    f07e:	f7ff f903 	bl	e288 <am_app_utils_ring_buffer_push>
            g_ui32AMicDataSumBytes += ADC_SAMPLE_COUNT * ANALOG_MIC_DATA_BYTES;
    f082:	4b17      	ldr	r3, [pc, #92]	; (f0e0 <am_adc_isr+0xd0>)
    f084:	681b      	ldr	r3, [r3, #0]
    f086:	f503 7320 	add.w	r3, r3, #640	; 0x280
    f08a:	4a15      	ldr	r2, [pc, #84]	; (f0e0 <am_adc_isr+0xd0>)
    f08c:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA]))
    f08e:	4b15      	ldr	r3, [pc, #84]	; (f0e4 <am_adc_isr+0xd4>)
    f090:	699a      	ldr	r2, [r3, #24]
    f092:	4b14      	ldr	r3, [pc, #80]	; (f0e4 <am_adc_isr+0xd4>)
    f094:	69db      	ldr	r3, [r3, #28]
    f096:	429a      	cmp	r2, r3
    f098:	d106      	bne.n	f0a8 <am_adc_isr+0x98>
    f09a:	4b12      	ldr	r3, [pc, #72]	; (f0e4 <am_adc_isr+0xd4>)
    f09c:	6a1b      	ldr	r3, [r3, #32]
    f09e:	2b01      	cmp	r3, #1
    f0a0:	d102      	bne.n	f0a8 <am_adc_isr+0x98>
            {
                g_bAMicDataReady = true;
    f0a2:	4b0b      	ldr	r3, [pc, #44]	; (f0d0 <am_adc_isr+0xc0>)
    f0a4:	2201      	movs	r2, #1
    f0a6:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    f0a8:	687b      	ldr	r3, [r7, #4]
    f0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f0ae:	2b00      	cmp	r3, #0
    f0b0:	d002      	beq.n	f0b8 <am_adc_isr+0xa8>
    {
        g_bADCDMAError = true;
    f0b2:	4b0d      	ldr	r3, [pc, #52]	; (f0e8 <am_adc_isr+0xd8>)
    f0b4:	2201      	movs	r2, #1
    f0b6:	701a      	strb	r2, [r3, #0]
    }
}
    f0b8:	bf00      	nop
    f0ba:	3708      	adds	r7, #8
    f0bc:	46bd      	mov	sp, r7
    f0be:	bd80      	pop	{r7, pc}
    f0c0:	1000ce10 	.word	0x1000ce10
    f0c4:	00010c08 	.word	0x00010c08
    f0c8:	00010c2c 	.word	0x00010c2c
    f0cc:	1000ce15 	.word	0x1000ce15
    f0d0:	1000c168 	.word	0x1000c168
    f0d4:	1000c169 	.word	0x1000c169
    f0d8:	1000c690 	.word	0x1000c690
    f0dc:	1002c230 	.word	0x1002c230
    f0e0:	1000c164 	.word	0x1000c164
    f0e4:	1002c21c 	.word	0x1002c21c
    f0e8:	1002c258 	.word	0x1002c258

0000f0ec <am_bsp_uart_string_print>:
    f0ec:	b510      	push	{r4, lr}
    f0ee:	b086      	sub	sp, #24
    f0f0:	7803      	ldrb	r3, [r0, #0]
    f0f2:	2400      	movs	r4, #0
    f0f4:	9400      	str	r4, [sp, #0]
    f0f6:	b1bb      	cbz	r3, f128 <am_bsp_uart_string_print+0x3c>
    f0f8:	4603      	mov	r3, r0
    f0fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f0fe:	3401      	adds	r4, #1
    f100:	2a00      	cmp	r2, #0
    f102:	d1fa      	bne.n	f0fa <am_bsp_uart_string_print+0xe>
    f104:	4b0a      	ldr	r3, [pc, #40]	; (f130 <am_bsp_uart_string_print+0x44>)
    f106:	9002      	str	r0, [sp, #8]
    f108:	2200      	movs	r2, #0
    f10a:	6818      	ldr	r0, [r3, #0]
    f10c:	9403      	str	r4, [sp, #12]
    f10e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f112:	a901      	add	r1, sp, #4
    f114:	9304      	str	r3, [sp, #16]
    f116:	9201      	str	r2, [sp, #4]
    f118:	f8cd d014 	str.w	sp, [sp, #20]
    f11c:	f001 f800 	bl	10120 <am_hal_uart_transfer>
    f120:	9b00      	ldr	r3, [sp, #0]
    f122:	42a3      	cmp	r3, r4
    f124:	d002      	beq.n	f12c <am_bsp_uart_string_print+0x40>
    f126:	e7fe      	b.n	f126 <am_bsp_uart_string_print+0x3a>
    f128:	461c      	mov	r4, r3
    f12a:	e7eb      	b.n	f104 <am_bsp_uart_string_print+0x18>
    f12c:	b006      	add	sp, #24
    f12e:	bd10      	pop	{r4, pc}
    f130:	1000c170 	.word	0x1000c170

0000f134 <am_bsp_low_power_init>:
    f134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f136:	f000 fcab 	bl	fa90 <am_hal_itm_disable>
    f13a:	2000      	movs	r0, #0
    f13c:	f7fe f98a 	bl	d454 <am_util_stdio_printf_init>
    f140:	4b12      	ldr	r3, [pc, #72]	; (f18c <am_bsp_low_power_init+0x58>)
    f142:	4f13      	ldr	r7, [pc, #76]	; (f190 <am_bsp_low_power_init+0x5c>)
    f144:	6819      	ldr	r1, [r3, #0]
    f146:	2029      	movs	r0, #41	; 0x29
    f148:	f7fd fd3a 	bl	cbc0 <am_hal_gpio_pinconfig>
    f14c:	f000 fde2 	bl	fd14 <am_hal_pwrctrl_low_power_init>
    f150:	2001      	movs	r0, #1
    f152:	f000 fe29 	bl	fda8 <am_hal_rtc_osc_select>
    f156:	2100      	movs	r1, #0
    f158:	2003      	movs	r0, #3
    f15a:	f000 fa99 	bl	f690 <am_hal_clkgen_control>
    f15e:	f000 fe2f 	bl	fdc0 <am_hal_rtc_osc_disable>
    f162:	4b0c      	ldr	r3, [pc, #48]	; (f194 <am_bsp_low_power_init+0x60>)
    f164:	681e      	ldr	r6, [r3, #0]
    f166:	2400      	movs	r4, #0
    f168:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f16c:	4631      	mov	r1, r6
    f16e:	4628      	mov	r0, r5
    f170:	f7fd fd26 	bl	cbc0 <am_hal_gpio_pinconfig>
    f174:	2103      	movs	r1, #3
    f176:	4628      	mov	r0, r5
    f178:	f7fd ff62 	bl	d040 <am_hal_gpio_state_write>
    f17c:	3401      	adds	r4, #1
    f17e:	4628      	mov	r0, r5
    f180:	2100      	movs	r1, #0
    f182:	f7fd ff5d 	bl	d040 <am_hal_gpio_state_write>
    f186:	2c05      	cmp	r4, #5
    f188:	d1ee      	bne.n	f168 <am_bsp_low_power_init+0x34>
    f18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f18c:	00010c54 	.word	0x00010c54
    f190:	1000c00c 	.word	0x1000c00c
    f194:	00010c58 	.word	0x00010c58

0000f198 <am_bsp_uart_printf_enable>:
    f198:	b510      	push	{r4, lr}
    f19a:	4c10      	ldr	r4, [pc, #64]	; (f1dc <am_bsp_uart_printf_enable+0x44>)
    f19c:	4b10      	ldr	r3, [pc, #64]	; (f1e0 <am_bsp_uart_printf_enable+0x48>)
    f19e:	4621      	mov	r1, r4
    f1a0:	2202      	movs	r2, #2
    f1a2:	2000      	movs	r0, #0
    f1a4:	601a      	str	r2, [r3, #0]
    f1a6:	f000 fe15 	bl	fdd4 <am_hal_uart_initialize>
    f1aa:	2200      	movs	r2, #0
    f1ac:	4611      	mov	r1, r2
    f1ae:	6820      	ldr	r0, [r4, #0]
    f1b0:	f000 fe38 	bl	fe24 <am_hal_uart_power_control>
    f1b4:	6820      	ldr	r0, [r4, #0]
    f1b6:	490b      	ldr	r1, [pc, #44]	; (f1e4 <am_bsp_uart_printf_enable+0x4c>)
    f1b8:	f000 fea6 	bl	ff08 <am_hal_uart_configure>
    f1bc:	4b0a      	ldr	r3, [pc, #40]	; (f1e8 <am_bsp_uart_printf_enable+0x50>)
    f1be:	2016      	movs	r0, #22
    f1c0:	6819      	ldr	r1, [r3, #0]
    f1c2:	f7fd fcfd 	bl	cbc0 <am_hal_gpio_pinconfig>
    f1c6:	4b09      	ldr	r3, [pc, #36]	; (f1ec <am_bsp_uart_printf_enable+0x54>)
    f1c8:	2017      	movs	r0, #23
    f1ca:	6819      	ldr	r1, [r3, #0]
    f1cc:	f7fd fcf8 	bl	cbc0 <am_hal_gpio_pinconfig>
    f1d0:	4807      	ldr	r0, [pc, #28]	; (f1f0 <am_bsp_uart_printf_enable+0x58>)
    f1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1d6:	f7fe b93d 	b.w	d454 <am_util_stdio_printf_init>
    f1da:	bf00      	nop
    f1dc:	1000c170 	.word	0x1000c170
    f1e0:	1000c16c 	.word	0x1000c16c
    f1e4:	00010dec 	.word	0x00010dec
    f1e8:	00010e14 	.word	0x00010e14
    f1ec:	00010e18 	.word	0x00010e18
    f1f0:	0000f0ed 	.word	0x0000f0ed

0000f1f4 <am_hal_adc_initialize>:
    f1f4:	b108      	cbz	r0, f1fa <am_hal_adc_initialize+0x6>
    f1f6:	2005      	movs	r0, #5
    f1f8:	4770      	bx	lr
    f1fa:	b1a9      	cbz	r1, f228 <am_hal_adc_initialize+0x34>
    f1fc:	4a0b      	ldr	r2, [pc, #44]	; (f22c <am_hal_adc_initialize+0x38>)
    f1fe:	78d3      	ldrb	r3, [r2, #3]
    f200:	f013 0001 	ands.w	r0, r3, #1
    f204:	d001      	beq.n	f20a <am_hal_adc_initialize+0x16>
    f206:	2007      	movs	r0, #7
    f208:	4770      	bx	lr
    f20a:	b430      	push	{r4, r5}
    f20c:	f043 0301 	orr.w	r3, r3, #1
    f210:	70d3      	strb	r3, [r2, #3]
    f212:	6813      	ldr	r3, [r2, #0]
    f214:	4d06      	ldr	r5, [pc, #24]	; (f230 <am_hal_adc_initialize+0x3c>)
    f216:	4c07      	ldr	r4, [pc, #28]	; (f234 <am_hal_adc_initialize+0x40>)
    f218:	6050      	str	r0, [r2, #4]
    f21a:	f365 0317 	bfi	r3, r5, #0, #24
    f21e:	6013      	str	r3, [r2, #0]
    f220:	6020      	str	r0, [r4, #0]
    f222:	600a      	str	r2, [r1, #0]
    f224:	bc30      	pop	{r4, r5}
    f226:	4770      	bx	lr
    f228:	2006      	movs	r0, #6
    f22a:	4770      	bx	lr
    f22c:	1002c260 	.word	0x1002c260
    f230:	00afafaf 	.word	0x00afafaf
    f234:	1002c25c 	.word	0x1002c25c

0000f238 <am_hal_adc_configure>:
    f238:	b128      	cbz	r0, f246 <am_hal_adc_configure+0xe>
    f23a:	6803      	ldr	r3, [r0, #0]
    f23c:	4a18      	ldr	r2, [pc, #96]	; (f2a0 <am_hal_adc_configure+0x68>)
    f23e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f242:	4293      	cmp	r3, r2
    f244:	d001      	beq.n	f24a <am_hal_adc_configure+0x12>
    f246:	2002      	movs	r0, #2
    f248:	4770      	bx	lr
    f24a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f24c:	7808      	ldrb	r0, [r1, #0]
    f24e:	784d      	ldrb	r5, [r1, #1]
    f250:	788c      	ldrb	r4, [r1, #2]
    f252:	f891 e003 	ldrb.w	lr, [r1, #3]
    f256:	790f      	ldrb	r7, [r1, #4]
    f258:	794a      	ldrb	r2, [r1, #5]
    f25a:	798b      	ldrb	r3, [r1, #6]
    f25c:	4e11      	ldr	r6, [pc, #68]	; (f2a4 <am_hal_adc_configure+0x6c>)
    f25e:	0600      	lsls	r0, r0, #24
    f260:	04ed      	lsls	r5, r5, #19
    f262:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    f266:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    f26a:	4328      	orrs	r0, r5
    f26c:	0424      	lsls	r4, r4, #16
    f26e:	ea4f 210e 	mov.w	r1, lr, lsl #8
    f272:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    f276:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    f27a:	4304      	orrs	r4, r0
    f27c:	f401 7040 	and.w	r0, r1, #768	; 0x300
    f280:	0139      	lsls	r1, r7, #4
    f282:	4320      	orrs	r0, r4
    f284:	f001 0110 	and.w	r1, r1, #16
    f288:	00d2      	lsls	r2, r2, #3
    f28a:	4301      	orrs	r1, r0
    f28c:	f002 0208 	and.w	r2, r2, #8
    f290:	009b      	lsls	r3, r3, #2
    f292:	430a      	orrs	r2, r1
    f294:	f003 0304 	and.w	r3, r3, #4
    f298:	4313      	orrs	r3, r2
    f29a:	6033      	str	r3, [r6, #0]
    f29c:	2000      	movs	r0, #0
    f29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2a0:	01afafaf 	.word	0x01afafaf
    f2a4:	50010000 	.word	0x50010000

0000f2a8 <am_hal_adc_configure_slot>:
    f2a8:	b128      	cbz	r0, f2b6 <am_hal_adc_configure_slot+0xe>
    f2aa:	6803      	ldr	r3, [r0, #0]
    f2ac:	4816      	ldr	r0, [pc, #88]	; (f308 <am_hal_adc_configure_slot+0x60>)
    f2ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2b2:	4283      	cmp	r3, r0
    f2b4:	d001      	beq.n	f2ba <am_hal_adc_configure_slot+0x12>
    f2b6:	2002      	movs	r0, #2
    f2b8:	4770      	bx	lr
    f2ba:	2907      	cmp	r1, #7
    f2bc:	d901      	bls.n	f2c2 <am_hal_adc_configure_slot+0x1a>
    f2be:	2005      	movs	r0, #5
    f2c0:	4770      	bx	lr
    f2c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2c4:	7813      	ldrb	r3, [r2, #0]
    f2c6:	7854      	ldrb	r4, [r2, #1]
    f2c8:	7890      	ldrb	r0, [r2, #2]
    f2ca:	78d7      	ldrb	r7, [r2, #3]
    f2cc:	f892 e004 	ldrb.w	lr, [r2, #4]
    f2d0:	4d0e      	ldr	r5, [pc, #56]	; (f30c <am_hal_adc_configure_slot+0x64>)
    f2d2:	4e0f      	ldr	r6, [pc, #60]	; (f310 <am_hal_adc_configure_slot+0x68>)
    f2d4:	061b      	lsls	r3, r3, #24
    f2d6:	0424      	lsls	r4, r4, #16
    f2d8:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    f2dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    f2e0:	4323      	orrs	r3, r4
    f2e2:	0202      	lsls	r2, r0, #8
    f2e4:	ea43 0e0e 	orr.w	lr, r3, lr
    f2e8:	440d      	add	r5, r1
    f2ea:	007b      	lsls	r3, r7, #1
    f2ec:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    f2f0:	ea4e 0202 	orr.w	r2, lr, r2
    f2f4:	00ad      	lsls	r5, r5, #2
    f2f6:	f003 0302 	and.w	r3, r3, #2
    f2fa:	4313      	orrs	r3, r2
    f2fc:	602b      	str	r3, [r5, #0]
    f2fe:	6833      	ldr	r3, [r6, #0]
    f300:	3301      	adds	r3, #1
    f302:	6033      	str	r3, [r6, #0]
    f304:	2000      	movs	r0, #0
    f306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f308:	01afafaf 	.word	0x01afafaf
    f30c:	14004003 	.word	0x14004003
    f310:	1002c25c 	.word	0x1002c25c

0000f314 <am_hal_adc_configure_dma>:
    f314:	b128      	cbz	r0, f322 <am_hal_adc_configure_dma+0xe>
    f316:	6803      	ldr	r3, [r0, #0]
    f318:	4a17      	ldr	r2, [pc, #92]	; (f378 <am_hal_adc_configure_dma+0x64>)
    f31a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f31e:	4293      	cmp	r3, r2
    f320:	d001      	beq.n	f326 <am_hal_adc_configure_dma+0x12>
    f322:	2002      	movs	r0, #2
    f324:	4770      	bx	lr
    f326:	b410      	push	{r4}
    f328:	7808      	ldrb	r0, [r1, #0]
    f32a:	784b      	ldrb	r3, [r1, #1]
    f32c:	4c13      	ldr	r4, [pc, #76]	; (f37c <am_hal_adc_configure_dma+0x68>)
    f32e:	4a14      	ldr	r2, [pc, #80]	; (f380 <am_hal_adc_configure_dma+0x6c>)
    f330:	6824      	ldr	r4, [r4, #0]
    f332:	0240      	lsls	r0, r0, #9
    f334:	021b      	lsls	r3, r3, #8
    f336:	f400 7000 	and.w	r0, r0, #512	; 0x200
    f33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    f33e:	4303      	orrs	r3, r0
    f340:	2c01      	cmp	r4, #1
    f342:	bf8c      	ite	hi
    f344:	2000      	movhi	r0, #0
    f346:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    f34a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    f34e:	4303      	orrs	r3, r0
    f350:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    f354:	8888      	ldrh	r0, [r1, #4]
    f356:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    f35a:	f360 0391 	bfi	r3, r0, #2, #16
    f35e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    f362:	688b      	ldr	r3, [r1, #8]
    f364:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    f368:	2301      	movs	r3, #1
    f36a:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    f36e:	2000      	movs	r0, #0
    f370:	f85d 4b04 	ldr.w	r4, [sp], #4
    f374:	4770      	bx	lr
    f376:	bf00      	nop
    f378:	01afafaf 	.word	0x01afafaf
    f37c:	1002c25c 	.word	0x1002c25c
    f380:	50010000 	.word	0x50010000

0000f384 <am_hal_adc_enable>:
    f384:	4603      	mov	r3, r0
    f386:	b128      	cbz	r0, f394 <am_hal_adc_enable+0x10>
    f388:	6802      	ldr	r2, [r0, #0]
    f38a:	490c      	ldr	r1, [pc, #48]	; (f3bc <am_hal_adc_enable+0x38>)
    f38c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f390:	428a      	cmp	r2, r1
    f392:	d001      	beq.n	f398 <am_hal_adc_enable+0x14>
    f394:	2002      	movs	r0, #2
    f396:	4770      	bx	lr
    f398:	78c2      	ldrb	r2, [r0, #3]
    f39a:	f002 0202 	and.w	r2, r2, #2
    f39e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f3a2:	b94a      	cbnz	r2, f3b8 <am_hal_adc_enable+0x34>
    f3a4:	4906      	ldr	r1, [pc, #24]	; (f3c0 <am_hal_adc_enable+0x3c>)
    f3a6:	680a      	ldr	r2, [r1, #0]
    f3a8:	f042 0201 	orr.w	r2, r2, #1
    f3ac:	600a      	str	r2, [r1, #0]
    f3ae:	78da      	ldrb	r2, [r3, #3]
    f3b0:	f042 0202 	orr.w	r2, r2, #2
    f3b4:	70da      	strb	r2, [r3, #3]
    f3b6:	4770      	bx	lr
    f3b8:	2000      	movs	r0, #0
    f3ba:	4770      	bx	lr
    f3bc:	01afafaf 	.word	0x01afafaf
    f3c0:	50010000 	.word	0x50010000

0000f3c4 <am_hal_adc_interrupt_enable>:
    f3c4:	b128      	cbz	r0, f3d2 <am_hal_adc_interrupt_enable+0xe>
    f3c6:	6803      	ldr	r3, [r0, #0]
    f3c8:	4a07      	ldr	r2, [pc, #28]	; (f3e8 <am_hal_adc_interrupt_enable+0x24>)
    f3ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3ce:	4293      	cmp	r3, r2
    f3d0:	d001      	beq.n	f3d6 <am_hal_adc_interrupt_enable+0x12>
    f3d2:	2002      	movs	r0, #2
    f3d4:	4770      	bx	lr
    f3d6:	4b05      	ldr	r3, [pc, #20]	; (f3ec <am_hal_adc_interrupt_enable+0x28>)
    f3d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f3dc:	4311      	orrs	r1, r2
    f3de:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    f3e2:	2000      	movs	r0, #0
    f3e4:	4770      	bx	lr
    f3e6:	bf00      	nop
    f3e8:	01afafaf 	.word	0x01afafaf
    f3ec:	50010000 	.word	0x50010000

0000f3f0 <am_hal_adc_interrupt_status>:
    f3f0:	b128      	cbz	r0, f3fe <am_hal_adc_interrupt_status+0xe>
    f3f2:	6803      	ldr	r3, [r0, #0]
    f3f4:	480b      	ldr	r0, [pc, #44]	; (f424 <am_hal_adc_interrupt_status+0x34>)
    f3f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3fa:	4283      	cmp	r3, r0
    f3fc:	d001      	beq.n	f402 <am_hal_adc_interrupt_status+0x12>
    f3fe:	2002      	movs	r0, #2
    f400:	4770      	bx	lr
    f402:	b92a      	cbnz	r2, f410 <am_hal_adc_interrupt_status+0x20>
    f404:	4b08      	ldr	r3, [pc, #32]	; (f428 <am_hal_adc_interrupt_status+0x38>)
    f406:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f40a:	600b      	str	r3, [r1, #0]
    f40c:	4610      	mov	r0, r2
    f40e:	4770      	bx	lr
    f410:	4a05      	ldr	r2, [pc, #20]	; (f428 <am_hal_adc_interrupt_status+0x38>)
    f412:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    f416:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f41a:	4003      	ands	r3, r0
    f41c:	600b      	str	r3, [r1, #0]
    f41e:	2000      	movs	r0, #0
    f420:	4770      	bx	lr
    f422:	bf00      	nop
    f424:	01afafaf 	.word	0x01afafaf
    f428:	50010000 	.word	0x50010000

0000f42c <am_hal_adc_interrupt_clear>:
    f42c:	b128      	cbz	r0, f43a <am_hal_adc_interrupt_clear+0xe>
    f42e:	6803      	ldr	r3, [r0, #0]
    f430:	4a05      	ldr	r2, [pc, #20]	; (f448 <am_hal_adc_interrupt_clear+0x1c>)
    f432:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f436:	4293      	cmp	r3, r2
    f438:	d001      	beq.n	f43e <am_hal_adc_interrupt_clear+0x12>
    f43a:	2002      	movs	r0, #2
    f43c:	4770      	bx	lr
    f43e:	4b03      	ldr	r3, [pc, #12]	; (f44c <am_hal_adc_interrupt_clear+0x20>)
    f440:	2000      	movs	r0, #0
    f442:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    f446:	4770      	bx	lr
    f448:	01afafaf 	.word	0x01afafaf
    f44c:	50010000 	.word	0x50010000

0000f450 <am_hal_adc_sw_trigger>:
    f450:	b128      	cbz	r0, f45e <am_hal_adc_sw_trigger+0xe>
    f452:	6803      	ldr	r3, [r0, #0]
    f454:	4a05      	ldr	r2, [pc, #20]	; (f46c <am_hal_adc_sw_trigger+0x1c>)
    f456:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f45a:	4293      	cmp	r3, r2
    f45c:	d001      	beq.n	f462 <am_hal_adc_sw_trigger+0x12>
    f45e:	2002      	movs	r0, #2
    f460:	4770      	bx	lr
    f462:	4b03      	ldr	r3, [pc, #12]	; (f470 <am_hal_adc_sw_trigger+0x20>)
    f464:	2237      	movs	r2, #55	; 0x37
    f466:	609a      	str	r2, [r3, #8]
    f468:	2000      	movs	r0, #0
    f46a:	4770      	bx	lr
    f46c:	01afafaf 	.word	0x01afafaf
    f470:	50010000 	.word	0x50010000

0000f474 <am_hal_adc_power_control>:
    f474:	b140      	cbz	r0, f488 <am_hal_adc_power_control+0x14>
    f476:	6803      	ldr	r3, [r0, #0]
    f478:	b570      	push	{r4, r5, r6, lr}
    f47a:	4c2e      	ldr	r4, [pc, #184]	; (f534 <am_hal_adc_power_control+0xc0>)
    f47c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f480:	42a3      	cmp	r3, r4
    f482:	d003      	beq.n	f48c <am_hal_adc_power_control+0x18>
    f484:	2002      	movs	r0, #2
    f486:	bd70      	pop	{r4, r5, r6, pc}
    f488:	2002      	movs	r0, #2
    f48a:	4770      	bx	lr
    f48c:	4604      	mov	r4, r0
    f48e:	4615      	mov	r5, r2
    f490:	460e      	mov	r6, r1
    f492:	b329      	cbz	r1, f4e0 <am_hal_adc_power_control+0x6c>
    f494:	2902      	cmp	r1, #2
    f496:	d821      	bhi.n	f4dc <am_hal_adc_power_control+0x68>
    f498:	b1da      	cbz	r2, f4d2 <am_hal_adc_power_control+0x5e>
    f49a:	4b27      	ldr	r3, [pc, #156]	; (f538 <am_hal_adc_power_control+0xc4>)
    f49c:	68da      	ldr	r2, [r3, #12]
    f49e:	6142      	str	r2, [r0, #20]
    f4a0:	691a      	ldr	r2, [r3, #16]
    f4a2:	6182      	str	r2, [r0, #24]
    f4a4:	695a      	ldr	r2, [r3, #20]
    f4a6:	61c2      	str	r2, [r0, #28]
    f4a8:	699a      	ldr	r2, [r3, #24]
    f4aa:	6202      	str	r2, [r0, #32]
    f4ac:	69da      	ldr	r2, [r3, #28]
    f4ae:	6242      	str	r2, [r0, #36]	; 0x24
    f4b0:	6a1a      	ldr	r2, [r3, #32]
    f4b2:	6282      	str	r2, [r0, #40]	; 0x28
    f4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f4b6:	62c2      	str	r2, [r0, #44]	; 0x2c
    f4b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f4ba:	6302      	str	r2, [r0, #48]	; 0x30
    f4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4be:	6342      	str	r2, [r0, #52]	; 0x34
    f4c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f4c2:	6382      	str	r2, [r0, #56]	; 0x38
    f4c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f4c8:	63c2      	str	r2, [r0, #60]	; 0x3c
    f4ca:	681b      	ldr	r3, [r3, #0]
    f4cc:	6103      	str	r3, [r0, #16]
    f4ce:	2301      	movs	r3, #1
    f4d0:	7303      	strb	r3, [r0, #12]
    f4d2:	200a      	movs	r0, #10
    f4d4:	f000 fbf2 	bl	fcbc <am_hal_pwrctrl_periph_disable>
    f4d8:	2000      	movs	r0, #0
    f4da:	bd70      	pop	{r4, r5, r6, pc}
    f4dc:	2006      	movs	r0, #6
    f4de:	bd70      	pop	{r4, r5, r6, pc}
    f4e0:	b11a      	cbz	r2, f4ea <am_hal_adc_power_control+0x76>
    f4e2:	7b03      	ldrb	r3, [r0, #12]
    f4e4:	b933      	cbnz	r3, f4f4 <am_hal_adc_power_control+0x80>
    f4e6:	2007      	movs	r0, #7
    f4e8:	bd70      	pop	{r4, r5, r6, pc}
    f4ea:	200a      	movs	r0, #10
    f4ec:	f000 fbbc 	bl	fc68 <am_hal_pwrctrl_periph_enable>
    f4f0:	4628      	mov	r0, r5
    f4f2:	bd70      	pop	{r4, r5, r6, pc}
    f4f4:	200a      	movs	r0, #10
    f4f6:	f000 fbb7 	bl	fc68 <am_hal_pwrctrl_periph_enable>
    f4fa:	4b0f      	ldr	r3, [pc, #60]	; (f538 <am_hal_adc_power_control+0xc4>)
    f4fc:	6962      	ldr	r2, [r4, #20]
    f4fe:	60da      	str	r2, [r3, #12]
    f500:	69a2      	ldr	r2, [r4, #24]
    f502:	611a      	str	r2, [r3, #16]
    f504:	69e2      	ldr	r2, [r4, #28]
    f506:	615a      	str	r2, [r3, #20]
    f508:	6a22      	ldr	r2, [r4, #32]
    f50a:	619a      	str	r2, [r3, #24]
    f50c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f50e:	61da      	str	r2, [r3, #28]
    f510:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f512:	621a      	str	r2, [r3, #32]
    f514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f516:	625a      	str	r2, [r3, #36]	; 0x24
    f518:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f51a:	629a      	str	r2, [r3, #40]	; 0x28
    f51c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f51e:	62da      	str	r2, [r3, #44]	; 0x2c
    f520:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f522:	631a      	str	r2, [r3, #48]	; 0x30
    f524:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f52a:	6922      	ldr	r2, [r4, #16]
    f52c:	601a      	str	r2, [r3, #0]
    f52e:	4630      	mov	r0, r6
    f530:	7326      	strb	r6, [r4, #12]
    f532:	bd70      	pop	{r4, r5, r6, pc}
    f534:	01afafaf 	.word	0x01afafaf
    f538:	50010000 	.word	0x50010000

0000f53c <am_hal_burst_mode_initialize>:
    f53c:	b570      	push	{r4, r5, r6, lr}
    f53e:	4b1e      	ldr	r3, [pc, #120]	; (f5b8 <am_hal_burst_mode_initialize+0x7c>)
    f540:	695a      	ldr	r2, [r3, #20]
    f542:	07d5      	lsls	r5, r2, #31
    f544:	b082      	sub	sp, #8
    f546:	4604      	mov	r4, r0
    f548:	d407      	bmi.n	f55a <am_hal_burst_mode_initialize+0x1e>
    f54a:	4a1c      	ldr	r2, [pc, #112]	; (f5bc <am_hal_burst_mode_initialize+0x80>)
    f54c:	2100      	movs	r1, #0
    f54e:	2301      	movs	r3, #1
    f550:	7011      	strb	r1, [r2, #0]
    f552:	2007      	movs	r0, #7
    f554:	7023      	strb	r3, [r4, #0]
    f556:	b002      	add	sp, #8
    f558:	bd70      	pop	{r4, r5, r6, pc}
    f55a:	4a19      	ldr	r2, [pc, #100]	; (f5c0 <am_hal_burst_mode_initialize+0x84>)
    f55c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f55e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f562:	6291      	str	r1, [r2, #40]	; 0x28
    f564:	6812      	ldr	r2, [r2, #0]
    f566:	07d0      	lsls	r0, r2, #31
    f568:	d507      	bpl.n	f57a <am_hal_burst_mode_initialize+0x3e>
    f56a:	68db      	ldr	r3, [r3, #12]
    f56c:	b2db      	uxtb	r3, r3
    f56e:	2b11      	cmp	r3, #17
    f570:	d903      	bls.n	f57a <am_hal_burst_mode_initialize+0x3e>
    f572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f576:	4a13      	ldr	r2, [pc, #76]	; (f5c4 <am_hal_burst_mode_initialize+0x88>)
    f578:	63da      	str	r2, [r3, #60]	; 0x3c
    f57a:	4d0f      	ldr	r5, [pc, #60]	; (f5b8 <am_hal_burst_mode_initialize+0x7c>)
    f57c:	4912      	ldr	r1, [pc, #72]	; (f5c8 <am_hal_burst_mode_initialize+0x8c>)
    f57e:	7e2a      	ldrb	r2, [r5, #24]
    f580:	2601      	movs	r6, #1
    f582:	f042 0210 	orr.w	r2, r2, #16
    f586:	2320      	movs	r3, #32
    f588:	762a      	strb	r2, [r5, #24]
    f58a:	f242 7010 	movw	r0, #10000	; 0x2710
    f58e:	461a      	mov	r2, r3
    f590:	9600      	str	r6, [sp, #0]
    f592:	f000 fa45 	bl	fa20 <am_hal_flash_delay_status_check>
    f596:	b948      	cbnz	r0, f5ac <am_hal_burst_mode_initialize+0x70>
    f598:	69aa      	ldr	r2, [r5, #24]
    f59a:	0651      	lsls	r1, r2, #25
    f59c:	d5d5      	bpl.n	f54a <am_hal_burst_mode_initialize+0xe>
    f59e:	69aa      	ldr	r2, [r5, #24]
    f5a0:	0692      	lsls	r2, r2, #26
    f5a2:	d5d2      	bpl.n	f54a <am_hal_burst_mode_initialize+0xe>
    f5a4:	4a05      	ldr	r2, [pc, #20]	; (f5bc <am_hal_burst_mode_initialize+0x80>)
    f5a6:	7016      	strb	r6, [r2, #0]
    f5a8:	7020      	strb	r0, [r4, #0]
    f5aa:	e7d4      	b.n	f556 <am_hal_burst_mode_initialize+0x1a>
    f5ac:	4a03      	ldr	r2, [pc, #12]	; (f5bc <am_hal_burst_mode_initialize+0x80>)
    f5ae:	2100      	movs	r1, #0
    f5b0:	7011      	strb	r1, [r2, #0]
    f5b2:	7026      	strb	r6, [r4, #0]
    f5b4:	b002      	add	sp, #8
    f5b6:	bd70      	pop	{r4, r5, r6, pc}
    f5b8:	40020000 	.word	0x40020000
    f5bc:	1000c174 	.word	0x1000c174
    f5c0:	40021000 	.word	0x40021000
    f5c4:	0fc0400f 	.word	0x0fc0400f
    f5c8:	40020018 	.word	0x40020018

0000f5cc <am_hal_burst_mode_enable>:
    f5cc:	4b14      	ldr	r3, [pc, #80]	; (f620 <am_hal_burst_mode_enable+0x54>)
    f5ce:	781b      	ldrb	r3, [r3, #0]
    f5d0:	b91b      	cbnz	r3, f5da <am_hal_burst_mode_enable+0xe>
    f5d2:	2301      	movs	r3, #1
    f5d4:	7003      	strb	r3, [r0, #0]
    f5d6:	2007      	movs	r0, #7
    f5d8:	4770      	bx	lr
    f5da:	b570      	push	{r4, r5, r6, lr}
    f5dc:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f5e0:	b082      	sub	sp, #8
    f5e2:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f5e6:	490f      	ldr	r1, [pc, #60]	; (f624 <am_hal_burst_mode_enable+0x58>)
    f5e8:	2601      	movs	r6, #1
    f5ea:	4332      	orrs	r2, r6
    f5ec:	2304      	movs	r3, #4
    f5ee:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f5f2:	4604      	mov	r4, r0
    f5f4:	461a      	mov	r2, r3
    f5f6:	9600      	str	r6, [sp, #0]
    f5f8:	f242 7010 	movw	r0, #10000	; 0x2710
    f5fc:	f000 fa10 	bl	fa20 <am_hal_flash_delay_status_check>
    f600:	b938      	cbnz	r0, f612 <am_hal_burst_mode_enable+0x46>
    f602:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f604:	079a      	lsls	r2, r3, #30
    f606:	d507      	bpl.n	f618 <am_hal_burst_mode_enable+0x4c>
    f608:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f60a:	075b      	lsls	r3, r3, #29
    f60c:	d501      	bpl.n	f612 <am_hal_burst_mode_enable+0x46>
    f60e:	7020      	strb	r0, [r4, #0]
    f610:	e000      	b.n	f614 <am_hal_burst_mode_enable+0x48>
    f612:	7026      	strb	r6, [r4, #0]
    f614:	b002      	add	sp, #8
    f616:	bd70      	pop	{r4, r5, r6, pc}
    f618:	7026      	strb	r6, [r4, #0]
    f61a:	4630      	mov	r0, r6
    f61c:	e7fa      	b.n	f614 <am_hal_burst_mode_enable+0x48>
    f61e:	bf00      	nop
    f620:	1000c174 	.word	0x1000c174
    f624:	40004034 	.word	0x40004034

0000f628 <am_hal_cachectrl_config>:
    f628:	b530      	push	{r4, r5, lr}
    f62a:	b083      	sub	sp, #12
    f62c:	4605      	mov	r5, r0
    f62e:	f000 fa27 	bl	fa80 <am_hal_interrupt_master_disable>
    f632:	4c11      	ldr	r4, [pc, #68]	; (f678 <am_hal_cachectrl_config+0x50>)
    f634:	9001      	str	r0, [sp, #4]
    f636:	6823      	ldr	r3, [r4, #0]
    f638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f63c:	6023      	str	r3, [r4, #0]
    f63e:	9801      	ldr	r0, [sp, #4]
    f640:	f000 fa22 	bl	fa88 <am_hal_interrupt_master_set>
    f644:	78eb      	ldrb	r3, [r5, #3]
    f646:	782a      	ldrb	r2, [r5, #0]
    f648:	78a8      	ldrb	r0, [r5, #2]
    f64a:	7869      	ldrb	r1, [r5, #1]
    f64c:	005b      	lsls	r3, r3, #1
    f64e:	0112      	lsls	r2, r2, #4
    f650:	b2d2      	uxtb	r2, r2
    f652:	f003 0302 	and.w	r3, r3, #2
    f656:	4313      	orrs	r3, r2
    f658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f65c:	0080      	lsls	r0, r0, #2
    f65e:	f000 000c 	and.w	r0, r0, #12
    f662:	020a      	lsls	r2, r1, #8
    f664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f668:	4303      	orrs	r3, r0
    f66a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f66e:	4313      	orrs	r3, r2
    f670:	2000      	movs	r0, #0
    f672:	6023      	str	r3, [r4, #0]
    f674:	b003      	add	sp, #12
    f676:	bd30      	pop	{r4, r5, pc}
    f678:	40018000 	.word	0x40018000

0000f67c <am_hal_cachectrl_enable>:
    f67c:	4a03      	ldr	r2, [pc, #12]	; (f68c <am_hal_cachectrl_enable+0x10>)
    f67e:	6813      	ldr	r3, [r2, #0]
    f680:	f043 0301 	orr.w	r3, r3, #1
    f684:	6013      	str	r3, [r2, #0]
    f686:	2000      	movs	r0, #0
    f688:	4770      	bx	lr
    f68a:	bf00      	nop
    f68c:	40018000 	.word	0x40018000

0000f690 <am_hal_clkgen_control>:
    f690:	4b32      	ldr	r3, [pc, #200]	; (f75c <am_hal_clkgen_control+0xcc>)
    f692:	681a      	ldr	r2, [r3, #0]
    f694:	b912      	cbnz	r2, f69c <am_hal_clkgen_control+0xc>
    f696:	4a32      	ldr	r2, [pc, #200]	; (f760 <am_hal_clkgen_control+0xd0>)
    f698:	6812      	ldr	r2, [r2, #0]
    f69a:	601a      	str	r2, [r3, #0]
    f69c:	2809      	cmp	r0, #9
    f69e:	d85a      	bhi.n	f756 <am_hal_clkgen_control+0xc6>
    f6a0:	e8df f000 	tbb	[pc, r0]
    f6a4:	261e160d 	.word	0x261e160d
    f6a8:	4640362e 	.word	0x4640362e
    f6ac:	054e      	.short	0x054e
    f6ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f6b2:	2000      	movs	r0, #0
    f6b4:	6a1a      	ldr	r2, [r3, #32]
    f6b6:	f36f 0200 	bfc	r2, #0, #1
    f6ba:	621a      	str	r2, [r3, #32]
    f6bc:	4770      	bx	lr
    f6be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f6c2:	2200      	movs	r2, #0
    f6c4:	2147      	movs	r1, #71	; 0x47
    f6c6:	6159      	str	r1, [r3, #20]
    f6c8:	4610      	mov	r0, r2
    f6ca:	619a      	str	r2, [r3, #24]
    f6cc:	615a      	str	r2, [r3, #20]
    f6ce:	4770      	bx	lr
    f6d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6d4:	2000      	movs	r0, #0
    f6d6:	68d3      	ldr	r3, [r2, #12]
    f6d8:	f023 0301 	bic.w	r3, r3, #1
    f6dc:	60d3      	str	r3, [r2, #12]
    f6de:	4770      	bx	lr
    f6e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6e4:	2000      	movs	r0, #0
    f6e6:	68d3      	ldr	r3, [r2, #12]
    f6e8:	f023 0302 	bic.w	r3, r3, #2
    f6ec:	60d3      	str	r3, [r2, #12]
    f6ee:	4770      	bx	lr
    f6f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6f4:	2000      	movs	r0, #0
    f6f6:	68d3      	ldr	r3, [r2, #12]
    f6f8:	f043 0301 	orr.w	r3, r3, #1
    f6fc:	60d3      	str	r3, [r2, #12]
    f6fe:	4770      	bx	lr
    f700:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f704:	2000      	movs	r0, #0
    f706:	68d3      	ldr	r3, [r2, #12]
    f708:	f043 0302 	orr.w	r3, r3, #2
    f70c:	60d3      	str	r3, [r2, #12]
    f70e:	4770      	bx	lr
    f710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f714:	2200      	movs	r2, #0
    f716:	2047      	movs	r0, #71	; 0x47
    f718:	2101      	movs	r1, #1
    f71a:	6158      	str	r0, [r3, #20]
    f71c:	6199      	str	r1, [r3, #24]
    f71e:	4610      	mov	r0, r2
    f720:	615a      	str	r2, [r3, #20]
    f722:	4770      	bx	lr
    f724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f728:	2000      	movs	r0, #0
    f72a:	68da      	ldr	r2, [r3, #12]
    f72c:	60da      	str	r2, [r3, #12]
    f72e:	4770      	bx	lr
    f730:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f734:	2000      	movs	r0, #0
    f736:	68d3      	ldr	r3, [r2, #12]
    f738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f73c:	60d3      	str	r3, [r2, #12]
    f73e:	4770      	bx	lr
    f740:	b139      	cbz	r1, f752 <am_hal_clkgen_control+0xc2>
    f742:	680b      	ldr	r3, [r1, #0]
    f744:	f043 0301 	orr.w	r3, r3, #1
    f748:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f74c:	2000      	movs	r0, #0
    f74e:	6213      	str	r3, [r2, #32]
    f750:	4770      	bx	lr
    f752:	4b04      	ldr	r3, [pc, #16]	; (f764 <am_hal_clkgen_control+0xd4>)
    f754:	e7f8      	b.n	f748 <am_hal_clkgen_control+0xb8>
    f756:	2006      	movs	r0, #6
    f758:	4770      	bx	lr
    f75a:	bf00      	nop
    f75c:	1000c178 	.word	0x1000c178
    f760:	4ffff000 	.word	0x4ffff000
    f764:	0025b801 	.word	0x0025b801

0000f768 <am_hal_clkgen_status_get>:
    f768:	b1a8      	cbz	r0, f796 <am_hal_clkgen_status_get+0x2e>
    f76a:	b410      	push	{r4}
    f76c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f770:	490a      	ldr	r1, [pc, #40]	; (f79c <am_hal_clkgen_status_get+0x34>)
    f772:	6994      	ldr	r4, [r2, #24]
    f774:	4b0a      	ldr	r3, [pc, #40]	; (f7a0 <am_hal_clkgen_status_get+0x38>)
    f776:	f014 0f01 	tst.w	r4, #1
    f77a:	bf08      	it	eq
    f77c:	460b      	moveq	r3, r1
    f77e:	6003      	str	r3, [r0, #0]
    f780:	69d3      	ldr	r3, [r2, #28]
    f782:	f85d 4b04 	ldr.w	r4, [sp], #4
    f786:	f003 0201 	and.w	r2, r3, #1
    f78a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f78e:	6042      	str	r2, [r0, #4]
    f790:	7203      	strb	r3, [r0, #8]
    f792:	2000      	movs	r0, #0
    f794:	4770      	bx	lr
    f796:	2006      	movs	r0, #6
    f798:	4770      	bx	lr
    f79a:	bf00      	nop
    f79c:	02dc6c00 	.word	0x02dc6c00
    f7a0:	016e3600 	.word	0x016e3600

0000f7a4 <am_hal_ctimer_config>:
    f7a4:	b570      	push	{r4, r5, r6, lr}
    f7a6:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    f7aa:	2a00      	cmp	r2, #0
    f7ac:	b082      	sub	sp, #8
    f7ae:	bf18      	it	ne
    f7b0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    f7b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    f7b8:	ea42 0403 	orr.w	r4, r2, r3
    f7bc:	460d      	mov	r5, r1
    f7be:	4606      	mov	r6, r0
    f7c0:	f000 f95e 	bl	fa80 <am_hal_interrupt_master_disable>
    f7c4:	4b0d      	ldr	r3, [pc, #52]	; (f7fc <am_hal_ctimer_config+0x58>)
    f7c6:	9001      	str	r0, [sp, #4]
    f7c8:	0172      	lsls	r2, r6, #5
    f7ca:	50d4      	str	r4, [r2, r3]
    f7cc:	9801      	ldr	r0, [sp, #4]
    f7ce:	f000 f95b 	bl	fa88 <am_hal_interrupt_master_set>
    f7d2:	686b      	ldr	r3, [r5, #4]
    f7d4:	b90b      	cbnz	r3, f7da <am_hal_ctimer_config+0x36>
    f7d6:	682a      	ldr	r2, [r5, #0]
    f7d8:	b142      	cbz	r2, f7ec <am_hal_ctimer_config+0x48>
    f7da:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f7de:	2100      	movs	r1, #0
    f7e0:	4a07      	ldr	r2, [pc, #28]	; (f800 <am_hal_ctimer_config+0x5c>)
    f7e2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    f7e6:	5473      	strb	r3, [r6, r1]
    f7e8:	b002      	add	sp, #8
    f7ea:	bd70      	pop	{r4, r5, r6, pc}
    f7ec:	68ab      	ldr	r3, [r5, #8]
    f7ee:	2b00      	cmp	r3, #0
    f7f0:	d0fa      	beq.n	f7e8 <am_hal_ctimer_config+0x44>
    f7f2:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f7f6:	2101      	movs	r1, #1
    f7f8:	e7f2      	b.n	f7e0 <am_hal_ctimer_config+0x3c>
    f7fa:	bf00      	nop
    f7fc:	4000800c 	.word	0x4000800c
    f800:	1000c034 	.word	0x1000c034

0000f804 <am_hal_ctimer_config_single>:
    f804:	b5f0      	push	{r4, r5, r6, r7, lr}
    f806:	b083      	sub	sp, #12
    f808:	460e      	mov	r6, r1
    f80a:	4614      	mov	r4, r2
    f80c:	0147      	lsls	r7, r0, #5
    f80e:	4605      	mov	r5, r0
    f810:	f000 f936 	bl	fa80 <am_hal_interrupt_master_disable>
    f814:	4a19      	ldr	r2, [pc, #100]	; (f87c <am_hal_ctimer_config_single+0x78>)
    f816:	9001      	str	r0, [sp, #4]
    f818:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    f81c:	58bb      	ldr	r3, [r7, r2]
    f81e:	d021      	beq.n	f864 <am_hal_ctimer_config_single+0x60>
    f820:	ea23 0306 	bic.w	r3, r3, r6
    f824:	1c71      	adds	r1, r6, #1
    f826:	ea43 0304 	orr.w	r3, r3, r4
    f82a:	d00c      	beq.n	f846 <am_hal_ctimer_config_single+0x42>
    f82c:	50bb      	str	r3, [r7, r2]
    f82e:	9801      	ldr	r0, [sp, #4]
    f830:	f000 f92a 	bl	fa88 <am_hal_interrupt_master_set>
    f834:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f838:	429e      	cmp	r6, r3
    f83a:	d01c      	beq.n	f876 <am_hal_ctimer_config_single+0x72>
    f83c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    f840:	d017      	beq.n	f872 <am_hal_ctimer_config_single+0x6e>
    f842:	b003      	add	sp, #12
    f844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f84a:	50bb      	str	r3, [r7, r2]
    f84c:	9801      	ldr	r0, [sp, #4]
    f84e:	f000 f91b 	bl	fa88 <am_hal_interrupt_master_set>
    f852:	2200      	movs	r2, #0
    f854:	4b0a      	ldr	r3, [pc, #40]	; (f880 <am_hal_ctimer_config_single+0x7c>)
    f856:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    f85a:	f3c4 0444 	ubfx	r4, r4, #1, #5
    f85e:	54ac      	strb	r4, [r5, r2]
    f860:	b003      	add	sp, #12
    f862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f864:	0424      	lsls	r4, r4, #16
    f866:	b29b      	uxth	r3, r3
    f868:	4323      	orrs	r3, r4
    f86a:	50bb      	str	r3, [r7, r2]
    f86c:	9801      	ldr	r0, [sp, #4]
    f86e:	f000 f90b 	bl	fa88 <am_hal_interrupt_master_set>
    f872:	2201      	movs	r2, #1
    f874:	e7ee      	b.n	f854 <am_hal_ctimer_config_single+0x50>
    f876:	2200      	movs	r2, #0
    f878:	e7ec      	b.n	f854 <am_hal_ctimer_config_single+0x50>
    f87a:	bf00      	nop
    f87c:	4000800c 	.word	0x4000800c
    f880:	1000c034 	.word	0x1000c034

0000f884 <am_hal_ctimer_start>:
    f884:	b570      	push	{r4, r5, r6, lr}
    f886:	b082      	sub	sp, #8
    f888:	460c      	mov	r4, r1
    f88a:	0146      	lsls	r6, r0, #5
    f88c:	4605      	mov	r5, r0
    f88e:	f000 f8f7 	bl	fa80 <am_hal_interrupt_master_disable>
    f892:	4a0f      	ldr	r2, [pc, #60]	; (f8d0 <am_hal_ctimer_start+0x4c>)
    f894:	9001      	str	r0, [sp, #4]
    f896:	58b3      	ldr	r3, [r6, r2]
    f898:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f89c:	ea23 0301 	bic.w	r3, r3, r1
    f8a0:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    f8a4:	430b      	orrs	r3, r1
    f8a6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    f8aa:	bf0c      	ite	eq
    f8ac:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    f8b0:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    f8b4:	50b3      	str	r3, [r6, r2]
    f8b6:	4b07      	ldr	r3, [pc, #28]	; (f8d4 <am_hal_ctimer_start+0x50>)
    f8b8:	9801      	ldr	r0, [sp, #4]
    f8ba:	bf0c      	ite	eq
    f8bc:	2101      	moveq	r1, #1
    f8be:	2100      	movne	r1, #0
    f8c0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    f8c4:	545c      	strb	r4, [r3, r1]
    f8c6:	f000 f8df 	bl	fa88 <am_hal_interrupt_master_set>
    f8ca:	b002      	add	sp, #8
    f8cc:	bd70      	pop	{r4, r5, r6, pc}
    f8ce:	bf00      	nop
    f8d0:	4000800c 	.word	0x4000800c
    f8d4:	1000c034 	.word	0x1000c034

0000f8d8 <am_hal_ctimer_clear>:
    f8d8:	b570      	push	{r4, r5, r6, lr}
    f8da:	b082      	sub	sp, #8
    f8dc:	0146      	lsls	r6, r0, #5
    f8de:	460c      	mov	r4, r1
    f8e0:	f000 f8ce 	bl	fa80 <am_hal_interrupt_master_disable>
    f8e4:	4d05      	ldr	r5, [pc, #20]	; (f8fc <am_hal_ctimer_clear+0x24>)
    f8e6:	9001      	str	r0, [sp, #4]
    f8e8:	5973      	ldr	r3, [r6, r5]
    f8ea:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f8ee:	4319      	orrs	r1, r3
    f8f0:	5171      	str	r1, [r6, r5]
    f8f2:	9801      	ldr	r0, [sp, #4]
    f8f4:	f000 f8c8 	bl	fa88 <am_hal_interrupt_master_set>
    f8f8:	b002      	add	sp, #8
    f8fa:	bd70      	pop	{r4, r5, r6, pc}
    f8fc:	4000800c 	.word	0x4000800c

0000f900 <am_hal_ctimer_period_set>:
    f900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f904:	b082      	sub	sp, #8
    f906:	4689      	mov	r9, r1
    f908:	4698      	mov	r8, r3
    f90a:	0147      	lsls	r7, r0, #5
    f90c:	4614      	mov	r4, r2
    f90e:	f000 f8b7 	bl	fa80 <am_hal_interrupt_master_disable>
    f912:	f8df a094 	ldr.w	sl, [pc, #148]	; f9a8 <am_hal_ctimer_period_set+0xa8>
    f916:	9001      	str	r0, [sp, #4]
    f918:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f91c:	4d20      	ldr	r5, [pc, #128]	; (f9a0 <am_hal_ctimer_period_set+0xa0>)
    f91e:	4e21      	ldr	r6, [pc, #132]	; (f9a4 <am_hal_ctimer_period_set+0xa4>)
    f920:	f857 300a 	ldr.w	r3, [r7, sl]
    f924:	d01a      	beq.n	f95c <am_hal_ctimer_period_set+0x5c>
    f926:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f92a:	2b80      	cmp	r3, #128	; 0x80
    f92c:	d01b      	beq.n	f966 <am_hal_ctimer_period_set+0x66>
    f92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f932:	2000      	movs	r0, #0
    f934:	4591      	cmp	r9, r2
    f936:	4603      	mov	r3, r0
    f938:	d01e      	beq.n	f978 <am_hal_ctimer_period_set+0x78>
    f93a:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f93e:	d025      	beq.n	f98c <am_hal_ctimer_period_set+0x8c>
    f940:	0c1b      	lsrs	r3, r3, #16
    f942:	b2a2      	uxth	r2, r4
    f944:	041b      	lsls	r3, r3, #16
    f946:	4310      	orrs	r0, r2
    f948:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    f94c:	5178      	str	r0, [r7, r5]
    f94e:	51bb      	str	r3, [r7, r6]
    f950:	9801      	ldr	r0, [sp, #4]
    f952:	f000 f899 	bl	fa88 <am_hal_interrupt_master_set>
    f956:	b002      	add	sp, #8
    f958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f95c:	0c1b      	lsrs	r3, r3, #16
    f95e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f962:	2b80      	cmp	r3, #128	; 0x80
    f964:	d111      	bne.n	f98a <am_hal_ctimer_period_set+0x8a>
    f966:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f96a:	4591      	cmp	r9, r2
    f96c:	ea4f 4004 	mov.w	r0, r4, lsl #16
    f970:	4623      	mov	r3, r4
    f972:	ebc8 0404 	rsb	r4, r8, r4
    f976:	d1e0      	bne.n	f93a <am_hal_ctimer_period_set+0x3a>
    f978:	b2a3      	uxth	r3, r4
    f97a:	4318      	orrs	r0, r3
    f97c:	5178      	str	r0, [r7, r5]
    f97e:	9801      	ldr	r0, [sp, #4]
    f980:	f000 f882 	bl	fa88 <am_hal_interrupt_master_set>
    f984:	b002      	add	sp, #8
    f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f98a:	2000      	movs	r0, #0
    f98c:	b2a3      	uxth	r3, r4
    f98e:	4318      	orrs	r0, r3
    f990:	51b8      	str	r0, [r7, r6]
    f992:	9801      	ldr	r0, [sp, #4]
    f994:	f000 f878 	bl	fa88 <am_hal_interrupt_master_set>
    f998:	b002      	add	sp, #8
    f99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f99e:	bf00      	nop
    f9a0:	40008004 	.word	0x40008004
    f9a4:	40008008 	.word	0x40008008
    f9a8:	4000800c 	.word	0x4000800c

0000f9ac <am_hal_ctimer_adc_trigger_enable>:
    f9ac:	b500      	push	{lr}
    f9ae:	b083      	sub	sp, #12
    f9b0:	f000 f866 	bl	fa80 <am_hal_interrupt_master_disable>
    f9b4:	4a05      	ldr	r2, [pc, #20]	; (f9cc <am_hal_ctimer_adc_trigger_enable+0x20>)
    f9b6:	9001      	str	r0, [sp, #4]
    f9b8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    f9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    f9be:	66d3      	str	r3, [r2, #108]	; 0x6c
    f9c0:	9801      	ldr	r0, [sp, #4]
    f9c2:	f000 f861 	bl	fa88 <am_hal_interrupt_master_set>
    f9c6:	b003      	add	sp, #12
    f9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    f9cc:	40008000 	.word	0x40008000

0000f9d0 <am_hal_ctimer_int_enable>:
    f9d0:	b510      	push	{r4, lr}
    f9d2:	b082      	sub	sp, #8
    f9d4:	4604      	mov	r4, r0
    f9d6:	f000 f853 	bl	fa80 <am_hal_interrupt_master_disable>
    f9da:	4b06      	ldr	r3, [pc, #24]	; (f9f4 <am_hal_ctimer_int_enable+0x24>)
    f9dc:	9001      	str	r0, [sp, #4]
    f9de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f9e2:	4314      	orrs	r4, r2
    f9e4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    f9e8:	9801      	ldr	r0, [sp, #4]
    f9ea:	f000 f84d 	bl	fa88 <am_hal_interrupt_master_set>
    f9ee:	b002      	add	sp, #8
    f9f0:	bd10      	pop	{r4, pc}
    f9f2:	bf00      	nop
    f9f4:	40008000 	.word	0x40008000

0000f9f8 <am_hal_ctimer_int_clear>:
    f9f8:	b510      	push	{r4, lr}
    f9fa:	b082      	sub	sp, #8
    f9fc:	4604      	mov	r4, r0
    f9fe:	f000 f83f 	bl	fa80 <am_hal_interrupt_master_disable>
    fa02:	4b04      	ldr	r3, [pc, #16]	; (fa14 <am_hal_ctimer_int_clear+0x1c>)
    fa04:	9001      	str	r0, [sp, #4]
    fa06:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    fa0a:	9801      	ldr	r0, [sp, #4]
    fa0c:	f000 f83c 	bl	fa88 <am_hal_interrupt_master_set>
    fa10:	b002      	add	sp, #8
    fa12:	bd10      	pop	{r4, pc}
    fa14:	40008000 	.word	0x40008000

0000fa18 <am_hal_flash_delay>:
    fa18:	4b00      	ldr	r3, [pc, #0]	; (fa1c <am_hal_flash_delay+0x4>)
    fa1a:	4718      	bx	r3
    fa1c:	0800009d 	.word	0x0800009d

0000fa20 <am_hal_flash_delay_status_check>:
    fa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa24:	f89d 4018 	ldrb.w	r4, [sp, #24]
    fa28:	460d      	mov	r5, r1
    fa2a:	4616      	mov	r6, r2
    fa2c:	461f      	mov	r7, r3
    fa2e:	b17c      	cbz	r4, fa50 <am_hal_flash_delay_status_check+0x30>
    fa30:	4604      	mov	r4, r0
    fa32:	f8df 8040 	ldr.w	r8, [pc, #64]	; fa74 <am_hal_flash_delay_status_check+0x54>
    fa36:	e002      	b.n	fa3e <am_hal_flash_delay_status_check+0x1e>
    fa38:	b1c4      	cbz	r4, fa6c <am_hal_flash_delay_status_check+0x4c>
    fa3a:	47c0      	blx	r8
    fa3c:	3c01      	subs	r4, #1
    fa3e:	682b      	ldr	r3, [r5, #0]
    fa40:	4033      	ands	r3, r6
    fa42:	429f      	cmp	r7, r3
    fa44:	f04f 0001 	mov.w	r0, #1
    fa48:	d1f6      	bne.n	fa38 <am_hal_flash_delay_status_check+0x18>
    fa4a:	2000      	movs	r0, #0
    fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa50:	f8df 8020 	ldr.w	r8, [pc, #32]	; fa74 <am_hal_flash_delay_status_check+0x54>
    fa54:	4604      	mov	r4, r0
    fa56:	e002      	b.n	fa5e <am_hal_flash_delay_status_check+0x3e>
    fa58:	b144      	cbz	r4, fa6c <am_hal_flash_delay_status_check+0x4c>
    fa5a:	47c0      	blx	r8
    fa5c:	3c01      	subs	r4, #1
    fa5e:	682b      	ldr	r3, [r5, #0]
    fa60:	4033      	ands	r3, r6
    fa62:	429f      	cmp	r7, r3
    fa64:	f04f 0001 	mov.w	r0, #1
    fa68:	d0f6      	beq.n	fa58 <am_hal_flash_delay_status_check+0x38>
    fa6a:	e7ee      	b.n	fa4a <am_hal_flash_delay_status_check+0x2a>
    fa6c:	2004      	movs	r0, #4
    fa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa72:	bf00      	nop
    fa74:	0800009d 	.word	0x0800009d

0000fa78 <am_hal_interrupt_master_enable>:
    fa78:	f3ef 8010 	mrs	r0, PRIMASK
    fa7c:	b662      	cpsie	i
    fa7e:	4770      	bx	lr

0000fa80 <am_hal_interrupt_master_disable>:
    fa80:	f3ef 8010 	mrs	r0, PRIMASK
    fa84:	b672      	cpsid	i
    fa86:	4770      	bx	lr

0000fa88 <am_hal_interrupt_master_set>:
    fa88:	f380 8810 	msr	PRIMASK, r0
    fa8c:	4770      	bx	lr
    fa8e:	bf00      	nop

0000fa90 <am_hal_itm_disable>:
    fa90:	b510      	push	{r4, lr}
    fa92:	4b25      	ldr	r3, [pc, #148]	; (fb28 <am_hal_itm_disable+0x98>)
    fa94:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    fa98:	b9b3      	cbnz	r3, fac8 <am_hal_itm_disable+0x38>
    fa9a:	4b24      	ldr	r3, [pc, #144]	; (fb2c <am_hal_itm_disable+0x9c>)
    fa9c:	68da      	ldr	r2, [r3, #12]
    fa9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    faa2:	60da      	str	r2, [r3, #12]
    faa4:	68da      	ldr	r2, [r3, #12]
    faa6:	01d2      	lsls	r2, r2, #7
    faa8:	d5fc      	bpl.n	faa4 <am_hal_itm_disable+0x14>
    faaa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    faae:	4920      	ldr	r1, [pc, #128]	; (fb30 <am_hal_itm_disable+0xa0>)
    fab0:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    fab4:	4a1f      	ldr	r2, [pc, #124]	; (fb34 <am_hal_itm_disable+0xa4>)
    fab6:	200f      	movs	r0, #15
    fab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fabc:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    fac0:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    fac4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    fac8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    facc:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    fad0:	021b      	lsls	r3, r3, #8
    fad2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    fad6:	d4f9      	bmi.n	facc <am_hal_itm_disable+0x3c>
    fad8:	f240 20f7 	movw	r0, #759	; 0x2f7
    fadc:	f7ff ff9c 	bl	fa18 <am_hal_flash_delay>
    fae0:	4b13      	ldr	r3, [pc, #76]	; (fb30 <am_hal_itm_disable+0xa0>)
    fae2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    fae6:	4621      	mov	r1, r4
    fae8:	2064      	movs	r0, #100	; 0x64
    faea:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    faee:	f023 0301 	bic.w	r3, r3, #1
    faf2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    faf6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    fafa:	4b0f      	ldr	r3, [pc, #60]	; (fb38 <am_hal_itm_disable+0xa8>)
    fafc:	4013      	ands	r3, r2
    fafe:	2b00      	cmp	r3, #0
    fb00:	d1f9      	bne.n	faf6 <am_hal_itm_disable+0x66>
    fb02:	3801      	subs	r0, #1
    fb04:	d1f1      	bne.n	faea <am_hal_itm_disable+0x5a>
    fb06:	4a09      	ldr	r2, [pc, #36]	; (fb2c <am_hal_itm_disable+0x9c>)
    fb08:	68d3      	ldr	r3, [r2, #12]
    fb0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    fb0e:	60d3      	str	r3, [r2, #12]
    fb10:	68d3      	ldr	r3, [r2, #12]
    fb12:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    fb16:	d1fb      	bne.n	fb10 <am_hal_itm_disable+0x80>
    fb18:	4a03      	ldr	r2, [pc, #12]	; (fb28 <am_hal_itm_disable+0x98>)
    fb1a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    fb1e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    fb22:	2b00      	cmp	r3, #0
    fb24:	d1fb      	bne.n	fb1e <am_hal_itm_disable+0x8e>
    fb26:	bd10      	pop	{r4, pc}
    fb28:	40020000 	.word	0x40020000
    fb2c:	e000edf0 	.word	0xe000edf0
    fb30:	c5acce55 	.word	0xc5acce55
    fb34:	00150511 	.word	0x00150511
    fb38:	00800001 	.word	0x00800001

0000fb3c <am_hal_mcuctrl_info_get>:
    fb3c:	b4f0      	push	{r4, r5, r6, r7}
    fb3e:	b121      	cbz	r1, fb4a <am_hal_mcuctrl_info_get+0xe>
    fb40:	2801      	cmp	r0, #1
    fb42:	d038      	beq.n	fbb6 <am_hal_mcuctrl_info_get+0x7a>
    fb44:	d320      	bcc.n	fb88 <am_hal_mcuctrl_info_get+0x4c>
    fb46:	2802      	cmp	r0, #2
    fb48:	d002      	beq.n	fb50 <am_hal_mcuctrl_info_get+0x14>
    fb4a:	2006      	movs	r0, #6
    fb4c:	bcf0      	pop	{r4, r5, r6, r7}
    fb4e:	4770      	bx	lr
    fb50:	4a41      	ldr	r2, [pc, #260]	; (fc58 <am_hal_mcuctrl_info_get+0x11c>)
    fb52:	684d      	ldr	r5, [r1, #4]
    fb54:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    fb58:	694c      	ldr	r4, [r1, #20]
    fb5a:	f003 0601 	and.w	r6, r3, #1
    fb5e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    fb62:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fb66:	700e      	strb	r6, [r1, #0]
    fb68:	7208      	strb	r0, [r1, #8]
    fb6a:	740b      	strb	r3, [r1, #16]
    fb6c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    fb70:	60cb      	str	r3, [r1, #12]
    fb72:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    fb76:	4328      	orrs	r0, r5
    fb78:	6048      	str	r0, [r1, #4]
    fb7a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    fb7e:	4323      	orrs	r3, r4
    fb80:	2000      	movs	r0, #0
    fb82:	614b      	str	r3, [r1, #20]
    fb84:	bcf0      	pop	{r4, r5, r6, r7}
    fb86:	4770      	bx	lr
    fb88:	4a33      	ldr	r2, [pc, #204]	; (fc58 <am_hal_mcuctrl_info_get+0x11c>)
    fb8a:	6993      	ldr	r3, [r2, #24]
    fb8c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    fb90:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fb94:	7008      	strb	r0, [r1, #0]
    fb96:	704b      	strb	r3, [r1, #1]
    fb98:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    fb9c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    fba0:	710b      	strb	r3, [r1, #4]
    fba2:	6953      	ldr	r3, [r2, #20]
    fba4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    fba8:	f003 0301 	and.w	r3, r3, #1
    fbac:	2000      	movs	r0, #0
    fbae:	708a      	strb	r2, [r1, #2]
    fbb0:	70cb      	strb	r3, [r1, #3]
    fbb2:	bcf0      	pop	{r4, r5, r6, r7}
    fbb4:	4770      	bx	lr
    fbb6:	4b28      	ldr	r3, [pc, #160]	; (fc58 <am_hal_mcuctrl_info_get+0x11c>)
    fbb8:	4c28      	ldr	r4, [pc, #160]	; (fc5c <am_hal_mcuctrl_info_get+0x120>)
    fbba:	681a      	ldr	r2, [r3, #0]
    fbbc:	600a      	str	r2, [r1, #0]
    fbbe:	6858      	ldr	r0, [r3, #4]
    fbc0:	6048      	str	r0, [r1, #4]
    fbc2:	6898      	ldr	r0, [r3, #8]
    fbc4:	6088      	str	r0, [r1, #8]
    fbc6:	68d8      	ldr	r0, [r3, #12]
    fbc8:	60c8      	str	r0, [r1, #12]
    fbca:	691d      	ldr	r5, [r3, #16]
    fbcc:	4824      	ldr	r0, [pc, #144]	; (fc60 <am_hal_mcuctrl_info_get+0x124>)
    fbce:	610d      	str	r5, [r1, #16]
    fbd0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    fbd4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    fbd8:	695d      	ldr	r5, [r3, #20]
    fbda:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    fbde:	4b21      	ldr	r3, [pc, #132]	; (fc64 <am_hal_mcuctrl_info_get+0x128>)
    fbe0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    fbe4:	6208      	str	r0, [r1, #32]
    fbe6:	f002 0201 	and.w	r2, r2, #1
    fbea:	614d      	str	r5, [r1, #20]
    fbec:	61cc      	str	r4, [r1, #28]
    fbee:	618a      	str	r2, [r1, #24]
    fbf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    fbf4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    fbf8:	b2d0      	uxtb	r0, r2
    fbfa:	f004 020f 	and.w	r2, r4, #15
    fbfe:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    fc02:	624a      	str	r2, [r1, #36]	; 0x24
    fc04:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    fc08:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    fc0c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    fc10:	f004 020f 	and.w	r2, r4, #15
    fc14:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    fc18:	628a      	str	r2, [r1, #40]	; 0x28
    fc1a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    fc1e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    fc22:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    fc26:	f3c2 1203 	ubfx	r2, r2, #4, #4
    fc2a:	4302      	orrs	r2, r0
    fc2c:	62ca      	str	r2, [r1, #44]	; 0x2c
    fc2e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    fc32:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    fc36:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    fc3a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    fc3e:	b2c0      	uxtb	r0, r0
    fc40:	0400      	lsls	r0, r0, #16
    fc42:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    fc46:	b2d2      	uxtb	r2, r2
    fc48:	431a      	orrs	r2, r3
    fc4a:	b2e3      	uxtb	r3, r4
    fc4c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fc50:	630b      	str	r3, [r1, #48]	; 0x30
    fc52:	2000      	movs	r0, #0
    fc54:	bcf0      	pop	{r4, r5, r6, r7}
    fc56:	4770      	bx	lr
    fc58:	40020000 	.word	0x40020000
    fc5c:	00010e20 	.word	0x00010e20
    fc60:	00010e60 	.word	0x00010e60
    fc64:	f0000f00 	.word	0xf0000f00

0000fc68 <am_hal_pwrctrl_periph_enable>:
    fc68:	b570      	push	{r4, r5, r6, lr}
    fc6a:	b082      	sub	sp, #8
    fc6c:	4604      	mov	r4, r0
    fc6e:	f7ff ff07 	bl	fa80 <am_hal_interrupt_master_disable>
    fc72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fc76:	4d0f      	ldr	r5, [pc, #60]	; (fcb4 <am_hal_pwrctrl_periph_enable+0x4c>)
    fc78:	4e0f      	ldr	r6, [pc, #60]	; (fcb8 <am_hal_pwrctrl_periph_enable+0x50>)
    fc7a:	9001      	str	r0, [sp, #4]
    fc7c:	00a4      	lsls	r4, r4, #2
    fc7e:	68aa      	ldr	r2, [r5, #8]
    fc80:	5933      	ldr	r3, [r6, r4]
    fc82:	4313      	orrs	r3, r2
    fc84:	60ab      	str	r3, [r5, #8]
    fc86:	9801      	ldr	r0, [sp, #4]
    fc88:	4434      	add	r4, r6
    fc8a:	f7ff fefd 	bl	fa88 <am_hal_interrupt_master_set>
    fc8e:	2077      	movs	r0, #119	; 0x77
    fc90:	f7ff fec2 	bl	fa18 <am_hal_flash_delay>
    fc94:	69ab      	ldr	r3, [r5, #24]
    fc96:	6864      	ldr	r4, [r4, #4]
    fc98:	4223      	tst	r3, r4
    fc9a:	d103      	bne.n	fca4 <am_hal_pwrctrl_periph_enable+0x3c>
    fc9c:	2077      	movs	r0, #119	; 0x77
    fc9e:	f7ff febb 	bl	fa18 <am_hal_flash_delay>
    fca2:	69ab      	ldr	r3, [r5, #24]
    fca4:	4b03      	ldr	r3, [pc, #12]	; (fcb4 <am_hal_pwrctrl_periph_enable+0x4c>)
    fca6:	699b      	ldr	r3, [r3, #24]
    fca8:	4223      	tst	r3, r4
    fcaa:	bf0c      	ite	eq
    fcac:	2001      	moveq	r0, #1
    fcae:	2000      	movne	r0, #0
    fcb0:	b002      	add	sp, #8
    fcb2:	bd70      	pop	{r4, r5, r6, pc}
    fcb4:	40021000 	.word	0x40021000
    fcb8:	00010ea0 	.word	0x00010ea0

0000fcbc <am_hal_pwrctrl_periph_disable>:
    fcbc:	b570      	push	{r4, r5, r6, lr}
    fcbe:	b082      	sub	sp, #8
    fcc0:	4604      	mov	r4, r0
    fcc2:	f7ff fedd 	bl	fa80 <am_hal_interrupt_master_disable>
    fcc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fcca:	4d10      	ldr	r5, [pc, #64]	; (fd0c <am_hal_pwrctrl_periph_disable+0x50>)
    fccc:	4e10      	ldr	r6, [pc, #64]	; (fd10 <am_hal_pwrctrl_periph_disable+0x54>)
    fcce:	9001      	str	r0, [sp, #4]
    fcd0:	00a4      	lsls	r4, r4, #2
    fcd2:	68ab      	ldr	r3, [r5, #8]
    fcd4:	5932      	ldr	r2, [r6, r4]
    fcd6:	ea23 0302 	bic.w	r3, r3, r2
    fcda:	60ab      	str	r3, [r5, #8]
    fcdc:	9801      	ldr	r0, [sp, #4]
    fcde:	4434      	add	r4, r6
    fce0:	f7ff fed2 	bl	fa88 <am_hal_interrupt_master_set>
    fce4:	2077      	movs	r0, #119	; 0x77
    fce6:	f7ff fe97 	bl	fa18 <am_hal_flash_delay>
    fcea:	69ab      	ldr	r3, [r5, #24]
    fcec:	6864      	ldr	r4, [r4, #4]
    fcee:	4223      	tst	r3, r4
    fcf0:	d003      	beq.n	fcfa <am_hal_pwrctrl_periph_disable+0x3e>
    fcf2:	2077      	movs	r0, #119	; 0x77
    fcf4:	f7ff fe90 	bl	fa18 <am_hal_flash_delay>
    fcf8:	69ab      	ldr	r3, [r5, #24]
    fcfa:	4b04      	ldr	r3, [pc, #16]	; (fd0c <am_hal_pwrctrl_periph_disable+0x50>)
    fcfc:	699b      	ldr	r3, [r3, #24]
    fcfe:	4223      	tst	r3, r4
    fd00:	bf14      	ite	ne
    fd02:	2001      	movne	r0, #1
    fd04:	2000      	moveq	r0, #0
    fd06:	b002      	add	sp, #8
    fd08:	bd70      	pop	{r4, r5, r6, pc}
    fd0a:	bf00      	nop
    fd0c:	40021000 	.word	0x40021000
    fd10:	00010ea0 	.word	0x00010ea0

0000fd14 <am_hal_pwrctrl_low_power_init>:
    fd14:	b530      	push	{r4, r5, lr}
    fd16:	4b1f      	ldr	r3, [pc, #124]	; (fd94 <am_hal_pwrctrl_low_power_init+0x80>)
    fd18:	681a      	ldr	r2, [r3, #0]
    fd1a:	b083      	sub	sp, #12
    fd1c:	b912      	cbnz	r2, fd24 <am_hal_pwrctrl_low_power_init+0x10>
    fd1e:	4a1e      	ldr	r2, [pc, #120]	; (fd98 <am_hal_pwrctrl_low_power_init+0x84>)
    fd20:	6812      	ldr	r2, [r2, #0]
    fd22:	601a      	str	r2, [r3, #0]
    fd24:	4c1d      	ldr	r4, [pc, #116]	; (fd9c <am_hal_pwrctrl_low_power_init+0x88>)
    fd26:	69a3      	ldr	r3, [r4, #24]
    fd28:	05db      	lsls	r3, r3, #23
    fd2a:	d502      	bpl.n	fd32 <am_hal_pwrctrl_low_power_init+0x1e>
    fd2c:	2000      	movs	r0, #0
    fd2e:	b003      	add	sp, #12
    fd30:	bd30      	pop	{r4, r5, pc}
    fd32:	4d1b      	ldr	r5, [pc, #108]	; (fda0 <am_hal_pwrctrl_low_power_init+0x8c>)
    fd34:	491b      	ldr	r1, [pc, #108]	; (fda4 <am_hal_pwrctrl_low_power_init+0x90>)
    fd36:	7e2a      	ldrb	r2, [r5, #24]
    fd38:	2001      	movs	r0, #1
    fd3a:	4302      	orrs	r2, r0
    fd3c:	2307      	movs	r3, #7
    fd3e:	762a      	strb	r2, [r5, #24]
    fd40:	9000      	str	r0, [sp, #0]
    fd42:	461a      	mov	r2, r3
    fd44:	f242 7010 	movw	r0, #10000	; 0x2710
    fd48:	f7ff fe6a 	bl	fa20 <am_hal_flash_delay_status_check>
    fd4c:	b110      	cbz	r0, fd54 <am_hal_pwrctrl_low_power_init+0x40>
    fd4e:	2004      	movs	r0, #4
    fd50:	b003      	add	sp, #12
    fd52:	bd30      	pop	{r4, r5, pc}
    fd54:	6823      	ldr	r3, [r4, #0]
    fd56:	f043 0301 	orr.w	r3, r3, #1
    fd5a:	6023      	str	r3, [r4, #0]
    fd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd62:	6263      	str	r3, [r4, #36]	; 0x24
    fd64:	68eb      	ldr	r3, [r5, #12]
    fd66:	b2db      	uxtb	r3, r3
    fd68:	2b11      	cmp	r3, #17
    fd6a:	d1df      	bne.n	fd2c <am_hal_pwrctrl_low_power_init+0x18>
    fd6c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    fd70:	f360 5356 	bfi	r3, r0, #21, #2
    fd74:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    fd78:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fd7c:	220f      	movs	r2, #15
    fd7e:	f362 138b 	bfi	r3, r2, #6, #6
    fd82:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fd86:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fd8a:	f362 0305 	bfi	r3, r2, #0, #6
    fd8e:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fd92:	e7cc      	b.n	fd2e <am_hal_pwrctrl_low_power_init+0x1a>
    fd94:	1000c178 	.word	0x1000c178
    fd98:	4ffff000 	.word	0x4ffff000
    fd9c:	40021000 	.word	0x40021000
    fda0:	40020000 	.word	0x40020000
    fda4:	40020018 	.word	0x40020018

0000fda8 <am_hal_rtc_osc_select>:
    fda8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fdac:	2801      	cmp	r0, #1
    fdae:	68d3      	ldr	r3, [r2, #12]
    fdb0:	bf0c      	ite	eq
    fdb2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    fdb6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    fdba:	60d3      	str	r3, [r2, #12]
    fdbc:	4770      	bx	lr
    fdbe:	bf00      	nop

0000fdc0 <am_hal_rtc_osc_disable>:
    fdc0:	4a03      	ldr	r2, [pc, #12]	; (fdd0 <am_hal_rtc_osc_disable+0x10>)
    fdc2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fdc6:	f043 0310 	orr.w	r3, r3, #16
    fdca:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    fdce:	4770      	bx	lr
    fdd0:	40004200 	.word	0x40004200

0000fdd4 <am_hal_uart_initialize>:
    fdd4:	2801      	cmp	r0, #1
    fdd6:	d901      	bls.n	fddc <am_hal_uart_initialize+0x8>
    fdd8:	2005      	movs	r0, #5
    fdda:	4770      	bx	lr
    fddc:	b169      	cbz	r1, fdfa <am_hal_uart_initialize+0x26>
    fdde:	b5f0      	push	{r4, r5, r6, r7, lr}
    fde0:	2264      	movs	r2, #100	; 0x64
    fde2:	4e0e      	ldr	r6, [pc, #56]	; (fe1c <am_hal_uart_initialize+0x48>)
    fde4:	fb02 f200 	mul.w	r2, r2, r0
    fde8:	18b4      	adds	r4, r6, r2
    fdea:	4603      	mov	r3, r0
    fdec:	78e0      	ldrb	r0, [r4, #3]
    fdee:	f3c0 0700 	ubfx	r7, r0, #0, #1
    fdf2:	b2fd      	uxtb	r5, r7
    fdf4:	b11d      	cbz	r5, fdfe <am_hal_uart_initialize+0x2a>
    fdf6:	2007      	movs	r0, #7
    fdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdfa:	2006      	movs	r0, #6
    fdfc:	4770      	bx	lr
    fdfe:	f040 0001 	orr.w	r0, r0, #1
    fe02:	70e0      	strb	r0, [r4, #3]
    fe04:	58b0      	ldr	r0, [r6, r2]
    fe06:	f8df e018 	ldr.w	lr, [pc, #24]	; fe20 <am_hal_uart_initialize+0x4c>
    fe0a:	f36e 0017 	bfi	r0, lr, #0, #24
    fe0e:	50b0      	str	r0, [r6, r2]
    fe10:	6263      	str	r3, [r4, #36]	; 0x24
    fe12:	7127      	strb	r7, [r4, #4]
    fe14:	6625      	str	r5, [r4, #96]	; 0x60
    fe16:	4628      	mov	r0, r5
    fe18:	600c      	str	r4, [r1, #0]
    fe1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe1c:	1002c2a0 	.word	0x1002c2a0
    fe20:	00ea9e06 	.word	0x00ea9e06

0000fe24 <am_hal_uart_power_control>:
    fe24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe28:	6804      	ldr	r4, [r0, #0]
    fe2a:	4b36      	ldr	r3, [pc, #216]	; (ff04 <am_hal_uart_power_control+0xe0>)
    fe2c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    fe30:	429c      	cmp	r4, r3
    fe32:	b083      	sub	sp, #12
    fe34:	d003      	beq.n	fe3e <am_hal_uart_power_control+0x1a>
    fe36:	2002      	movs	r0, #2
    fe38:	b003      	add	sp, #12
    fe3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fe3e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    fe40:	4605      	mov	r5, r0
    fe42:	f107 0008 	add.w	r0, r7, #8
    fe46:	4691      	mov	r9, r2
    fe48:	460e      	mov	r6, r1
    fe4a:	fa5f f880 	uxtb.w	r8, r0
    fe4e:	b181      	cbz	r1, fe72 <am_hal_uart_power_control+0x4e>
    fe50:	2902      	cmp	r1, #2
    fe52:	d80c      	bhi.n	fe6e <am_hal_uart_power_control+0x4a>
    fe54:	b992      	cbnz	r2, fe7c <am_hal_uart_power_control+0x58>
    fe56:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fe5a:	371c      	adds	r7, #28
    fe5c:	033f      	lsls	r7, r7, #12
    fe5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe62:	647b      	str	r3, [r7, #68]	; 0x44
    fe64:	4640      	mov	r0, r8
    fe66:	f7ff ff29 	bl	fcbc <am_hal_pwrctrl_periph_disable>
    fe6a:	2000      	movs	r0, #0
    fe6c:	e7e4      	b.n	fe38 <am_hal_uart_power_control+0x14>
    fe6e:	2006      	movs	r0, #6
    fe70:	e7e2      	b.n	fe38 <am_hal_uart_power_control+0x14>
    fe72:	b322      	cbz	r2, febe <am_hal_uart_power_control+0x9a>
    fe74:	792b      	ldrb	r3, [r5, #4]
    fe76:	bb3b      	cbnz	r3, fec8 <am_hal_uart_power_control+0xa4>
    fe78:	2007      	movs	r0, #7
    fe7a:	e7dd      	b.n	fe38 <am_hal_uart_power_control+0x14>
    fe7c:	f7ff fe00 	bl	fa80 <am_hal_interrupt_master_disable>
    fe80:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fe84:	331c      	adds	r3, #28
    fe86:	031b      	lsls	r3, r3, #12
    fe88:	9001      	str	r0, [sp, #4]
    fe8a:	6a1a      	ldr	r2, [r3, #32]
    fe8c:	60aa      	str	r2, [r5, #8]
    fe8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fe90:	60ea      	str	r2, [r5, #12]
    fe92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fe94:	612a      	str	r2, [r5, #16]
    fe96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fe98:	616a      	str	r2, [r5, #20]
    fe9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fe9c:	61aa      	str	r2, [r5, #24]
    fe9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    fea0:	61ea      	str	r2, [r5, #28]
    fea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fea4:	622b      	str	r3, [r5, #32]
    fea6:	2301      	movs	r3, #1
    fea8:	712b      	strb	r3, [r5, #4]
    feaa:	9801      	ldr	r0, [sp, #4]
    feac:	f7ff fdec 	bl	fa88 <am_hal_interrupt_master_set>
    feb0:	682b      	ldr	r3, [r5, #0]
    feb2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    feb6:	42a3      	cmp	r3, r4
    feb8:	d1d4      	bne.n	fe64 <am_hal_uart_power_control+0x40>
    feba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    febc:	e7cb      	b.n	fe56 <am_hal_uart_power_control+0x32>
    febe:	4640      	mov	r0, r8
    fec0:	f7ff fed2 	bl	fc68 <am_hal_pwrctrl_periph_enable>
    fec4:	4648      	mov	r0, r9
    fec6:	e7b7      	b.n	fe38 <am_hal_uart_power_control+0x14>
    fec8:	4640      	mov	r0, r8
    feca:	f7ff fecd 	bl	fc68 <am_hal_pwrctrl_periph_enable>
    fece:	f7ff fdd7 	bl	fa80 <am_hal_interrupt_master_disable>
    fed2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fed6:	331c      	adds	r3, #28
    fed8:	031b      	lsls	r3, r3, #12
    feda:	68aa      	ldr	r2, [r5, #8]
    fedc:	9000      	str	r0, [sp, #0]
    fede:	621a      	str	r2, [r3, #32]
    fee0:	68ea      	ldr	r2, [r5, #12]
    fee2:	625a      	str	r2, [r3, #36]	; 0x24
    fee4:	692a      	ldr	r2, [r5, #16]
    fee6:	629a      	str	r2, [r3, #40]	; 0x28
    fee8:	696a      	ldr	r2, [r5, #20]
    feea:	62da      	str	r2, [r3, #44]	; 0x2c
    feec:	69aa      	ldr	r2, [r5, #24]
    feee:	631a      	str	r2, [r3, #48]	; 0x30
    fef0:	69ea      	ldr	r2, [r5, #28]
    fef2:	635a      	str	r2, [r3, #52]	; 0x34
    fef4:	6a2a      	ldr	r2, [r5, #32]
    fef6:	639a      	str	r2, [r3, #56]	; 0x38
    fef8:	9800      	ldr	r0, [sp, #0]
    fefa:	712e      	strb	r6, [r5, #4]
    fefc:	f7ff fdc4 	bl	fa88 <am_hal_interrupt_master_set>
    ff00:	4630      	mov	r0, r6
    ff02:	e799      	b.n	fe38 <am_hal_uart_power_control+0x14>
    ff04:	01ea9e06 	.word	0x01ea9e06

0000ff08 <am_hal_uart_configure>:
    ff08:	6803      	ldr	r3, [r0, #0]
    ff0a:	4a7a      	ldr	r2, [pc, #488]	; (100f4 <am_hal_uart_configure+0x1ec>)
    ff0c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ff10:	4293      	cmp	r3, r2
    ff12:	d001      	beq.n	ff18 <am_hal_uart_configure+0x10>
    ff14:	2002      	movs	r0, #2
    ff16:	4770      	bx	lr
    ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ff1e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ff22:	351c      	adds	r5, #28
    ff24:	032d      	lsls	r5, r5, #12
    ff26:	2700      	movs	r7, #0
    ff28:	b084      	sub	sp, #16
    ff2a:	632f      	str	r7, [r5, #48]	; 0x30
    ff2c:	460e      	mov	r6, r1
    ff2e:	4604      	mov	r4, r0
    ff30:	f7ff fda6 	bl	fa80 <am_hal_interrupt_master_disable>
    ff34:	9001      	str	r0, [sp, #4]
    ff36:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff38:	f043 0308 	orr.w	r3, r3, #8
    ff3c:	862b      	strh	r3, [r5, #48]	; 0x30
    ff3e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff40:	2201      	movs	r2, #1
    ff42:	f362 1306 	bfi	r3, r2, #4, #3
    ff46:	862b      	strh	r3, [r5, #48]	; 0x30
    ff48:	9801      	ldr	r0, [sp, #4]
    ff4a:	f7ff fd9d 	bl	fa88 <am_hal_interrupt_master_set>
    ff4e:	f7ff fd97 	bl	fa80 <am_hal_interrupt_master_disable>
    ff52:	9002      	str	r0, [sp, #8]
    ff54:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff56:	f367 0300 	bfi	r3, r7, #0, #1
    ff5a:	862b      	strh	r3, [r5, #48]	; 0x30
    ff5c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff5e:	f367 2349 	bfi	r3, r7, #9, #1
    ff62:	862b      	strh	r3, [r5, #48]	; 0x30
    ff64:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff66:	f367 2308 	bfi	r3, r7, #8, #1
    ff6a:	862b      	strh	r3, [r5, #48]	; 0x30
    ff6c:	9802      	ldr	r0, [sp, #8]
    ff6e:	f7ff fd8b 	bl	fa88 <am_hal_interrupt_master_set>
    ff72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    ff74:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ff78:	3b01      	subs	r3, #1
    ff7a:	2b03      	cmp	r3, #3
    ff7c:	d854      	bhi.n	10028 <am_hal_uart_configure+0x120>
    ff7e:	e8df f003 	tbb	[pc, r3]
    ff82:	020e      	.short	0x020e
    ff84:	1114      	.short	0x1114
    ff86:	495c      	ldr	r1, [pc, #368]	; (100f8 <am_hal_uart_configure+0x1f0>)
    ff88:	485c      	ldr	r0, [pc, #368]	; (100fc <am_hal_uart_configure+0x1f4>)
    ff8a:	6832      	ldr	r2, [r6, #0]
    ff8c:	0112      	lsls	r2, r2, #4
    ff8e:	fbb0 f3f2 	udiv	r3, r0, r2
    ff92:	b96b      	cbnz	r3, ffb0 <am_hal_uart_configure+0xa8>
    ff94:	485a      	ldr	r0, [pc, #360]	; (10100 <am_hal_uart_configure+0x1f8>)
    ff96:	6623      	str	r3, [r4, #96]	; 0x60
    ff98:	b004      	add	sp, #16
    ff9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff9e:	4959      	ldr	r1, [pc, #356]	; (10104 <am_hal_uart_configure+0x1fc>)
    ffa0:	4859      	ldr	r0, [pc, #356]	; (10108 <am_hal_uart_configure+0x200>)
    ffa2:	e7f2      	b.n	ff8a <am_hal_uart_configure+0x82>
    ffa4:	4959      	ldr	r1, [pc, #356]	; (1010c <am_hal_uart_configure+0x204>)
    ffa6:	485a      	ldr	r0, [pc, #360]	; (10110 <am_hal_uart_configure+0x208>)
    ffa8:	e7ef      	b.n	ff8a <am_hal_uart_configure+0x82>
    ffaa:	495a      	ldr	r1, [pc, #360]	; (10114 <am_hal_uart_configure+0x20c>)
    ffac:	485a      	ldr	r0, [pc, #360]	; (10118 <am_hal_uart_configure+0x210>)
    ffae:	e7ec      	b.n	ff8a <am_hal_uart_configure+0x82>
    ffb0:	fbb1 f2f2 	udiv	r2, r1, r2
    ffb4:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    ffb8:	626b      	str	r3, [r5, #36]	; 0x24
    ffba:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    ffbe:	626b      	str	r3, [r5, #36]	; 0x24
    ffc0:	fbb0 f0f1 	udiv	r0, r0, r1
    ffc4:	62aa      	str	r2, [r5, #40]	; 0x28
    ffc6:	6620      	str	r0, [r4, #96]	; 0x60
    ffc8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ffca:	f36f 338e 	bfc	r3, #14, #1
    ffce:	862b      	strh	r3, [r5, #48]	; 0x30
    ffd0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ffd2:	f36f 33cf 	bfc	r3, #15, #1
    ffd6:	862b      	strh	r3, [r5, #48]	; 0x30
    ffd8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    ffda:	6933      	ldr	r3, [r6, #16]
    ffdc:	4313      	orrs	r3, r2
    ffde:	632b      	str	r3, [r5, #48]	; 0x30
    ffe0:	6973      	ldr	r3, [r6, #20]
    ffe2:	636b      	str	r3, [r5, #52]	; 0x34
    ffe4:	6871      	ldr	r1, [r6, #4]
    ffe6:	68b3      	ldr	r3, [r6, #8]
    ffe8:	68f2      	ldr	r2, [r6, #12]
    ffea:	430b      	orrs	r3, r1
    ffec:	f043 0310 	orr.w	r3, r3, #16
    fff0:	4313      	orrs	r3, r2
    fff2:	62eb      	str	r3, [r5, #44]	; 0x2c
    fff4:	f7ff fd44 	bl	fa80 <am_hal_interrupt_master_disable>
    fff8:	9003      	str	r0, [sp, #12]
    fffa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fffc:	f043 0301 	orr.w	r3, r3, #1
   10000:	862b      	strh	r3, [r5, #48]	; 0x30
   10002:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10008:	862b      	strh	r3, [r5, #48]	; 0x30
   1000a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1000c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10010:	862b      	strh	r3, [r5, #48]	; 0x30
   10012:	9803      	ldr	r0, [sp, #12]
   10014:	f7ff fd38 	bl	fa88 <am_hal_interrupt_master_set>
   10018:	6825      	ldr	r5, [r4, #0]
   1001a:	4b36      	ldr	r3, [pc, #216]	; (100f4 <am_hal_uart_configure+0x1ec>)
   1001c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   10020:	429d      	cmp	r5, r3
   10022:	d005      	beq.n	10030 <am_hal_uart_configure+0x128>
   10024:	2000      	movs	r0, #0
   10026:	e7b7      	b.n	ff98 <am_hal_uart_configure+0x90>
   10028:	2300      	movs	r3, #0
   1002a:	6623      	str	r3, [r4, #96]	; 0x60
   1002c:	483b      	ldr	r0, [pc, #236]	; (1011c <am_hal_uart_configure+0x214>)
   1002e:	e7b3      	b.n	ff98 <am_hal_uart_configure+0x90>
   10030:	69b1      	ldr	r1, [r6, #24]
   10032:	6a37      	ldr	r7, [r6, #32]
   10034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   10038:	b109      	cbz	r1, 1003e <am_hal_uart_configure+0x136>
   1003a:	69f3      	ldr	r3, [r6, #28]
   1003c:	bb3b      	cbnz	r3, 1008e <am_hal_uart_configure+0x186>
   1003e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10040:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10044:	f103 021c 	add.w	r2, r3, #28
   10048:	0312      	lsls	r2, r2, #12
   1004a:	2100      	movs	r1, #0
   1004c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   10050:	6b91      	ldr	r1, [r2, #56]	; 0x38
   10052:	f021 0120 	bic.w	r1, r1, #32
   10056:	6391      	str	r1, [r2, #56]	; 0x38
   10058:	b1b7      	cbz	r7, 10088 <am_hal_uart_configure+0x180>
   1005a:	f1b8 0f00 	cmp.w	r8, #0
   1005e:	d12e      	bne.n	100be <am_hal_uart_configure+0x1b6>
   10060:	6823      	ldr	r3, [r4, #0]
   10062:	4a24      	ldr	r2, [pc, #144]	; (100f4 <am_hal_uart_configure+0x1ec>)
   10064:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10068:	2100      	movs	r1, #0
   1006a:	4293      	cmp	r3, r2
   1006c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
   10070:	d1d8      	bne.n	10024 <am_hal_uart_configure+0x11c>
   10072:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10074:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10078:	331c      	adds	r3, #28
   1007a:	031b      	lsls	r3, r3, #12
   1007c:	2000      	movs	r0, #0
   1007e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10080:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   10084:	639a      	str	r2, [r3, #56]	; 0x38
   10086:	e787      	b.n	ff98 <am_hal_uart_configure+0x90>
   10088:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
   1008c:	e7f4      	b.n	10078 <am_hal_uart_configure+0x170>
   1008e:	2201      	movs	r2, #1
   10090:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   10094:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   10098:	f000 fa7c 	bl	10594 <am_hal_queue_init>
   1009c:	6823      	ldr	r3, [r4, #0]
   1009e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   100a2:	42ab      	cmp	r3, r5
   100a4:	d1be      	bne.n	10024 <am_hal_uart_configure+0x11c>
   100a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   100a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100ac:	331c      	adds	r3, #28
   100ae:	031b      	lsls	r3, r3, #12
   100b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   100b2:	f042 0220 	orr.w	r2, r2, #32
   100b6:	639a      	str	r2, [r3, #56]	; 0x38
   100b8:	2f00      	cmp	r7, #0
   100ba:	d1ce      	bne.n	1005a <am_hal_uart_configure+0x152>
   100bc:	e7d0      	b.n	10060 <am_hal_uart_configure+0x158>
   100be:	2201      	movs	r2, #1
   100c0:	4643      	mov	r3, r8
   100c2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   100c6:	4639      	mov	r1, r7
   100c8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   100cc:	f000 fa62 	bl	10594 <am_hal_queue_init>
   100d0:	6823      	ldr	r3, [r4, #0]
   100d2:	4a08      	ldr	r2, [pc, #32]	; (100f4 <am_hal_uart_configure+0x1ec>)
   100d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   100d8:	4293      	cmp	r3, r2
   100da:	d1a3      	bne.n	10024 <am_hal_uart_configure+0x11c>
   100dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   100de:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100e2:	331c      	adds	r3, #28
   100e4:	031b      	lsls	r3, r3, #12
   100e6:	2000      	movs	r0, #0
   100e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   100ea:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   100ee:	639a      	str	r2, [r3, #56]	; 0x38
   100f0:	e752      	b.n	ff98 <am_hal_uart_configure+0x90>
   100f2:	bf00      	nop
   100f4:	01ea9e06 	.word	0x01ea9e06
   100f8:	2dc6c000 	.word	0x2dc6c000
   100fc:	00b71b00 	.word	0x00b71b00
   10100:	08000003 	.word	0x08000003
   10104:	5b8d8000 	.word	0x5b8d8000
   10108:	016e3600 	.word	0x016e3600
   1010c:	0b71b000 	.word	0x0b71b000
   10110:	002dc6c0 	.word	0x002dc6c0
   10114:	16e36000 	.word	0x16e36000
   10118:	005b8d80 	.word	0x005b8d80
   1011c:	08000002 	.word	0x08000002

00010120 <am_hal_uart_transfer>:
   10120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10124:	680f      	ldr	r7, [r1, #0]
   10126:	b091      	sub	sp, #68	; 0x44
   10128:	4605      	mov	r5, r0
   1012a:	b13f      	cbz	r7, 1013c <am_hal_uart_transfer+0x1c>
   1012c:	2f01      	cmp	r7, #1
   1012e:	bf18      	it	ne
   10130:	2707      	movne	r7, #7
   10132:	d024      	beq.n	1017e <am_hal_uart_transfer+0x5e>
   10134:	4638      	mov	r0, r7
   10136:	b011      	add	sp, #68	; 0x44
   10138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1013c:	f8d1 900c 	ldr.w	r9, [r1, #12]
   10140:	690b      	ldr	r3, [r1, #16]
   10142:	f8d1 a004 	ldr.w	sl, [r1, #4]
   10146:	688e      	ldr	r6, [r1, #8]
   10148:	9300      	str	r3, [sp, #0]
   1014a:	f1b9 0f00 	cmp.w	r9, #0
   1014e:	d031      	beq.n	101b4 <am_hal_uart_transfer+0x94>
   10150:	2e00      	cmp	r6, #0
   10152:	f000 819c 	beq.w	1048e <am_hal_uart_transfer+0x36e>
   10156:	2800      	cmp	r0, #0
   10158:	f000 8097 	beq.w	1028a <am_hal_uart_transfer+0x16a>
   1015c:	6803      	ldr	r3, [r0, #0]
   1015e:	4aa9      	ldr	r2, [pc, #676]	; (10404 <am_hal_uart_transfer+0x2e4>)
   10160:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10164:	4293      	cmp	r3, r2
   10166:	f000 8092 	beq.w	1028e <am_hal_uart_transfer+0x16e>
   1016a:	46b8      	mov	r8, r7
   1016c:	9b00      	ldr	r3, [sp, #0]
   1016e:	b10b      	cbz	r3, 10174 <am_hal_uart_transfer+0x54>
   10170:	f8c3 8000 	str.w	r8, [r3]
   10174:	2702      	movs	r7, #2
   10176:	4638      	mov	r0, r7
   10178:	b011      	add	sp, #68	; 0x44
   1017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1017e:	1d0b      	adds	r3, r1, #4
   10180:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
   10184:	f1b9 0f00 	cmp.w	r9, #0
   10188:	d043      	beq.n	10212 <am_hal_uart_transfer+0xf2>
   1018a:	2f00      	cmp	r7, #0
   1018c:	f000 8185 	beq.w	1049a <am_hal_uart_transfer+0x37a>
   10190:	2800      	cmp	r0, #0
   10192:	f000 80eb 	beq.w	1036c <am_hal_uart_transfer+0x24c>
   10196:	6802      	ldr	r2, [r0, #0]
   10198:	499a      	ldr	r1, [pc, #616]	; (10404 <am_hal_uart_transfer+0x2e4>)
   1019a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1019e:	428a      	cmp	r2, r1
   101a0:	f000 80e7 	beq.w	10372 <am_hal_uart_transfer+0x252>
   101a4:	2600      	movs	r6, #0
   101a6:	2702      	movs	r7, #2
   101a8:	f1bb 0f00 	cmp.w	fp, #0
   101ac:	d0c2      	beq.n	10134 <am_hal_uart_transfer+0x14>
   101ae:	f8cb 6000 	str.w	r6, [fp]
   101b2:	e7bf      	b.n	10134 <am_hal_uart_transfer+0x14>
   101b4:	2800      	cmp	r0, #0
   101b6:	d0dd      	beq.n	10174 <am_hal_uart_transfer+0x54>
   101b8:	6803      	ldr	r3, [r0, #0]
   101ba:	4a92      	ldr	r2, [pc, #584]	; (10404 <am_hal_uart_transfer+0x2e4>)
   101bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   101c0:	4293      	cmp	r3, r2
   101c2:	d1d7      	bne.n	10174 <am_hal_uart_transfer+0x54>
   101c4:	9b00      	ldr	r3, [sp, #0]
   101c6:	b10b      	cbz	r3, 101cc <am_hal_uart_transfer+0xac>
   101c8:	f8c3 9000 	str.w	r9, [r3]
   101cc:	b1fe      	cbz	r6, 1020e <am_hal_uart_transfer+0xee>
   101ce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   101d2:	2b00      	cmp	r3, #0
   101d4:	f040 8165 	bne.w	104a2 <am_hal_uart_transfer+0x382>
   101d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   101da:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   101de:	311c      	adds	r1, #28
   101e0:	0309      	lsls	r1, r1, #12
   101e2:	698a      	ldr	r2, [r1, #24]
   101e4:	f3c2 1240 	ubfx	r2, r2, #5, #1
   101e8:	2a00      	cmp	r2, #0
   101ea:	f040 818d 	bne.w	10508 <am_hal_uart_transfer+0x3e8>
   101ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   101f2:	e003      	b.n	101fc <am_hal_uart_transfer+0xdc>
   101f4:	6988      	ldr	r0, [r1, #24]
   101f6:	0680      	lsls	r0, r0, #26
   101f8:	f100 8151 	bmi.w	1049e <am_hal_uart_transfer+0x37e>
   101fc:	3201      	adds	r2, #1
   101fe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   10202:	6008      	str	r0, [r1, #0]
   10204:	4296      	cmp	r6, r2
   10206:	d1f5      	bne.n	101f4 <am_hal_uart_transfer+0xd4>
   10208:	9b00      	ldr	r3, [sp, #0]
   1020a:	b103      	cbz	r3, 1020e <am_hal_uart_transfer+0xee>
   1020c:	601e      	str	r6, [r3, #0]
   1020e:	2700      	movs	r7, #0
   10210:	e790      	b.n	10134 <am_hal_uart_transfer+0x14>
   10212:	2800      	cmp	r0, #0
   10214:	d0ae      	beq.n	10174 <am_hal_uart_transfer+0x54>
   10216:	6802      	ldr	r2, [r0, #0]
   10218:	497a      	ldr	r1, [pc, #488]	; (10404 <am_hal_uart_transfer+0x2e4>)
   1021a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1021e:	428a      	cmp	r2, r1
   10220:	d1a8      	bne.n	10174 <am_hal_uart_transfer+0x54>
   10222:	f1bb 0f00 	cmp.w	fp, #0
   10226:	d001      	beq.n	1022c <am_hal_uart_transfer+0x10c>
   10228:	f8cb 9000 	str.w	r9, [fp]
   1022c:	2f00      	cmp	r7, #0
   1022e:	d0ee      	beq.n	1020e <am_hal_uart_transfer+0xee>
   10230:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   10234:	2c00      	cmp	r4, #0
   10236:	f040 816c 	bne.w	10512 <am_hal_uart_transfer+0x3f2>
   1023a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1023c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10240:	321c      	adds	r2, #28
   10242:	0312      	lsls	r2, r2, #12
   10244:	6990      	ldr	r0, [r2, #24]
   10246:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1024a:	2800      	cmp	r0, #0
   1024c:	f040 819d 	bne.w	1058a <am_hal_uart_transfer+0x46a>
   10250:	6811      	ldr	r1, [r2, #0]
   10252:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   10256:	bf08      	it	eq
   10258:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   1025c:	d008      	beq.n	10270 <am_hal_uart_transfer+0x150>
   1025e:	e190      	b.n	10582 <am_hal_uart_transfer+0x462>
   10260:	6991      	ldr	r1, [r2, #24]
   10262:	06c8      	lsls	r0, r1, #27
   10264:	d409      	bmi.n	1027a <am_hal_uart_transfer+0x15a>
   10266:	6811      	ldr	r1, [r2, #0]
   10268:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1026c:	f040 814e 	bne.w	1050c <am_hal_uart_transfer+0x3ec>
   10270:	3401      	adds	r4, #1
   10272:	42a7      	cmp	r7, r4
   10274:	f803 1f01 	strb.w	r1, [r3, #1]!
   10278:	d1f2      	bne.n	10260 <am_hal_uart_transfer+0x140>
   1027a:	2700      	movs	r7, #0
   1027c:	f1bb 0f00 	cmp.w	fp, #0
   10280:	f43f af58 	beq.w	10134 <am_hal_uart_transfer+0x14>
   10284:	f8cb 4000 	str.w	r4, [fp]
   10288:	e754      	b.n	10134 <am_hal_uart_transfer+0x14>
   1028a:	4680      	mov	r8, r0
   1028c:	e76e      	b.n	1016c <am_hal_uart_transfer+0x4c>
   1028e:	9301      	str	r3, [sp, #4]
   10290:	4651      	mov	r1, sl
   10292:	46bb      	mov	fp, r7
   10294:	46b8      	mov	r8, r7
   10296:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1029a:	b9f2      	cbnz	r2, 102da <am_hal_uart_transfer+0x1ba>
   1029c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1029e:	b19e      	cbz	r6, 102c8 <am_hal_uart_transfer+0x1a8>
   102a0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   102a4:	321c      	adds	r2, #28
   102a6:	0312      	lsls	r2, r2, #12
   102a8:	3901      	subs	r1, #1
   102aa:	6994      	ldr	r4, [r2, #24]
   102ac:	f3c4 1440 	ubfx	r4, r4, #5, #1
   102b0:	b11c      	cbz	r4, 102ba <am_hal_uart_transfer+0x19a>
   102b2:	e047      	b.n	10344 <am_hal_uart_transfer+0x224>
   102b4:	6993      	ldr	r3, [r2, #24]
   102b6:	069b      	lsls	r3, r3, #26
   102b8:	d441      	bmi.n	1033e <am_hal_uart_transfer+0x21e>
   102ba:	3401      	adds	r4, #1
   102bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   102c0:	6013      	str	r3, [r2, #0]
   102c2:	42b4      	cmp	r4, r6
   102c4:	d1f6      	bne.n	102b4 <am_hal_uart_transfer+0x194>
   102c6:	44a0      	add	r8, r4
   102c8:	9b00      	ldr	r3, [sp, #0]
   102ca:	2b00      	cmp	r3, #0
   102cc:	d09f      	beq.n	1020e <am_hal_uart_transfer+0xee>
   102ce:	4638      	mov	r0, r7
   102d0:	f8c3 8000 	str.w	r8, [r3]
   102d4:	b011      	add	sp, #68	; 0x44
   102d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102da:	6baa      	ldr	r2, [r5, #56]	; 0x38
   102dc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   102de:	1b14      	subs	r4, r2, r4
   102e0:	42b4      	cmp	r4, r6
   102e2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   102e6:	bf28      	it	cs
   102e8:	4634      	movcs	r4, r6
   102ea:	4622      	mov	r2, r4
   102ec:	4618      	mov	r0, r3
   102ee:	9302      	str	r3, [sp, #8]
   102f0:	f000 f95c 	bl	105ac <am_hal_queue_item_add>
   102f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   102f6:	9303      	str	r3, [sp, #12]
   102f8:	f7ff fbc2 	bl	fa80 <am_hal_interrupt_master_disable>
   102fc:	9b03      	ldr	r3, [sp, #12]
   102fe:	9008      	str	r0, [sp, #32]
   10300:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10304:	331c      	adds	r3, #28
   10306:	031b      	lsls	r3, r3, #12
   10308:	9303      	str	r3, [sp, #12]
   1030a:	e00d      	b.n	10328 <am_hal_uart_transfer+0x208>
   1030c:	f000 f986 	bl	1061c <am_hal_queue_item_get>
   10310:	b190      	cbz	r0, 10338 <am_hal_uart_transfer+0x218>
   10312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10314:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10318:	331c      	adds	r3, #28
   1031a:	031b      	lsls	r3, r3, #12
   1031c:	699a      	ldr	r2, [r3, #24]
   1031e:	0692      	lsls	r2, r2, #26
   10320:	bf5c      	itt	pl
   10322:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   10326:	601a      	strpl	r2, [r3, #0]
   10328:	9b03      	ldr	r3, [sp, #12]
   1032a:	9802      	ldr	r0, [sp, #8]
   1032c:	699b      	ldr	r3, [r3, #24]
   1032e:	069b      	lsls	r3, r3, #26
   10330:	f04f 0201 	mov.w	r2, #1
   10334:	a907      	add	r1, sp, #28
   10336:	d5e9      	bpl.n	1030c <am_hal_uart_transfer+0x1ec>
   10338:	9808      	ldr	r0, [sp, #32]
   1033a:	f7ff fba5 	bl	fa88 <am_hal_interrupt_master_set>
   1033e:	1b36      	subs	r6, r6, r4
   10340:	44a0      	add	r8, r4
   10342:	d0c1      	beq.n	102c8 <am_hal_uart_transfer+0x1a8>
   10344:	2001      	movs	r0, #1
   10346:	f7ff fb67 	bl	fa18 <am_hal_flash_delay>
   1034a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1034e:	d001      	beq.n	10354 <am_hal_uart_transfer+0x234>
   10350:	f10b 0b01 	add.w	fp, fp, #1
   10354:	45d9      	cmp	r9, fp
   10356:	d9b7      	bls.n	102c8 <am_hal_uart_transfer+0x1a8>
   10358:	682a      	ldr	r2, [r5, #0]
   1035a:	9b01      	ldr	r3, [sp, #4]
   1035c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10360:	429a      	cmp	r2, r3
   10362:	eb0a 0108 	add.w	r1, sl, r8
   10366:	f47f af01 	bne.w	1016c <am_hal_uart_transfer+0x4c>
   1036a:	e794      	b.n	10296 <am_hal_uart_transfer+0x176>
   1036c:	4606      	mov	r6, r0
   1036e:	2702      	movs	r7, #2
   10370:	e71a      	b.n	101a8 <am_hal_uart_transfer+0x88>
   10372:	9200      	str	r2, [sp, #0]
   10374:	f100 0248 	add.w	r2, r0, #72	; 0x48
   10378:	f04f 0a00 	mov.w	sl, #0
   1037c:	9202      	str	r2, [sp, #8]
   1037e:	465a      	mov	r2, fp
   10380:	4698      	mov	r8, r3
   10382:	469b      	mov	fp, r3
   10384:	4656      	mov	r6, sl
   10386:	4613      	mov	r3, r2
   10388:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   1038c:	2a00      	cmp	r2, #0
   1038e:	d152      	bne.n	10436 <am_hal_uart_transfer+0x316>
   10390:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10392:	b3a7      	cbz	r7, 103fe <am_hal_uart_transfer+0x2de>
   10394:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10398:	311c      	adds	r1, #28
   1039a:	0309      	lsls	r1, r1, #12
   1039c:	698a      	ldr	r2, [r1, #24]
   1039e:	06d0      	lsls	r0, r2, #27
   103a0:	d432      	bmi.n	10408 <am_hal_uart_transfer+0x2e8>
   103a2:	680a      	ldr	r2, [r1, #0]
   103a4:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   103a8:	f040 80aa 	bne.w	10500 <am_hal_uart_transfer+0x3e0>
   103ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   103b0:	e006      	b.n	103c0 <am_hal_uart_transfer+0x2a0>
   103b2:	698a      	ldr	r2, [r1, #24]
   103b4:	06d2      	lsls	r2, r2, #27
   103b6:	d41f      	bmi.n	103f8 <am_hal_uart_transfer+0x2d8>
   103b8:	680a      	ldr	r2, [r1, #0]
   103ba:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   103be:	d161      	bne.n	10484 <am_hal_uart_transfer+0x364>
   103c0:	3401      	adds	r4, #1
   103c2:	42bc      	cmp	r4, r7
   103c4:	f808 2f01 	strb.w	r2, [r8, #1]!
   103c8:	d1f3      	bne.n	103b2 <am_hal_uart_transfer+0x292>
   103ca:	469b      	mov	fp, r3
   103cc:	4426      	add	r6, r4
   103ce:	f1bb 0f00 	cmp.w	fp, #0
   103d2:	f43f af1c 	beq.w	1020e <am_hal_uart_transfer+0xee>
   103d6:	f8cb 6000 	str.w	r6, [fp]
   103da:	2700      	movs	r7, #0
   103dc:	e6aa      	b.n	10134 <am_hal_uart_transfer+0x14>
   103de:	9807      	ldr	r0, [sp, #28]
   103e0:	f7ff fb52 	bl	fa88 <am_hal_interrupt_master_set>
   103e4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   103e6:	9802      	ldr	r0, [sp, #8]
   103e8:	42bc      	cmp	r4, r7
   103ea:	bf28      	it	cs
   103ec:	463c      	movcs	r4, r7
   103ee:	4641      	mov	r1, r8
   103f0:	4622      	mov	r2, r4
   103f2:	f000 f913 	bl	1061c <am_hal_queue_item_get>
   103f6:	9b01      	ldr	r3, [sp, #4]
   103f8:	1b3f      	subs	r7, r7, r4
   103fa:	4426      	add	r6, r4
   103fc:	d104      	bne.n	10408 <am_hal_uart_transfer+0x2e8>
   103fe:	469b      	mov	fp, r3
   10400:	e7e5      	b.n	103ce <am_hal_uart_transfer+0x2ae>
   10402:	bf00      	nop
   10404:	01ea9e06 	.word	0x01ea9e06
   10408:	2001      	movs	r0, #1
   1040a:	9301      	str	r3, [sp, #4]
   1040c:	f7ff fb04 	bl	fa18 <am_hal_flash_delay>
   10410:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10414:	9b01      	ldr	r3, [sp, #4]
   10416:	d001      	beq.n	1041c <am_hal_uart_transfer+0x2fc>
   10418:	f10a 0a01 	add.w	sl, sl, #1
   1041c:	45d1      	cmp	r9, sl
   1041e:	d9ee      	bls.n	103fe <am_hal_uart_transfer+0x2de>
   10420:	682a      	ldr	r2, [r5, #0]
   10422:	9900      	ldr	r1, [sp, #0]
   10424:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10428:	428a      	cmp	r2, r1
   1042a:	eb0b 0806 	add.w	r8, fp, r6
   1042e:	d0ab      	beq.n	10388 <am_hal_uart_transfer+0x268>
   10430:	469b      	mov	fp, r3
   10432:	2702      	movs	r7, #2
   10434:	e6b8      	b.n	101a8 <am_hal_uart_transfer+0x88>
   10436:	9301      	str	r3, [sp, #4]
   10438:	f7ff fb22 	bl	fa80 <am_hal_interrupt_master_disable>
   1043c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1043e:	9007      	str	r0, [sp, #28]
   10440:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   10444:	301c      	adds	r0, #28
   10446:	9b01      	ldr	r3, [sp, #4]
   10448:	0300      	lsls	r0, r0, #12
   1044a:	ac08      	add	r4, sp, #32
   1044c:	2200      	movs	r2, #0
   1044e:	6981      	ldr	r1, [r0, #24]
   10450:	06c9      	lsls	r1, r1, #27
   10452:	d409      	bmi.n	10468 <am_hal_uart_transfer+0x348>
   10454:	6801      	ldr	r1, [r0, #0]
   10456:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1045a:	f102 0201 	add.w	r2, r2, #1
   1045e:	d118      	bne.n	10492 <am_hal_uart_transfer+0x372>
   10460:	2a20      	cmp	r2, #32
   10462:	f804 1b01 	strb.w	r1, [r4], #1
   10466:	d1f2      	bne.n	1044e <am_hal_uart_transfer+0x32e>
   10468:	a908      	add	r1, sp, #32
   1046a:	9802      	ldr	r0, [sp, #8]
   1046c:	9301      	str	r3, [sp, #4]
   1046e:	f000 f89d 	bl	105ac <am_hal_queue_item_add>
   10472:	9b01      	ldr	r3, [sp, #4]
   10474:	2800      	cmp	r0, #0
   10476:	d1b2      	bne.n	103de <am_hal_uart_transfer+0x2be>
   10478:	4f45      	ldr	r7, [pc, #276]	; (10590 <am_hal_uart_transfer+0x470>)
   1047a:	469b      	mov	fp, r3
   1047c:	9807      	ldr	r0, [sp, #28]
   1047e:	f7ff fb03 	bl	fa88 <am_hal_interrupt_master_set>
   10482:	e691      	b.n	101a8 <am_hal_uart_transfer+0x88>
   10484:	469b      	mov	fp, r3
   10486:	4426      	add	r6, r4
   10488:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1048c:	e68c      	b.n	101a8 <am_hal_uart_transfer+0x88>
   1048e:	46b8      	mov	r8, r7
   10490:	e71a      	b.n	102c8 <am_hal_uart_transfer+0x1a8>
   10492:	469b      	mov	fp, r3
   10494:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10498:	e7f0      	b.n	1047c <am_hal_uart_transfer+0x35c>
   1049a:	463e      	mov	r6, r7
   1049c:	e797      	b.n	103ce <am_hal_uart_transfer+0x2ae>
   1049e:	4616      	mov	r6, r2
   104a0:	e6b2      	b.n	10208 <am_hal_uart_transfer+0xe8>
   104a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   104a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   104a6:	1a9b      	subs	r3, r3, r2
   104a8:	429e      	cmp	r6, r3
   104aa:	bf28      	it	cs
   104ac:	461e      	movcs	r6, r3
   104ae:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   104b2:	4651      	mov	r1, sl
   104b4:	4632      	mov	r2, r6
   104b6:	4620      	mov	r0, r4
   104b8:	f000 f878 	bl	105ac <am_hal_queue_item_add>
   104bc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   104be:	f7ff fadf 	bl	fa80 <am_hal_interrupt_master_disable>
   104c2:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   104c6:	371c      	adds	r7, #28
   104c8:	033f      	lsls	r7, r7, #12
   104ca:	9005      	str	r0, [sp, #20]
   104cc:	e00d      	b.n	104ea <am_hal_uart_transfer+0x3ca>
   104ce:	f000 f8a5 	bl	1061c <am_hal_queue_item_get>
   104d2:	b188      	cbz	r0, 104f8 <am_hal_uart_transfer+0x3d8>
   104d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   104d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   104da:	331c      	adds	r3, #28
   104dc:	031b      	lsls	r3, r3, #12
   104de:	699a      	ldr	r2, [r3, #24]
   104e0:	0692      	lsls	r2, r2, #26
   104e2:	bf5c      	itt	pl
   104e4:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   104e8:	601a      	strpl	r2, [r3, #0]
   104ea:	69bb      	ldr	r3, [r7, #24]
   104ec:	069b      	lsls	r3, r3, #26
   104ee:	f04f 0201 	mov.w	r2, #1
   104f2:	a908      	add	r1, sp, #32
   104f4:	4620      	mov	r0, r4
   104f6:	d5ea      	bpl.n	104ce <am_hal_uart_transfer+0x3ae>
   104f8:	9805      	ldr	r0, [sp, #20]
   104fa:	f7ff fac5 	bl	fa88 <am_hal_interrupt_master_set>
   104fe:	e683      	b.n	10208 <am_hal_uart_transfer+0xe8>
   10500:	469b      	mov	fp, r3
   10502:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10506:	e64f      	b.n	101a8 <am_hal_uart_transfer+0x88>
   10508:	461e      	mov	r6, r3
   1050a:	e67d      	b.n	10208 <am_hal_uart_transfer+0xe8>
   1050c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10510:	e6b4      	b.n	1027c <am_hal_uart_transfer+0x15c>
   10512:	9300      	str	r3, [sp, #0]
   10514:	f7ff fab4 	bl	fa80 <am_hal_interrupt_master_disable>
   10518:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1051a:	9006      	str	r0, [sp, #24]
   1051c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10520:	321c      	adds	r2, #28
   10522:	0311      	lsls	r1, r2, #12
   10524:	a808      	add	r0, sp, #32
   10526:	2200      	movs	r2, #0
   10528:	9b00      	ldr	r3, [sp, #0]
   1052a:	e009      	b.n	10540 <am_hal_uart_transfer+0x420>
   1052c:	680c      	ldr	r4, [r1, #0]
   1052e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   10532:	f102 0201 	add.w	r2, r2, #1
   10536:	d121      	bne.n	1057c <am_hal_uart_transfer+0x45c>
   10538:	2a20      	cmp	r2, #32
   1053a:	f800 4b01 	strb.w	r4, [r0], #1
   1053e:	d002      	beq.n	10546 <am_hal_uart_transfer+0x426>
   10540:	698c      	ldr	r4, [r1, #24]
   10542:	06e4      	lsls	r4, r4, #27
   10544:	d5f2      	bpl.n	1052c <am_hal_uart_transfer+0x40c>
   10546:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1054a:	a908      	add	r1, sp, #32
   1054c:	4630      	mov	r0, r6
   1054e:	9300      	str	r3, [sp, #0]
   10550:	f000 f82c 	bl	105ac <am_hal_queue_item_add>
   10554:	b920      	cbnz	r0, 10560 <am_hal_uart_transfer+0x440>
   10556:	4f0e      	ldr	r7, [pc, #56]	; (10590 <am_hal_uart_transfer+0x470>)
   10558:	9806      	ldr	r0, [sp, #24]
   1055a:	f7ff fa95 	bl	fa88 <am_hal_interrupt_master_set>
   1055e:	e5e9      	b.n	10134 <am_hal_uart_transfer+0x14>
   10560:	9806      	ldr	r0, [sp, #24]
   10562:	f7ff fa91 	bl	fa88 <am_hal_interrupt_master_set>
   10566:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   10568:	9b00      	ldr	r3, [sp, #0]
   1056a:	42bc      	cmp	r4, r7
   1056c:	bf28      	it	cs
   1056e:	463c      	movcs	r4, r7
   10570:	4619      	mov	r1, r3
   10572:	4630      	mov	r0, r6
   10574:	4622      	mov	r2, r4
   10576:	f000 f851 	bl	1061c <am_hal_queue_item_get>
   1057a:	e67e      	b.n	1027a <am_hal_uart_transfer+0x15a>
   1057c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10580:	e7ea      	b.n	10558 <am_hal_uart_transfer+0x438>
   10582:	4604      	mov	r4, r0
   10584:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10588:	e678      	b.n	1027c <am_hal_uart_transfer+0x15c>
   1058a:	4627      	mov	r7, r4
   1058c:	e676      	b.n	1027c <am_hal_uart_transfer+0x15c>
   1058e:	bf00      	nop
   10590:	08000001 	.word	0x08000001

00010594 <am_hal_queue_init>:
   10594:	b410      	push	{r4}
   10596:	2400      	movs	r4, #0
   10598:	6004      	str	r4, [r0, #0]
   1059a:	6044      	str	r4, [r0, #4]
   1059c:	6084      	str	r4, [r0, #8]
   1059e:	60c3      	str	r3, [r0, #12]
   105a0:	6102      	str	r2, [r0, #16]
   105a2:	6141      	str	r1, [r0, #20]
   105a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   105a8:	4770      	bx	lr
   105aa:	bf00      	nop

000105ac <am_hal_queue_item_add>:
   105ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ae:	4604      	mov	r4, r0
   105b0:	6906      	ldr	r6, [r0, #16]
   105b2:	b083      	sub	sp, #12
   105b4:	fb06 f602 	mul.w	r6, r6, r2
   105b8:	460d      	mov	r5, r1
   105ba:	f7ff fa61 	bl	fa80 <am_hal_interrupt_master_disable>
   105be:	68e7      	ldr	r7, [r4, #12]
   105c0:	68a2      	ldr	r2, [r4, #8]
   105c2:	9001      	str	r0, [sp, #4]
   105c4:	1abb      	subs	r3, r7, r2
   105c6:	429e      	cmp	r6, r3
   105c8:	d826      	bhi.n	10618 <am_hal_queue_item_add+0x6c>
   105ca:	b196      	cbz	r6, 105f2 <am_hal_queue_item_add+0x46>
   105cc:	6823      	ldr	r3, [r4, #0]
   105ce:	4629      	mov	r1, r5
   105d0:	b1c5      	cbz	r5, 10604 <am_hal_queue_item_add+0x58>
   105d2:	19af      	adds	r7, r5, r6
   105d4:	6962      	ldr	r2, [r4, #20]
   105d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   105da:	54d0      	strb	r0, [r2, r3]
   105dc:	6823      	ldr	r3, [r4, #0]
   105de:	68e5      	ldr	r5, [r4, #12]
   105e0:	3301      	adds	r3, #1
   105e2:	42b9      	cmp	r1, r7
   105e4:	fbb3 f0f5 	udiv	r0, r3, r5
   105e8:	fb05 3310 	mls	r3, r5, r0, r3
   105ec:	6023      	str	r3, [r4, #0]
   105ee:	d1f1      	bne.n	105d4 <am_hal_queue_item_add+0x28>
   105f0:	68a2      	ldr	r2, [r4, #8]
   105f2:	4432      	add	r2, r6
   105f4:	60a2      	str	r2, [r4, #8]
   105f6:	2401      	movs	r4, #1
   105f8:	9801      	ldr	r0, [sp, #4]
   105fa:	f7ff fa45 	bl	fa88 <am_hal_interrupt_master_set>
   105fe:	4620      	mov	r0, r4
   10600:	b003      	add	sp, #12
   10602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10604:	3101      	adds	r1, #1
   10606:	3301      	adds	r3, #1
   10608:	428e      	cmp	r6, r1
   1060a:	fbb3 f0f7 	udiv	r0, r3, r7
   1060e:	fb07 3310 	mls	r3, r7, r0, r3
   10612:	d1f7      	bne.n	10604 <am_hal_queue_item_add+0x58>
   10614:	6023      	str	r3, [r4, #0]
   10616:	e7ec      	b.n	105f2 <am_hal_queue_item_add+0x46>
   10618:	2400      	movs	r4, #0
   1061a:	e7ed      	b.n	105f8 <am_hal_queue_item_add+0x4c>

0001061c <am_hal_queue_item_get>:
   1061c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1061e:	4604      	mov	r4, r0
   10620:	6906      	ldr	r6, [r0, #16]
   10622:	b083      	sub	sp, #12
   10624:	fb06 f602 	mul.w	r6, r6, r2
   10628:	460d      	mov	r5, r1
   1062a:	f7ff fa29 	bl	fa80 <am_hal_interrupt_master_disable>
   1062e:	68a2      	ldr	r2, [r4, #8]
   10630:	9001      	str	r0, [sp, #4]
   10632:	4296      	cmp	r6, r2
   10634:	d81c      	bhi.n	10670 <am_hal_queue_item_get+0x54>
   10636:	b196      	cbz	r6, 1065e <am_hal_queue_item_get+0x42>
   10638:	6863      	ldr	r3, [r4, #4]
   1063a:	b1dd      	cbz	r5, 10674 <am_hal_queue_item_get+0x58>
   1063c:	4629      	mov	r1, r5
   1063e:	19af      	adds	r7, r5, r6
   10640:	6962      	ldr	r2, [r4, #20]
   10642:	5cd3      	ldrb	r3, [r2, r3]
   10644:	f801 3b01 	strb.w	r3, [r1], #1
   10648:	6863      	ldr	r3, [r4, #4]
   1064a:	68e5      	ldr	r5, [r4, #12]
   1064c:	3301      	adds	r3, #1
   1064e:	428f      	cmp	r7, r1
   10650:	fbb3 f0f5 	udiv	r0, r3, r5
   10654:	fb05 3310 	mls	r3, r5, r0, r3
   10658:	6063      	str	r3, [r4, #4]
   1065a:	d1f1      	bne.n	10640 <am_hal_queue_item_get+0x24>
   1065c:	68a2      	ldr	r2, [r4, #8]
   1065e:	1b92      	subs	r2, r2, r6
   10660:	60a2      	str	r2, [r4, #8]
   10662:	2401      	movs	r4, #1
   10664:	9801      	ldr	r0, [sp, #4]
   10666:	f7ff fa0f 	bl	fa88 <am_hal_interrupt_master_set>
   1066a:	4620      	mov	r0, r4
   1066c:	b003      	add	sp, #12
   1066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10670:	2400      	movs	r4, #0
   10672:	e7f7      	b.n	10664 <am_hal_queue_item_get+0x48>
   10674:	68e0      	ldr	r0, [r4, #12]
   10676:	4629      	mov	r1, r5
   10678:	3101      	adds	r1, #1
   1067a:	3301      	adds	r3, #1
   1067c:	428e      	cmp	r6, r1
   1067e:	fbb3 f5f0 	udiv	r5, r3, r0
   10682:	fb00 3315 	mls	r3, r0, r5, r3
   10686:	d1f7      	bne.n	10678 <am_hal_queue_item_get+0x5c>
   10688:	6063      	str	r3, [r4, #4]
   1068a:	e7e8      	b.n	1065e <am_hal_queue_item_get+0x42>

0001068c <memset>:
   1068c:	b4f0      	push	{r4, r5, r6, r7}
   1068e:	0786      	lsls	r6, r0, #30
   10690:	d043      	beq.n	1071a <memset+0x8e>
   10692:	1e54      	subs	r4, r2, #1
   10694:	2a00      	cmp	r2, #0
   10696:	d03e      	beq.n	10716 <memset+0x8a>
   10698:	b2ca      	uxtb	r2, r1
   1069a:	4603      	mov	r3, r0
   1069c:	e002      	b.n	106a4 <memset+0x18>
   1069e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   106a2:	d338      	bcc.n	10716 <memset+0x8a>
   106a4:	f803 2b01 	strb.w	r2, [r3], #1
   106a8:	079d      	lsls	r5, r3, #30
   106aa:	d1f8      	bne.n	1069e <memset+0x12>
   106ac:	2c03      	cmp	r4, #3
   106ae:	d92b      	bls.n	10708 <memset+0x7c>
   106b0:	b2cd      	uxtb	r5, r1
   106b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   106b6:	2c0f      	cmp	r4, #15
   106b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   106bc:	d916      	bls.n	106ec <memset+0x60>
   106be:	f1a4 0710 	sub.w	r7, r4, #16
   106c2:	093f      	lsrs	r7, r7, #4
   106c4:	f103 0620 	add.w	r6, r3, #32
   106c8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   106cc:	f103 0210 	add.w	r2, r3, #16
   106d0:	e942 5504 	strd	r5, r5, [r2, #-16]
   106d4:	e942 5502 	strd	r5, r5, [r2, #-8]
   106d8:	3210      	adds	r2, #16
   106da:	42b2      	cmp	r2, r6
   106dc:	d1f8      	bne.n	106d0 <memset+0x44>
   106de:	f004 040f 	and.w	r4, r4, #15
   106e2:	3701      	adds	r7, #1
   106e4:	2c03      	cmp	r4, #3
   106e6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   106ea:	d90d      	bls.n	10708 <memset+0x7c>
   106ec:	461e      	mov	r6, r3
   106ee:	4622      	mov	r2, r4
   106f0:	3a04      	subs	r2, #4
   106f2:	2a03      	cmp	r2, #3
   106f4:	f846 5b04 	str.w	r5, [r6], #4
   106f8:	d8fa      	bhi.n	106f0 <memset+0x64>
   106fa:	1f22      	subs	r2, r4, #4
   106fc:	f022 0203 	bic.w	r2, r2, #3
   10700:	3204      	adds	r2, #4
   10702:	4413      	add	r3, r2
   10704:	f004 0403 	and.w	r4, r4, #3
   10708:	b12c      	cbz	r4, 10716 <memset+0x8a>
   1070a:	b2c9      	uxtb	r1, r1
   1070c:	441c      	add	r4, r3
   1070e:	f803 1b01 	strb.w	r1, [r3], #1
   10712:	429c      	cmp	r4, r3
   10714:	d1fb      	bne.n	1070e <memset+0x82>
   10716:	bcf0      	pop	{r4, r5, r6, r7}
   10718:	4770      	bx	lr
   1071a:	4614      	mov	r4, r2
   1071c:	4603      	mov	r3, r0
   1071e:	e7c5      	b.n	106ac <memset+0x20>
   10720:	7263694d 	.word	0x7263694d
   10724:	6f68706f 	.word	0x6f68706f
   10728:	7620656e 	.word	0x7620656e
   1072c:	66697265 	.word	0x66697265
   10730:	74616369 	.word	0x74616369
   10734:	206e6f69 	.word	0x206e6f69
   10738:	636f7270 	.word	0x636f7270
   1073c:	72756465 	.word	0x72756465
   10740:	73692065 	.word	0x73692065
   10744:	61657220 	.word	0x61657220
   10748:	0d217964 	.word	0x0d217964
   1074c:	00000a0a 	.word	0x00000a0a
   10750:	20414d44 	.word	0x20414d44
   10754:	6f727245 	.word	0x6f727245
   10758:	636f2072 	.word	0x636f2072
   1075c:	65727563 	.word	0x65727563
   10760:	00000a64 	.word	0x00000a64
   10764:	6f727245 	.word	0x6f727245
   10768:	202d2072 	.word	0x202d2072
   1076c:	61656c63 	.word	0x61656c63
   10770:	676e6972 	.word	0x676e6972
   10774:	65687420 	.word	0x65687420
   10778:	43444120 	.word	0x43444120
   1077c:	746e6920 	.word	0x746e6920
   10780:	75727265 	.word	0x75727265
   10784:	20737470 	.word	0x20737470
   10788:	6c696166 	.word	0x6c696166
   1078c:	0a2e6465 	.word	0x0a2e6465
   10790:	00000000 	.word	0x00000000
   10794:	6f727245 	.word	0x6f727245
   10798:	202d2072 	.word	0x202d2072
   1079c:	67697274 	.word	0x67697274
   107a0:	69726567 	.word	0x69726567
   107a4:	7420676e 	.word	0x7420676e
   107a8:	41206568 	.word	0x41206568
   107ac:	66204344 	.word	0x66204344
   107b0:	656c6961 	.word	0x656c6961
   107b4:	000a2e64 	.word	0x000a2e64
   107b8:	20746547 	.word	0x20746547
   107bc:	6c616e41 	.word	0x6c616e41
   107c0:	4d20676f 	.word	0x4d20676f
   107c4:	64206369 	.word	0x64206369
   107c8:	20617461 	.word	0x20617461
   107cc:	62206425 	.word	0x62206425
   107d0:	73657479 	.word	0x73657479
   107d4:	000d0a21 	.word	0x000d0a21
   107d8:	20746547 	.word	0x20746547
   107dc:	204d4450 	.word	0x204d4450
   107e0:	69647561 	.word	0x69647561
   107e4:	6164206f 	.word	0x6164206f
   107e8:	25206174 	.word	0x25206174
   107ec:	79622064 	.word	0x79622064
   107f0:	21736574 	.word	0x21736574
   107f4:	00000d0a 	.word	0x00000d0a
   107f8:	69647541 	.word	0x69647541
   107fc:	6164206f 	.word	0x6164206f
   10800:	63206174 	.word	0x63206174
   10804:	656c6c6f 	.word	0x656c6c6f
   10808:	6f697463 	.word	0x6f697463
   1080c:	6e65206e 	.word	0x6e65206e
   10810:	2e646564 	.word	0x2e646564
   10814:	002e2e2e 	.word	0x002e2e2e
   10818:	6c616e41 	.word	0x6c616e41
   1081c:	4d20676f 	.word	0x4d20676f
   10820:	64206369 	.word	0x64206369
   10824:	20617461 	.word	0x20617461
   10828:	66207361 	.word	0x66207361
   1082c:	6f6c6c6f 	.word	0x6f6c6c6f
   10830:	676e6977 	.word	0x676e6977
   10834:	0d0a203a 	.word	0x0d0a203a
   10838:	00000000 	.word	0x00000000
   1083c:	63694d41 	.word	0x63694d41
   10840:	6e697220 	.word	0x6e697220
   10844:	75622067 	.word	0x75622067
   10848:	72656666 	.word	0x72656666
   1084c:	20736920 	.word	0x20736920
   10850:	65726c61 	.word	0x65726c61
   10854:	20796461 	.word	0x20796461
   10858:	74706d65 	.word	0x74706d65
   1085c:	2e2e2e79 	.word	0x2e2e2e79
   10860:	00000d0a 	.word	0x00000d0a
   10864:	72656854 	.word	0x72656854
   10868:	65722765 	.word	0x65722765
   1086c:	6d6f7320 	.word	0x6d6f7320
   10870:	69687465 	.word	0x69687465
   10874:	7720676e 	.word	0x7720676e
   10878:	65726965 	.word	0x65726965
   1087c:	2e2e2e64 	.word	0x2e2e2e64
   10880:	63694d41 	.word	0x63694d41
   10884:	6e697220 	.word	0x6e697220
   10888:	75622067 	.word	0x75622067
   1088c:	72656666 	.word	0x72656666
   10890:	746f6e20 	.word	0x746f6e20
   10894:	62203420 	.word	0x62203420
   10898:	73657479 	.word	0x73657479
   1089c:	696c6120 	.word	0x696c6120
   108a0:	64656e67 	.word	0x64656e67
   108a4:	0a2e2e2e 	.word	0x0a2e2e2e
   108a8:	0000000d 	.word	0x0000000d
   108ac:	00000020 	.word	0x00000020
   108b0:	00000d0a 	.word	0x00000d0a
   108b4:	646e6553 	.word	0x646e6553
   108b8:	74756f20 	.word	0x74756f20
   108bc:	4c4c4120 	.word	0x4c4c4120
   108c0:	694d4120 	.word	0x694d4120
   108c4:	61642063 	.word	0x61642063
   108c8:	20216174 	.word	0x20216174
   108cc:	72656854 	.word	0x72656854
   108d0:	65722765 	.word	0x65722765
   108d4:	746f7420 	.word	0x746f7420
   108d8:	796c6c61 	.word	0x796c6c61
   108dc:	20642520 	.word	0x20642520
   108e0:	706d6173 	.word	0x706d6173
   108e4:	0a73656c 	.word	0x0a73656c
   108e8:	00000d0a 	.word	0x00000d0a
   108ec:	206c6c41 	.word	0x206c6c41
   108f0:	61746164 	.word	0x61746164
   108f4:	72657720 	.word	0x72657720
   108f8:	65732065 	.word	0x65732065
   108fc:	6465646e 	.word	0x6465646e
   10900:	74756f20 	.word	0x74756f20
   10904:	0a2e2e2e 	.word	0x0a2e2e2e
   10908:	000d0a0a 	.word	0x000d0a0a
   1090c:	74696157 	.word	0x74696157
   10910:	20676e69 	.word	0x20676e69
   10914:	65732032 	.word	0x65732032
   10918:	646e6f63 	.word	0x646e6f63
   1091c:	6f742073 	.word	0x6f742073
   10920:	61766520 	.word	0x61766520
   10924:	7461756c 	.word	0x7461756c
   10928:	4d412065 	.word	0x4d412065
   1092c:	61206369 	.word	0x61206369
   10930:	4420646e 	.word	0x4420646e
   10934:	2e63694d 	.word	0x2e63694d
   10938:	0a0d2e2e 	.word	0x0a0d2e2e
   1093c:	00000000 	.word	0x00000000
   10940:	72617453 	.word	0x72617453
   10944:	6f742074 	.word	0x6f742074
   10948:	74656720 	.word	0x74656720
   1094c:	64756120 	.word	0x64756120
   10950:	64206f69 	.word	0x64206f69
   10954:	2e617461 	.word	0x2e617461
   10958:	0a0d2e2e 	.word	0x0a0d2e2e
   1095c:	00000000 	.word	0x00000000
   10960:	00007325 	.word	0x00007325
   10964:	00006425 	.word	0x00006425
   10968:	00007525 	.word	0x00007525
   1096c:	38257830 	.word	0x38257830
   10970:	00000078 	.word	0x00000078
   10974:	00006625 	.word	0x00006625
   10978:	204d4450 	.word	0x204d4450
   1097c:	74746553 	.word	0x74746553
   10980:	73676e69 	.word	0x73676e69
   10984:	000a0d3a 	.word	0x000a0d3a
   10988:	204d4450 	.word	0x204d4450
   1098c:	636f6c43 	.word	0x636f6c43
   10990:	4828206b 	.word	0x4828206b
   10994:	203a297a 	.word	0x203a297a
   10998:	20202020 	.word	0x20202020
   1099c:	20202020 	.word	0x20202020
   109a0:	64323125 	.word	0x64323125
   109a4:	00000a0d 	.word	0x00000a0d
   109a8:	65666645 	.word	0x65666645
   109ac:	76697463 	.word	0x76697463
   109b0:	61532065 	.word	0x61532065
   109b4:	656c706d 	.word	0x656c706d
   109b8:	65724620 	.word	0x65724620
   109bc:	203a2e71 	.word	0x203a2e71
   109c0:	64323125 	.word	0x64323125
   109c4:	000a0a0d 	.word	0x000a0a0d
   109c8:	6f727245 	.word	0x6f727245
   109cc:	202d2072 	.word	0x202d2072
   109d0:	666e6f63 	.word	0x666e6f63
   109d4:	72756769 	.word	0x72756769
   109d8:	20676e69 	.word	0x20676e69
   109dc:	20434441 	.word	0x20434441
   109e0:	20414d44 	.word	0x20414d44
   109e4:	6c696166 	.word	0x6c696166
   109e8:	0a2e6465 	.word	0x0a2e6465
   109ec:	00000000 	.word	0x00000000
   109f0:	6f727245 	.word	0x6f727245
   109f4:	202d2072 	.word	0x202d2072
   109f8:	65736572 	.word	0x65736572
   109fc:	74617672 	.word	0x74617672
   10a00:	206e6f69 	.word	0x206e6f69
   10a04:	7420666f 	.word	0x7420666f
   10a08:	41206568 	.word	0x41206568
   10a0c:	69204344 	.word	0x69204344
   10a10:	6174736e 	.word	0x6174736e
   10a14:	2065636e 	.word	0x2065636e
   10a18:	6c696166 	.word	0x6c696166
   10a1c:	0a2e6465 	.word	0x0a2e6465
   10a20:	00000000 	.word	0x00000000
   10a24:	6f727245 	.word	0x6f727245
   10a28:	202d2072 	.word	0x202d2072
   10a2c:	20434441 	.word	0x20434441
   10a30:	65776f70 	.word	0x65776f70
   10a34:	6e6f2072 	.word	0x6e6f2072
   10a38:	69616620 	.word	0x69616620
   10a3c:	2e64656c 	.word	0x2e64656c
   10a40:	0000000a 	.word	0x0000000a
   10a44:	6f727245 	.word	0x6f727245
   10a48:	202d2072 	.word	0x202d2072
   10a4c:	666e6f63 	.word	0x666e6f63
   10a50:	72756769 	.word	0x72756769
   10a54:	20676e69 	.word	0x20676e69
   10a58:	20434441 	.word	0x20434441
   10a5c:	6c696166 	.word	0x6c696166
   10a60:	0a2e6465 	.word	0x0a2e6465
   10a64:	00000000 	.word	0x00000000
   10a68:	6f727245 	.word	0x6f727245
   10a6c:	202d2072 	.word	0x202d2072
   10a70:	666e6f63 	.word	0x666e6f63
   10a74:	72756769 	.word	0x72756769
   10a78:	20676e69 	.word	0x20676e69
   10a7c:	20434441 	.word	0x20434441
   10a80:	746f6c53 	.word	0x746f6c53
   10a84:	66203020 	.word	0x66203020
   10a88:	656c6961 	.word	0x656c6961
   10a8c:	000a2e64 	.word	0x000a2e64
   10a90:	6f727245 	.word	0x6f727245
   10a94:	202d2072 	.word	0x202d2072
   10a98:	62616e65 	.word	0x62616e65
   10a9c:	676e696c 	.word	0x676e696c
   10aa0:	43444120 	.word	0x43444120
   10aa4:	69616620 	.word	0x69616620
   10aa8:	2e64656c 	.word	0x2e64656c
   10aac:	0000000a 	.word	0x0000000a
   10ab0:	6f727245 	.word	0x6f727245
   10ab4:	202d2072 	.word	0x202d2072
   10ab8:	61736964 	.word	0x61736964
   10abc:	20656c62 	.word	0x20656c62
   10ac0:	20434441 	.word	0x20434441
   10ac4:	6c696166 	.word	0x6c696166
   10ac8:	0a2e6465 	.word	0x0a2e6465
   10acc:	00000000 	.word	0x00000000
   10ad0:	6f727245 	.word	0x6f727245
   10ad4:	202d2072 	.word	0x202d2072
   10ad8:	61736964 	.word	0x61736964
   10adc:	6e696c62 	.word	0x6e696c62
   10ae0:	68742067 	.word	0x68742067
   10ae4:	44412065 	.word	0x44412065
   10ae8:	6f702043 	.word	0x6f702043
   10aec:	20726577 	.word	0x20726577
   10af0:	616d6f64 	.word	0x616d6f64
   10af4:	66206e69 	.word	0x66206e69
   10af8:	656c6961 	.word	0x656c6961
   10afc:	000a2e64 	.word	0x000a2e64
   10b00:	6f727245 	.word	0x6f727245
   10b04:	202d2072 	.word	0x202d2072
   10b08:	75746572 	.word	0x75746572
   10b0c:	6f206e72 	.word	0x6f206e72
   10b10:	68742066 	.word	0x68742066
   10b14:	44412065 	.word	0x44412065
   10b18:	6e692043 	.word	0x6e692043
   10b1c:	6e617473 	.word	0x6e617473
   10b20:	66206563 	.word	0x66206563
   10b24:	656c6961 	.word	0x656c6961
   10b28:	000a2e64 	.word	0x000a2e64
   10b2c:	6f727245 	.word	0x6f727245
   10b30:	202d2072 	.word	0x202d2072
   10b34:	666e6f63 	.word	0x666e6f63
   10b38:	72756769 	.word	0x72756769
   10b3c:	20676e69 	.word	0x20676e69
   10b40:	20656874 	.word	0x20656874
   10b44:	74737973 	.word	0x74737973
   10b48:	63206d65 	.word	0x63206d65
   10b4c:	6b636f6c 	.word	0x6b636f6c
   10b50:	69616620 	.word	0x69616620
   10b54:	2e64656c 	.word	0x2e64656c
   10b58:	0000000a 	.word	0x0000000a
   10b5c:	6f727245 	.word	0x6f727245
   10b60:	202d2072 	.word	0x202d2072
   10b64:	666e6f63 	.word	0x666e6f63
   10b68:	72756769 	.word	0x72756769
   10b6c:	20676e69 	.word	0x20676e69
   10b70:	20656874 	.word	0x20656874
   10b74:	74737973 	.word	0x74737973
   10b78:	63206d65 	.word	0x63206d65
   10b7c:	65686361 	.word	0x65686361
   10b80:	69616620 	.word	0x69616620
   10b84:	2e64656c 	.word	0x2e64656c
   10b88:	0000000a 	.word	0x0000000a
   10b8c:	6f727245 	.word	0x6f727245
   10b90:	202d2072 	.word	0x202d2072
   10b94:	62616e65 	.word	0x62616e65
   10b98:	676e696c 	.word	0x676e696c
   10b9c:	65687420 	.word	0x65687420
   10ba0:	73797320 	.word	0x73797320
   10ba4:	206d6574 	.word	0x206d6574
   10ba8:	68636163 	.word	0x68636163
   10bac:	61662065 	.word	0x61662065
   10bb0:	64656c69 	.word	0x64656c69
   10bb4:	00000a2e 	.word	0x00000a2e
   10bb8:	6c6f7041 	.word	0x6c6f7041
   10bbc:	20336f6c 	.word	0x20336f6c
   10bc0:	7265706f 	.word	0x7265706f
   10bc4:	6e697461 	.word	0x6e697461
   10bc8:	6e692067 	.word	0x6e692067
   10bcc:	72754220 	.word	0x72754220
   10bd0:	4d207473 	.word	0x4d207473
   10bd4:	2065646f 	.word	0x2065646f
   10bd8:	4d363928 	.word	0x4d363928
   10bdc:	0d297a48 	.word	0x0d297a48
   10be0:	00000a0a 	.word	0x00000a0a
   10be4:	6f727245 	.word	0x6f727245
   10be8:	202d2072 	.word	0x202d2072
   10bec:	67697274 	.word	0x67697274
   10bf0:	69726567 	.word	0x69726567
   10bf4:	7420676e 	.word	0x7420676e
   10bf8:	41206568 	.word	0x41206568
   10bfc:	66204344 	.word	0x66204344
   10c00:	656c6961 	.word	0x656c6961
   10c04:	000a2e64 	.word	0x000a2e64
   10c08:	6f727245 	.word	0x6f727245
   10c0c:	65722072 	.word	0x65722072
   10c10:	6e696461 	.word	0x6e696461
   10c14:	44412067 	.word	0x44412067
   10c18:	6e692043 	.word	0x6e692043
   10c1c:	72726574 	.word	0x72726574
   10c20:	20747075 	.word	0x20747075
   10c24:	74617473 	.word	0x74617473
   10c28:	000a7375 	.word	0x000a7375
   10c2c:	6f727245 	.word	0x6f727245
   10c30:	6c632072 	.word	0x6c632072
   10c34:	69726165 	.word	0x69726165
   10c38:	4120676e 	.word	0x4120676e
   10c3c:	69204344 	.word	0x69204344
   10c40:	7265746e 	.word	0x7265746e
   10c44:	74707572 	.word	0x74707572
   10c48:	61747320 	.word	0x61747320
   10c4c:	0a737574 	.word	0x0a737574
   10c50:	00000000 	.word	0x00000000

00010c54 <g_AM_HAL_GPIO_DISABLE>:
   10c54:	00000003                                ....

00010c58 <g_AM_HAL_GPIO_OUTPUT>:
   10c58:	00000403                                ....

00010c5c <g_AM_HAL_GPIO_TRISTATE>:
   10c5c:	00000c03                                ....

00010c60 <g_ui8Inpen>:
   10c60:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   10c70:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   10c80:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   10c90:	00003130                                01..

00010c94 <g_ui8Bit76Capabilities>:
   10c94:	02800101 80010180 80800101 80808080     ................
   10ca4:	80808080 80808008 01800180 80808080     ................
   10cb4:	80808080 01800402 01010401 80808080     ................
   10cc4:	00000101                                ....

00010cc8 <g_ui8nCEpins>:
   10cc8:	02070707 00080802 01020202 01010101     ................
   10cd8:	01010101 01010101 01010101 01010101     ................
   10ce8:	01010101 08010101 01010008 01010101     ................
   10cf8:	00000101                                ....

00010cfc <g_ui8NCEtable>:
   10cfc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10d0c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10d1c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10d2c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10d3c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10d4c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10d5c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10d6c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10d7c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10d8c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10d9c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10dac:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10dbc:	32221202 43231303                       .."2..#C

00010dc4 <g_SysRingBuffSetup>:
   10dc4:	00000001 1000ce1c 0000fa00 00000002     ................
   10dd4:	1001c81c 0000fa00                       ........

00010ddc <g_switch_button0>:
   10ddc:	00001003                                ....

00010de0 <g_switch_button1>:
   10de0:	00001003                                ....

00010de4 <g_switch_button2>:
   10de4:	00001003                                ....

00010de8 <g_AM_PIN_33_ADCSE5>:
   10de8:	00000000                                ....

00010dec <g_sBspUartConfig>:
   10dec:	0001c200 00000060 00000000 00000000     ....`...........
   10dfc:	00000000 00000012 00000000 00000000     ................
	...

00010e14 <g_AM_BSP_GPIO_COM_UART_TX>:
   10e14:	00000000                                ....

00010e18 <g_AM_BSP_GPIO_COM_UART_RX>:
   10e18:	00000000                                ....

00010e1c <am_hal_cachectrl_defaults>:
   10e1c:	00000308                                ....

00010e20 <g_am_hal_mcuctrl_flash_size>:
   10e20:	00004000 00008000 00010000 00020000     .@..............
   10e30:	00040000 00080000 00100000 00200000     .............. .
	...

00010e60 <g_am_hal_mcuctrl_sram_size>:
   10e60:	00004000 00008000 00010000 00020000     .@..............
   10e70:	00040000 00080000 00100000 00060000     ................
	...

00010ea0 <am_hal_pwrctrl_peripheral_control>:
	...
   10eac:	00000001 00000004 00000004 00000002     ................
   10ebc:	00000008 00000008 00000004 00000008     ................
   10ecc:	00000008 00000008 00000008 00000008     ................
   10edc:	00000010 00000010 00000010 00000020     ............ ...
   10eec:	00000010 00000010 00000040 00000010     ........@.......
   10efc:	00000010 00000080 00000004 00000004     ................
   10f0c:	00000100 00000004 00000004 00000200     ................
   10f1c:	00000020 00000020 00000400 00000004      ... ...........
   10f2c:	00000004 00000800 00000040 00000040     ........@...@...
   10f3c:	00001000 00000080 00000080 00002000     ............. ..
   10f4c:	00000100 00000100                       ........
