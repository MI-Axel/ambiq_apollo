
bin/mikro_verification.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 71 e8 00 00 d9 e8 00 00 25 d3 00 00     ....q.......%...
    c010:	25 d3 00 00 25 d3 00 00 25 d3 00 00 00 00 00 00     %...%...%.......
	...
    c02c:	df e8 00 00 df e8 00 00 00 00 00 00 df e8 00 00     ................
    c03c:	df e8 00 00 df e8 00 00 df e8 00 00 df e8 00 00     ................
    c04c:	df e8 00 00 df e8 00 00 df e8 00 00 df e8 00 00     ................
    c05c:	df e8 00 00 df e8 00 00 df e8 00 00 df e8 00 00     ................
    c06c:	df e8 00 00 df e8 00 00 8d ef 00 00 39 ef 00 00     ............9...
    c07c:	df e8 00 00 df e8 00 00 df e8 00 00 41 f0 00 00     ............A...
    c08c:	75 ee 00 00 df e8 00 00 df e8 00 00 df e8 00 00     u...............
    c09c:	df e8 00 00 df e8 00 00 df e8 00 00 df e8 00 00     ................
    c0ac:	df e8 00 00 df e8 00 00 df e8 00 00 df e8 00 00     ................
    c0bc:	df e8 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:

// sharing variables in whole procedures
volatile uint8_t g_ui8PcmDataReadyFlag = 0;

int main(void)
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b082      	sub	sp, #8
    c2d8:	af00      	add	r7, sp, #0
    am_app_mic_verif_sys_init();
    c2da:	f002 fcf1 	bl	ecc0 <am_app_mic_verif_sys_init>
#endif // configUSE_SYSVIEW

    //
    // Print the banner.
    //
    DebugLog("Microphone verification procedure is ready!\r\n\n");
    c2de:	487e      	ldr	r0, [pc, #504]	; (c4d8 <main+0x204>)
    c2e0:	f002 fb48 	bl	e974 <DebugLog>

#if AM_APP_ANALOG_MIC
        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c2e4:	4b7d      	ldr	r3, [pc, #500]	; (c4dc <main+0x208>)
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <main+0x22>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c2ee:	487c      	ldr	r0, [pc, #496]	; (c4e0 <main+0x20c>)
    c2f0:	f001 ff30 	bl	e154 <am_util_stdio_printf>
            while(1);
    c2f4:	e7fe      	b.n	c2f4 <main+0x20>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c2f6:	4b7b      	ldr	r3, [pc, #492]	; (c4e4 <main+0x210>)
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	b2db      	uxtb	r3, r3
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d01c      	beq.n	c33a <main+0x66>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c300:	4b78      	ldr	r3, [pc, #480]	; (c4e4 <main+0x210>)
    c302:	2200      	movs	r2, #0
    c304:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c306:	f002 fbfb 	bl	eb00 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c30a:	4b77      	ldr	r3, [pc, #476]	; (c4e8 <main+0x214>)
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c312:	4618      	mov	r0, r3
    c314:	f003 f8be 	bl	f494 <am_hal_adc_interrupt_clear>
    c318:	4603      	mov	r3, r0
    c31a:	2b00      	cmp	r3, #0
    c31c:	d002      	beq.n	c324 <main+0x50>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c31e:	4873      	ldr	r0, [pc, #460]	; (c4ec <main+0x218>)
    c320:	f001 ff18 	bl	e154 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c324:	4b70      	ldr	r3, [pc, #448]	; (c4e8 <main+0x214>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	4618      	mov	r0, r3
    c32a:	f003 f8c5 	bl	f4b8 <am_hal_adc_sw_trigger>
    c32e:	4603      	mov	r3, r0
    c330:	2b00      	cmp	r3, #0
    c332:	d002      	beq.n	c33a <main+0x66>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c334:	486e      	ldr	r0, [pc, #440]	; (c4f0 <main+0x21c>)
    c336:	f001 ff0d 	bl	e154 <am_util_stdio_printf>
            }
        }
        
        if((g_bAMicDataReady == true) && (g_bAMicEvalFlag == true) && (g_bPDMDataReady == true))
    c33a:	4b6e      	ldr	r3, [pc, #440]	; (c4f4 <main+0x220>)
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	b2db      	uxtb	r3, r3
    c340:	2b00      	cmp	r3, #0
    c342:	d01e      	beq.n	c382 <main+0xae>
    c344:	4b6c      	ldr	r3, [pc, #432]	; (c4f8 <main+0x224>)
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	2b00      	cmp	r3, #0
    c34c:	d019      	beq.n	c382 <main+0xae>
    c34e:	4b6b      	ldr	r3, [pc, #428]	; (c4fc <main+0x228>)
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b2db      	uxtb	r3, r3
    c354:	2b00      	cmp	r3, #0
    c356:	d014      	beq.n	c382 <main+0xae>
        {
            am_util_stdio_printf("Get Analog Mic data %d bytes!\n\r", g_ui32AMicDataSumBytes);
    c358:	4b69      	ldr	r3, [pc, #420]	; (c500 <main+0x22c>)
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	4619      	mov	r1, r3
    c35e:	4869      	ldr	r0, [pc, #420]	; (c504 <main+0x230>)
    c360:	f001 fef8 	bl	e154 <am_util_stdio_printf>

            am_util_stdio_printf("Get PDM audio data %d bytes!\n\r", g_ui32PCMDataSumBytes);
    c364:	4b68      	ldr	r3, [pc, #416]	; (c508 <main+0x234>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4619      	mov	r1, r3
    c36a:	4868      	ldr	r0, [pc, #416]	; (c50c <main+0x238>)
    c36c:	f001 fef2 	bl	e154 <am_util_stdio_printf>

            am_util_stdio_printf("Audio data collection ended....");
    c370:	4867      	ldr	r0, [pc, #412]	; (c510 <main+0x23c>)
    c372:	f001 feef 	bl	e154 <am_util_stdio_printf>
            
            //
            // zero clear the counter 
            //
            g_ui32AMicDataSumBytes = 0;
    c376:	4b62      	ldr	r3, [pc, #392]	; (c500 <main+0x22c>)
    c378:	2200      	movs	r2, #0
    c37a:	601a      	str	r2, [r3, #0]
            g_ui32PCMDataSumBytes = 0;
    c37c:	4b62      	ldr	r3, [pc, #392]	; (c508 <main+0x234>)
    c37e:	2200      	movs	r2, #0
    c380:	601a      	str	r2, [r3, #0]
        }

        if((g_bPDMDataReady == true) && (g_bAMicDataReady == true))
    c382:	4b5e      	ldr	r3, [pc, #376]	; (c4fc <main+0x228>)
    c384:	781b      	ldrb	r3, [r3, #0]
    c386:	b2db      	uxtb	r3, r3
    c388:	2b00      	cmp	r3, #0
    c38a:	d05d      	beq.n	c448 <main+0x174>
    c38c:	4b59      	ldr	r3, [pc, #356]	; (c4f4 <main+0x220>)
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	b2db      	uxtb	r3, r3
    c392:	2b00      	cmp	r3, #0
    c394:	d058      	beq.n	c448 <main+0x174>
        {
            am_devices_led_off(am_bsp_psLEDs, 1);
    c396:	2101      	movs	r1, #1
    c398:	485e      	ldr	r0, [pc, #376]	; (c514 <main+0x240>)
    c39a:	f002 f9db 	bl	e754 <am_devices_led_off>
            g_bAMicEvalFlag = false;
    c39e:	4b56      	ldr	r3, [pc, #344]	; (c4f8 <main+0x224>)
    c3a0:	2200      	movs	r2, #0
    c3a2:	701a      	strb	r2, [r3, #0]
            g_bPDMDataReady = false;
    c3a4:	4b55      	ldr	r3, [pc, #340]	; (c4fc <main+0x228>)
    c3a6:	2200      	movs	r2, #0
    c3a8:	701a      	strb	r2, [r3, #0]
            g_bAMicDataReady = false;
    c3aa:	4b52      	ldr	r3, [pc, #328]	; (c4f4 <main+0x220>)
    c3ac:	2200      	movs	r2, #0
    c3ae:	701a      	strb	r2, [r3, #0]
            am_util_stdio_printf("Analog Mic data as following: \n\r");
    c3b0:	4859      	ldr	r0, [pc, #356]	; (c518 <main+0x244>)
    c3b2:	f001 fecf 	bl	e154 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c3b6:	e031      	b.n	c41c <main+0x148>
            {
                uint8_t indx = 0;
    c3b8:	2300      	movs	r3, #0
    c3ba:	71fb      	strb	r3, [r7, #7]
                uint32_t ringbuff_ret = 0;
    c3bc:	2300      	movs	r3, #0
    c3be:	603b      	str	r3, [r7, #0]
                for(indx=0; indx<16; indx++)
    c3c0:	2300      	movs	r3, #0
    c3c2:	71fb      	strb	r3, [r7, #7]
    c3c4:	e024      	b.n	c410 <main+0x13c>
                {
                    ringbuff_ret = am_app_utils_ring_buffer_pop(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], &g_ui32AD_Val, 4);
    c3c6:	2204      	movs	r2, #4
    c3c8:	4954      	ldr	r1, [pc, #336]	; (c51c <main+0x248>)
    c3ca:	4855      	ldr	r0, [pc, #340]	; (c520 <main+0x24c>)
    c3cc:	f002 f86d 	bl	e4aa <am_app_utils_ring_buffer_pop>
    c3d0:	6038      	str	r0, [r7, #0]
                    if(ringbuff_ret == 4)
    c3d2:	683b      	ldr	r3, [r7, #0]
    c3d4:	2b04      	cmp	r3, #4
    c3d6:	d105      	bne.n	c3e4 <main+0x110>
                    {    
                        g_ui32OutSamples += 1;
    c3d8:	4b52      	ldr	r3, [pc, #328]	; (c524 <main+0x250>)
    c3da:	681b      	ldr	r3, [r3, #0]
    c3dc:	3301      	adds	r3, #1
    c3de:	4a51      	ldr	r2, [pc, #324]	; (c524 <main+0x250>)
    c3e0:	6013      	str	r3, [r2, #0]
    c3e2:	e009      	b.n	c3f8 <main+0x124>
                    }
                    else if(ringbuff_ret ==0)
    c3e4:	683b      	ldr	r3, [r7, #0]
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d103      	bne.n	c3f2 <main+0x11e>
                    {
                        am_util_stdio_printf("AMic ring buffer is already empty...\n\r");
    c3ea:	484f      	ldr	r0, [pc, #316]	; (c528 <main+0x254>)
    c3ec:	f001 feb2 	bl	e154 <am_util_stdio_printf>
                        break;
    c3f0:	e011      	b.n	c416 <main+0x142>
                    }
                    else
                    {
                        am_util_stdio_printf("There're something weired...AMic ring buffer not 4 bytes aligned...\n\r");
    c3f2:	484e      	ldr	r0, [pc, #312]	; (c52c <main+0x258>)
    c3f4:	f001 feae 	bl	e154 <am_util_stdio_printf>
                    }
                    //
                    // follow the ADC data format
                    //
                    DebugLogUInt32(g_ui32AD_Val>>6);
    c3f8:	4b48      	ldr	r3, [pc, #288]	; (c51c <main+0x248>)
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	099b      	lsrs	r3, r3, #6
    c3fe:	4618      	mov	r0, r3
    c400:	f002 fac6 	bl	e990 <DebugLogUInt32>
                    DebugLog(" ");
    c404:	484a      	ldr	r0, [pc, #296]	; (c530 <main+0x25c>)
    c406:	f002 fab5 	bl	e974 <DebugLog>
                for(indx=0; indx<16; indx++)
    c40a:	79fb      	ldrb	r3, [r7, #7]
    c40c:	3301      	adds	r3, #1
    c40e:	71fb      	strb	r3, [r7, #7]
    c410:	79fb      	ldrb	r3, [r7, #7]
    c412:	2b0f      	cmp	r3, #15
    c414:	d9d7      	bls.n	c3c6 <main+0xf2>
                }
                am_util_stdio_printf("\n\r");
    c416:	4847      	ldr	r0, [pc, #284]	; (c534 <main+0x260>)
    c418:	f001 fe9c 	bl	e154 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c41c:	4b46      	ldr	r3, [pc, #280]	; (c538 <main+0x264>)
    c41e:	699a      	ldr	r2, [r3, #24]
    c420:	4b45      	ldr	r3, [pc, #276]	; (c538 <main+0x264>)
    c422:	69db      	ldr	r3, [r3, #28]
    c424:	429a      	cmp	r2, r3
    c426:	d1c7      	bne.n	c3b8 <main+0xe4>
    c428:	4b43      	ldr	r3, [pc, #268]	; (c538 <main+0x264>)
    c42a:	6a1b      	ldr	r3, [r3, #32]
    c42c:	2b00      	cmp	r3, #0
    c42e:	d1c3      	bne.n	c3b8 <main+0xe4>
            }
            am_util_stdio_printf("Send out ALL AMic data! There're totally %d samples\n\n\r", g_ui32OutSamples); 
    c430:	4b3c      	ldr	r3, [pc, #240]	; (c524 <main+0x250>)
    c432:	681b      	ldr	r3, [r3, #0]
    c434:	4619      	mov	r1, r3
    c436:	4841      	ldr	r0, [pc, #260]	; (c53c <main+0x268>)
    c438:	f001 fe8c 	bl	e154 <am_util_stdio_printf>
            g_ui32OutSamples = 0;
    c43c:	4b39      	ldr	r3, [pc, #228]	; (c524 <main+0x250>)
    c43e:	2200      	movs	r2, #0
    c440:	601a      	str	r2, [r3, #0]

            }
            am_util_stdio_printf("Send out ALL DMic data! There're totally %d samples\n\r", g_ui32OutSamples); 
            g_ui32OutSamples = 0;
#endif // 0
            am_util_stdio_printf("All data were sended out...\n\n\n\r");
    c442:	483f      	ldr	r0, [pc, #252]	; (c540 <main+0x26c>)
    c444:	f001 fe86 	bl	e154 <am_util_stdio_printf>
        }
#endif // AM_APP_ANALOG_MIC

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c448:	4b3e      	ldr	r3, [pc, #248]	; (c544 <main+0x270>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c450:	d306      	bcc.n	c460 <main+0x18c>
        {
            g_ui32TimerCount = 0;
    c452:	4b3c      	ldr	r3, [pc, #240]	; (c544 <main+0x270>)
    c454:	2200      	movs	r2, #0
    c456:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c458:	2100      	movs	r1, #0
    c45a:	482e      	ldr	r0, [pc, #184]	; (c514 <main+0x240>)
    c45c:	f002 f9b8 	bl	e7d0 <am_devices_led_toggle>

//
// Board key interface for different procedure switch
//

        if((g_sysKeyValue == AM_APP_KEY_0) && (g_ui8ButtonPushedFlag == 1))
    c460:	4b39      	ldr	r3, [pc, #228]	; (c548 <main+0x274>)
    c462:	781b      	ldrb	r3, [r3, #0]
    c464:	b2db      	uxtb	r3, r3
    c466:	2b01      	cmp	r3, #1
    c468:	d123      	bne.n	c4b2 <main+0x1de>
    c46a:	4b38      	ldr	r3, [pc, #224]	; (c54c <main+0x278>)
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	b2db      	uxtb	r3, r3
    c470:	2b01      	cmp	r3, #1
    c472:	d11e      	bne.n	c4b2 <main+0x1de>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c474:	4b34      	ldr	r3, [pc, #208]	; (c548 <main+0x274>)
    c476:	2200      	movs	r2, #0
    c478:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c47a:	4b34      	ldr	r3, [pc, #208]	; (c54c <main+0x278>)
    c47c:	2200      	movs	r2, #0
    c47e:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
            }
#endif // AM_APP_MIC_CALIBRATION

#if AM_APP_ANALOG_MIC
            if(g_bAMicEvalFlag == false)
    c480:	4b1d      	ldr	r3, [pc, #116]	; (c4f8 <main+0x224>)
    c482:	781b      	ldrb	r3, [r3, #0]
    c484:	b2db      	uxtb	r3, r3
    c486:	f083 0301 	eor.w	r3, r3, #1
    c48a:	b2db      	uxtb	r3, r3
    c48c:	2b00      	cmp	r3, #0
    c48e:	d010      	beq.n	c4b2 <main+0x1de>
            {
                am_util_stdio_printf("Waiting 2 seconds to evaluate AMic and DMic...\r\n");
    c490:	482f      	ldr	r0, [pc, #188]	; (c550 <main+0x27c>)
    c492:	f001 fe5f 	bl	e154 <am_util_stdio_printf>
                am_util_delay_ms(2000);
    c496:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c49a:	f000 ff25 	bl	d2e8 <am_util_delay_ms>
                am_util_stdio_printf("Start to get audio data...\r\n");
    c49e:	482d      	ldr	r0, [pc, #180]	; (c554 <main+0x280>)
    c4a0:	f001 fe58 	bl	e154 <am_util_stdio_printf>
                am_devices_led_on(am_bsp_psLEDs, 1);
    c4a4:	2101      	movs	r1, #1
    c4a6:	481b      	ldr	r0, [pc, #108]	; (c514 <main+0x240>)
    c4a8:	f002 f919 	bl	e6de <am_devices_led_on>
                g_bAMicEvalFlag = true;
    c4ac:	4b12      	ldr	r3, [pc, #72]	; (c4f8 <main+0x224>)
    c4ae:	2201      	movs	r2, #1
    c4b0:	701a      	strb	r2, [r3, #0]
            }
#endif // AM_APP_ANALOG_MIC

        }

        if((g_sysKeyValue == AM_APP_KEY_1) && (g_ui8ButtonPushedFlag == 1))
    c4b2:	4b25      	ldr	r3, [pc, #148]	; (c548 <main+0x274>)
    c4b4:	781b      	ldrb	r3, [r3, #0]
    c4b6:	b2db      	uxtb	r3, r3
    c4b8:	2b02      	cmp	r3, #2
    c4ba:	f47f af13 	bne.w	c2e4 <main+0x10>
    c4be:	4b23      	ldr	r3, [pc, #140]	; (c54c <main+0x278>)
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	b2db      	uxtb	r3, r3
    c4c4:	2b01      	cmp	r3, #1
    c4c6:	f47f af0d 	bne.w	c2e4 <main+0x10>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c4ca:	4b1f      	ldr	r3, [pc, #124]	; (c548 <main+0x274>)
    c4cc:	2200      	movs	r2, #0
    c4ce:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c4d0:	4b1e      	ldr	r3, [pc, #120]	; (c54c <main+0x278>)
    c4d2:	2200      	movs	r2, #0
    c4d4:	701a      	strb	r2, [r3, #0]
        if (g_bADCDMAError)
    c4d6:	e705      	b.n	c2e4 <main+0x10>
    c4d8:	00010aa8 	.word	0x00010aa8
    c4dc:	1002beb4 	.word	0x1002beb4
    c4e0:	00010ad8 	.word	0x00010ad8
    c4e4:	1000ca71 	.word	0x1000ca71
    c4e8:	1000ca6c 	.word	0x1000ca6c
    c4ec:	00010aec 	.word	0x00010aec
    c4f0:	00010b1c 	.word	0x00010b1c
    c4f4:	1000c174 	.word	0x1000c174
    c4f8:	1000c175 	.word	0x1000c175
    c4fc:	1000c16a 	.word	0x1000c16a
    c500:	1000c170 	.word	0x1000c170
    c504:	00010b40 	.word	0x00010b40
    c508:	1000c16c 	.word	0x1000c16c
    c50c:	00010b60 	.word	0x00010b60
    c510:	00010b80 	.word	0x00010b80
    c514:	1000c00c 	.word	0x1000c00c
    c518:	00010ba0 	.word	0x00010ba0
    c51c:	1000c050 	.word	0x1000c050
    c520:	1002be8c 	.word	0x1002be8c
    c524:	1000c054 	.word	0x1000c054
    c528:	00010bc4 	.word	0x00010bc4
    c52c:	00010bec 	.word	0x00010bec
    c530:	00010c34 	.word	0x00010c34
    c534:	00010c38 	.word	0x00010c38
    c538:	1002be78 	.word	0x1002be78
    c53c:	00010c3c 	.word	0x00010c3c
    c540:	00010c74 	.word	0x00010c74
    c544:	1000c15c 	.word	0x1000c15c
    c548:	1000c168 	.word	0x1000c168
    c54c:	1000c169 	.word	0x1000c169
    c550:	00010c94 	.word	0x00010c94
    c554:	00010cc8 	.word	0x00010cc8

0000c558 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c558:	b480      	push	{r7}
    c55a:	b083      	sub	sp, #12
    c55c:	af00      	add	r7, sp, #0
    c55e:	6078      	str	r0, [r7, #4]
    c560:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c562:	687b      	ldr	r3, [r7, #4]
    c564:	2b00      	cmp	r3, #0
    c566:	d001      	beq.n	c56c <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c568:	2305      	movs	r3, #5
    c56a:	e048      	b.n	c5fe <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c56c:	683b      	ldr	r3, [r7, #0]
    c56e:	2b00      	cmp	r3, #0
    c570:	d101      	bne.n	c576 <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c572:	2306      	movs	r3, #6
    c574:	e043      	b.n	c5fe <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c576:	4925      	ldr	r1, [pc, #148]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c578:	687a      	ldr	r2, [r7, #4]
    c57a:	4613      	mov	r3, r2
    c57c:	005b      	lsls	r3, r3, #1
    c57e:	4413      	add	r3, r2
    c580:	009b      	lsls	r3, r3, #2
    c582:	440b      	add	r3, r1
    c584:	78db      	ldrb	r3, [r3, #3]
    c586:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c58a:	b2db      	uxtb	r3, r3
    c58c:	2b00      	cmp	r3, #0
    c58e:	d001      	beq.n	c594 <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c590:	2307      	movs	r3, #7
    c592:	e034      	b.n	c5fe <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c594:	491d      	ldr	r1, [pc, #116]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c596:	687a      	ldr	r2, [r7, #4]
    c598:	4613      	mov	r3, r2
    c59a:	005b      	lsls	r3, r3, #1
    c59c:	4413      	add	r3, r2
    c59e:	009b      	lsls	r3, r3, #2
    c5a0:	18ca      	adds	r2, r1, r3
    c5a2:	78d3      	ldrb	r3, [r2, #3]
    c5a4:	f043 0301 	orr.w	r3, r3, #1
    c5a8:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c5aa:	4918      	ldr	r1, [pc, #96]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c5ac:	687a      	ldr	r2, [r7, #4]
    c5ae:	4613      	mov	r3, r2
    c5b0:	005b      	lsls	r3, r3, #1
    c5b2:	4413      	add	r3, r2
    c5b4:	009b      	lsls	r3, r3, #2
    c5b6:	18ca      	adds	r2, r1, r3
    c5b8:	6813      	ldr	r3, [r2, #0]
    c5ba:	4915      	ldr	r1, [pc, #84]	; (c610 <am_hal_pdm_initialize+0xb8>)
    c5bc:	f361 0317 	bfi	r3, r1, #0, #24
    c5c0:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    c5c2:	4912      	ldr	r1, [pc, #72]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c5c4:	687a      	ldr	r2, [r7, #4]
    c5c6:	4613      	mov	r3, r2
    c5c8:	005b      	lsls	r3, r3, #1
    c5ca:	4413      	add	r3, r2
    c5cc:	009b      	lsls	r3, r3, #2
    c5ce:	440b      	add	r3, r1
    c5d0:	3308      	adds	r3, #8
    c5d2:	687a      	ldr	r2, [r7, #4]
    c5d4:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    c5d6:	490d      	ldr	r1, [pc, #52]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c5d8:	687a      	ldr	r2, [r7, #4]
    c5da:	4613      	mov	r3, r2
    c5dc:	005b      	lsls	r3, r3, #1
    c5de:	4413      	add	r3, r2
    c5e0:	009b      	lsls	r3, r3, #2
    c5e2:	440b      	add	r3, r1
    c5e4:	3304      	adds	r3, #4
    c5e6:	2200      	movs	r2, #0
    c5e8:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    c5ea:	687a      	ldr	r2, [r7, #4]
    c5ec:	4613      	mov	r3, r2
    c5ee:	005b      	lsls	r3, r3, #1
    c5f0:	4413      	add	r3, r2
    c5f2:	009b      	lsls	r3, r3, #2
    c5f4:	4a05      	ldr	r2, [pc, #20]	; (c60c <am_hal_pdm_initialize+0xb4>)
    c5f6:	441a      	add	r2, r3
    c5f8:	683b      	ldr	r3, [r7, #0]
    c5fa:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c5fc:	2300      	movs	r3, #0
}
    c5fe:	4618      	mov	r0, r3
    c600:	370c      	adds	r7, #12
    c602:	46bd      	mov	sp, r7
    c604:	f85d 7b04 	ldr.w	r7, [sp], #4
    c608:	4770      	bx	lr
    c60a:	bf00      	nop
    c60c:	1000c198 	.word	0x1000c198
    c610:	00f956e2 	.word	0x00f956e2

0000c614 <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    c614:	b580      	push	{r7, lr}
    c616:	b088      	sub	sp, #32
    c618:	af00      	add	r7, sp, #0
    c61a:	6078      	str	r0, [r7, #4]
    c61c:	460b      	mov	r3, r1
    c61e:	70fb      	strb	r3, [r7, #3]
    c620:	4613      	mov	r3, r2
    c622:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c624:	687b      	ldr	r3, [r7, #4]
    c626:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c628:	69fb      	ldr	r3, [r7, #28]
    c62a:	689b      	ldr	r3, [r3, #8]
    c62c:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    c62e:	69bb      	ldr	r3, [r7, #24]
    c630:	b2db      	uxtb	r3, r3
    c632:	330d      	adds	r3, #13
    c634:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c636:	687b      	ldr	r3, [r7, #4]
    c638:	2b00      	cmp	r3, #0
    c63a:	d00d      	beq.n	c658 <am_hal_pdm_power_control+0x44>
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	78db      	ldrb	r3, [r3, #3]
    c640:	f003 0301 	and.w	r3, r3, #1
    c644:	b2db      	uxtb	r3, r3
    c646:	2b00      	cmp	r3, #0
    c648:	d006      	beq.n	c658 <am_hal_pdm_power_control+0x44>
    c64a:	687b      	ldr	r3, [r7, #4]
    c64c:	681b      	ldr	r3, [r3, #0]
    c64e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c652:	4a23      	ldr	r2, [pc, #140]	; (c6e0 <am_hal_pdm_power_control+0xcc>)
    c654:	4293      	cmp	r3, r2
    c656:	d001      	beq.n	c65c <am_hal_pdm_power_control+0x48>
    c658:	2302      	movs	r3, #2
    c65a:	e03d      	b.n	c6d8 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    c65c:	78fb      	ldrb	r3, [r7, #3]
    c65e:	2b00      	cmp	r3, #0
    c660:	d004      	beq.n	c66c <am_hal_pdm_power_control+0x58>
    c662:	2b00      	cmp	r3, #0
    c664:	db34      	blt.n	c6d0 <am_hal_pdm_power_control+0xbc>
    c666:	2b02      	cmp	r3, #2
    c668:	dc32      	bgt.n	c6d0 <am_hal_pdm_power_control+0xbc>
    c66a:	e01e      	b.n	c6aa <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    c66c:	78bb      	ldrb	r3, [r7, #2]
    c66e:	2b00      	cmp	r3, #0
    c670:	d008      	beq.n	c684 <am_hal_pdm_power_control+0x70>
    c672:	69fb      	ldr	r3, [r7, #28]
    c674:	791b      	ldrb	r3, [r3, #4]
    c676:	f083 0301 	eor.w	r3, r3, #1
    c67a:	b2db      	uxtb	r3, r3
    c67c:	2b00      	cmp	r3, #0
    c67e:	d001      	beq.n	c684 <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    c680:	2307      	movs	r3, #7
    c682:	e029      	b.n	c6d8 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    c684:	7dfb      	ldrb	r3, [r7, #23]
    c686:	4618      	mov	r0, r3
    c688:	f003 fc7e 	bl	ff88 <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    c68c:	78bb      	ldrb	r3, [r7, #2]
    c68e:	2b00      	cmp	r3, #0
    c690:	d020      	beq.n	c6d4 <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    c692:	f003 fbdb 	bl	fe4c <am_hal_interrupt_master_disable>
    c696:	4603      	mov	r3, r0
    c698:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    c69a:	69fb      	ldr	r3, [r7, #28]
    c69c:	2200      	movs	r2, #0
    c69e:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c6a0:	693b      	ldr	r3, [r7, #16]
    c6a2:	4618      	mov	r0, r3
    c6a4:	f003 fbd6 	bl	fe54 <am_hal_interrupt_master_set>
            }
            break;
    c6a8:	e014      	b.n	c6d4 <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    c6aa:	78bb      	ldrb	r3, [r7, #2]
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d00a      	beq.n	c6c6 <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    c6b0:	f003 fbcc 	bl	fe4c <am_hal_interrupt_master_disable>
    c6b4:	4603      	mov	r3, r0
    c6b6:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    c6b8:	69fb      	ldr	r3, [r7, #28]
    c6ba:	2201      	movs	r2, #1
    c6bc:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c6be:	68fb      	ldr	r3, [r7, #12]
    c6c0:	4618      	mov	r0, r3
    c6c2:	f003 fbc7 	bl	fe54 <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    c6c6:	7dfb      	ldrb	r3, [r7, #23]
    c6c8:	4618      	mov	r0, r3
    c6ca:	f003 fc87 	bl	ffdc <am_hal_pwrctrl_periph_disable>
            break;
    c6ce:	e002      	b.n	c6d6 <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    c6d0:	2306      	movs	r3, #6
    c6d2:	e001      	b.n	c6d8 <am_hal_pdm_power_control+0xc4>
            break;
    c6d4:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c6d6:	2300      	movs	r3, #0
}
    c6d8:	4618      	mov	r0, r3
    c6da:	3720      	adds	r7, #32
    c6dc:	46bd      	mov	sp, r7
    c6de:	bd80      	pop	{r7, pc}
    c6e0:	00f956e2 	.word	0x00f956e2

0000c6e4 <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    c6e4:	b580      	push	{r7, lr}
    c6e6:	b088      	sub	sp, #32
    c6e8:	af00      	add	r7, sp, #0
    c6ea:	6078      	str	r0, [r7, #4]
    c6ec:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c6ee:	687b      	ldr	r3, [r7, #4]
    c6f0:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c6f2:	69fb      	ldr	r3, [r7, #28]
    c6f4:	689b      	ldr	r3, [r3, #8]
    c6f6:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c6f8:	687b      	ldr	r3, [r7, #4]
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d00d      	beq.n	c71a <am_hal_pdm_configure+0x36>
    c6fe:	687b      	ldr	r3, [r7, #4]
    c700:	78db      	ldrb	r3, [r3, #3]
    c702:	f003 0301 	and.w	r3, r3, #1
    c706:	b2db      	uxtb	r3, r3
    c708:	2b00      	cmp	r3, #0
    c70a:	d006      	beq.n	c71a <am_hal_pdm_configure+0x36>
    c70c:	687b      	ldr	r3, [r7, #4]
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c714:	4a5e      	ldr	r2, [pc, #376]	; (c890 <am_hal_pdm_configure+0x1ac>)
    c716:	4293      	cmp	r3, r2
    c718:	d001      	beq.n	c71e <am_hal_pdm_configure+0x3a>
    c71a:	2302      	movs	r3, #2
    c71c:	e0b4      	b.n	c888 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    c71e:	4a5d      	ldr	r2, [pc, #372]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c720:	683b      	ldr	r3, [r7, #0]
    c722:	7f59      	ldrb	r1, [r3, #29]
    c724:	6813      	ldr	r3, [r2, #0]
    c726:	f361 0341 	bfi	r3, r1, #1, #1
    c72a:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    c72c:	683b      	ldr	r3, [r7, #0]
    c72e:	699b      	ldr	r3, [r3, #24]
    c730:	4a58      	ldr	r2, [pc, #352]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c732:	f003 0307 	and.w	r3, r3, #7
    c736:	b2d9      	uxtb	r1, r3
    c738:	6813      	ldr	r3, [r2, #0]
    c73a:	f361 0384 	bfi	r3, r1, #2, #3
    c73e:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    c740:	683b      	ldr	r3, [r7, #0]
    c742:	68db      	ldr	r3, [r3, #12]
    c744:	4a53      	ldr	r2, [pc, #332]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c746:	f003 030f 	and.w	r3, r3, #15
    c74a:	b2d9      	uxtb	r1, r3
    c74c:	6813      	ldr	r3, [r2, #0]
    c74e:	f361 1348 	bfi	r3, r1, #5, #4
    c752:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    c754:	4a4f      	ldr	r2, [pc, #316]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c756:	683b      	ldr	r3, [r7, #0]
    c758:	7a19      	ldrb	r1, [r3, #8]
    c75a:	6813      	ldr	r3, [r2, #0]
    c75c:	f361 2349 	bfi	r3, r1, #9, #1
    c760:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    c762:	683b      	ldr	r3, [r7, #0]
    c764:	685b      	ldr	r3, [r3, #4]
    c766:	4a4b      	ldr	r2, [pc, #300]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c76c:	b2d9      	uxtb	r1, r3
    c76e:	6813      	ldr	r3, [r2, #0]
    c770:	f361 2390 	bfi	r3, r1, #10, #7
    c774:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    c776:	683b      	ldr	r3, [r7, #0]
    c778:	781b      	ldrb	r3, [r3, #0]
    c77a:	4a46      	ldr	r2, [pc, #280]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c77c:	f003 0303 	and.w	r3, r3, #3
    c780:	b2d9      	uxtb	r1, r3
    c782:	6813      	ldr	r3, [r2, #0]
    c784:	f361 4352 	bfi	r3, r1, #17, #2
    c788:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    c78a:	683b      	ldr	r3, [r7, #0]
    c78c:	785b      	ldrb	r3, [r3, #1]
    c78e:	4a41      	ldr	r2, [pc, #260]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c790:	f003 031f 	and.w	r3, r3, #31
    c794:	b2d9      	uxtb	r1, r3
    c796:	6813      	ldr	r3, [r2, #0]
    c798:	f361 5359 	bfi	r3, r1, #21, #5
    c79c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    c79e:	683b      	ldr	r3, [r7, #0]
    c7a0:	789b      	ldrb	r3, [r3, #2]
    c7a2:	4a3c      	ldr	r2, [pc, #240]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7a4:	f003 031f 	and.w	r3, r3, #31
    c7a8:	b2d9      	uxtb	r1, r3
    c7aa:	6813      	ldr	r3, [r2, #0]
    c7ac:	f361 639e 	bfi	r3, r1, #26, #5
    c7b0:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    c7b2:	4a38      	ldr	r2, [pc, #224]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7b4:	683b      	ldr	r3, [r7, #0]
    c7b6:	7f99      	ldrb	r1, [r3, #30]
    c7b8:	6813      	ldr	r3, [r2, #0]
    c7ba:	f361 73df 	bfi	r3, r1, #31, #1
    c7be:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    c7c0:	4a34      	ldr	r2, [pc, #208]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7c2:	6813      	ldr	r3, [r2, #0]
    c7c4:	f043 0301 	orr.w	r3, r3, #1
    c7c8:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    c7ca:	4a32      	ldr	r2, [pc, #200]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7cc:	6853      	ldr	r3, [r2, #4]
    c7ce:	f36f 639a 	bfc	r3, #26, #1
    c7d2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    c7d4:	4a2f      	ldr	r2, [pc, #188]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7d6:	6853      	ldr	r3, [r2, #4]
    c7d8:	f36f 73df 	bfc	r3, #31, #1
    c7dc:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    c7de:	4a2d      	ldr	r2, [pc, #180]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7e0:	6853      	ldr	r3, [r2, #4]
    c7e2:	f36f 739e 	bfc	r3, #30, #1
    c7e6:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    c7e8:	683b      	ldr	r3, [r7, #0]
    c7ea:	7d5b      	ldrb	r3, [r3, #21]
    c7ec:	4a29      	ldr	r2, [pc, #164]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7ee:	f003 0303 	and.w	r3, r3, #3
    c7f2:	b2d9      	uxtb	r1, r3
    c7f4:	6853      	ldr	r3, [r2, #4]
    c7f6:	f361 03c4 	bfi	r3, r1, #3, #2
    c7fa:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    c7fc:	4a25      	ldr	r2, [pc, #148]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c7fe:	683b      	ldr	r3, [r7, #0]
    c800:	7d19      	ldrb	r1, [r3, #20]
    c802:	6853      	ldr	r3, [r2, #4]
    c804:	f361 2308 	bfi	r3, r1, #8, #1
    c808:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    c80a:	683b      	ldr	r3, [r7, #0]
    c80c:	7c9b      	ldrb	r3, [r3, #18]
    c80e:	4a21      	ldr	r2, [pc, #132]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c810:	f003 0301 	and.w	r3, r3, #1
    c814:	b2d9      	uxtb	r1, r3
    c816:	6853      	ldr	r3, [r2, #4]
    c818:	f361 4310 	bfi	r3, r1, #16, #1
    c81c:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    c81e:	4a1d      	ldr	r2, [pc, #116]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c820:	683b      	ldr	r3, [r7, #0]
    c822:	7cd9      	ldrb	r1, [r3, #19]
    c824:	6853      	ldr	r3, [r2, #4]
    c826:	f361 4351 	bfi	r3, r1, #17, #1
    c82a:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    c82c:	4a19      	ldr	r2, [pc, #100]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c82e:	683b      	ldr	r3, [r7, #0]
    c830:	7c59      	ldrb	r1, [r3, #17]
    c832:	6853      	ldr	r3, [r2, #4]
    c834:	f361 43d3 	bfi	r3, r1, #19, #1
    c838:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    c83a:	4a16      	ldr	r2, [pc, #88]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c83c:	683b      	ldr	r3, [r7, #0]
    c83e:	7f19      	ldrb	r1, [r3, #28]
    c840:	6853      	ldr	r3, [r2, #4]
    c842:	f361 5314 	bfi	r3, r1, #20, #1
    c846:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    c848:	683b      	ldr	r3, [r7, #0]
    c84a:	7c1b      	ldrb	r3, [r3, #16]
    c84c:	4a11      	ldr	r2, [pc, #68]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c84e:	f003 0307 	and.w	r3, r3, #7
    c852:	b2d9      	uxtb	r1, r3
    c854:	6853      	ldr	r3, [r2, #4]
    c856:	f361 63dd 	bfi	r3, r1, #27, #3
    c85a:	6053      	str	r3, [r2, #4]

    delay_us(100);
    c85c:	f107 030c 	add.w	r3, r7, #12
    c860:	4618      	mov	r0, r3
    c862:	f003 f943 	bl	faec <am_hal_clkgen_status_get>
    c866:	68fb      	ldr	r3, [r7, #12]
    c868:	4a0b      	ldr	r2, [pc, #44]	; (c898 <am_hal_pdm_configure+0x1b4>)
    c86a:	fba2 2303 	umull	r2, r3, r2, r3
    c86e:	0c9b      	lsrs	r3, r3, #18
    c870:	2264      	movs	r2, #100	; 0x64
    c872:	fb02 f303 	mul.w	r3, r2, r3
    c876:	4618      	mov	r0, r3
    c878:	f003 fa90 	bl	fd9c <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    c87c:	4a05      	ldr	r2, [pc, #20]	; (c894 <am_hal_pdm_configure+0x1b0>)
    c87e:	6853      	ldr	r3, [r2, #4]
    c880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c884:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c886:	2300      	movs	r3, #0
}
    c888:	4618      	mov	r0, r3
    c88a:	3720      	adds	r7, #32
    c88c:	46bd      	mov	sp, r7
    c88e:	bd80      	pop	{r7, pc}
    c890:	00f956e2 	.word	0x00f956e2
    c894:	50011000 	.word	0x50011000
    c898:	165e9f81 	.word	0x165e9f81

0000c89c <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    c89c:	b480      	push	{r7}
    c89e:	b085      	sub	sp, #20
    c8a0:	af00      	add	r7, sp, #0
    c8a2:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c8a8:	68fb      	ldr	r3, [r7, #12]
    c8aa:	689b      	ldr	r3, [r3, #8]
    c8ac:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c8ae:	687b      	ldr	r3, [r7, #4]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d00d      	beq.n	c8d0 <am_hal_pdm_enable+0x34>
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	78db      	ldrb	r3, [r3, #3]
    c8b8:	f003 0301 	and.w	r3, r3, #1
    c8bc:	b2db      	uxtb	r3, r3
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d006      	beq.n	c8d0 <am_hal_pdm_enable+0x34>
    c8c2:	687b      	ldr	r3, [r7, #4]
    c8c4:	681b      	ldr	r3, [r3, #0]
    c8c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c8ca:	4a0b      	ldr	r2, [pc, #44]	; (c8f8 <am_hal_pdm_enable+0x5c>)
    c8cc:	4293      	cmp	r3, r2
    c8ce:	d001      	beq.n	c8d4 <am_hal_pdm_enable+0x38>
    c8d0:	2302      	movs	r3, #2
    c8d2:	e00a      	b.n	c8ea <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    c8d4:	4a09      	ldr	r2, [pc, #36]	; (c8fc <am_hal_pdm_enable+0x60>)
    c8d6:	6853      	ldr	r3, [r2, #4]
    c8d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c8dc:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    c8de:	4a07      	ldr	r2, [pc, #28]	; (c8fc <am_hal_pdm_enable+0x60>)
    c8e0:	6853      	ldr	r3, [r2, #4]
    c8e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c8e6:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c8e8:	2300      	movs	r3, #0
}
    c8ea:	4618      	mov	r0, r3
    c8ec:	3714      	adds	r7, #20
    c8ee:	46bd      	mov	sp, r7
    c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8f4:	4770      	bx	lr
    c8f6:	bf00      	nop
    c8f8:	00f956e2 	.word	0x00f956e2
    c8fc:	50011000 	.word	0x50011000

0000c900 <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    c900:	b480      	push	{r7}
    c902:	b087      	sub	sp, #28
    c904:	af00      	add	r7, sp, #0
    c906:	6078      	str	r0, [r7, #4]
    c908:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c90e:	68fb      	ldr	r3, [r7, #12]
    c910:	689b      	ldr	r3, [r3, #8]
    c912:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	2b00      	cmp	r3, #0
    c918:	d00d      	beq.n	c936 <am_hal_pdm_dma_start+0x36>
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	78db      	ldrb	r3, [r3, #3]
    c91e:	f003 0301 	and.w	r3, r3, #1
    c922:	b2db      	uxtb	r3, r3
    c924:	2b00      	cmp	r3, #0
    c926:	d006      	beq.n	c936 <am_hal_pdm_dma_start+0x36>
    c928:	687b      	ldr	r3, [r7, #4]
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c930:	4a33      	ldr	r2, [pc, #204]	; (ca00 <am_hal_pdm_dma_start+0x100>)
    c932:	4293      	cmp	r3, r2
    c934:	d001      	beq.n	c93a <am_hal_pdm_dma_start+0x3a>
    c936:	2302      	movs	r3, #2
    c938:	e05b      	b.n	c9f2 <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    c93a:	2300      	movs	r3, #0
    c93c:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    c93e:	2301      	movs	r3, #1
    c940:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c942:	2301      	movs	r3, #1
    c944:	613b      	str	r3, [r7, #16]
    c946:	e01b      	b.n	c980 <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c948:	683b      	ldr	r3, [r7, #0]
    c94a:	685b      	ldr	r3, [r3, #4]
    c94c:	693a      	ldr	r2, [r7, #16]
    c94e:	fbb3 f2f2 	udiv	r2, r3, r2
    c952:	6939      	ldr	r1, [r7, #16]
    c954:	fb01 f202 	mul.w	r2, r1, r2
    c958:	1a9b      	subs	r3, r3, r2
    c95a:	2b00      	cmp	r3, #0
    c95c:	d10d      	bne.n	c97a <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    c95e:	683b      	ldr	r3, [r7, #0]
    c960:	685a      	ldr	r2, [r3, #4]
    c962:	693b      	ldr	r3, [r7, #16]
    c964:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c968:	2b1f      	cmp	r3, #31
    c96a:	d806      	bhi.n	c97a <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    c96c:	683b      	ldr	r3, [r7, #0]
    c96e:	685a      	ldr	r2, [r3, #4]
    c970:	693b      	ldr	r3, [r7, #16]
    c972:	fbb2 f3f3 	udiv	r3, r2, r3
    c976:	617b      	str	r3, [r7, #20]
            break;
    c978:	e007      	b.n	c98a <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c97a:	693b      	ldr	r3, [r7, #16]
    c97c:	3301      	adds	r3, #1
    c97e:	613b      	str	r3, [r7, #16]
    c980:	683b      	ldr	r3, [r7, #0]
    c982:	685b      	ldr	r3, [r3, #4]
    c984:	693a      	ldr	r2, [r7, #16]
    c986:	429a      	cmp	r2, r3
    c988:	d3de      	bcc.n	c948 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    c98a:	697b      	ldr	r3, [r7, #20]
    c98c:	2b00      	cmp	r3, #0
    c98e:	d102      	bne.n	c996 <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    c990:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c994:	e02d      	b.n	c9f2 <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    c996:	4a1b      	ldr	r2, [pc, #108]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c998:	697b      	ldr	r3, [r7, #20]
    c99a:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    c99c:	4b19      	ldr	r3, [pc, #100]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c99e:	2200      	movs	r2, #0
    c9a0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    c9a4:	4a17      	ldr	r2, [pc, #92]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9a6:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9aa:	f36f 2308 	bfc	r3, #8, #1
    c9ae:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    c9b2:	4a14      	ldr	r2, [pc, #80]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9b4:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9b8:	f36f 0382 	bfc	r3, #2, #1
    c9bc:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    c9c0:	4a10      	ldr	r2, [pc, #64]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9c2:	683b      	ldr	r3, [r7, #0]
    c9c4:	685b      	ldr	r3, [r3, #4]
    c9c6:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    c9ca:	4a0e      	ldr	r2, [pc, #56]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9cc:	683b      	ldr	r3, [r7, #0]
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    c9d4:	4a0b      	ldr	r2, [pc, #44]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9d6:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    c9da:	f043 0301 	orr.w	r3, r3, #1
    c9de:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    c9e2:	4a08      	ldr	r2, [pc, #32]	; (ca04 <am_hal_pdm_dma_start+0x104>)
    c9e4:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9e8:	f043 0301 	orr.w	r3, r3, #1
    c9ec:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    c9f0:	2300      	movs	r3, #0
}
    c9f2:	4618      	mov	r0, r3
    c9f4:	371c      	adds	r7, #28
    c9f6:	46bd      	mov	sp, r7
    c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9fc:	4770      	bx	lr
    c9fe:	bf00      	nop
    ca00:	00f956e2 	.word	0x00f956e2
    ca04:	50011000 	.word	0x50011000

0000ca08 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    ca08:	b480      	push	{r7}
    ca0a:	b085      	sub	sp, #20
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca14:	68fb      	ldr	r3, [r7, #12]
    ca16:	689b      	ldr	r3, [r3, #8]
    ca18:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d00d      	beq.n	ca3c <am_hal_pdm_fifo_flush+0x34>
    ca20:	687b      	ldr	r3, [r7, #4]
    ca22:	78db      	ldrb	r3, [r3, #3]
    ca24:	f003 0301 	and.w	r3, r3, #1
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	d006      	beq.n	ca3c <am_hal_pdm_fifo_flush+0x34>
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	681b      	ldr	r3, [r3, #0]
    ca32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca36:	4a07      	ldr	r2, [pc, #28]	; (ca54 <am_hal_pdm_fifo_flush+0x4c>)
    ca38:	4293      	cmp	r3, r2
    ca3a:	d001      	beq.n	ca40 <am_hal_pdm_fifo_flush+0x38>
    ca3c:	2302      	movs	r3, #2
    ca3e:	e003      	b.n	ca48 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    ca40:	4b05      	ldr	r3, [pc, #20]	; (ca58 <am_hal_pdm_fifo_flush+0x50>)
    ca42:	2201      	movs	r2, #1
    ca44:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    ca46:	2300      	movs	r3, #0
}
    ca48:	4618      	mov	r0, r3
    ca4a:	3714      	adds	r7, #20
    ca4c:	46bd      	mov	sp, r7
    ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca52:	4770      	bx	lr
    ca54:	00f956e2 	.word	0x00f956e2
    ca58:	50011000 	.word	0x50011000

0000ca5c <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    ca5c:	b480      	push	{r7}
    ca5e:	b085      	sub	sp, #20
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
    ca64:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca6a:	68fb      	ldr	r3, [r7, #12]
    ca6c:	689b      	ldr	r3, [r3, #8]
    ca6e:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d00d      	beq.n	ca92 <am_hal_pdm_interrupt_enable+0x36>
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	78db      	ldrb	r3, [r3, #3]
    ca7a:	f003 0301 	and.w	r3, r3, #1
    ca7e:	b2db      	uxtb	r3, r3
    ca80:	2b00      	cmp	r3, #0
    ca82:	d006      	beq.n	ca92 <am_hal_pdm_interrupt_enable+0x36>
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	681b      	ldr	r3, [r3, #0]
    ca88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca8c:	4a09      	ldr	r2, [pc, #36]	; (cab4 <am_hal_pdm_interrupt_enable+0x58>)
    ca8e:	4293      	cmp	r3, r2
    ca90:	d001      	beq.n	ca96 <am_hal_pdm_interrupt_enable+0x3a>
    ca92:	2302      	movs	r3, #2
    ca94:	e008      	b.n	caa8 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    ca96:	4b08      	ldr	r3, [pc, #32]	; (cab8 <am_hal_pdm_interrupt_enable+0x5c>)
    ca98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ca9c:	4906      	ldr	r1, [pc, #24]	; (cab8 <am_hal_pdm_interrupt_enable+0x5c>)
    ca9e:	683b      	ldr	r3, [r7, #0]
    caa0:	4313      	orrs	r3, r2
    caa2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    caa6:	2300      	movs	r3, #0
}
    caa8:	4618      	mov	r0, r3
    caaa:	3714      	adds	r7, #20
    caac:	46bd      	mov	sp, r7
    caae:	f85d 7b04 	ldr.w	r7, [sp], #4
    cab2:	4770      	bx	lr
    cab4:	00f956e2 	.word	0x00f956e2
    cab8:	50011000 	.word	0x50011000

0000cabc <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    cabc:	b480      	push	{r7}
    cabe:	b085      	sub	sp, #20
    cac0:	af00      	add	r7, sp, #0
    cac2:	6078      	str	r0, [r7, #4]
    cac4:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    caca:	68fb      	ldr	r3, [r7, #12]
    cacc:	689b      	ldr	r3, [r3, #8]
    cace:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d00d      	beq.n	caf2 <am_hal_pdm_interrupt_clear+0x36>
    cad6:	687b      	ldr	r3, [r7, #4]
    cad8:	78db      	ldrb	r3, [r3, #3]
    cada:	f003 0301 	and.w	r3, r3, #1
    cade:	b2db      	uxtb	r3, r3
    cae0:	2b00      	cmp	r3, #0
    cae2:	d006      	beq.n	caf2 <am_hal_pdm_interrupt_clear+0x36>
    cae4:	687b      	ldr	r3, [r7, #4]
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    caec:	4a07      	ldr	r2, [pc, #28]	; (cb0c <am_hal_pdm_interrupt_clear+0x50>)
    caee:	4293      	cmp	r3, r2
    caf0:	d001      	beq.n	caf6 <am_hal_pdm_interrupt_clear+0x3a>
    caf2:	2302      	movs	r3, #2
    caf4:	e004      	b.n	cb00 <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    caf6:	4a06      	ldr	r2, [pc, #24]	; (cb10 <am_hal_pdm_interrupt_clear+0x54>)
    caf8:	683b      	ldr	r3, [r7, #0]
    cafa:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    cafe:	2300      	movs	r3, #0
}
    cb00:	4618      	mov	r0, r3
    cb02:	3714      	adds	r7, #20
    cb04:	46bd      	mov	sp, r7
    cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb0a:	4770      	bx	lr
    cb0c:	00f956e2 	.word	0x00f956e2
    cb10:	50011000 	.word	0x50011000

0000cb14 <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    cb14:	b480      	push	{r7}
    cb16:	b087      	sub	sp, #28
    cb18:	af00      	add	r7, sp, #0
    cb1a:	60f8      	str	r0, [r7, #12]
    cb1c:	60b9      	str	r1, [r7, #8]
    cb1e:	4613      	mov	r3, r2
    cb20:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    cb26:	697b      	ldr	r3, [r7, #20]
    cb28:	689b      	ldr	r3, [r3, #8]
    cb2a:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb2c:	68fb      	ldr	r3, [r7, #12]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d00d      	beq.n	cb4e <am_hal_pdm_interrupt_status_get+0x3a>
    cb32:	68fb      	ldr	r3, [r7, #12]
    cb34:	78db      	ldrb	r3, [r3, #3]
    cb36:	f003 0301 	and.w	r3, r3, #1
    cb3a:	b2db      	uxtb	r3, r3
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d006      	beq.n	cb4e <am_hal_pdm_interrupt_status_get+0x3a>
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb48:	4a10      	ldr	r2, [pc, #64]	; (cb8c <am_hal_pdm_interrupt_status_get+0x78>)
    cb4a:	4293      	cmp	r3, r2
    cb4c:	d001      	beq.n	cb52 <am_hal_pdm_interrupt_status_get+0x3e>
    cb4e:	2302      	movs	r3, #2
    cb50:	e016      	b.n	cb80 <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    cb52:	79fb      	ldrb	r3, [r7, #7]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d00d      	beq.n	cb74 <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb58:	4b0d      	ldr	r3, [pc, #52]	; (cb90 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb5e:	68bb      	ldr	r3, [r7, #8]
    cb60:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    cb62:	4b0b      	ldr	r3, [pc, #44]	; (cb90 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cb68:	68bb      	ldr	r3, [r7, #8]
    cb6a:	681b      	ldr	r3, [r3, #0]
    cb6c:	401a      	ands	r2, r3
    cb6e:	68bb      	ldr	r3, [r7, #8]
    cb70:	601a      	str	r2, [r3, #0]
    cb72:	e004      	b.n	cb7e <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb74:	4b06      	ldr	r3, [pc, #24]	; (cb90 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb7a:	68bb      	ldr	r3, [r7, #8]
    cb7c:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    cb7e:	2300      	movs	r3, #0
}
    cb80:	4618      	mov	r0, r3
    cb82:	371c      	adds	r7, #28
    cb84:	46bd      	mov	sp, r7
    cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb8a:	4770      	bx	lr
    cb8c:	00f956e2 	.word	0x00f956e2
    cb90:	50011000 	.word	0x50011000

0000cb94 <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    cb94:	b480      	push	{r7}
    cb96:	b085      	sub	sp, #20
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
    cb9c:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    cb9e:	687b      	ldr	r3, [r7, #4]
    cba0:	681b      	ldr	r3, [r3, #0]
    cba2:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    cba4:	683b      	ldr	r3, [r7, #0]
    cba6:	681b      	ldr	r3, [r3, #0]
    cba8:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    cbaa:	68fa      	ldr	r2, [r7, #12]
    cbac:	68bb      	ldr	r3, [r7, #8]
    cbae:	429a      	cmp	r2, r3
    cbb0:	bf0c      	ite	eq
    cbb2:	2301      	moveq	r3, #1
    cbb4:	2300      	movne	r3, #0
    cbb6:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    cbb8:	4618      	mov	r0, r3
    cbba:	3714      	adds	r7, #20
    cbbc:	46bd      	mov	sp, r7
    cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbc2:	4770      	bx	lr

0000cbc4 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    cbc4:	b580      	push	{r7, lr}
    cbc6:	b092      	sub	sp, #72	; 0x48
    cbc8:	af00      	add	r7, sp, #0
    cbca:	6078      	str	r0, [r7, #4]
    cbcc:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    cbce:	2300      	movs	r3, #0
    cbd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	2b31      	cmp	r3, #49	; 0x31
    cbd8:	d901      	bls.n	cbde <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cbda:	2306      	movs	r3, #6
    cbdc:	e1ba      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    cbde:	2300      	movs	r3, #0
    cbe0:	643b      	str	r3, [r7, #64]	; 0x40
    cbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cbe4:	647b      	str	r3, [r7, #68]	; 0x44
    cbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    cbea:	783b      	ldrb	r3, [r7, #0]
    cbec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbf0:	b2db      	uxtb	r3, r3
    cbf2:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    cbf4:	783b      	ldrb	r3, [r7, #0]
    cbf6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cbfa:	b2db      	uxtb	r3, r3
    cbfc:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc00:	00db      	lsls	r3, r3, #3
    cc02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cc04:	4313      	orrs	r3, r2
    cc06:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    cc08:	783b      	ldrb	r3, [r7, #0]
    cc0a:	f023 031f 	bic.w	r3, r3, #31
    cc0e:	b2db      	uxtb	r3, r3
    cc10:	2b00      	cmp	r3, #0
    cc12:	d039      	beq.n	cc88 <am_hal_gpio_pinconfig+0xc4>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    cc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc16:	f043 0301 	orr.w	r3, r3, #1
    cc1a:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc1c:	783b      	ldrb	r3, [r7, #0]
    cc1e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc22:	b2db      	uxtb	r3, r3
    cc24:	2b01      	cmp	r3, #1
    cc26:	d919      	bls.n	cc5c <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    cc28:	783b      	ldrb	r3, [r7, #0]
    cc2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc2e:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc30:	2b05      	cmp	r3, #5
    cc32:	d813      	bhi.n	cc5c <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    cc34:	783b      	ldrb	r3, [r7, #0]
    cc36:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc3a:	b2db      	uxtb	r3, r3
    cc3c:	3b02      	subs	r3, #2
    cc3e:	019b      	lsls	r3, r3, #6
    cc40:	461a      	mov	r2, r3
    cc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc44:	4313      	orrs	r3, r2
    cc46:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    cc48:	4a79      	ldr	r2, [pc, #484]	; (ce30 <am_hal_gpio_pinconfig+0x26c>)
    cc4a:	687b      	ldr	r3, [r7, #4]
    cc4c:	4413      	add	r3, r2
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	f003 0301 	and.w	r3, r3, #1
    cc54:	2b00      	cmp	r3, #0
    cc56:	d117      	bne.n	cc88 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc58:	4b76      	ldr	r3, [pc, #472]	; (ce34 <am_hal_gpio_pinconfig+0x270>)
    cc5a:	e17b      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    cc5c:	783b      	ldrb	r3, [r7, #0]
    cc5e:	f023 031f 	bic.w	r3, r3, #31
    cc62:	b2db      	uxtb	r3, r3
    cc64:	2bc0      	cmp	r3, #192	; 0xc0
    cc66:	d104      	bne.n	cc72 <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    cc68:	687b      	ldr	r3, [r7, #4]
    cc6a:	2b14      	cmp	r3, #20
    cc6c:	d00c      	beq.n	cc88 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    cc6e:	4b72      	ldr	r3, [pc, #456]	; (ce38 <am_hal_gpio_pinconfig+0x274>)
    cc70:	e170      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    cc72:	783b      	ldrb	r3, [r7, #0]
    cc74:	f023 031f 	bic.w	r3, r3, #31
    cc78:	b2db      	uxtb	r3, r3
    cc7a:	2b20      	cmp	r3, #32
    cc7c:	d104      	bne.n	cc88 <am_hal_gpio_pinconfig+0xc4>
        {
            //
            // All pads except 20 support a weak pullup, for which we only need
            // to set PADnPULL and clear 7:6 (already done at this point).
            //
            if ( ui32Pin == 20 )
    cc7e:	687b      	ldr	r3, [r7, #4]
    cc80:	2b14      	cmp	r3, #20
    cc82:	d101      	bne.n	cc88 <am_hal_gpio_pinconfig+0xc4>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc84:	4b6b      	ldr	r3, [pc, #428]	; (ce34 <am_hal_gpio_pinconfig+0x270>)
    cc86:	e165      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d021      	beq.n	ccd2 <am_hal_gpio_pinconfig+0x10e>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc90:	2b01      	cmp	r3, #1
    cc92:	d10c      	bne.n	ccae <am_hal_gpio_pinconfig+0xea>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    cc94:	4a66      	ldr	r2, [pc, #408]	; (ce30 <am_hal_gpio_pinconfig+0x26c>)
    cc96:	687b      	ldr	r3, [r7, #4]
    cc98:	4413      	add	r3, r2
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cca0:	2b00      	cmp	r3, #0
    cca2:	d004      	beq.n	ccae <am_hal_gpio_pinconfig+0xea>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    cca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ccaa:	647b      	str	r3, [r7, #68]	; 0x44
    ccac:	e011      	b.n	ccd2 <am_hal_gpio_pinconfig+0x10e>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccb0:	2b02      	cmp	r3, #2
    ccb2:	d10c      	bne.n	ccce <am_hal_gpio_pinconfig+0x10a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    ccb4:	4a5e      	ldr	r2, [pc, #376]	; (ce30 <am_hal_gpio_pinconfig+0x26c>)
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	4413      	add	r3, r2
    ccba:	781b      	ldrb	r3, [r3, #0]
    ccbc:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d004      	beq.n	ccce <am_hal_gpio_pinconfig+0x10a>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    ccc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ccca:	647b      	str	r3, [r7, #68]	; 0x44
    cccc:	e001      	b.n	ccd2 <am_hal_gpio_pinconfig+0x10e>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    ccce:	4b5b      	ldr	r3, [pc, #364]	; (ce3c <am_hal_gpio_pinconfig+0x278>)
    ccd0:	e140      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ccd2:	4a5b      	ldr	r2, [pc, #364]	; (ce40 <am_hal_gpio_pinconfig+0x27c>)
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	4413      	add	r3, r2
    ccd8:	781b      	ldrb	r3, [r3, #0]
    ccda:	461a      	mov	r2, r3
    ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccde:	fa42 f303 	asr.w	r3, r2, r3
    cce2:	005b      	lsls	r3, r3, #1
    cce4:	f003 0302 	and.w	r3, r3, #2
    cce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ccea:	4313      	orrs	r3, r2
    ccec:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ccee:	4a55      	ldr	r2, [pc, #340]	; (ce44 <am_hal_gpio_pinconfig+0x280>)
    ccf0:	687b      	ldr	r3, [r7, #4]
    ccf2:	4413      	add	r3, r2
    ccf4:	781b      	ldrb	r3, [r3, #0]
    ccf6:	461a      	mov	r2, r3
    ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccfa:	4293      	cmp	r3, r2
    ccfc:	d13d      	bne.n	cd7a <am_hal_gpio_pinconfig+0x1b6>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    ccfe:	78bb      	ldrb	r3, [r7, #2]
    cd00:	f003 0307 	and.w	r3, r3, #7
    cd04:	b2db      	uxtb	r3, r3
    cd06:	2b07      	cmp	r3, #7
    cd08:	d101      	bne.n	cd0e <am_hal_gpio_pinconfig+0x14a>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    cd0a:	4b4f      	ldr	r3, [pc, #316]	; (ce48 <am_hal_gpio_pinconfig+0x284>)
    cd0c:	e122      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    cd0e:	78bb      	ldrb	r3, [r7, #2]
    cd10:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cd14:	b2db      	uxtb	r3, r3
    cd16:	011b      	lsls	r3, r3, #4
    cd18:	b25a      	sxtb	r2, r3
    cd1a:	78bb      	ldrb	r3, [r7, #2]
    cd1c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cd20:	b2db      	uxtb	r3, r3
    cd22:	b25b      	sxtb	r3, r3
    cd24:	4313      	orrs	r3, r2
    cd26:	b25b      	sxtb	r3, r3
    cd28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd2c:	2300      	movs	r3, #0
    cd2e:	637b      	str	r3, [r7, #52]	; 0x34
    cd30:	e00d      	b.n	cd4e <am_hal_gpio_pinconfig+0x18a>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    cd32:	4a46      	ldr	r2, [pc, #280]	; (ce4c <am_hal_gpio_pinconfig+0x288>)
    cd34:	687b      	ldr	r3, [r7, #4]
    cd36:	009b      	lsls	r3, r3, #2
    cd38:	441a      	add	r2, r3
    cd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd3c:	4413      	add	r3, r2
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cd44:	429a      	cmp	r2, r3
    cd46:	d006      	beq.n	cd56 <am_hal_gpio_pinconfig+0x192>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd4a:	3301      	adds	r3, #1
    cd4c:	637b      	str	r3, [r7, #52]	; 0x34
    cd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd50:	2b03      	cmp	r3, #3
    cd52:	d9ee      	bls.n	cd32 <am_hal_gpio_pinconfig+0x16e>
    cd54:	e000      	b.n	cd58 <am_hal_gpio_pinconfig+0x194>
            {
                break;
    cd56:	bf00      	nop
            }
        }

#ifndef AM_HAL_DISABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    cd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd5a:	2b03      	cmp	r3, #3
    cd5c:	d901      	bls.n	cd62 <am_hal_gpio_pinconfig+0x19e>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    cd5e:	4b3c      	ldr	r3, [pc, #240]	; (ce50 <am_hal_gpio_pinconfig+0x28c>)
    cd60:	e0f8      	b.n	cf54 <am_hal_gpio_pinconfig+0x390>
        }
#endif // AM_HAL_DISABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd64:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    cd66:	78ba      	ldrb	r2, [r7, #2]
    cd68:	f3c2 1240 	ubfx	r2, r2, #5, #1
    cd6c:	b2d2      	uxtb	r2, r2
    cd6e:	00d2      	lsls	r2, r2, #3
    cd70:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cd74:	4313      	orrs	r3, r2
    cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
    cd78:	e044      	b.n	ce04 <am_hal_gpio_pinconfig+0x240>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    cd7a:	787b      	ldrb	r3, [r7, #1]
    cd7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    cd80:	b2db      	uxtb	r3, r3
    cd82:	005b      	lsls	r3, r3, #1
    cd84:	461a      	mov	r2, r3
    cd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd88:	4313      	orrs	r3, r2
    cd8a:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cd8c:	787b      	ldrb	r3, [r7, #1]
    cd8e:	f3c3 0381 	ubfx	r3, r3, #2, #2
    cd92:	b2db      	uxtb	r3, r3
    cd94:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cd96:	787b      	ldrb	r3, [r7, #1]
    cd98:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cd9c:	b2db      	uxtb	r3, r3
    cd9e:	00db      	lsls	r3, r3, #3
    cda0:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cda4:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    cda6:	787b      	ldrb	r3, [r7, #1]
    cda8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cdac:	b2db      	uxtb	r3, r3
    cdae:	105b      	asrs	r3, r3, #1
    cdb0:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cdb4:	4313      	orrs	r3, r2
    cdb6:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdba:	4313      	orrs	r3, r2
    cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cdbe:	787b      	ldrb	r3, [r7, #1]
    cdc0:	f003 030c 	and.w	r3, r3, #12
    cdc4:	b2db      	uxtb	r3, r3
    cdc6:	2b04      	cmp	r3, #4
    cdc8:	d007      	beq.n	cdda <am_hal_gpio_pinconfig+0x216>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    cdca:	463b      	mov	r3, r7
    cdcc:	4921      	ldr	r1, [pc, #132]	; (ce54 <am_hal_gpio_pinconfig+0x290>)
    cdce:	4618      	mov	r0, r3
    cdd0:	f7ff fee0 	bl	cb94 <pincfg_equ>
    cdd4:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	d002      	beq.n	cde0 <am_hal_gpio_pinconfig+0x21c>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    cdda:	2301      	movs	r3, #1
    cddc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    cde0:	787b      	ldrb	r3, [r7, #1]
    cde2:	f003 0360 	and.w	r3, r3, #96	; 0x60
    cde6:	b2db      	uxtb	r3, r3
    cde8:	2b00      	cmp	r3, #0
    cdea:	d10b      	bne.n	ce04 <am_hal_gpio_pinconfig+0x240>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdee:	f023 0301 	bic.w	r3, r3, #1
    cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    cdf4:	787b      	ldrb	r3, [r7, #1]
    cdf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdfa:	b2db      	uxtb	r3, r3
    cdfc:	461a      	mov	r2, r3
    cdfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce00:	4313      	orrs	r3, r2
    ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    ce04:	787b      	ldrb	r3, [r7, #1]
    ce06:	f3c3 0301 	ubfx	r3, r3, #0, #2
    ce0a:	b2db      	uxtb	r3, r3
    ce0c:	2b02      	cmp	r3, #2
    ce0e:	d009      	beq.n	ce24 <am_hal_gpio_pinconfig+0x260>
    ce10:	2b03      	cmp	r3, #3
    ce12:	d021      	beq.n	ce58 <am_hal_gpio_pinconfig+0x294>
    ce14:	2b01      	cmp	r3, #1
    ce16:	d000      	beq.n	ce1a <am_hal_gpio_pinconfig+0x256>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    ce18:	e027      	b.n	ce6a <am_hal_gpio_pinconfig+0x2a6>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce1c:	f043 0304 	orr.w	r3, r3, #4
    ce20:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    ce22:	e022      	b.n	ce6a <am_hal_gpio_pinconfig+0x2a6>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    ce24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce26:	f043 0301 	orr.w	r3, r3, #1
    ce2a:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce2c:	e01d      	b.n	ce6a <am_hal_gpio_pinconfig+0x2a6>
    ce2e:	bf00      	nop
    ce30:	000110a8 	.word	0x000110a8
    ce34:	08000100 	.word	0x08000100
    ce38:	08000101 	.word	0x08000101
    ce3c:	08000102 	.word	0x08000102
    ce40:	00011074 	.word	0x00011074
    ce44:	000110dc 	.word	0x000110dc
    ce48:	08000103 	.word	0x08000103
    ce4c:	00011110 	.word	0x00011110
    ce50:	08000104 	.word	0x08000104
    ce54:	00011068 	.word	0x00011068
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce5a:	f043 0304 	orr.w	r3, r3, #4
    ce5e:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    ce60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce62:	f043 0301 	orr.w	r3, r3, #1
    ce66:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce68:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    ce6a:	687b      	ldr	r3, [r7, #4]
    ce6c:	085b      	lsrs	r3, r3, #1
    ce6e:	f023 0203 	bic.w	r2, r3, #3
    ce72:	4b3a      	ldr	r3, [pc, #232]	; (cf5c <am_hal_gpio_pinconfig+0x398>)
    ce74:	4413      	add	r3, r2
    ce76:	627b      	str	r3, [r7, #36]	; 0x24
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    ce78:	687b      	ldr	r3, [r7, #4]
    ce7a:	f023 0303 	bic.w	r3, r3, #3
    ce7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ce82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ce86:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	f023 0203 	bic.w	r2, r3, #3
    ce8e:	4b34      	ldr	r3, [pc, #208]	; (cf60 <am_hal_gpio_pinconfig+0x39c>)
    ce90:	4413      	add	r3, r2
    ce92:	61fb      	str	r3, [r7, #28]

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    ce94:	687b      	ldr	r3, [r7, #4]
    ce96:	009b      	lsls	r3, r3, #2
    ce98:	f003 031c 	and.w	r3, r3, #28
    ce9c:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    ce9e:	687b      	ldr	r3, [r7, #4]
    cea0:	00db      	lsls	r3, r3, #3
    cea2:	f003 0318 	and.w	r3, r3, #24
    cea6:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    cea8:	220f      	movs	r2, #15
    ceaa:	69bb      	ldr	r3, [r7, #24]
    ceac:	fa02 f303 	lsl.w	r3, r2, r3
    ceb0:	43db      	mvns	r3, r3
    ceb2:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    ceb4:	22ff      	movs	r2, #255	; 0xff
    ceb6:	697b      	ldr	r3, [r7, #20]
    ceb8:	fa02 f303 	lsl.w	r3, r2, r3
    cebc:	43db      	mvns	r3, r3
    cebe:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    cec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cec2:	697b      	ldr	r3, [r7, #20]
    cec4:	fa02 f303 	lsl.w	r3, r2, r3
    cec8:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    ceca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cecc:	697b      	ldr	r3, [r7, #20]
    cece:	fa02 f303 	lsl.w	r3, r2, r3
    ced2:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    ced4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ced6:	69bb      	ldr	r3, [r7, #24]
    ced8:	fa02 f303 	lsl.w	r3, r2, r3
    cedc:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    cede:	f002 ffb5 	bl	fe4c <am_hal_interrupt_master_disable>
    cee2:	4603      	mov	r3, r0
    cee4:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    cee6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ceea:	2b00      	cmp	r3, #0
    ceec:	d00c      	beq.n	cf08 <am_hal_gpio_pinconfig+0x344>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    ceee:	687b      	ldr	r3, [r7, #4]
    cef0:	f003 021f 	and.w	r2, r3, #31
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	08db      	lsrs	r3, r3, #3
    cef8:	f003 0104 	and.w	r1, r3, #4
    cefc:	4b19      	ldr	r3, [pc, #100]	; (cf64 <am_hal_gpio_pinconfig+0x3a0>)
    cefe:	440b      	add	r3, r1
    cf00:	4619      	mov	r1, r3
    cf02:	2301      	movs	r3, #1
    cf04:	4093      	lsls	r3, r2
    cf06:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    cf08:	4b17      	ldr	r3, [pc, #92]	; (cf68 <am_hal_gpio_pinconfig+0x3a4>)
    cf0a:	2273      	movs	r2, #115	; 0x73
    cf0c:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    cf0e:	6a3b      	ldr	r3, [r7, #32]
    cf10:	681a      	ldr	r2, [r3, #0]
    cf12:	68fb      	ldr	r3, [r7, #12]
    cf14:	ea02 0103 	and.w	r1, r2, r3
    cf18:	6a3b      	ldr	r3, [r7, #32]
    cf1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf1c:	430a      	orrs	r2, r1
    cf1e:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf22:	681a      	ldr	r2, [r3, #0]
    cf24:	693b      	ldr	r3, [r7, #16]
    cf26:	ea02 0103 	and.w	r1, r2, r3
    cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf2e:	430a      	orrs	r2, r1
    cf30:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    cf32:	69fb      	ldr	r3, [r7, #28]
    cf34:	681a      	ldr	r2, [r3, #0]
    cf36:	68fb      	ldr	r3, [r7, #12]
    cf38:	ea02 0103 	and.w	r1, r2, r3
    cf3c:	69fb      	ldr	r3, [r7, #28]
    cf3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cf40:	430a      	orrs	r2, r1
    cf42:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    cf44:	4b08      	ldr	r3, [pc, #32]	; (cf68 <am_hal_gpio_pinconfig+0x3a4>)
    cf46:	2200      	movs	r2, #0
    cf48:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    cf4a:	68bb      	ldr	r3, [r7, #8]
    cf4c:	4618      	mov	r0, r3
    cf4e:	f002 ff81 	bl	fe54 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    cf52:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    cf54:	4618      	mov	r0, r3
    cf56:	3748      	adds	r7, #72	; 0x48
    cf58:	46bd      	mov	sp, r7
    cf5a:	bd80      	pop	{r7, pc}
    cf5c:	40010040 	.word	0x40010040
    cf60:	400100e0 	.word	0x400100e0
    cf64:	400100b4 	.word	0x400100b4
    cf68:	40010000 	.word	0x40010000

0000cf6c <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    cf6c:	b480      	push	{r7}
    cf6e:	b089      	sub	sp, #36	; 0x24
    cf70:	af00      	add	r7, sp, #0
    cf72:	60f8      	str	r0, [r7, #12]
    cf74:	460b      	mov	r3, r1
    cf76:	607a      	str	r2, [r7, #4]
    cf78:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    cf7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf7e:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	2b00      	cmp	r3, #0
    cf84:	d101      	bne.n	cf8a <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cf86:	2306      	movs	r3, #6
    cf88:	e044      	b.n	d014 <am_hal_gpio_state_read+0xa8>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	2b31      	cmp	r3, #49	; 0x31
    cf8e:	d904      	bls.n	cf9a <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	69fa      	ldr	r2, [r7, #28]
    cf94:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    cf96:	2305      	movs	r3, #5
    cf98:	e03c      	b.n	d014 <am_hal_gpio_state_read+0xa8>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> 3);   // 0 or 4
    cf9a:	68fb      	ldr	r3, [r7, #12]
    cf9c:	08db      	lsrs	r3, r3, #3
    cf9e:	f003 0304 	and.w	r3, r3, #4
    cfa2:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    cfa4:	68fb      	ldr	r3, [r7, #12]
    cfa6:	f003 031f 	and.w	r3, r3, #31
    cfaa:	617b      	str	r3, [r7, #20]

    switch ( eReadType )
    cfac:	7afb      	ldrb	r3, [r7, #11]
    cfae:	2b01      	cmp	r3, #1
    cfb0:	d010      	beq.n	cfd4 <am_hal_gpio_state_read+0x68>
    cfb2:	2b02      	cmp	r3, #2
    cfb4:	d01b      	beq.n	cfee <am_hal_gpio_state_read+0x82>
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d126      	bne.n	d008 <am_hal_gpio_state_read+0x9c>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, RDA) + ui32BaseAddr);
    cfba:	69ba      	ldr	r2, [r7, #24]
    cfbc:	4b18      	ldr	r3, [pc, #96]	; (d020 <am_hal_gpio_state_read+0xb4>)
    cfbe:	4413      	add	r3, r2
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfc4:	69fa      	ldr	r2, [r7, #28]
    cfc6:	697b      	ldr	r3, [r7, #20]
    cfc8:	fa22 f303 	lsr.w	r3, r2, r3
    cfcc:	f003 0301 	and.w	r3, r3, #1
    cfd0:	61fb      	str	r3, [r7, #28]
            break;
    cfd2:	e01b      	b.n	d00c <am_hal_gpio_state_read+0xa0>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32BaseAddr);
    cfd4:	69ba      	ldr	r2, [r7, #24]
    cfd6:	4b13      	ldr	r3, [pc, #76]	; (d024 <am_hal_gpio_state_read+0xb8>)
    cfd8:	4413      	add	r3, r2
    cfda:	681b      	ldr	r3, [r3, #0]
    cfdc:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfde:	69fa      	ldr	r2, [r7, #28]
    cfe0:	697b      	ldr	r3, [r7, #20]
    cfe2:	fa22 f303 	lsr.w	r3, r2, r3
    cfe6:	f003 0301 	and.w	r3, r3, #1
    cfea:	61fb      	str	r3, [r7, #28]
            break;
    cfec:	e00e      	b.n	d00c <am_hal_gpio_state_read+0xa0>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(AM_REGADDR(GPIO, ENA) + ui32BaseAddr);
    cfee:	69ba      	ldr	r2, [r7, #24]
    cff0:	4b0d      	ldr	r3, [pc, #52]	; (d028 <am_hal_gpio_state_read+0xbc>)
    cff2:	4413      	add	r3, r2
    cff4:	681b      	ldr	r3, [r3, #0]
    cff6:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cff8:	69fa      	ldr	r2, [r7, #28]
    cffa:	697b      	ldr	r3, [r7, #20]
    cffc:	fa22 f303 	lsr.w	r3, r2, r3
    d000:	f003 0301 	and.w	r3, r3, #1
    d004:	61fb      	str	r3, [r7, #28]
            break;
    d006:	e001      	b.n	d00c <am_hal_gpio_state_read+0xa0>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d008:	2306      	movs	r3, #6
    d00a:	e003      	b.n	d014 <am_hal_gpio_state_read+0xa8>
    }

    *pui32ReadState = ui32ReadValue;
    d00c:	687b      	ldr	r3, [r7, #4]
    d00e:	69fa      	ldr	r2, [r7, #28]
    d010:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d012:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d014:	4618      	mov	r0, r3
    d016:	3724      	adds	r7, #36	; 0x24
    d018:	46bd      	mov	sp, r7
    d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d01e:	4770      	bx	lr
    d020:	40010080 	.word	0x40010080
    d024:	40010088 	.word	0x40010088
    d028:	400100a0 	.word	0x400100a0

0000d02c <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d02c:	b580      	push	{r7, lr}
    d02e:	b086      	sub	sp, #24
    d030:	af00      	add	r7, sp, #0
    d032:	6078      	str	r0, [r7, #4]
    d034:	460b      	mov	r3, r1
    d036:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d038:	2300      	movs	r3, #0
    d03a:	617b      	str	r3, [r7, #20]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d03c:	687b      	ldr	r3, [r7, #4]
    d03e:	2b31      	cmp	r3, #49	; 0x31
    d040:	d901      	bls.n	d046 <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d042:	2305      	movs	r3, #5
    d044:	e062      	b.n	d10c <am_hal_gpio_state_write+0xe0>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d046:	78fb      	ldrb	r3, [r7, #3]
    d048:	2b05      	cmp	r3, #5
    d04a:	d901      	bls.n	d050 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d04c:	2306      	movs	r3, #6
    d04e:	e05d      	b.n	d10c <am_hal_gpio_state_write+0xe0>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	f003 031f 	and.w	r3, r3, #31
    d056:	2201      	movs	r2, #1
    d058:	fa02 f303 	lsl.w	r3, r2, r3
    d05c:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	08db      	lsrs	r3, r3, #3
    d062:	f003 0304 	and.w	r3, r3, #4
    d066:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d068:	f002 fef0 	bl	fe4c <am_hal_interrupt_master_disable>
    d06c:	4603      	mov	r3, r0
    d06e:	60bb      	str	r3, [r7, #8]
    switch ( eWriteType )
    d070:	78fb      	ldrb	r3, [r7, #3]
    d072:	2b05      	cmp	r3, #5
    d074:	d842      	bhi.n	d0fc <am_hal_gpio_state_write+0xd0>
    d076:	a201      	add	r2, pc, #4	; (adr r2, d07c <am_hal_gpio_state_write+0x50>)
    d078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d07c:	0000d0a3 	.word	0x0000d0a3
    d080:	0000d095 	.word	0x0000d095
    d084:	0000d0b1 	.word	0x0000d0b1
    d088:	0000d0d7 	.word	0x0000d0d7
    d08c:	0000d0c9 	.word	0x0000d0c9
    d090:	0000d0e5 	.word	0x0000d0e5
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
    d094:	68fa      	ldr	r2, [r7, #12]
    d096:	4b1f      	ldr	r3, [pc, #124]	; (d114 <am_hal_gpio_state_write+0xe8>)
    d098:	4413      	add	r3, r2
    d09a:	461a      	mov	r2, r3
    d09c:	693b      	ldr	r3, [r7, #16]
    d09e:	6013      	str	r3, [r2, #0]
            break;
    d0a0:	e02f      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
    d0a2:	68fa      	ldr	r2, [r7, #12]
    d0a4:	4b1c      	ldr	r3, [pc, #112]	; (d118 <am_hal_gpio_state_write+0xec>)
    d0a6:	4413      	add	r3, r2
    d0a8:	461a      	mov	r2, r3
    d0aa:	693b      	ldr	r3, [r7, #16]
    d0ac:	6013      	str	r3, [r2, #0]
            break;
    d0ae:	e028      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
    d0b0:	68fa      	ldr	r2, [r7, #12]
    d0b2:	4b1a      	ldr	r3, [pc, #104]	; (d11c <am_hal_gpio_state_write+0xf0>)
    d0b4:	4413      	add	r3, r2
    d0b6:	681a      	ldr	r2, [r3, #0]
    d0b8:	68f9      	ldr	r1, [r7, #12]
    d0ba:	4b18      	ldr	r3, [pc, #96]	; (d11c <am_hal_gpio_state_write+0xf0>)
    d0bc:	440b      	add	r3, r1
    d0be:	4619      	mov	r1, r3
    d0c0:	693b      	ldr	r3, [r7, #16]
    d0c2:	4053      	eors	r3, r2
    d0c4:	600b      	str	r3, [r1, #0]
            break;
    d0c6:	e01c      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
    d0c8:	68fa      	ldr	r2, [r7, #12]
    d0ca:	4b15      	ldr	r3, [pc, #84]	; (d120 <am_hal_gpio_state_write+0xf4>)
    d0cc:	4413      	add	r3, r2
    d0ce:	461a      	mov	r2, r3
    d0d0:	693b      	ldr	r3, [r7, #16]
    d0d2:	6013      	str	r3, [r2, #0]
            break;
    d0d4:	e015      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
    d0d6:	68fa      	ldr	r2, [r7, #12]
    d0d8:	4b12      	ldr	r3, [pc, #72]	; (d124 <am_hal_gpio_state_write+0xf8>)
    d0da:	4413      	add	r3, r2
    d0dc:	461a      	mov	r2, r3
    d0de:	693b      	ldr	r3, [r7, #16]
    d0e0:	6013      	str	r3, [r2, #0]
            break;
    d0e2:	e00e      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
    d0e4:	68fa      	ldr	r2, [r7, #12]
    d0e6:	4b0f      	ldr	r3, [pc, #60]	; (d124 <am_hal_gpio_state_write+0xf8>)
    d0e8:	4413      	add	r3, r2
    d0ea:	681a      	ldr	r2, [r3, #0]
    d0ec:	68f9      	ldr	r1, [r7, #12]
    d0ee:	4b0d      	ldr	r3, [pc, #52]	; (d124 <am_hal_gpio_state_write+0xf8>)
    d0f0:	440b      	add	r3, r1
    d0f2:	4619      	mov	r1, r3
    d0f4:	693b      	ldr	r3, [r7, #16]
    d0f6:	4053      	eors	r3, r2
    d0f8:	600b      	str	r3, [r1, #0]
            break;
    d0fa:	e002      	b.n	d102 <am_hal_gpio_state_write+0xd6>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d0fc:	2306      	movs	r3, #6
    d0fe:	617b      	str	r3, [r7, #20]
            break;
    d100:	bf00      	nop
    }

    AM_CRITICAL_END;
    d102:	68bb      	ldr	r3, [r7, #8]
    d104:	4618      	mov	r0, r3
    d106:	f002 fea5 	bl	fe54 <am_hal_interrupt_master_set>

    return ui32Return;
    d10a:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d10c:	4618      	mov	r0, r3
    d10e:	3718      	adds	r7, #24
    d110:	46bd      	mov	sp, r7
    d112:	bd80      	pop	{r7, pc}
    d114:	40010090 	.word	0x40010090
    d118:	40010098 	.word	0x40010098
    d11c:	40010088 	.word	0x40010088
    d120:	400100a8 	.word	0x400100a8
    d124:	400100b4 	.word	0x400100b4

0000d128 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d128:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d12c:	b084      	sub	sp, #16
    d12e:	af00      	add	r7, sp, #0
    d130:	e9c7 0100 	strd	r0, r1, [r7]
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d134:	e9d7 3400 	ldrd	r3, r4, [r7]
    d138:	f04f 0100 	mov.w	r1, #0
    d13c:	4a17      	ldr	r2, [pc, #92]	; (d19c <am_hal_gpio_interrupt_enable+0x74>)
    d13e:	ea03 0b01 	and.w	fp, r3, r1
    d142:	ea04 0c02 	and.w	ip, r4, r2
    d146:	ea5b 030c 	orrs.w	r3, fp, ip
    d14a:	d001      	beq.n	d150 <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d14c:	2305      	movs	r3, #5
    d14e:	e01f      	b.n	d190 <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d150:	f002 fe7c 	bl	fe4c <am_hal_interrupt_master_disable>
    d154:	4603      	mov	r3, r0
    d156:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d158:	4b11      	ldr	r3, [pc, #68]	; (d1a0 <am_hal_gpio_interrupt_enable+0x78>)
    d15a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d15e:	683b      	ldr	r3, [r7, #0]
    d160:	490f      	ldr	r1, [pc, #60]	; (d1a0 <am_hal_gpio_interrupt_enable+0x78>)
    d162:	4313      	orrs	r3, r2
    d164:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d168:	4b0d      	ldr	r3, [pc, #52]	; (d1a0 <am_hal_gpio_interrupt_enable+0x78>)
    d16a:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d16e:	e9d7 1200 	ldrd	r1, r2, [r7]
    d172:	f04f 0300 	mov.w	r3, #0
    d176:	f04f 0400 	mov.w	r4, #0
    d17a:	0013      	movs	r3, r2
    d17c:	2400      	movs	r4, #0
    d17e:	4a08      	ldr	r2, [pc, #32]	; (d1a0 <am_hal_gpio_interrupt_enable+0x78>)
    d180:	4303      	orrs	r3, r0
    d182:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d186:	68fb      	ldr	r3, [r7, #12]
    d188:	4618      	mov	r0, r3
    d18a:	f002 fe63 	bl	fe54 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d18e:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d190:	4618      	mov	r0, r3
    d192:	3710      	adds	r7, #16
    d194:	46bd      	mov	sp, r7
    d196:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d19a:	bf00      	nop
    d19c:	fffc0000 	.word	0xfffc0000
    d1a0:	40010000 	.word	0x40010000

0000d1a4 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d1a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d1a8:	b084      	sub	sp, #16
    d1aa:	af00      	add	r7, sp, #0
    d1ac:	e9c7 0100 	strd	r0, r1, [r7]
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d1b0:	e9d7 3400 	ldrd	r3, r4, [r7]
    d1b4:	f04f 0100 	mov.w	r1, #0
    d1b8:	4a13      	ldr	r2, [pc, #76]	; (d208 <am_hal_gpio_interrupt_clear+0x64>)
    d1ba:	ea03 0b01 	and.w	fp, r3, r1
    d1be:	ea04 0c02 	and.w	ip, r4, r2
    d1c2:	ea5b 030c 	orrs.w	r3, fp, ip
    d1c6:	d001      	beq.n	d1cc <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d1c8:	2305      	movs	r3, #5
    d1ca:	e017      	b.n	d1fc <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d1cc:	f002 fe3e 	bl	fe4c <am_hal_interrupt_master_disable>
    d1d0:	4603      	mov	r3, r0
    d1d2:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d1d4:	4a0d      	ldr	r2, [pc, #52]	; (d20c <am_hal_gpio_interrupt_clear+0x68>)
    d1d6:	683b      	ldr	r3, [r7, #0]
    d1d8:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d1dc:	e9d7 1200 	ldrd	r1, r2, [r7]
    d1e0:	f04f 0300 	mov.w	r3, #0
    d1e4:	f04f 0400 	mov.w	r4, #0
    d1e8:	0013      	movs	r3, r2
    d1ea:	2400      	movs	r4, #0
    d1ec:	4a07      	ldr	r2, [pc, #28]	; (d20c <am_hal_gpio_interrupt_clear+0x68>)
    d1ee:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d1f2:	68fb      	ldr	r3, [r7, #12]
    d1f4:	4618      	mov	r0, r3
    d1f6:	f002 fe2d 	bl	fe54 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d1fa:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d1fc:	4618      	mov	r0, r3
    d1fe:	3710      	adds	r7, #16
    d200:	46bd      	mov	sp, r7
    d202:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d206:	bf00      	nop
    d208:	fffc0000 	.word	0xfffc0000
    d20c:	40010000 	.word	0x40010000

0000d210 <am_hal_gpio_interrupt_status_get>:
// Get GPIO interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_status_get(bool bEnabledOnly, uint64_t *pui64IntStatus)
{
    d210:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d214:	b088      	sub	sp, #32
    d216:	af00      	add	r7, sp, #0
    d218:	4603      	mov	r3, r0
    d21a:	6039      	str	r1, [r7, #0]
    d21c:	71fb      	strb	r3, [r7, #7]

    uint64_t ui64RetVal, ui64Mask;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
    d21e:	683b      	ldr	r3, [r7, #0]
    d220:	2b00      	cmp	r3, #0
    d222:	d101      	bne.n	d228 <am_hal_gpio_interrupt_status_get+0x18>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d224:	2306      	movs	r3, #6
    d226:	e058      	b.n	d2da <am_hal_gpio_interrupt_status_get+0xca>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize variable outside critical section
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    d228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d22c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d230:	e9c7 3406 	strd	r3, r4, [r7, #24]

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
    d234:	f002 fe0a 	bl	fe4c <am_hal_interrupt_master_disable>
    d238:	4603      	mov	r3, r0
    d23a:	60fb      	str	r3, [r7, #12]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
    d23c:	4b29      	ldr	r3, [pc, #164]	; (d2e4 <am_hal_gpio_interrupt_status_get+0xd4>)
    d23e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    d242:	4619      	mov	r1, r3
    d244:	f04f 0200 	mov.w	r2, #0
    d248:	f04f 0300 	mov.w	r3, #0
    d24c:	f04f 0400 	mov.w	r4, #0
    d250:	000c      	movs	r4, r1
    d252:	2300      	movs	r3, #0
    d254:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
    d258:	4b22      	ldr	r3, [pc, #136]	; (d2e4 <am_hal_gpio_interrupt_status_get+0xd4>)
    d25a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d25e:	469b      	mov	fp, r3
    d260:	f04f 0c00 	mov.w	ip, #0
    d264:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d268:	ea4b 0301 	orr.w	r3, fp, r1
    d26c:	ea4c 0402 	orr.w	r4, ip, r2
    d270:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if ( bEnabledOnly )
    d274:	79fb      	ldrb	r3, [r7, #7]
    d276:	2b00      	cmp	r3, #0
    d278:	d01b      	beq.n	d2b2 <am_hal_gpio_interrupt_status_get+0xa2>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
    d27a:	4b1a      	ldr	r3, [pc, #104]	; (d2e4 <am_hal_gpio_interrupt_status_get+0xd4>)
    d27c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d280:	4619      	mov	r1, r3
    d282:	f04f 0200 	mov.w	r2, #0
    d286:	f04f 0300 	mov.w	r3, #0
    d28a:	f04f 0400 	mov.w	r4, #0
    d28e:	000c      	movs	r4, r1
    d290:	2300      	movs	r3, #0
    d292:	e9c7 3406 	strd	r3, r4, [r7, #24]
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
    d296:	4b13      	ldr	r3, [pc, #76]	; (d2e4 <am_hal_gpio_interrupt_status_get+0xd4>)
    d298:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d29c:	469b      	mov	fp, r3
    d29e:	f04f 0c00 	mov.w	ip, #0
    d2a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d2a6:	ea4b 0301 	orr.w	r3, fp, r1
    d2aa:	ea4c 0402 	orr.w	r4, ip, r2
    d2ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }

    ui64RetVal &= ui64Mask;
    d2b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d2b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d2ba:	ea03 0b01 	and.w	fp, r3, r1
    d2be:	ea04 0c02 	and.w	ip, r4, r2
    d2c2:	e9c7 bc04 	strd	fp, ip, [r7, #16]

    *pui64IntStatus = ui64RetVal;
    d2c6:	683a      	ldr	r2, [r7, #0]
    d2c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d2cc:	e9c2 3400 	strd	r3, r4, [r2]

    AM_CRITICAL_END
    d2d0:	68fb      	ldr	r3, [r7, #12]
    d2d2:	4618      	mov	r0, r3
    d2d4:	f002 fdbe 	bl	fe54 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d2d8:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_status_get()
    d2da:	4618      	mov	r0, r3
    d2dc:	3720      	adds	r7, #32
    d2de:	46bd      	mov	sp, r7
    d2e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d2e4:	40010000 	.word	0x40010000

0000d2e8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d2e8:	b580      	push	{r7, lr}
    d2ea:	b088      	sub	sp, #32
    d2ec:	af00      	add	r7, sp, #0
    d2ee:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d2f0:	f107 030c 	add.w	r3, r7, #12
    d2f4:	4618      	mov	r0, r3
    d2f6:	f002 fbf9 	bl	faec <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    d2fa:	68fb      	ldr	r3, [r7, #12]
    d2fc:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d2fe:	69fb      	ldr	r3, [r7, #28]
    d300:	4a07      	ldr	r2, [pc, #28]	; (d320 <am_util_delay_ms+0x38>)
    d302:	fba2 2303 	umull	r2, r3, r2, r3
    d306:	099a      	lsrs	r2, r3, #6
    d308:	687b      	ldr	r3, [r7, #4]
    d30a:	fb02 f303 	mul.w	r3, r2, r3
    d30e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d310:	69b8      	ldr	r0, [r7, #24]
    d312:	f002 fd43 	bl	fd9c <am_hal_flash_delay>
}
    d316:	bf00      	nop
    d318:	3720      	adds	r7, #32
    d31a:	46bd      	mov	sp, r7
    d31c:	bd80      	pop	{r7, pc}
    d31e:	bf00      	nop
    d320:	057619f1 	.word	0x057619f1

0000d324 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d324:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d326:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d32a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d32c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d330:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d334:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d338:	f000 f80a 	bl	d350 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d33c:	bd01      	pop	{r0, pc}
}
    d33e:	bf00      	nop
    d340:	4618      	mov	r0, r3

0000d342 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d342:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d344:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d346:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d348:	4770      	bx	lr
}
    d34a:	bf00      	nop
    d34c:	4618      	mov	r0, r3
	...

0000d350 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d350:	b580      	push	{r7, lr}
    d352:	b096      	sub	sp, #88	; 0x58
    d354:	af00      	add	r7, sp, #0
    d356:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d358:	f107 030c 	add.w	r3, r7, #12
    d35c:	2200      	movs	r2, #0
    d35e:	601a      	str	r2, [r3, #0]
    d360:	605a      	str	r2, [r3, #4]
    d362:	609a      	str	r2, [r3, #8]
    d364:	60da      	str	r2, [r3, #12]
    d366:	611a      	str	r2, [r3, #16]
    d368:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d36a:	2300      	movs	r3, #0
    d36c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d370:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d372:	4b2e      	ldr	r3, [pc, #184]	; (d42c <am_util_faultisr_collect_data+0xdc>)
    d374:	681b      	ldr	r3, [r3, #0]
    d376:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d37a:	b2db      	uxtb	r3, r3
    d37c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d382:	0a1b      	lsrs	r3, r3, #8
    d384:	b2db      	uxtb	r3, r3
    d386:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d38c:	0c1b      	lsrs	r3, r3, #16
    d38e:	b29b      	uxth	r3, r3
    d390:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d394:	4b26      	ldr	r3, [pc, #152]	; (d430 <am_util_faultisr_collect_data+0xe0>)
    d396:	681b      	ldr	r3, [r3, #0]
    d398:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d39a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d39e:	b2db      	uxtb	r3, r3
    d3a0:	f003 0302 	and.w	r3, r3, #2
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d005      	beq.n	d3b4 <am_util_faultisr_collect_data+0x64>
    d3a8:	6879      	ldr	r1, [r7, #4]
    d3aa:	2006      	movs	r0, #6
    d3ac:	f7ff ffc9 	bl	d342 <getStackedReg>
    d3b0:	4603      	mov	r3, r0
    d3b2:	e001      	b.n	d3b8 <am_util_faultisr_collect_data+0x68>
    d3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3b8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d3ba:	6879      	ldr	r1, [r7, #4]
    d3bc:	2000      	movs	r0, #0
    d3be:	f7ff ffc0 	bl	d342 <getStackedReg>
    d3c2:	4603      	mov	r3, r0
    d3c4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d3c6:	6879      	ldr	r1, [r7, #4]
    d3c8:	2001      	movs	r0, #1
    d3ca:	f7ff ffba 	bl	d342 <getStackedReg>
    d3ce:	4603      	mov	r3, r0
    d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d3d2:	6879      	ldr	r1, [r7, #4]
    d3d4:	2002      	movs	r0, #2
    d3d6:	f7ff ffb4 	bl	d342 <getStackedReg>
    d3da:	4603      	mov	r3, r0
    d3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d3de:	6879      	ldr	r1, [r7, #4]
    d3e0:	2003      	movs	r0, #3
    d3e2:	f7ff ffae 	bl	d342 <getStackedReg>
    d3e6:	4603      	mov	r3, r0
    d3e8:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d3ea:	6879      	ldr	r1, [r7, #4]
    d3ec:	2004      	movs	r0, #4
    d3ee:	f7ff ffa8 	bl	d342 <getStackedReg>
    d3f2:	4603      	mov	r3, r0
    d3f4:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d3f6:	6879      	ldr	r1, [r7, #4]
    d3f8:	2005      	movs	r0, #5
    d3fa:	f7ff ffa2 	bl	d342 <getStackedReg>
    d3fe:	4603      	mov	r3, r0
    d400:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d402:	6879      	ldr	r1, [r7, #4]
    d404:	2006      	movs	r0, #6
    d406:	f7ff ff9c 	bl	d342 <getStackedReg>
    d40a:	4603      	mov	r3, r0
    d40c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d40e:	6879      	ldr	r1, [r7, #4]
    d410:	2007      	movs	r0, #7
    d412:	f7ff ff96 	bl	d342 <getStackedReg>
    d416:	4603      	mov	r3, r0
    d418:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d41a:	f107 030c 	add.w	r3, r7, #12
    d41e:	4619      	mov	r1, r3
    d420:	2002      	movs	r0, #2
    d422:	f002 fd1b 	bl	fe5c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d426:	2300      	movs	r3, #0
    d428:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d42a:	e7fe      	b.n	d42a <am_util_faultisr_collect_data+0xda>
    d42c:	e000ed28 	.word	0xe000ed28
    d430:	e000ed38 	.word	0xe000ed38

0000d434 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d434:	b480      	push	{r7}
    d436:	b083      	sub	sp, #12
    d438:	af00      	add	r7, sp, #0
    d43a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d43c:	4a04      	ldr	r2, [pc, #16]	; (d450 <am_util_stdio_printf_init+0x1c>)
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	6013      	str	r3, [r2, #0]
}
    d442:	bf00      	nop
    d444:	370c      	adds	r7, #12
    d446:	46bd      	mov	sp, r7
    d448:	f85d 7b04 	ldr.w	r7, [sp], #4
    d44c:	4770      	bx	lr
    d44e:	bf00      	nop
    d450:	1000c1a4 	.word	0x1000c1a4

0000d454 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d454:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d458:	b08b      	sub	sp, #44	; 0x2c
    d45a:	af00      	add	r7, sp, #0
    d45c:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d460:	e9d7 1200 	ldrd	r1, r2, [r7]
    d464:	f04f 0300 	mov.w	r3, #0
    d468:	f04f 0400 	mov.w	r4, #0
    d46c:	0013      	movs	r3, r2
    d46e:	2400      	movs	r4, #0
    d470:	4323      	orrs	r3, r4
    d472:	f000 809d 	beq.w	d5b0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d476:	e9d7 3400 	ldrd	r3, r4, [r7]
    d47a:	0866      	lsrs	r6, r4, #1
    d47c:	ea4f 0533 	mov.w	r5, r3, rrx
    d480:	e9d7 1200 	ldrd	r1, r2, [r7]
    d484:	f04f 0b00 	mov.w	fp, #0
    d488:	f04f 0c00 	mov.w	ip, #0
    d48c:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d490:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d494:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d498:	eb1b 0305 	adds.w	r3, fp, r5
    d49c:	eb4c 0406 	adc.w	r4, ip, r6
    d4a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d4a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4a8:	f04f 0500 	mov.w	r5, #0
    d4ac:	f04f 0600 	mov.w	r6, #0
    d4b0:	090d      	lsrs	r5, r1, #4
    d4b2:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d4b6:	0916      	lsrs	r6, r2, #4
    d4b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4bc:	186b      	adds	r3, r5, r1
    d4be:	eb46 0402 	adc.w	r4, r6, r2
    d4c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d4c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4ca:	f04f 0500 	mov.w	r5, #0
    d4ce:	f04f 0600 	mov.w	r6, #0
    d4d2:	0a0d      	lsrs	r5, r1, #8
    d4d4:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d4d8:	0a16      	lsrs	r6, r2, #8
    d4da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4de:	186b      	adds	r3, r5, r1
    d4e0:	eb46 0402 	adc.w	r4, r6, r2
    d4e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d4e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4ec:	f04f 0500 	mov.w	r5, #0
    d4f0:	f04f 0600 	mov.w	r6, #0
    d4f4:	0c0d      	lsrs	r5, r1, #16
    d4f6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d4fa:	0c16      	lsrs	r6, r2, #16
    d4fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d500:	186b      	adds	r3, r5, r1
    d502:	eb46 0402 	adc.w	r4, r6, r2
    d506:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d50a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d50e:	f04f 0500 	mov.w	r5, #0
    d512:	f04f 0600 	mov.w	r6, #0
    d516:	0015      	movs	r5, r2
    d518:	2600      	movs	r6, #0
    d51a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d51e:	186b      	adds	r3, r5, r1
    d520:	eb46 0402 	adc.w	r4, r6, r2
    d524:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d528:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d52c:	f04f 0300 	mov.w	r3, #0
    d530:	f04f 0400 	mov.w	r4, #0
    d534:	08cb      	lsrs	r3, r1, #3
    d536:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d53a:	08d4      	lsrs	r4, r2, #3
    d53c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d540:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d544:	46ab      	mov	fp, r5
    d546:	46b4      	mov	ip, r6
    d548:	f04f 0100 	mov.w	r1, #0
    d54c:	f04f 0200 	mov.w	r2, #0
    d550:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d554:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d558:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d55c:	468b      	mov	fp, r1
    d55e:	4694      	mov	ip, r2
    d560:	eb1b 0b05 	adds.w	fp, fp, r5
    d564:	eb4c 0c06 	adc.w	ip, ip, r6
    d568:	eb1b 030b 	adds.w	r3, fp, fp
    d56c:	eb4c 040c 	adc.w	r4, ip, ip
    d570:	469b      	mov	fp, r3
    d572:	46a4      	mov	ip, r4
    d574:	4659      	mov	r1, fp
    d576:	4662      	mov	r2, ip
    d578:	e9d7 3400 	ldrd	r3, r4, [r7]
    d57c:	1a5b      	subs	r3, r3, r1
    d57e:	eb64 0402 	sbc.w	r4, r4, r2
    d582:	461d      	mov	r5, r3
    d584:	4626      	mov	r6, r4
    d586:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d58a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d58e:	1d99      	adds	r1, r3, #6
    d590:	f144 0200 	adc.w	r2, r4, #0
    d594:	f04f 0500 	mov.w	r5, #0
    d598:	f04f 0600 	mov.w	r6, #0
    d59c:	090d      	lsrs	r5, r1, #4
    d59e:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d5a2:	0916      	lsrs	r6, r2, #4
    d5a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5a8:	186b      	adds	r3, r5, r1
    d5aa:	eb46 0402 	adc.w	r4, r6, r2
    d5ae:	e029      	b.n	d604 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d5b0:	683b      	ldr	r3, [r7, #0]
    d5b2:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5b6:	085a      	lsrs	r2, r3, #1
    d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5ba:	089b      	lsrs	r3, r3, #2
    d5bc:	4413      	add	r3, r2
    d5be:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d5c0:	6a3b      	ldr	r3, [r7, #32]
    d5c2:	091b      	lsrs	r3, r3, #4
    d5c4:	6a3a      	ldr	r2, [r7, #32]
    d5c6:	4413      	add	r3, r2
    d5c8:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d5ca:	6a3b      	ldr	r3, [r7, #32]
    d5cc:	0a1b      	lsrs	r3, r3, #8
    d5ce:	6a3a      	ldr	r2, [r7, #32]
    d5d0:	4413      	add	r3, r2
    d5d2:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d5d4:	6a3b      	ldr	r3, [r7, #32]
    d5d6:	0c1b      	lsrs	r3, r3, #16
    d5d8:	6a3a      	ldr	r2, [r7, #32]
    d5da:	4413      	add	r3, r2
    d5dc:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d5de:	6a3b      	ldr	r3, [r7, #32]
    d5e0:	08db      	lsrs	r3, r3, #3
    d5e2:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d5e4:	6a3a      	ldr	r2, [r7, #32]
    d5e6:	4613      	mov	r3, r2
    d5e8:	009b      	lsls	r3, r3, #2
    d5ea:	4413      	add	r3, r2
    d5ec:	005b      	lsls	r3, r3, #1
    d5ee:	461a      	mov	r2, r3
    d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5f2:	1a9b      	subs	r3, r3, r2
    d5f4:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d5f6:	69fb      	ldr	r3, [r7, #28]
    d5f8:	3306      	adds	r3, #6
    d5fa:	091a      	lsrs	r2, r3, #4
    d5fc:	6a3b      	ldr	r3, [r7, #32]
    d5fe:	4413      	add	r3, r2
    d600:	f04f 0400 	mov.w	r4, #0
    }
}
    d604:	4618      	mov	r0, r3
    d606:	4621      	mov	r1, r4
    d608:	372c      	adds	r7, #44	; 0x2c
    d60a:	46bd      	mov	sp, r7
    d60c:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d610:	4770      	bx	lr

0000d612 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d612:	b590      	push	{r4, r7, lr}
    d614:	b085      	sub	sp, #20
    d616:	af00      	add	r7, sp, #0
    d618:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d61c:	683a      	ldr	r2, [r7, #0]
    d61e:	687b      	ldr	r3, [r7, #4]
    d620:	4313      	orrs	r3, r2
    d622:	2b00      	cmp	r3, #0
    d624:	bf0c      	ite	eq
    d626:	2301      	moveq	r3, #1
    d628:	2300      	movne	r3, #0
    d62a:	b2db      	uxtb	r3, r3
    d62c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d62e:	e008      	b.n	d642 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d630:	e9d7 0100 	ldrd	r0, r1, [r7]
    d634:	f7ff ff0e 	bl	d454 <divu64_10>
    d638:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d63c:	68fb      	ldr	r3, [r7, #12]
    d63e:	3301      	adds	r3, #1
    d640:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d642:	e9d7 3400 	ldrd	r3, r4, [r7]
    d646:	4323      	orrs	r3, r4
    d648:	d1f2      	bne.n	d630 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d64a:	68fb      	ldr	r3, [r7, #12]
}
    d64c:	4618      	mov	r0, r3
    d64e:	3714      	adds	r7, #20
    d650:	46bd      	mov	sp, r7
    d652:	bd90      	pop	{r4, r7, pc}

0000d654 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d654:	b590      	push	{r4, r7, lr}
    d656:	b083      	sub	sp, #12
    d658:	af00      	add	r7, sp, #0
    d65a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d65e:	e9d7 3400 	ldrd	r3, r4, [r7]
    d662:	2b00      	cmp	r3, #0
    d664:	f174 0300 	sbcs.w	r3, r4, #0
    d668:	da06      	bge.n	d678 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d66a:	e9d7 3400 	ldrd	r3, r4, [r7]
    d66e:	425b      	negs	r3, r3
    d670:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d674:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d678:	e9d7 3400 	ldrd	r3, r4, [r7]
    d67c:	4618      	mov	r0, r3
    d67e:	4621      	mov	r1, r4
    d680:	f7ff ffc7 	bl	d612 <ndigits_in_u64>
    d684:	4603      	mov	r3, r0
}
    d686:	4618      	mov	r0, r3
    d688:	370c      	adds	r7, #12
    d68a:	46bd      	mov	sp, r7
    d68c:	bd90      	pop	{r4, r7, pc}

0000d68e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d68e:	b490      	push	{r4, r7}
    d690:	b084      	sub	sp, #16
    d692:	af00      	add	r7, sp, #0
    d694:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d698:	683a      	ldr	r2, [r7, #0]
    d69a:	687b      	ldr	r3, [r7, #4]
    d69c:	4313      	orrs	r3, r2
    d69e:	2b00      	cmp	r3, #0
    d6a0:	bf0c      	ite	eq
    d6a2:	2301      	moveq	r3, #1
    d6a4:	2300      	movne	r3, #0
    d6a6:	b2db      	uxtb	r3, r3
    d6a8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d6aa:	e00e      	b.n	d6ca <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    d6ac:	e9d7 1200 	ldrd	r1, r2, [r7]
    d6b0:	f04f 0300 	mov.w	r3, #0
    d6b4:	f04f 0400 	mov.w	r4, #0
    d6b8:	090b      	lsrs	r3, r1, #4
    d6ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d6be:	0914      	lsrs	r4, r2, #4
    d6c0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    d6c4:	68fb      	ldr	r3, [r7, #12]
    d6c6:	3301      	adds	r3, #1
    d6c8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d6ca:	e9d7 3400 	ldrd	r3, r4, [r7]
    d6ce:	4323      	orrs	r3, r4
    d6d0:	d1ec      	bne.n	d6ac <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d6d2:	68fb      	ldr	r3, [r7, #12]
}
    d6d4:	4618      	mov	r0, r3
    d6d6:	3710      	adds	r7, #16
    d6d8:	46bd      	mov	sp, r7
    d6da:	bc90      	pop	{r4, r7}
    d6dc:	4770      	bx	lr

0000d6de <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d6de:	b480      	push	{r7}
    d6e0:	b087      	sub	sp, #28
    d6e2:	af00      	add	r7, sp, #0
    d6e4:	6078      	str	r0, [r7, #4]
    d6e6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d6e8:	2300      	movs	r3, #0
    d6ea:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d6ec:	2300      	movs	r3, #0
    d6ee:	613b      	str	r3, [r7, #16]
    d6f0:	2300      	movs	r3, #0
    d6f2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d6f4:	687b      	ldr	r3, [r7, #4]
    d6f6:	781b      	ldrb	r3, [r3, #0]
    d6f8:	2b2d      	cmp	r3, #45	; 0x2d
    d6fa:	d11b      	bne.n	d734 <decstr_to_int+0x56>
    {
        bNeg = true;
    d6fc:	2301      	movs	r3, #1
    d6fe:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d700:	687b      	ldr	r3, [r7, #4]
    d702:	3301      	adds	r3, #1
    d704:	607b      	str	r3, [r7, #4]
        uCnt++;
    d706:	68fb      	ldr	r3, [r7, #12]
    d708:	3301      	adds	r3, #1
    d70a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d70c:	e012      	b.n	d734 <decstr_to_int+0x56>
    {
        ++uCnt;
    d70e:	68fb      	ldr	r3, [r7, #12]
    d710:	3301      	adds	r3, #1
    d712:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d714:	693a      	ldr	r2, [r7, #16]
    d716:	4613      	mov	r3, r2
    d718:	009b      	lsls	r3, r3, #2
    d71a:	4413      	add	r3, r2
    d71c:	005b      	lsls	r3, r3, #1
    d71e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d720:	687b      	ldr	r3, [r7, #4]
    d722:	781b      	ldrb	r3, [r3, #0]
    d724:	461a      	mov	r2, r3
    d726:	693b      	ldr	r3, [r7, #16]
    d728:	4413      	add	r3, r2
    d72a:	3b30      	subs	r3, #48	; 0x30
    d72c:	613b      	str	r3, [r7, #16]
        pcStr++;
    d72e:	687b      	ldr	r3, [r7, #4]
    d730:	3301      	adds	r3, #1
    d732:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	2b2f      	cmp	r3, #47	; 0x2f
    d73a:	d903      	bls.n	d744 <decstr_to_int+0x66>
    d73c:	687b      	ldr	r3, [r7, #4]
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	2b39      	cmp	r3, #57	; 0x39
    d742:	d9e4      	bls.n	d70e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d744:	683b      	ldr	r3, [r7, #0]
    d746:	2b00      	cmp	r3, #0
    d748:	d002      	beq.n	d750 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d74a:	683b      	ldr	r3, [r7, #0]
    d74c:	68fa      	ldr	r2, [r7, #12]
    d74e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d750:	7dfb      	ldrb	r3, [r7, #23]
    d752:	2b00      	cmp	r3, #0
    d754:	d002      	beq.n	d75c <decstr_to_int+0x7e>
    d756:	693b      	ldr	r3, [r7, #16]
    d758:	425b      	negs	r3, r3
    d75a:	e000      	b.n	d75e <decstr_to_int+0x80>
    d75c:	693b      	ldr	r3, [r7, #16]
}
    d75e:	4618      	mov	r0, r3
    d760:	371c      	adds	r7, #28
    d762:	46bd      	mov	sp, r7
    d764:	f85d 7b04 	ldr.w	r7, [sp], #4
    d768:	4770      	bx	lr

0000d76a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d76a:	b590      	push	{r4, r7, lr}
    d76c:	b091      	sub	sp, #68	; 0x44
    d76e:	af00      	add	r7, sp, #0
    d770:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d774:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d776:	2300      	movs	r3, #0
    d778:	63fb      	str	r3, [r7, #60]	; 0x3c
    d77a:	2300      	movs	r3, #0
    d77c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d77e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d782:	f7ff fe67 	bl	d454 <divu64_10>
    d786:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d78a:	68b9      	ldr	r1, [r7, #8]
    d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d78e:	4613      	mov	r3, r2
    d790:	009b      	lsls	r3, r3, #2
    d792:	4413      	add	r3, r2
    d794:	005b      	lsls	r3, r3, #1
    d796:	1acb      	subs	r3, r1, r3
    d798:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d79c:	b2da      	uxtb	r2, r3
    d79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7a0:	1c59      	adds	r1, r3, #1
    d7a2:	63f9      	str	r1, [r7, #60]	; 0x3c
    d7a4:	3230      	adds	r2, #48	; 0x30
    d7a6:	b2d2      	uxtb	r2, r2
    d7a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d7ac:	440b      	add	r3, r1
    d7ae:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d7b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d7b6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d7ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d7be:	4323      	orrs	r3, r4
    d7c0:	d1dd      	bne.n	d77e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7c4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d7c6:	687b      	ldr	r3, [r7, #4]
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d011      	beq.n	d7f0 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d7cc:	e008      	b.n	d7e0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d7ce:	687b      	ldr	r3, [r7, #4]
    d7d0:	1c5a      	adds	r2, r3, #1
    d7d2:	607a      	str	r2, [r7, #4]
    d7d4:	f107 0110 	add.w	r1, r7, #16
    d7d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d7da:	440a      	add	r2, r1
    d7dc:	7812      	ldrb	r2, [r2, #0]
    d7de:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7e2:	1e5a      	subs	r2, r3, #1
    d7e4:	63fa      	str	r2, [r7, #60]	; 0x3c
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	d1f1      	bne.n	d7ce <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d7ea:	687b      	ldr	r3, [r7, #4]
    d7ec:	2200      	movs	r2, #0
    d7ee:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d7f2:	4618      	mov	r0, r3
    d7f4:	3744      	adds	r7, #68	; 0x44
    d7f6:	46bd      	mov	sp, r7
    d7f8:	bd90      	pop	{r4, r7, pc}

0000d7fa <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d7fa:	b490      	push	{r4, r7}
    d7fc:	b08c      	sub	sp, #48	; 0x30
    d7fe:	af00      	add	r7, sp, #0
    d800:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d804:	607a      	str	r2, [r7, #4]
    d806:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d808:	2300      	movs	r3, #0
    d80a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d80c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d810:	4323      	orrs	r3, r4
    d812:	d135      	bne.n	d880 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d816:	1c5a      	adds	r2, r3, #1
    d818:	62fa      	str	r2, [r7, #44]	; 0x2c
    d81a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d81e:	4413      	add	r3, r2
    d820:	2230      	movs	r2, #48	; 0x30
    d822:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d826:	e02b      	b.n	d880 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    d828:	7a3b      	ldrb	r3, [r7, #8]
    d82a:	f003 030f 	and.w	r3, r3, #15
    d82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d836:	2b09      	cmp	r3, #9
    d838:	d90a      	bls.n	d850 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d83a:	78fb      	ldrb	r3, [r7, #3]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d001      	beq.n	d844 <uint64_to_hexstr+0x4a>
    d840:	2227      	movs	r2, #39	; 0x27
    d842:	e000      	b.n	d846 <uint64_to_hexstr+0x4c>
    d844:	2207      	movs	r2, #7
    d846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d84a:	4413      	add	r3, r2
    d84c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d852:	1c5a      	adds	r2, r3, #1
    d854:	62fa      	str	r2, [r7, #44]	; 0x2c
    d856:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d85a:	3230      	adds	r2, #48	; 0x30
    d85c:	b2d2      	uxtb	r2, r2
    d85e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d862:	440b      	add	r3, r1
    d864:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d868:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    d86c:	f04f 0300 	mov.w	r3, #0
    d870:	f04f 0400 	mov.w	r4, #0
    d874:	090b      	lsrs	r3, r1, #4
    d876:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d87a:	0914      	lsrs	r4, r2, #4
    d87c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    d880:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d884:	4323      	orrs	r3, r4
    d886:	d1cf      	bne.n	d828 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d88a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	2b00      	cmp	r3, #0
    d890:	d011      	beq.n	d8b6 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    d892:	e008      	b.n	d8a6 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    d894:	687b      	ldr	r3, [r7, #4]
    d896:	1c5a      	adds	r2, r3, #1
    d898:	607a      	str	r2, [r7, #4]
    d89a:	f107 0110 	add.w	r1, r7, #16
    d89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d8a0:	440a      	add	r2, r1
    d8a2:	7812      	ldrb	r2, [r2, #0]
    d8a4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8a8:	1e5a      	subs	r2, r3, #1
    d8aa:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d1f1      	bne.n	d894 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d8b0:	687b      	ldr	r3, [r7, #4]
    d8b2:	2200      	movs	r2, #0
    d8b4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d8b8:	4618      	mov	r0, r3
    d8ba:	3730      	adds	r7, #48	; 0x30
    d8bc:	46bd      	mov	sp, r7
    d8be:	bc90      	pop	{r4, r7}
    d8c0:	4770      	bx	lr

0000d8c2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d8c2:	b480      	push	{r7}
    d8c4:	b085      	sub	sp, #20
    d8c6:	af00      	add	r7, sp, #0
    d8c8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d8ca:	2300      	movs	r3, #0
    d8cc:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d104      	bne.n	d8de <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d8d4:	68fb      	ldr	r3, [r7, #12]
    d8d6:	e009      	b.n	d8ec <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d8d8:	68fb      	ldr	r3, [r7, #12]
    d8da:	3301      	adds	r3, #1
    d8dc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	1c5a      	adds	r2, r3, #1
    d8e2:	607a      	str	r2, [r7, #4]
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	d1f6      	bne.n	d8d8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d8ea:	68fb      	ldr	r3, [r7, #12]
}
    d8ec:	4618      	mov	r0, r3
    d8ee:	3714      	adds	r7, #20
    d8f0:	46bd      	mov	sp, r7
    d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8f6:	4770      	bx	lr

0000d8f8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d8f8:	b480      	push	{r7}
    d8fa:	b087      	sub	sp, #28
    d8fc:	af00      	add	r7, sp, #0
    d8fe:	60f8      	str	r0, [r7, #12]
    d900:	460b      	mov	r3, r1
    d902:	607a      	str	r2, [r7, #4]
    d904:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d906:	2300      	movs	r3, #0
    d908:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	2b00      	cmp	r3, #0
    d90e:	dc0c      	bgt.n	d92a <padbuffer+0x32>
    {
        return i32Cnt;
    d910:	697b      	ldr	r3, [r7, #20]
    d912:	e010      	b.n	d936 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d914:	68fb      	ldr	r3, [r7, #12]
    d916:	2b00      	cmp	r3, #0
    d918:	d004      	beq.n	d924 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d91a:	68fb      	ldr	r3, [r7, #12]
    d91c:	1c5a      	adds	r2, r3, #1
    d91e:	60fa      	str	r2, [r7, #12]
    d920:	7afa      	ldrb	r2, [r7, #11]
    d922:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d924:	697b      	ldr	r3, [r7, #20]
    d926:	3301      	adds	r3, #1
    d928:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d92a:	687b      	ldr	r3, [r7, #4]
    d92c:	1e5a      	subs	r2, r3, #1
    d92e:	607a      	str	r2, [r7, #4]
    d930:	2b00      	cmp	r3, #0
    d932:	d1ef      	bne.n	d914 <padbuffer+0x1c>
    }

    return i32Cnt;
    d934:	697b      	ldr	r3, [r7, #20]
}
    d936:	4618      	mov	r0, r3
    d938:	371c      	adds	r7, #28
    d93a:	46bd      	mov	sp, r7
    d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d940:	4770      	bx	lr
	...

0000d944 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d944:	b590      	push	{r4, r7, lr}
    d946:	b08f      	sub	sp, #60	; 0x3c
    d948:	af00      	add	r7, sp, #0
    d94a:	ed87 0a03 	vstr	s0, [r7, #12]
    d94e:	60b8      	str	r0, [r7, #8]
    d950:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d952:	68bb      	ldr	r3, [r7, #8]
    d954:	681b      	ldr	r3, [r3, #0]
    d956:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d95a:	2b03      	cmp	r3, #3
    d95c:	dc02      	bgt.n	d964 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d95e:	f06f 0302 	mvn.w	r3, #2
    d962:	e0e7      	b.n	db34 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    d964:	edd7 7a03 	vldr	s15, [r7, #12]
    d968:	eef5 7a40 	vcmp.f32	s15, #0.0
    d96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d970:	d104      	bne.n	d97c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d972:	68bb      	ldr	r3, [r7, #8]
    d974:	4a71      	ldr	r2, [pc, #452]	; (db3c <ftoa+0x1f8>)
    d976:	601a      	str	r2, [r3, #0]
        return 3;
    d978:	2303      	movs	r3, #3
    d97a:	e0db      	b.n	db34 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    d97c:	68bb      	ldr	r3, [r7, #8]
    d97e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d980:	68fb      	ldr	r3, [r7, #12]
    d982:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d984:	693b      	ldr	r3, [r7, #16]
    d986:	15db      	asrs	r3, r3, #23
    d988:	b2db      	uxtb	r3, r3
    d98a:	3b7f      	subs	r3, #127	; 0x7f
    d98c:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d98e:	693b      	ldr	r3, [r7, #16]
    d990:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d998:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d99a:	2300      	movs	r3, #0
    d99c:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d99e:	2300      	movs	r3, #0
    d9a0:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d9a2:	69fb      	ldr	r3, [r7, #28]
    d9a4:	2b1e      	cmp	r3, #30
    d9a6:	dd02      	ble.n	d9ae <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d9a8:	f06f 0301 	mvn.w	r3, #1
    d9ac:	e0c2      	b.n	db34 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    d9ae:	69fb      	ldr	r3, [r7, #28]
    d9b0:	f113 0f17 	cmn.w	r3, #23
    d9b4:	da02      	bge.n	d9bc <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9ba:	e0bb      	b.n	db34 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    d9bc:	69fb      	ldr	r3, [r7, #28]
    d9be:	2b16      	cmp	r3, #22
    d9c0:	dd06      	ble.n	d9d0 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d9c2:	69fb      	ldr	r3, [r7, #28]
    d9c4:	3b17      	subs	r3, #23
    d9c6:	69ba      	ldr	r2, [r7, #24]
    d9c8:	fa02 f303 	lsl.w	r3, r2, r3
    d9cc:	637b      	str	r3, [r7, #52]	; 0x34
    d9ce:	e01a      	b.n	da06 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    d9d0:	69fb      	ldr	r3, [r7, #28]
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	db0f      	blt.n	d9f6 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d9d6:	69fb      	ldr	r3, [r7, #28]
    d9d8:	f1c3 0317 	rsb	r3, r3, #23
    d9dc:	69ba      	ldr	r2, [r7, #24]
    d9de:	fa42 f303 	asr.w	r3, r2, r3
    d9e2:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d9e4:	69fb      	ldr	r3, [r7, #28]
    d9e6:	3301      	adds	r3, #1
    d9e8:	69ba      	ldr	r2, [r7, #24]
    d9ea:	fa02 f303 	lsl.w	r3, r2, r3
    d9ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d9f2:	633b      	str	r3, [r7, #48]	; 0x30
    d9f4:	e007      	b.n	da06 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d9f6:	69bb      	ldr	r3, [r7, #24]
    d9f8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d9fc:	69fb      	ldr	r3, [r7, #28]
    d9fe:	43db      	mvns	r3, r3
    da00:	fa42 f303 	asr.w	r3, r2, r3
    da04:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    da06:	693b      	ldr	r3, [r7, #16]
    da08:	2b00      	cmp	r3, #0
    da0a:	da04      	bge.n	da16 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    da0c:	68bb      	ldr	r3, [r7, #8]
    da0e:	1c5a      	adds	r2, r3, #1
    da10:	60ba      	str	r2, [r7, #8]
    da12:	222d      	movs	r2, #45	; 0x2d
    da14:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    da16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da18:	2b00      	cmp	r3, #0
    da1a:	d105      	bne.n	da28 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    da1c:	68bb      	ldr	r3, [r7, #8]
    da1e:	1c5a      	adds	r2, r3, #1
    da20:	60ba      	str	r2, [r7, #8]
    da22:	2230      	movs	r2, #48	; 0x30
    da24:	701a      	strb	r2, [r3, #0]
    da26:	e021      	b.n	da6c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    da28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da2a:	2b00      	cmp	r3, #0
    da2c:	dd08      	ble.n	da40 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    da2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da30:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da34:	68ba      	ldr	r2, [r7, #8]
    da36:	4618      	mov	r0, r3
    da38:	4621      	mov	r1, r4
    da3a:	f7ff fe96 	bl	d76a <uint64_to_str>
    da3e:	e011      	b.n	da64 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    da40:	68bb      	ldr	r3, [r7, #8]
    da42:	1c5a      	adds	r2, r3, #1
    da44:	60ba      	str	r2, [r7, #8]
    da46:	222d      	movs	r2, #45	; 0x2d
    da48:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    da4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da4c:	425b      	negs	r3, r3
    da4e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da52:	68ba      	ldr	r2, [r7, #8]
    da54:	4618      	mov	r0, r3
    da56:	4621      	mov	r1, r4
    da58:	f7ff fe87 	bl	d76a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    da5c:	e002      	b.n	da64 <ftoa+0x120>
        {
            pcBuf++;
    da5e:	68bb      	ldr	r3, [r7, #8]
    da60:	3301      	adds	r3, #1
    da62:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    da64:	68bb      	ldr	r3, [r7, #8]
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	2b00      	cmp	r3, #0
    da6a:	d1f8      	bne.n	da5e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    da6c:	68bb      	ldr	r3, [r7, #8]
    da6e:	1c5a      	adds	r2, r3, #1
    da70:	60ba      	str	r2, [r7, #8]
    da72:	222e      	movs	r2, #46	; 0x2e
    da74:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    da78:	2b00      	cmp	r3, #0
    da7a:	d105      	bne.n	da88 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    da7c:	68bb      	ldr	r3, [r7, #8]
    da7e:	1c5a      	adds	r2, r3, #1
    da80:	60ba      	str	r2, [r7, #8]
    da82:	2230      	movs	r2, #48	; 0x30
    da84:	701a      	strb	r2, [r3, #0]
    da86:	e04f      	b.n	db28 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    da88:	68ba      	ldr	r2, [r7, #8]
    da8a:	6a3b      	ldr	r3, [r7, #32]
    da8c:	1ad3      	subs	r3, r2, r3
    da8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    da90:	1ad3      	subs	r3, r2, r3
    da92:	3b01      	subs	r3, #1
    da94:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    da96:	697a      	ldr	r2, [r7, #20]
    da98:	687b      	ldr	r3, [r7, #4]
    da9a:	4293      	cmp	r3, r2
    da9c:	bfa8      	it	ge
    da9e:	4613      	movge	r3, r2
    daa0:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    daa2:	2300      	movs	r3, #0
    daa4:	62bb      	str	r3, [r7, #40]	; 0x28
    daa6:	e015      	b.n	dad4 <ftoa+0x190>
        {
            i32FracPart *= 10;
    daa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    daaa:	4613      	mov	r3, r2
    daac:	009b      	lsls	r3, r3, #2
    daae:	4413      	add	r3, r2
    dab0:	005b      	lsls	r3, r3, #1
    dab2:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    dab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dab6:	161b      	asrs	r3, r3, #24
    dab8:	b2da      	uxtb	r2, r3
    daba:	68bb      	ldr	r3, [r7, #8]
    dabc:	1c59      	adds	r1, r3, #1
    dabe:	60b9      	str	r1, [r7, #8]
    dac0:	3230      	adds	r2, #48	; 0x30
    dac2:	b2d2      	uxtb	r2, r2
    dac4:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    dacc:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dad0:	3301      	adds	r3, #1
    dad2:	62bb      	str	r3, [r7, #40]	; 0x28
    dad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dad6:	697b      	ldr	r3, [r7, #20]
    dad8:	429a      	cmp	r2, r3
    dada:	dbe5      	blt.n	daa8 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    dadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dade:	4613      	mov	r3, r2
    dae0:	009b      	lsls	r3, r3, #2
    dae2:	4413      	add	r3, r2
    dae4:	005b      	lsls	r3, r3, #1
    dae6:	161b      	asrs	r3, r3, #24
    dae8:	2b04      	cmp	r3, #4
    daea:	dd1d      	ble.n	db28 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    daec:	68bb      	ldr	r3, [r7, #8]
    daee:	3b01      	subs	r3, #1
    daf0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    daf2:	e015      	b.n	db20 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daf6:	781b      	ldrb	r3, [r3, #0]
    daf8:	2b2e      	cmp	r3, #46	; 0x2e
    dafa:	d00e      	beq.n	db1a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dafe:	781b      	ldrb	r3, [r3, #0]
    db00:	2b39      	cmp	r3, #57	; 0x39
    db02:	d103      	bne.n	db0c <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db06:	2230      	movs	r2, #48	; 0x30
    db08:	701a      	strb	r2, [r3, #0]
    db0a:	e006      	b.n	db1a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db0e:	781b      	ldrb	r3, [r3, #0]
    db10:	3301      	adds	r3, #1
    db12:	b2da      	uxtb	r2, r3
    db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db16:	701a      	strb	r2, [r3, #0]
                    break;
    db18:	e006      	b.n	db28 <ftoa+0x1e4>
                }
                pcBuftmp--;
    db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db1c:	3b01      	subs	r3, #1
    db1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    db22:	6a3b      	ldr	r3, [r7, #32]
    db24:	429a      	cmp	r2, r3
    db26:	d2e5      	bcs.n	daf4 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    db28:	68bb      	ldr	r3, [r7, #8]
    db2a:	2200      	movs	r2, #0
    db2c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    db2e:	68ba      	ldr	r2, [r7, #8]
    db30:	6a3b      	ldr	r3, [r7, #32]
    db32:	1ad3      	subs	r3, r2, r3
} // ftoa()
    db34:	4618      	mov	r0, r3
    db36:	373c      	adds	r7, #60	; 0x3c
    db38:	46bd      	mov	sp, r7
    db3a:	bd90      	pop	{r4, r7, pc}
    db3c:	00302e30 	.word	0x00302e30

0000db40 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    db40:	b590      	push	{r4, r7, lr}
    db42:	b097      	sub	sp, #92	; 0x5c
    db44:	af00      	add	r7, sp, #0
    db46:	60f8      	str	r0, [r7, #12]
    db48:	60b9      	str	r1, [r7, #8]
    db4a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    db4c:	2300      	movs	r3, #0
    db4e:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    db50:	2300      	movs	r3, #0
    db52:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    db54:	e2e7      	b.n	e126 <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    db56:	2306      	movs	r3, #6
    db58:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    db5a:	68bb      	ldr	r3, [r7, #8]
    db5c:	781b      	ldrb	r3, [r3, #0]
    db5e:	2b25      	cmp	r3, #37	; 0x25
    db60:	d01f      	beq.n	dba2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    db62:	68fb      	ldr	r3, [r7, #12]
    db64:	2b00      	cmp	r3, #0
    db66:	d015      	beq.n	db94 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    db68:	68bb      	ldr	r3, [r7, #8]
    db6a:	781b      	ldrb	r3, [r3, #0]
    db6c:	2b0a      	cmp	r3, #10
    db6e:	d10b      	bne.n	db88 <am_util_stdio_vsprintf+0x48>
    db70:	4bb1      	ldr	r3, [pc, #708]	; (de38 <am_util_stdio_vsprintf+0x2f8>)
    db72:	781b      	ldrb	r3, [r3, #0]
    db74:	2b00      	cmp	r3, #0
    db76:	d007      	beq.n	db88 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    db78:	68fb      	ldr	r3, [r7, #12]
    db7a:	1c5a      	adds	r2, r3, #1
    db7c:	60fa      	str	r2, [r7, #12]
    db7e:	220d      	movs	r2, #13
    db80:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    db82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    db84:	3301      	adds	r3, #1
    db86:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    db88:	68fb      	ldr	r3, [r7, #12]
    db8a:	1c5a      	adds	r2, r3, #1
    db8c:	60fa      	str	r2, [r7, #12]
    db8e:	68ba      	ldr	r2, [r7, #8]
    db90:	7812      	ldrb	r2, [r2, #0]
    db92:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    db94:	68bb      	ldr	r3, [r7, #8]
    db96:	3301      	adds	r3, #1
    db98:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    db9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    db9c:	3301      	adds	r3, #1
    db9e:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    dba0:	e2c1      	b.n	e126 <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    dba2:	68bb      	ldr	r3, [r7, #8]
    dba4:	3301      	adds	r3, #1
    dba6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    dba8:	2300      	movs	r3, #0
    dbaa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    dbae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dbb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    dbb6:	2320      	movs	r3, #32
    dbb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    dbbc:	68bb      	ldr	r3, [r7, #8]
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	2b30      	cmp	r3, #48	; 0x30
    dbc2:	d105      	bne.n	dbd0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    dbc4:	2330      	movs	r3, #48	; 0x30
    dbc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    dbca:	68bb      	ldr	r3, [r7, #8]
    dbcc:	3301      	adds	r3, #1
    dbce:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    dbd0:	f107 0314 	add.w	r3, r7, #20
    dbd4:	4619      	mov	r1, r3
    dbd6:	68b8      	ldr	r0, [r7, #8]
    dbd8:	f7ff fd81 	bl	d6de <decstr_to_int>
    dbdc:	4603      	mov	r3, r0
    dbde:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    dbe0:	697b      	ldr	r3, [r7, #20]
    dbe2:	68ba      	ldr	r2, [r7, #8]
    dbe4:	4413      	add	r3, r2
    dbe6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    dbe8:	68bb      	ldr	r3, [r7, #8]
    dbea:	781b      	ldrb	r3, [r3, #0]
    dbec:	2b73      	cmp	r3, #115	; 0x73
    dbee:	d005      	beq.n	dbfc <am_util_stdio_vsprintf+0xbc>
    dbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	da02      	bge.n	dbfc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    dbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dbf8:	425b      	negs	r3, r3
    dbfa:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    dbfc:	68bb      	ldr	r3, [r7, #8]
    dbfe:	781b      	ldrb	r3, [r3, #0]
    dc00:	2b2e      	cmp	r3, #46	; 0x2e
    dc02:	d10e      	bne.n	dc22 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    dc04:	68bb      	ldr	r3, [r7, #8]
    dc06:	3301      	adds	r3, #1
    dc08:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    dc0a:	f107 0314 	add.w	r3, r7, #20
    dc0e:	4619      	mov	r1, r3
    dc10:	68b8      	ldr	r0, [r7, #8]
    dc12:	f7ff fd64 	bl	d6de <decstr_to_int>
    dc16:	4603      	mov	r3, r0
    dc18:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    dc1a:	697b      	ldr	r3, [r7, #20]
    dc1c:	68ba      	ldr	r2, [r7, #8]
    dc1e:	4413      	add	r3, r2
    dc20:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dc22:	68bb      	ldr	r3, [r7, #8]
    dc24:	781b      	ldrb	r3, [r3, #0]
    dc26:	2b6c      	cmp	r3, #108	; 0x6c
    dc28:	d10c      	bne.n	dc44 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dc2a:	68bb      	ldr	r3, [r7, #8]
    dc2c:	3301      	adds	r3, #1
    dc2e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dc30:	68bb      	ldr	r3, [r7, #8]
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	2b6c      	cmp	r3, #108	; 0x6c
    dc36:	d105      	bne.n	dc44 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dc38:	68bb      	ldr	r3, [r7, #8]
    dc3a:	3301      	adds	r3, #1
    dc3c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dc3e:	2301      	movs	r3, #1
    dc40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    dc44:	68bb      	ldr	r3, [r7, #8]
    dc46:	781b      	ldrb	r3, [r3, #0]
    dc48:	3b46      	subs	r3, #70	; 0x46
    dc4a:	2b32      	cmp	r3, #50	; 0x32
    dc4c:	f200 8258 	bhi.w	e100 <am_util_stdio_vsprintf+0x5c0>
    dc50:	a201      	add	r2, pc, #4	; (adr r2, dc58 <am_util_stdio_vsprintf+0x118>)
    dc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dc56:	bf00      	nop
    dc58:	0000e087 	.word	0x0000e087
    dc5c:	0000e101 	.word	0x0000e101
    dc60:	0000e101 	.word	0x0000e101
    dc64:	0000e101 	.word	0x0000e101
    dc68:	0000e101 	.word	0x0000e101
    dc6c:	0000e101 	.word	0x0000e101
    dc70:	0000e101 	.word	0x0000e101
    dc74:	0000e101 	.word	0x0000e101
    dc78:	0000e101 	.word	0x0000e101
    dc7c:	0000e101 	.word	0x0000e101
    dc80:	0000e101 	.word	0x0000e101
    dc84:	0000e101 	.word	0x0000e101
    dc88:	0000e101 	.word	0x0000e101
    dc8c:	0000e101 	.word	0x0000e101
    dc90:	0000e101 	.word	0x0000e101
    dc94:	0000e101 	.word	0x0000e101
    dc98:	0000e101 	.word	0x0000e101
    dc9c:	0000e101 	.word	0x0000e101
    dca0:	0000de1b 	.word	0x0000de1b
    dca4:	0000e101 	.word	0x0000e101
    dca8:	0000e101 	.word	0x0000e101
    dcac:	0000e101 	.word	0x0000e101
    dcb0:	0000e101 	.word	0x0000e101
    dcb4:	0000e101 	.word	0x0000e101
    dcb8:	0000e101 	.word	0x0000e101
    dcbc:	0000e101 	.word	0x0000e101
    dcc0:	0000e101 	.word	0x0000e101
    dcc4:	0000e101 	.word	0x0000e101
    dcc8:	0000e101 	.word	0x0000e101
    dccc:	0000dd25 	.word	0x0000dd25
    dcd0:	0000df4d 	.word	0x0000df4d
    dcd4:	0000e101 	.word	0x0000e101
    dcd8:	0000e087 	.word	0x0000e087
    dcdc:	0000e101 	.word	0x0000e101
    dce0:	0000e101 	.word	0x0000e101
    dce4:	0000df4d 	.word	0x0000df4d
    dce8:	0000e101 	.word	0x0000e101
    dcec:	0000e101 	.word	0x0000e101
    dcf0:	0000e101 	.word	0x0000e101
    dcf4:	0000e101 	.word	0x0000e101
    dcf8:	0000e101 	.word	0x0000e101
    dcfc:	0000e101 	.word	0x0000e101
    dd00:	0000e101 	.word	0x0000e101
    dd04:	0000e101 	.word	0x0000e101
    dd08:	0000e101 	.word	0x0000e101
    dd0c:	0000dd47 	.word	0x0000dd47
    dd10:	0000e101 	.word	0x0000e101
    dd14:	0000deb9 	.word	0x0000deb9
    dd18:	0000e101 	.word	0x0000e101
    dd1c:	0000e101 	.word	0x0000e101
    dd20:	0000de15 	.word	0x0000de15
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    dd24:	687b      	ldr	r3, [r7, #4]
    dd26:	1d1a      	adds	r2, r3, #4
    dd28:	607a      	str	r2, [r7, #4]
    dd2a:	681b      	ldr	r3, [r3, #0]
    dd2c:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    dd2e:	68fb      	ldr	r3, [r7, #12]
    dd30:	2b00      	cmp	r3, #0
    dd32:	d004      	beq.n	dd3e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    dd34:	68fb      	ldr	r3, [r7, #12]
    dd36:	1c5a      	adds	r2, r3, #1
    dd38:	60fa      	str	r2, [r7, #12]
    dd3a:	7ffa      	ldrb	r2, [r7, #31]
    dd3c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    dd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd40:	3301      	adds	r3, #1
    dd42:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dd44:	e1ec      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    dd46:	687b      	ldr	r3, [r7, #4]
    dd48:	1d1a      	adds	r2, r3, #4
    dd4a:	607a      	str	r2, [r7, #4]
    dd4c:	681b      	ldr	r3, [r3, #0]
    dd4e:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    dd50:	6d78      	ldr	r0, [r7, #84]	; 0x54
    dd52:	f7ff fdb6 	bl	d8c2 <simple_strlen>
    dd56:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    dd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	dd2e      	ble.n	ddbc <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    dd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dd62:	429a      	cmp	r2, r3
    dd64:	d22a      	bcs.n	ddbc <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    dd66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd6a:	1ad3      	subs	r3, r2, r3
    dd6c:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dd72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd74:	4619      	mov	r1, r3
    dd76:	68f8      	ldr	r0, [r7, #12]
    dd78:	f7ff fdbe 	bl	d8f8 <padbuffer>
    dd7c:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    dd7e:	68fb      	ldr	r3, [r7, #12]
    dd80:	2b00      	cmp	r3, #0
    dd82:	d001      	beq.n	dd88 <am_util_stdio_vsprintf+0x248>
    dd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd86:	e000      	b.n	dd8a <am_util_stdio_vsprintf+0x24a>
    dd88:	2300      	movs	r3, #0
    dd8a:	68fa      	ldr	r2, [r7, #12]
    dd8c:	4413      	add	r3, r2
    dd8e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    dd90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dd94:	4413      	add	r3, r2
    dd96:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    dd98:	2300      	movs	r3, #0
    dd9a:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    dd9c:	e00e      	b.n	ddbc <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    dd9e:	68fb      	ldr	r3, [r7, #12]
    dda0:	2b00      	cmp	r3, #0
    dda2:	d005      	beq.n	ddb0 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    dda4:	68fb      	ldr	r3, [r7, #12]
    dda6:	1c5a      	adds	r2, r3, #1
    dda8:	60fa      	str	r2, [r7, #12]
    ddaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ddac:	7812      	ldrb	r2, [r2, #0]
    ddae:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ddb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddb2:	3301      	adds	r3, #1
    ddb4:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    ddb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ddb8:	3301      	adds	r3, #1
    ddba:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    ddbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	d1ec      	bne.n	dd9e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    ddc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	f000 81a7 	beq.w	e11a <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    ddcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddce:	425b      	negs	r3, r3
    ddd0:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ddd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ddd6:	429a      	cmp	r2, r3
    ddd8:	f080 819f 	bcs.w	e11a <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    dddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dde0:	1ad3      	subs	r3, r2, r3
    dde2:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dde4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dde8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ddea:	4619      	mov	r1, r3
    ddec:	68f8      	ldr	r0, [r7, #12]
    ddee:	f7ff fd83 	bl	d8f8 <padbuffer>
    ddf2:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ddf4:	68fb      	ldr	r3, [r7, #12]
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	d001      	beq.n	ddfe <am_util_stdio_vsprintf+0x2be>
    ddfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddfc:	e000      	b.n	de00 <am_util_stdio_vsprintf+0x2c0>
    ddfe:	2300      	movs	r3, #0
    de00:	68fa      	ldr	r2, [r7, #12]
    de02:	4413      	add	r3, r2
    de04:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    de06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de0a:	4413      	add	r3, r2
    de0c:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    de0e:	2300      	movs	r3, #0
    de10:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    de12:	e182      	b.n	e11a <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    de14:	2301      	movs	r3, #1
    de16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    de1e:	2b00      	cmp	r3, #0
    de20:	d00c      	beq.n	de3c <am_util_stdio_vsprintf+0x2fc>
    de22:	687b      	ldr	r3, [r7, #4]
    de24:	3307      	adds	r3, #7
    de26:	f023 0307 	bic.w	r3, r3, #7
    de2a:	f103 0208 	add.w	r2, r3, #8
    de2e:	607a      	str	r2, [r7, #4]
    de30:	e9d3 3400 	ldrd	r3, r4, [r3]
    de34:	e008      	b.n	de48 <am_util_stdio_vsprintf+0x308>
    de36:	bf00      	nop
    de38:	1000c158 	.word	0x1000c158
                                      va_arg(pArgs, uint32_t);
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	1d1a      	adds	r2, r3, #4
    de40:	607a      	str	r2, [r7, #4]
    de42:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de44:	f04f 0400 	mov.w	r4, #0
    de48:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    de4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de4e:	2b00      	cmp	r3, #0
    de50:	d01e      	beq.n	de90 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    de52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    de56:	f7ff fc1a 	bl	d68e <ndigits_in_hex>
    de5a:	4602      	mov	r2, r0
    de5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de5e:	1a9b      	subs	r3, r3, r2
    de60:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de68:	4619      	mov	r1, r3
    de6a:	68f8      	ldr	r0, [r7, #12]
    de6c:	f7ff fd44 	bl	d8f8 <padbuffer>
    de70:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    de72:	68fb      	ldr	r3, [r7, #12]
    de74:	2b00      	cmp	r3, #0
    de76:	d001      	beq.n	de7c <am_util_stdio_vsprintf+0x33c>
    de78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de7a:	e000      	b.n	de7e <am_util_stdio_vsprintf+0x33e>
    de7c:	2300      	movs	r3, #0
    de7e:	68fa      	ldr	r2, [r7, #12]
    de80:	4413      	add	r3, r2
    de82:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    de84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de88:	4413      	add	r3, r2
    de8a:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    de8c:	2300      	movs	r3, #0
    de8e:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    de90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    de94:	68fa      	ldr	r2, [r7, #12]
    de96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    de9a:	f7ff fcae 	bl	d7fa <uint64_to_hexstr>
    de9e:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    dea0:	68fb      	ldr	r3, [r7, #12]
    dea2:	2b00      	cmp	r3, #0
    dea4:	d003      	beq.n	deae <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    dea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dea8:	68fa      	ldr	r2, [r7, #12]
    deaa:	4413      	add	r3, r2
    deac:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    deae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    deb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    deb2:	4413      	add	r3, r2
    deb4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    deb6:	e133      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    deb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    debc:	2b00      	cmp	r3, #0
    debe:	d009      	beq.n	ded4 <am_util_stdio_vsprintf+0x394>
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	3307      	adds	r3, #7
    dec4:	f023 0307 	bic.w	r3, r3, #7
    dec8:	f103 0208 	add.w	r2, r3, #8
    decc:	607a      	str	r2, [r7, #4]
    dece:	e9d3 3400 	ldrd	r3, r4, [r3]
    ded2:	e005      	b.n	dee0 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	1d1a      	adds	r2, r3, #4
    ded8:	607a      	str	r2, [r7, #4]
    deda:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dedc:	f04f 0400 	mov.w	r4, #0
    dee0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    dee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dee6:	2b00      	cmp	r3, #0
    dee8:	d01e      	beq.n	df28 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    deea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    deee:	f7ff fb90 	bl	d612 <ndigits_in_u64>
    def2:	4602      	mov	r2, r0
    def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    def6:	1a9b      	subs	r3, r3, r2
    def8:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    defa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    defe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    df00:	4619      	mov	r1, r3
    df02:	68f8      	ldr	r0, [r7, #12]
    df04:	f7ff fcf8 	bl	d8f8 <padbuffer>
    df08:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    df0a:	68fb      	ldr	r3, [r7, #12]
    df0c:	2b00      	cmp	r3, #0
    df0e:	d001      	beq.n	df14 <am_util_stdio_vsprintf+0x3d4>
    df10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df12:	e000      	b.n	df16 <am_util_stdio_vsprintf+0x3d6>
    df14:	2300      	movs	r3, #0
    df16:	68fa      	ldr	r2, [r7, #12]
    df18:	4413      	add	r3, r2
    df1a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    df1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df20:	4413      	add	r3, r2
    df22:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    df24:	2300      	movs	r3, #0
    df26:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    df28:	68fa      	ldr	r2, [r7, #12]
    df2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df2e:	f7ff fc1c 	bl	d76a <uint64_to_str>
    df32:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    df34:	68fb      	ldr	r3, [r7, #12]
    df36:	2b00      	cmp	r3, #0
    df38:	d003      	beq.n	df42 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    df3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df3c:	68fa      	ldr	r2, [r7, #12]
    df3e:	4413      	add	r3, r2
    df40:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    df42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df46:	4413      	add	r3, r2
    df48:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    df4a:	e0e9      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    df50:	2b00      	cmp	r3, #0
    df52:	d009      	beq.n	df68 <am_util_stdio_vsprintf+0x428>
    df54:	687b      	ldr	r3, [r7, #4]
    df56:	3307      	adds	r3, #7
    df58:	f023 0307 	bic.w	r3, r3, #7
    df5c:	f103 0208 	add.w	r2, r3, #8
    df60:	607a      	str	r2, [r7, #4]
    df62:	e9d3 3400 	ldrd	r3, r4, [r3]
    df66:	e005      	b.n	df74 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	1d1a      	adds	r2, r3, #4
    df6c:	607a      	str	r2, [r7, #4]
    df6e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df70:	ea4f 74e3 	mov.w	r4, r3, asr #31
    df74:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    df78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df7c:	2b00      	cmp	r3, #0
    df7e:	f174 0300 	sbcs.w	r3, r4, #0
    df82:	da0a      	bge.n	df9a <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    df84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df88:	425b      	negs	r3, r3
    df8a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    df8e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    df92:	2301      	movs	r3, #1
    df94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    df98:	e006      	b.n	dfa8 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    df9a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df9e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    dfa2:	2300      	movs	r3, #0
    dfa4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    dfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfaa:	2b00      	cmp	r3, #0
    dfac:	d04a      	beq.n	e044 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    dfae:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    dfb2:	4618      	mov	r0, r3
    dfb4:	4621      	mov	r1, r4
    dfb6:	f7ff fb4d 	bl	d654 <ndigits_in_i64>
    dfba:	4602      	mov	r2, r0
    dfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfbe:	1a9b      	subs	r3, r3, r2
    dfc0:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    dfc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d011      	beq.n	dfee <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    dfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfcc:	3b01      	subs	r3, #1
    dfce:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    dfd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dfd4:	2b30      	cmp	r3, #48	; 0x30
    dfd6:	d10a      	bne.n	dfee <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    dfd8:	68fb      	ldr	r3, [r7, #12]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d004      	beq.n	dfe8 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    dfde:	68fb      	ldr	r3, [r7, #12]
    dfe0:	1c5a      	adds	r2, r3, #1
    dfe2:	60fa      	str	r2, [r7, #12]
    dfe4:	222d      	movs	r2, #45	; 0x2d
    dfe6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    dfe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dfea:	3301      	adds	r3, #1
    dfec:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dfee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dff4:	4619      	mov	r1, r3
    dff6:	68f8      	ldr	r0, [r7, #12]
    dff8:	f7ff fc7e 	bl	d8f8 <padbuffer>
    dffc:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    dffe:	68fb      	ldr	r3, [r7, #12]
    e000:	2b00      	cmp	r3, #0
    e002:	d001      	beq.n	e008 <am_util_stdio_vsprintf+0x4c8>
    e004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e006:	e000      	b.n	e00a <am_util_stdio_vsprintf+0x4ca>
    e008:	2300      	movs	r3, #0
    e00a:	68fa      	ldr	r2, [r7, #12]
    e00c:	4413      	add	r3, r2
    e00e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e014:	4413      	add	r3, r2
    e016:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e018:	2300      	movs	r3, #0
    e01a:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e01c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e020:	2b00      	cmp	r3, #0
    e022:	d01e      	beq.n	e062 <am_util_stdio_vsprintf+0x522>
    e024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e028:	2b20      	cmp	r3, #32
    e02a:	d11a      	bne.n	e062 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e02c:	68fb      	ldr	r3, [r7, #12]
    e02e:	2b00      	cmp	r3, #0
    e030:	d004      	beq.n	e03c <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e032:	68fb      	ldr	r3, [r7, #12]
    e034:	1c5a      	adds	r2, r3, #1
    e036:	60fa      	str	r2, [r7, #12]
    e038:	222d      	movs	r2, #45	; 0x2d
    e03a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e03e:	3301      	adds	r3, #1
    e040:	647b      	str	r3, [r7, #68]	; 0x44
    e042:	e00e      	b.n	e062 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e044:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e048:	2b00      	cmp	r3, #0
    e04a:	d00a      	beq.n	e062 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e04c:	68fb      	ldr	r3, [r7, #12]
    e04e:	2b00      	cmp	r3, #0
    e050:	d004      	beq.n	e05c <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e052:	68fb      	ldr	r3, [r7, #12]
    e054:	1c5a      	adds	r2, r3, #1
    e056:	60fa      	str	r2, [r7, #12]
    e058:	222d      	movs	r2, #45	; 0x2d
    e05a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e05e:	3301      	adds	r3, #1
    e060:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e062:	68fa      	ldr	r2, [r7, #12]
    e064:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e068:	f7ff fb7f 	bl	d76a <uint64_to_str>
    e06c:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e06e:	68fb      	ldr	r3, [r7, #12]
    e070:	2b00      	cmp	r3, #0
    e072:	d003      	beq.n	e07c <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e076:	68fa      	ldr	r2, [r7, #12]
    e078:	4413      	add	r3, r2
    e07a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e080:	4413      	add	r3, r2
    e082:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e084:	e04c      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e086:	68fb      	ldr	r3, [r7, #12]
    e088:	2b00      	cmp	r3, #0
    e08a:	d048      	beq.n	e11e <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	3307      	adds	r3, #7
    e090:	f023 0307 	bic.w	r3, r3, #7
    e094:	f103 0208 	add.w	r2, r3, #8
    e098:	607a      	str	r2, [r7, #4]
    e09a:	e9d3 3400 	ldrd	r3, r4, [r3]
    e09e:	4618      	mov	r0, r3
    e0a0:	4621      	mov	r1, r4
    e0a2:	f7fe f8c7 	bl	c234 <__aeabi_d2f>
    e0a6:	4603      	mov	r3, r0
    e0a8:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e0aa:	68fb      	ldr	r3, [r7, #12]
    e0ac:	2214      	movs	r2, #20
    e0ae:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e0b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e0b2:	68f8      	ldr	r0, [r7, #12]
    e0b4:	ed97 0a06 	vldr	s0, [r7, #24]
    e0b8:	f7ff fc44 	bl	d944 <ftoa>
    e0bc:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	da14      	bge.n	e0ee <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e0ca:	d102      	bne.n	e0d2 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e0cc:	4b1e      	ldr	r3, [pc, #120]	; (e148 <am_util_stdio_vsprintf+0x608>)
    e0ce:	633b      	str	r3, [r7, #48]	; 0x30
    e0d0:	e008      	b.n	e0e4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0d4:	f113 0f02 	cmn.w	r3, #2
    e0d8:	d102      	bne.n	e0e0 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e0da:	4b1c      	ldr	r3, [pc, #112]	; (e14c <am_util_stdio_vsprintf+0x60c>)
    e0dc:	633b      	str	r3, [r7, #48]	; 0x30
    e0de:	e001      	b.n	e0e4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e0e0:	4b1b      	ldr	r3, [pc, #108]	; (e150 <am_util_stdio_vsprintf+0x610>)
    e0e2:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e0e4:	68fb      	ldr	r3, [r7, #12]
    e0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e0e8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e0ea:	2303      	movs	r3, #3
    e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e0f2:	4413      	add	r3, r2
    e0f4:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0f8:	68fa      	ldr	r2, [r7, #12]
    e0fa:	4413      	add	r3, r2
    e0fc:	60fb      	str	r3, [r7, #12]
                }
                break;
    e0fe:	e00e      	b.n	e11e <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e100:	68fb      	ldr	r3, [r7, #12]
    e102:	2b00      	cmp	r3, #0
    e104:	d005      	beq.n	e112 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e106:	68fb      	ldr	r3, [r7, #12]
    e108:	1c5a      	adds	r2, r3, #1
    e10a:	60fa      	str	r2, [r7, #12]
    e10c:	68ba      	ldr	r2, [r7, #8]
    e10e:	7812      	ldrb	r2, [r2, #0]
    e110:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e114:	3301      	adds	r3, #1
    e116:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e118:	e002      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>
                break;
    e11a:	bf00      	nop
    e11c:	e000      	b.n	e120 <am_util_stdio_vsprintf+0x5e0>
                break;
    e11e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e120:	68bb      	ldr	r3, [r7, #8]
    e122:	3301      	adds	r3, #1
    e124:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e126:	68bb      	ldr	r3, [r7, #8]
    e128:	781b      	ldrb	r3, [r3, #0]
    e12a:	2b00      	cmp	r3, #0
    e12c:	f47f ad13 	bne.w	db56 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e130:	68fb      	ldr	r3, [r7, #12]
    e132:	2b00      	cmp	r3, #0
    e134:	d002      	beq.n	e13c <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e136:	68fb      	ldr	r3, [r7, #12]
    e138:	2200      	movs	r2, #0
    e13a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e13e:	4618      	mov	r0, r3
    e140:	375c      	adds	r7, #92	; 0x5c
    e142:	46bd      	mov	sp, r7
    e144:	bd90      	pop	{r4, r7, pc}
    e146:	bf00      	nop
    e148:	00302e30 	.word	0x00302e30
    e14c:	00232e23 	.word	0x00232e23
    e150:	003f2e3f 	.word	0x003f2e3f

0000e154 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e154:	b40f      	push	{r0, r1, r2, r3}
    e156:	b580      	push	{r7, lr}
    e158:	b082      	sub	sp, #8
    e15a:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e15c:	4b0d      	ldr	r3, [pc, #52]	; (e194 <am_util_stdio_printf+0x40>)
    e15e:	681b      	ldr	r3, [r3, #0]
    e160:	2b00      	cmp	r3, #0
    e162:	d101      	bne.n	e168 <am_util_stdio_printf+0x14>
    {
        return 0;
    e164:	2300      	movs	r3, #0
    e166:	e00d      	b.n	e184 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e168:	f107 0314 	add.w	r3, r7, #20
    e16c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e16e:	683a      	ldr	r2, [r7, #0]
    e170:	6939      	ldr	r1, [r7, #16]
    e172:	4809      	ldr	r0, [pc, #36]	; (e198 <am_util_stdio_printf+0x44>)
    e174:	f7ff fce4 	bl	db40 <am_util_stdio_vsprintf>
    e178:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e17a:	4b06      	ldr	r3, [pc, #24]	; (e194 <am_util_stdio_printf+0x40>)
    e17c:	681b      	ldr	r3, [r3, #0]
    e17e:	4806      	ldr	r0, [pc, #24]	; (e198 <am_util_stdio_printf+0x44>)
    e180:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e182:	687b      	ldr	r3, [r7, #4]
}
    e184:	4618      	mov	r0, r3
    e186:	3708      	adds	r7, #8
    e188:	46bd      	mov	sp, r7
    e18a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e18e:	b004      	add	sp, #16
    e190:	4770      	bx	lr
    e192:	bf00      	nop
    e194:	1000c1a4 	.word	0x1000c1a4
    e198:	1000c058 	.word	0x1000c058

0000e19c <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e19c:	b480      	push	{r7}
    e19e:	b085      	sub	sp, #20
    e1a0:	af00      	add	r7, sp, #0
    e1a2:	60f8      	str	r0, [r7, #12]
    e1a4:	4638      	mov	r0, r7
    e1a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e1aa:	683b      	ldr	r3, [r7, #0]
    e1ac:	461a      	mov	r2, r3
    e1ae:	4613      	mov	r3, r2
    e1b0:	009b      	lsls	r3, r3, #2
    e1b2:	4413      	add	r3, r2
    e1b4:	009b      	lsls	r3, r3, #2
    e1b6:	461a      	mov	r2, r3
    e1b8:	68fb      	ldr	r3, [r7, #12]
    e1ba:	4413      	add	r3, r2
    e1bc:	2200      	movs	r2, #0
    e1be:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e1c0:	683b      	ldr	r3, [r7, #0]
    e1c2:	461a      	mov	r2, r3
    e1c4:	4613      	mov	r3, r2
    e1c6:	009b      	lsls	r3, r3, #2
    e1c8:	4413      	add	r3, r2
    e1ca:	009b      	lsls	r3, r3, #2
    e1cc:	461a      	mov	r2, r3
    e1ce:	68fb      	ldr	r3, [r7, #12]
    e1d0:	4413      	add	r3, r2
    e1d2:	2200      	movs	r2, #0
    e1d4:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e1d6:	683b      	ldr	r3, [r7, #0]
    e1d8:	461a      	mov	r2, r3
    e1da:	4613      	mov	r3, r2
    e1dc:	009b      	lsls	r3, r3, #2
    e1de:	4413      	add	r3, r2
    e1e0:	009b      	lsls	r3, r3, #2
    e1e2:	461a      	mov	r2, r3
    e1e4:	68fb      	ldr	r3, [r7, #12]
    e1e6:	4413      	add	r3, r2
    e1e8:	2200      	movs	r2, #0
    e1ea:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e1ec:	683b      	ldr	r3, [r7, #0]
    e1ee:	461a      	mov	r2, r3
    e1f0:	4613      	mov	r3, r2
    e1f2:	009b      	lsls	r3, r3, #2
    e1f4:	4413      	add	r3, r2
    e1f6:	009b      	lsls	r3, r3, #2
    e1f8:	461a      	mov	r2, r3
    e1fa:	68fb      	ldr	r3, [r7, #12]
    e1fc:	4413      	add	r3, r2
    e1fe:	68ba      	ldr	r2, [r7, #8]
    e200:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e202:	683b      	ldr	r3, [r7, #0]
    e204:	461a      	mov	r2, r3
    e206:	4613      	mov	r3, r2
    e208:	009b      	lsls	r3, r3, #2
    e20a:	4413      	add	r3, r2
    e20c:	009b      	lsls	r3, r3, #2
    e20e:	461a      	mov	r2, r3
    e210:	68fb      	ldr	r3, [r7, #12]
    e212:	4413      	add	r3, r2
    e214:	687a      	ldr	r2, [r7, #4]
    e216:	601a      	str	r2, [r3, #0]
}
    e218:	bf00      	nop
    e21a:	3714      	adds	r7, #20
    e21c:	46bd      	mov	sp, r7
    e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e222:	4770      	bx	lr

0000e224 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e224:	b580      	push	{r7, lr}
    e226:	b086      	sub	sp, #24
    e228:	af00      	add	r7, sp, #0
    e22a:	60f8      	str	r0, [r7, #12]
    e22c:	60b9      	str	r1, [r7, #8]
    e22e:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e230:	2300      	movs	r3, #0
    e232:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e234:	2300      	movs	r3, #0
    e236:	617b      	str	r3, [r7, #20]
    e238:	e00e      	b.n	e258 <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e23a:	697a      	ldr	r2, [r7, #20]
    e23c:	4613      	mov	r3, r2
    e23e:	005b      	lsls	r3, r3, #1
    e240:	4413      	add	r3, r2
    e242:	009b      	lsls	r3, r3, #2
    e244:	461a      	mov	r2, r3
    e246:	68bb      	ldr	r3, [r7, #8]
    e248:	4413      	add	r3, r2
    e24a:	cb0e      	ldmia	r3, {r1, r2, r3}
    e24c:	68f8      	ldr	r0, [r7, #12]
    e24e:	f7ff ffa5 	bl	e19c <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e252:	697b      	ldr	r3, [r7, #20]
    e254:	3301      	adds	r3, #1
    e256:	617b      	str	r3, [r7, #20]
    e258:	697a      	ldr	r2, [r7, #20]
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	429a      	cmp	r2, r3
    e25e:	d3ec      	bcc.n	e23a <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e260:	bf00      	nop
    e262:	3718      	adds	r7, #24
    e264:	46bd      	mov	sp, r7
    e266:	bd80      	pop	{r7, pc}

0000e268 <am_app_utils_ring_buffer_push>:
//                  If false, data could be pushed no matter buffer is full or not.
// Return:
//      bytes pushed into the ring buffer
//*****************************************************************************
uint32_t am_app_utils_ring_buffer_push(am_app_utils_ring_buffer_t *psBuffer, void *pvSource, uint32_t ui32Bytes, bool bFullCheck)
{
    e268:	b580      	push	{r7, lr}
    e26a:	b088      	sub	sp, #32
    e26c:	af00      	add	r7, sp, #0
    e26e:	60f8      	str	r0, [r7, #12]
    e270:	60b9      	str	r1, [r7, #8]
    e272:	607a      	str	r2, [r7, #4]
    e274:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32CopyLen = 0;
    e276:	2300      	movs	r3, #0
    e278:	61fb      	str	r3, [r7, #28]
    uint32_t ui32ReturnPushLen = 0;
    e27a:	2300      	movs	r3, #0
    e27c:	617b      	str	r3, [r7, #20]
    uint32_t ui32TempLen = 0;
    e27e:	2300      	movs	r3, #0
    e280:	61bb      	str	r3, [r7, #24]
    uint8_t *pui8Source;
    
    ui32CopyLen = ui32Bytes;
    e282:	687b      	ldr	r3, [r7, #4]
    e284:	61fb      	str	r3, [r7, #28]
    pui8Source = (uint8_t*)pvSource;
    e286:	68bb      	ldr	r3, [r7, #8]
    e288:	613b      	str	r3, [r7, #16]

    if(bFullCheck == true)
    e28a:	78fb      	ldrb	r3, [r7, #3]
    e28c:	2b00      	cmp	r3, #0
    e28e:	f000 8092 	beq.w	e3b6 <am_app_utils_ring_buffer_push+0x14e>
    {
        // won't push any data if buffer is full
        if(am_app_utils_ring_buffer_full(psBuffer))
    e292:	68fb      	ldr	r3, [r7, #12]
    e294:	685a      	ldr	r2, [r3, #4]
    e296:	68fb      	ldr	r3, [r7, #12]
    e298:	689b      	ldr	r3, [r3, #8]
    e29a:	429a      	cmp	r2, r3
    e29c:	d109      	bne.n	e2b2 <am_app_utils_ring_buffer_push+0x4a>
    e29e:	68fb      	ldr	r3, [r7, #12]
    e2a0:	68db      	ldr	r3, [r3, #12]
    e2a2:	2b01      	cmp	r3, #1
    e2a4:	d105      	bne.n	e2b2 <am_app_utils_ring_buffer_push+0x4a>
        {
            ui32CopyLen = 0;
    e2a6:	2300      	movs	r3, #0
    e2a8:	61fb      	str	r3, [r7, #28]
            ui32ReturnPushLen =0;
    e2aa:	2300      	movs	r3, #0
    e2ac:	617b      	str	r3, [r7, #20]
            return ui32ReturnPushLen;
    e2ae:	697b      	ldr	r3, [r7, #20]
    e2b0:	e0f7      	b.n	e4a2 <am_app_utils_ring_buffer_push+0x23a>
        }
    
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e2b2:	68fb      	ldr	r3, [r7, #12]
    e2b4:	685a      	ldr	r2, [r3, #4]
    e2b6:	68fb      	ldr	r3, [r7, #12]
    e2b8:	689b      	ldr	r3, [r3, #8]
    e2ba:	429a      	cmp	r2, r3
    e2bc:	d10f      	bne.n	e2de <am_app_utils_ring_buffer_push+0x76>
    e2be:	68fb      	ldr	r3, [r7, #12]
    e2c0:	68db      	ldr	r3, [r3, #12]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d10b      	bne.n	e2de <am_app_utils_ring_buffer_push+0x76>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2c6:	68fb      	ldr	r3, [r7, #12]
    e2c8:	691b      	ldr	r3, [r3, #16]
    e2ca:	69fa      	ldr	r2, [r7, #28]
    e2cc:	429a      	cmp	r2, r3
    e2ce:	d32b      	bcc.n	e328 <am_app_utils_ring_buffer_push+0xc0>
            {      
                psBuffer->ui32OverWriting = 1;
    e2d0:	68fb      	ldr	r3, [r7, #12]
    e2d2:	2201      	movs	r2, #1
    e2d4:	60da      	str	r2, [r3, #12]
                ui32CopyLen = psBuffer->ui32Capacity;
    e2d6:	68fb      	ldr	r3, [r7, #12]
    e2d8:	691b      	ldr	r3, [r3, #16]
    e2da:	61fb      	str	r3, [r7, #28]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2dc:	e024      	b.n	e328 <am_app_utils_ring_buffer_push+0xc0>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e2de:	68fb      	ldr	r3, [r7, #12]
    e2e0:	689a      	ldr	r2, [r3, #8]
    e2e2:	68fb      	ldr	r3, [r7, #12]
    e2e4:	691b      	ldr	r3, [r3, #16]
    e2e6:	441a      	add	r2, r3
    e2e8:	68fb      	ldr	r3, [r7, #12]
    e2ea:	685b      	ldr	r3, [r3, #4]
    e2ec:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e2ee:	68fa      	ldr	r2, [r7, #12]
    e2f0:	6912      	ldr	r2, [r2, #16]
    e2f2:	fbb3 f1f2 	udiv	r1, r3, r2
    e2f6:	fb02 f201 	mul.w	r2, r2, r1
    e2fa:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e2fc:	69fa      	ldr	r2, [r7, #28]
    e2fe:	429a      	cmp	r2, r3
    e300:	d312      	bcc.n	e328 <am_app_utils_ring_buffer_push+0xc0>
            {    
                psBuffer->ui32OverWriting = 1;
    e302:	68fb      	ldr	r3, [r7, #12]
    e304:	2201      	movs	r2, #1
    e306:	60da      	str	r2, [r3, #12]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e308:	68fb      	ldr	r3, [r7, #12]
    e30a:	689a      	ldr	r2, [r3, #8]
    e30c:	68fb      	ldr	r3, [r7, #12]
    e30e:	691b      	ldr	r3, [r3, #16]
    e310:	441a      	add	r2, r3
    e312:	68fb      	ldr	r3, [r7, #12]
    e314:	685b      	ldr	r3, [r3, #4]
    e316:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity);
    e318:	68fa      	ldr	r2, [r7, #12]
    e31a:	6912      	ldr	r2, [r2, #16]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e31c:	fbb3 f1f2 	udiv	r1, r3, r2
    e320:	fb02 f201 	mul.w	r2, r2, r1
    e324:	1a9b      	subs	r3, r3, r2
    e326:	61fb      	str	r3, [r7, #28]
            }
    
        }        
            
        ui32ReturnPushLen = ui32CopyLen;
    e328:	69fb      	ldr	r3, [r7, #28]
    e32a:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e32c:	e020      	b.n	e370 <am_app_utils_ring_buffer_push+0x108>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e32e:	68fb      	ldr	r3, [r7, #12]
    e330:	691a      	ldr	r2, [r3, #16]
    e332:	68fb      	ldr	r3, [r7, #12]
    e334:	685b      	ldr	r3, [r3, #4]
    e336:	1ad3      	subs	r3, r2, r3
    e338:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e33a:	68fb      	ldr	r3, [r7, #12]
    e33c:	681a      	ldr	r2, [r3, #0]
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	685b      	ldr	r3, [r3, #4]
    e342:	4413      	add	r3, r2
    e344:	69ba      	ldr	r2, [r7, #24]
    e346:	6939      	ldr	r1, [r7, #16]
    e348:	4618      	mov	r0, r3
    e34a:	f7fd fed9 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e34e:	68fb      	ldr	r3, [r7, #12]
    e350:	685a      	ldr	r2, [r3, #4]
    e352:	69bb      	ldr	r3, [r7, #24]
    e354:	4413      	add	r3, r2
    e356:	68fa      	ldr	r2, [r7, #12]
    e358:	6912      	ldr	r2, [r2, #16]
    e35a:	fbb3 f1f2 	udiv	r1, r3, r2
    e35e:	fb02 f201 	mul.w	r2, r2, r1
    e362:	1a9a      	subs	r2, r3, r2
    e364:	68fb      	ldr	r3, [r7, #12]
    e366:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e368:	69fa      	ldr	r2, [r7, #28]
    e36a:	69bb      	ldr	r3, [r7, #24]
    e36c:	1ad3      	subs	r3, r2, r3
    e36e:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e370:	68fb      	ldr	r3, [r7, #12]
    e372:	685a      	ldr	r2, [r3, #4]
    e374:	69fb      	ldr	r3, [r7, #28]
    e376:	441a      	add	r2, r3
    e378:	68fb      	ldr	r3, [r7, #12]
    e37a:	691b      	ldr	r3, [r3, #16]
    e37c:	429a      	cmp	r2, r3
    e37e:	d2d6      	bcs.n	e32e <am_app_utils_ring_buffer_push+0xc6>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e380:	68fb      	ldr	r3, [r7, #12]
    e382:	681a      	ldr	r2, [r3, #0]
    e384:	68fb      	ldr	r3, [r7, #12]
    e386:	685b      	ldr	r3, [r3, #4]
    e388:	18d0      	adds	r0, r2, r3
    e38a:	693a      	ldr	r2, [r7, #16]
    e38c:	69bb      	ldr	r3, [r7, #24]
    e38e:	4413      	add	r3, r2
    e390:	69fa      	ldr	r2, [r7, #28]
    e392:	4619      	mov	r1, r3
    e394:	f7fd feb4 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e398:	68fb      	ldr	r3, [r7, #12]
    e39a:	685a      	ldr	r2, [r3, #4]
    e39c:	69fb      	ldr	r3, [r7, #28]
    e39e:	4413      	add	r3, r2
    e3a0:	68fa      	ldr	r2, [r7, #12]
    e3a2:	6912      	ldr	r2, [r2, #16]
    e3a4:	fbb3 f1f2 	udiv	r1, r3, r2
    e3a8:	fb02 f201 	mul.w	r2, r2, r1
    e3ac:	1a9a      	subs	r2, r3, r2
    e3ae:	68fb      	ldr	r3, [r7, #12]
    e3b0:	605a      	str	r2, [r3, #4]
        
        return ui32ReturnPushLen;
    e3b2:	697b      	ldr	r3, [r7, #20]
    e3b4:	e075      	b.n	e4a2 <am_app_utils_ring_buffer_push+0x23a>
    }
    else        // if no full check, the return bytes are always ui32Bytes.
    {
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e3b6:	68fb      	ldr	r3, [r7, #12]
    e3b8:	685a      	ldr	r2, [r3, #4]
    e3ba:	68fb      	ldr	r3, [r7, #12]
    e3bc:	689b      	ldr	r3, [r3, #8]
    e3be:	429a      	cmp	r2, r3
    e3c0:	d10c      	bne.n	e3dc <am_app_utils_ring_buffer_push+0x174>
    e3c2:	68fb      	ldr	r3, [r7, #12]
    e3c4:	68db      	ldr	r3, [r3, #12]
    e3c6:	2b00      	cmp	r3, #0
    e3c8:	d108      	bne.n	e3dc <am_app_utils_ring_buffer_push+0x174>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3ca:	68fb      	ldr	r3, [r7, #12]
    e3cc:	691b      	ldr	r3, [r3, #16]
    e3ce:	69fa      	ldr	r2, [r7, #28]
    e3d0:	429a      	cmp	r2, r3
    e3d2:	d318      	bcc.n	e406 <am_app_utils_ring_buffer_push+0x19e>
            {      
                psBuffer->ui32OverWriting = 1;
    e3d4:	68fb      	ldr	r3, [r7, #12]
    e3d6:	2201      	movs	r2, #1
    e3d8:	60da      	str	r2, [r3, #12]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3da:	e014      	b.n	e406 <am_app_utils_ring_buffer_push+0x19e>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3dc:	68fb      	ldr	r3, [r7, #12]
    e3de:	689a      	ldr	r2, [r3, #8]
    e3e0:	68fb      	ldr	r3, [r7, #12]
    e3e2:	691b      	ldr	r3, [r3, #16]
    e3e4:	441a      	add	r2, r3
    e3e6:	68fb      	ldr	r3, [r7, #12]
    e3e8:	685b      	ldr	r3, [r3, #4]
    e3ea:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e3ec:	68fa      	ldr	r2, [r7, #12]
    e3ee:	6912      	ldr	r2, [r2, #16]
    e3f0:	fbb3 f1f2 	udiv	r1, r3, r2
    e3f4:	fb02 f201 	mul.w	r2, r2, r1
    e3f8:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3fa:	69fa      	ldr	r2, [r7, #28]
    e3fc:	429a      	cmp	r2, r3
    e3fe:	d302      	bcc.n	e406 <am_app_utils_ring_buffer_push+0x19e>
            {    
                psBuffer->ui32OverWriting = 1;
    e400:	68fb      	ldr	r3, [r7, #12]
    e402:	2201      	movs	r2, #1
    e404:	60da      	str	r2, [r3, #12]
            }
        }        

        ui32ReturnPushLen = ui32CopyLen;
    e406:	69fb      	ldr	r3, [r7, #28]
    e408:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e40a:	e020      	b.n	e44e <am_app_utils_ring_buffer_push+0x1e6>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e40c:	68fb      	ldr	r3, [r7, #12]
    e40e:	691a      	ldr	r2, [r3, #16]
    e410:	68fb      	ldr	r3, [r7, #12]
    e412:	685b      	ldr	r3, [r3, #4]
    e414:	1ad3      	subs	r3, r2, r3
    e416:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	681a      	ldr	r2, [r3, #0]
    e41c:	68fb      	ldr	r3, [r7, #12]
    e41e:	685b      	ldr	r3, [r3, #4]
    e420:	4413      	add	r3, r2
    e422:	69ba      	ldr	r2, [r7, #24]
    e424:	6939      	ldr	r1, [r7, #16]
    e426:	4618      	mov	r0, r3
    e428:	f7fd fe6a 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e42c:	68fb      	ldr	r3, [r7, #12]
    e42e:	685a      	ldr	r2, [r3, #4]
    e430:	69bb      	ldr	r3, [r7, #24]
    e432:	4413      	add	r3, r2
    e434:	68fa      	ldr	r2, [r7, #12]
    e436:	6912      	ldr	r2, [r2, #16]
    e438:	fbb3 f1f2 	udiv	r1, r3, r2
    e43c:	fb02 f201 	mul.w	r2, r2, r1
    e440:	1a9a      	subs	r2, r3, r2
    e442:	68fb      	ldr	r3, [r7, #12]
    e444:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e446:	69fa      	ldr	r2, [r7, #28]
    e448:	69bb      	ldr	r3, [r7, #24]
    e44a:	1ad3      	subs	r3, r2, r3
    e44c:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e44e:	68fb      	ldr	r3, [r7, #12]
    e450:	685a      	ldr	r2, [r3, #4]
    e452:	69fb      	ldr	r3, [r7, #28]
    e454:	441a      	add	r2, r3
    e456:	68fb      	ldr	r3, [r7, #12]
    e458:	691b      	ldr	r3, [r3, #16]
    e45a:	429a      	cmp	r2, r3
    e45c:	d2d6      	bcs.n	e40c <am_app_utils_ring_buffer_push+0x1a4>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e45e:	68fb      	ldr	r3, [r7, #12]
    e460:	681a      	ldr	r2, [r3, #0]
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	685b      	ldr	r3, [r3, #4]
    e466:	18d0      	adds	r0, r2, r3
    e468:	693a      	ldr	r2, [r7, #16]
    e46a:	69bb      	ldr	r3, [r7, #24]
    e46c:	4413      	add	r3, r2
    e46e:	69fa      	ldr	r2, [r7, #28]
    e470:	4619      	mov	r1, r3
    e472:	f7fd fe45 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e476:	68fb      	ldr	r3, [r7, #12]
    e478:	685a      	ldr	r2, [r3, #4]
    e47a:	69fb      	ldr	r3, [r7, #28]
    e47c:	4413      	add	r3, r2
    e47e:	68fa      	ldr	r2, [r7, #12]
    e480:	6912      	ldr	r2, [r2, #16]
    e482:	fbb3 f1f2 	udiv	r1, r3, r2
    e486:	fb02 f201 	mul.w	r2, r2, r1
    e48a:	1a9a      	subs	r2, r3, r2
    e48c:	68fb      	ldr	r3, [r7, #12]
    e48e:	605a      	str	r2, [r3, #4]
        
        //
        // Keep read and write at same position
        //
        if(psBuffer->ui32OverWriting == 1)
    e490:	68fb      	ldr	r3, [r7, #12]
    e492:	68db      	ldr	r3, [r3, #12]
    e494:	2b01      	cmp	r3, #1
    e496:	d103      	bne.n	e4a0 <am_app_utils_ring_buffer_push+0x238>
        {
            psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e498:	68fb      	ldr	r3, [r7, #12]
    e49a:	685a      	ldr	r2, [r3, #4]
    e49c:	68fb      	ldr	r3, [r7, #12]
    e49e:	609a      	str	r2, [r3, #8]
        }
        
        return ui32ReturnPushLen;
    e4a0:	697b      	ldr	r3, [r7, #20]
    }
}
    e4a2:	4618      	mov	r0, r3
    e4a4:	3720      	adds	r7, #32
    e4a6:	46bd      	mov	sp, r7
    e4a8:	bd80      	pop	{r7, pc}

0000e4aa <am_app_utils_ring_buffer_pop>:


uint32_t am_app_utils_ring_buffer_pop(am_app_utils_ring_buffer_t *psBuffer, void *pvDest,
                         uint32_t ui32Bytes)
{
    e4aa:	b580      	push	{r7, lr}
    e4ac:	b08a      	sub	sp, #40	; 0x28
    e4ae:	af00      	add	r7, sp, #0
    e4b0:	60f8      	str	r0, [r7, #12]
    e4b2:	60b9      	str	r1, [r7, #8]
    e4b4:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e4b6:	2300      	movs	r3, #0
    e4b8:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint32_t ui32TempLen = 0;
    e4ba:	2300      	movs	r3, #0
    e4bc:	623b      	str	r3, [r7, #32]
    
    uint32_t ui32DataLen = 0;
    e4be:	2300      	movs	r3, #0
    e4c0:	61fb      	str	r3, [r7, #28]

    uint32_t ui32ReturnPopLen = 0;
    e4c2:	2300      	movs	r3, #0
    e4c4:	61bb      	str	r3, [r7, #24]

    uint8_t *pui8Dest;

    pui8Dest = (uint8_t *) pvDest;
    e4c6:	68bb      	ldr	r3, [r7, #8]
    e4c8:	617b      	str	r3, [r7, #20]
    ui32DataLen = am_app_utils_get_ring_buffer_status(psBuffer);
    e4ca:	68f8      	ldr	r0, [r7, #12]
    e4cc:	f000 f862 	bl	e594 <am_app_utils_get_ring_buffer_status>
    e4d0:	61f8      	str	r0, [r7, #28]
   
    if(am_app_utils_ring_buffer_overwrite(psBuffer))
    e4d2:	68fb      	ldr	r3, [r7, #12]
    e4d4:	685a      	ldr	r2, [r3, #4]
    e4d6:	68fb      	ldr	r3, [r7, #12]
    e4d8:	689b      	ldr	r3, [r3, #8]
    e4da:	429a      	cmp	r2, r3
    e4dc:	d007      	beq.n	e4ee <am_app_utils_ring_buffer_pop+0x44>
    e4de:	68fb      	ldr	r3, [r7, #12]
    e4e0:	68db      	ldr	r3, [r3, #12]
    e4e2:	2b01      	cmp	r3, #1
    e4e4:	d103      	bne.n	e4ee <am_app_utils_ring_buffer_pop+0x44>
    {
        psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e4e6:	68fb      	ldr	r3, [r7, #12]
    e4e8:	685a      	ldr	r2, [r3, #4]
    e4ea:	68fb      	ldr	r3, [r7, #12]
    e4ec:	609a      	str	r2, [r3, #8]
       
    }

    // pop len can't exceed the length of buffer
    ui32CopyLen = ui32Bytes < ui32DataLen ? ui32Bytes : ui32DataLen;
    e4ee:	69fa      	ldr	r2, [r7, #28]
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	4293      	cmp	r3, r2
    e4f4:	bf28      	it	cs
    e4f6:	4613      	movcs	r3, r2
    e4f8:	627b      	str	r3, [r7, #36]	; 0x24
    
    ui32ReturnPopLen = ui32CopyLen;
    e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4fc:	61bb      	str	r3, [r7, #24]

    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e4fe:	e020      	b.n	e542 <am_app_utils_ring_buffer_pop+0x98>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read;
    e500:	68fb      	ldr	r3, [r7, #12]
    e502:	691a      	ldr	r2, [r3, #16]
    e504:	68fb      	ldr	r3, [r7, #12]
    e506:	689b      	ldr	r3, [r3, #8]
    e508:	1ad3      	subs	r3, r2, r3
    e50a:	623b      	str	r3, [r7, #32]
        memcpy(pui8Dest, (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32TempLen);
    e50c:	68fb      	ldr	r3, [r7, #12]
    e50e:	681a      	ldr	r2, [r3, #0]
    e510:	68fb      	ldr	r3, [r7, #12]
    e512:	689b      	ldr	r3, [r3, #8]
    e514:	4413      	add	r3, r2
    e516:	6a3a      	ldr	r2, [r7, #32]
    e518:	4619      	mov	r1, r3
    e51a:	6978      	ldr	r0, [r7, #20]
    e51c:	f7fd fdf0 	bl	c100 <memcpy>
        psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32TempLen) % psBuffer->ui32Capacity);
    e520:	68fb      	ldr	r3, [r7, #12]
    e522:	689a      	ldr	r2, [r3, #8]
    e524:	6a3b      	ldr	r3, [r7, #32]
    e526:	4413      	add	r3, r2
    e528:	68fa      	ldr	r2, [r7, #12]
    e52a:	6912      	ldr	r2, [r2, #16]
    e52c:	fbb3 f1f2 	udiv	r1, r3, r2
    e530:	fb02 f201 	mul.w	r2, r2, r1
    e534:	1a9a      	subs	r2, r3, r2
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	609a      	str	r2, [r3, #8]
        ui32CopyLen -= ui32TempLen;
    e53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e53c:	6a3b      	ldr	r3, [r7, #32]
    e53e:	1ad3      	subs	r3, r2, r3
    e540:	627b      	str	r3, [r7, #36]	; 0x24
    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e542:	68fb      	ldr	r3, [r7, #12]
    e544:	689a      	ldr	r2, [r3, #8]
    e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e548:	441a      	add	r2, r3
    e54a:	68fb      	ldr	r3, [r7, #12]
    e54c:	691b      	ldr	r3, [r3, #16]
    e54e:	429a      	cmp	r2, r3
    e550:	d2d6      	bcs.n	e500 <am_app_utils_ring_buffer_pop+0x56>
    }

//    configASSERT((psBuffer->ui32BufferHead_read + ui32CopyLen) < psBuffer->ui32Capacity);
    
    memcpy(&pui8Dest[ui32TempLen], (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32CopyLen);
    e552:	697a      	ldr	r2, [r7, #20]
    e554:	6a3b      	ldr	r3, [r7, #32]
    e556:	18d0      	adds	r0, r2, r3
    e558:	68fb      	ldr	r3, [r7, #12]
    e55a:	681a      	ldr	r2, [r3, #0]
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	689b      	ldr	r3, [r3, #8]
    e560:	4413      	add	r3, r2
    e562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e564:	4619      	mov	r1, r3
    e566:	f7fd fdcb 	bl	c100 <memcpy>
    
    psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32CopyLen) % psBuffer->ui32Capacity);
    e56a:	68fb      	ldr	r3, [r7, #12]
    e56c:	689a      	ldr	r2, [r3, #8]
    e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e570:	4413      	add	r3, r2
    e572:	68fa      	ldr	r2, [r7, #12]
    e574:	6912      	ldr	r2, [r2, #16]
    e576:	fbb3 f1f2 	udiv	r1, r3, r2
    e57a:	fb02 f201 	mul.w	r2, r2, r1
    e57e:	1a9a      	subs	r2, r3, r2
    e580:	68fb      	ldr	r3, [r7, #12]
    e582:	609a      	str	r2, [r3, #8]
      
    psBuffer->ui32OverWriting = 0;
    e584:	68fb      	ldr	r3, [r7, #12]
    e586:	2200      	movs	r2, #0
    e588:	60da      	str	r2, [r3, #12]

    return ui32ReturnPopLen;
    e58a:	69bb      	ldr	r3, [r7, #24]
}
    e58c:	4618      	mov	r0, r3
    e58e:	3728      	adds	r7, #40	; 0x28
    e590:	46bd      	mov	sp, r7
    e592:	bd80      	pop	{r7, pc}

0000e594 <am_app_utils_get_ring_buffer_status>:
//! @return The number of data left.
//
//*****************************************************************************
uint32_t
am_app_utils_get_ring_buffer_status(am_app_utils_ring_buffer_t *psBuffer)
{
    e594:	b480      	push	{r7}
    e596:	b085      	sub	sp, #20
    e598:	af00      	add	r7, sp, #0
    e59a:	6078      	str	r0, [r7, #4]
    uint32_t ui32NewDataLen = 0;
    e59c:	2300      	movs	r3, #0
    e59e:	60fb      	str	r3, [r7, #12]
    
    if (am_app_utils_ring_buffer_overwrite(psBuffer) || am_app_utils_ring_buffer_full(psBuffer))
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	685a      	ldr	r2, [r3, #4]
    e5a4:	687b      	ldr	r3, [r7, #4]
    e5a6:	689b      	ldr	r3, [r3, #8]
    e5a8:	429a      	cmp	r2, r3
    e5aa:	d003      	beq.n	e5b4 <am_app_utils_get_ring_buffer_status+0x20>
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	68db      	ldr	r3, [r3, #12]
    e5b0:	2b01      	cmp	r3, #1
    e5b2:	d009      	beq.n	e5c8 <am_app_utils_get_ring_buffer_status+0x34>
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	685a      	ldr	r2, [r3, #4]
    e5b8:	687b      	ldr	r3, [r7, #4]
    e5ba:	689b      	ldr	r3, [r3, #8]
    e5bc:	429a      	cmp	r2, r3
    e5be:	d108      	bne.n	e5d2 <am_app_utils_get_ring_buffer_status+0x3e>
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	68db      	ldr	r3, [r3, #12]
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d104      	bne.n	e5d2 <am_app_utils_get_ring_buffer_status+0x3e>
    {
        ui32NewDataLen = psBuffer->ui32Capacity;
    e5c8:	687b      	ldr	r3, [r7, #4]
    e5ca:	691b      	ldr	r3, [r3, #16]
    e5cc:	60fb      	str	r3, [r7, #12]
        return ui32NewDataLen;
    e5ce:	68fb      	ldr	r3, [r7, #12]
    e5d0:	e010      	b.n	e5f4 <am_app_utils_get_ring_buffer_status+0x60>
    }
    
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	685a      	ldr	r2, [r3, #4]
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	691b      	ldr	r3, [r3, #16]
    e5da:	441a      	add	r2, r3
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	689b      	ldr	r3, [r3, #8]
    e5e0:	1ad3      	subs	r3, r2, r3
        psBuffer->ui32Capacity);
    e5e2:	687a      	ldr	r2, [r7, #4]
    e5e4:	6912      	ldr	r2, [r2, #16]
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e5e6:	fbb3 f1f2 	udiv	r1, r3, r2
    e5ea:	fb02 f201 	mul.w	r2, r2, r1
    e5ee:	1a9b      	subs	r3, r3, r2
    e5f0:	60fb      	str	r3, [r7, #12]

    return ui32NewDataLen; 
    e5f2:	68fb      	ldr	r3, [r7, #12]

}
    e5f4:	4618      	mov	r0, r3
    e5f6:	3714      	adds	r7, #20
    e5f8:	46bd      	mov	sp, r7
    e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5fe:	4770      	bx	lr

0000e600 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e600:	b580      	push	{r7, lr}
    e602:	b082      	sub	sp, #8
    e604:	af00      	add	r7, sp, #0
    e606:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e608:	687b      	ldr	r3, [r7, #4]
    e60a:	2b00      	cmp	r3, #0
    e60c:	d03d      	beq.n	e68a <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e60e:	687b      	ldr	r3, [r7, #4]
    e610:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e612:	2b31      	cmp	r3, #49	; 0x31
    e614:	d839      	bhi.n	e68a <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e616:	687b      	ldr	r3, [r7, #4]
    e618:	685b      	ldr	r3, [r3, #4]
    e61a:	f003 0302 	and.w	r3, r3, #2
    e61e:	2b00      	cmp	r3, #0
    e620:	d019      	beq.n	e656 <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e622:	687b      	ldr	r3, [r7, #4]
    e624:	681a      	ldr	r2, [r3, #0]
    e626:	4b1b      	ldr	r3, [pc, #108]	; (e694 <am_devices_led_init+0x94>)
    e628:	6819      	ldr	r1, [r3, #0]
    e62a:	4610      	mov	r0, r2
    e62c:	f7fe faca 	bl	cbc4 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	681b      	ldr	r3, [r3, #0]
    e634:	2103      	movs	r1, #3
    e636:	4618      	mov	r0, r3
    e638:	f7fe fcf8 	bl	d02c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e63c:	687b      	ldr	r3, [r7, #4]
    e63e:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e640:	687b      	ldr	r3, [r7, #4]
    e642:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e644:	b2db      	uxtb	r3, r3
    e646:	f003 0301 	and.w	r3, r3, #1
    e64a:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e64c:	4619      	mov	r1, r3
    e64e:	4610      	mov	r0, r2
    e650:	f7fe fcec 	bl	d02c <am_hal_gpio_state_write>
    e654:	e01a      	b.n	e68c <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e656:	687b      	ldr	r3, [r7, #4]
    e658:	681a      	ldr	r2, [r3, #0]
    e65a:	4b0f      	ldr	r3, [pc, #60]	; (e698 <am_devices_led_init+0x98>)
    e65c:	6819      	ldr	r1, [r3, #0]
    e65e:	4610      	mov	r0, r2
    e660:	f7fe fab0 	bl	cbc4 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	681b      	ldr	r3, [r3, #0]
    e668:	2103      	movs	r1, #3
    e66a:	4618      	mov	r0, r3
    e66c:	f7fe fcde 	bl	d02c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e678:	b2db      	uxtb	r3, r3
    e67a:	f003 0301 	and.w	r3, r3, #1
    e67e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e680:	4619      	mov	r1, r3
    e682:	4610      	mov	r0, r2
    e684:	f7fe fcd2 	bl	d02c <am_hal_gpio_state_write>
    e688:	e000      	b.n	e68c <am_devices_led_init+0x8c>
        return;
    e68a:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e68c:	3708      	adds	r7, #8
    e68e:	46bd      	mov	sp, r7
    e690:	bd80      	pop	{r7, pc}
    e692:	bf00      	nop
    e694:	00011070 	.word	0x00011070
    e698:	0001106c 	.word	0x0001106c

0000e69c <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e69c:	b580      	push	{r7, lr}
    e69e:	b084      	sub	sp, #16
    e6a0:	af00      	add	r7, sp, #0
    e6a2:	6078      	str	r0, [r7, #4]
    e6a4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e6a6:	687b      	ldr	r3, [r7, #4]
    e6a8:	2b00      	cmp	r3, #0
    e6aa:	d014      	beq.n	e6d6 <am_devices_led_array_init+0x3a>
    e6ac:	683b      	ldr	r3, [r7, #0]
    e6ae:	2b1f      	cmp	r3, #31
    e6b0:	d811      	bhi.n	e6d6 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6b2:	2300      	movs	r3, #0
    e6b4:	60fb      	str	r3, [r7, #12]
    e6b6:	e009      	b.n	e6cc <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e6b8:	68fb      	ldr	r3, [r7, #12]
    e6ba:	00db      	lsls	r3, r3, #3
    e6bc:	687a      	ldr	r2, [r7, #4]
    e6be:	4413      	add	r3, r2
    e6c0:	4618      	mov	r0, r3
    e6c2:	f7ff ff9d 	bl	e600 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6c6:	68fb      	ldr	r3, [r7, #12]
    e6c8:	3301      	adds	r3, #1
    e6ca:	60fb      	str	r3, [r7, #12]
    e6cc:	68fa      	ldr	r2, [r7, #12]
    e6ce:	683b      	ldr	r3, [r7, #0]
    e6d0:	429a      	cmp	r2, r3
    e6d2:	d3f1      	bcc.n	e6b8 <am_devices_led_array_init+0x1c>
    e6d4:	e000      	b.n	e6d8 <am_devices_led_array_init+0x3c>
        return;
    e6d6:	bf00      	nop
    }
}
    e6d8:	3710      	adds	r7, #16
    e6da:	46bd      	mov	sp, r7
    e6dc:	bd80      	pop	{r7, pc}

0000e6de <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e6de:	b580      	push	{r7, lr}
    e6e0:	b082      	sub	sp, #8
    e6e2:	af00      	add	r7, sp, #0
    e6e4:	6078      	str	r0, [r7, #4]
    e6e6:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	d02e      	beq.n	e74c <am_devices_led_on+0x6e>
    e6ee:	683b      	ldr	r3, [r7, #0]
    e6f0:	2b1e      	cmp	r3, #30
    e6f2:	d82b      	bhi.n	e74c <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e6f4:	683b      	ldr	r3, [r7, #0]
    e6f6:	00db      	lsls	r3, r3, #3
    e6f8:	687a      	ldr	r2, [r7, #4]
    e6fa:	4413      	add	r3, r2
    e6fc:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e6fe:	2b31      	cmp	r3, #49	; 0x31
    e700:	d824      	bhi.n	e74c <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e702:	683b      	ldr	r3, [r7, #0]
    e704:	00db      	lsls	r3, r3, #3
    e706:	687a      	ldr	r2, [r7, #4]
    e708:	4413      	add	r3, r2
    e70a:	685b      	ldr	r3, [r3, #4]
    e70c:	f003 0302 	and.w	r3, r3, #2
    e710:	2b00      	cmp	r3, #0
    e712:	d011      	beq.n	e738 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e714:	683b      	ldr	r3, [r7, #0]
    e716:	00db      	lsls	r3, r3, #3
    e718:	687a      	ldr	r2, [r7, #4]
    e71a:	4413      	add	r3, r2
    e71c:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e71e:	683b      	ldr	r3, [r7, #0]
    e720:	00db      	lsls	r3, r3, #3
    e722:	687a      	ldr	r2, [r7, #4]
    e724:	4413      	add	r3, r2
    e726:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e728:	b2db      	uxtb	r3, r3
    e72a:	f003 0301 	and.w	r3, r3, #1
    e72e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e730:	4619      	mov	r1, r3
    e732:	f7fe fc7b 	bl	d02c <am_hal_gpio_state_write>
    e736:	e00a      	b.n	e74e <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e738:	683b      	ldr	r3, [r7, #0]
    e73a:	00db      	lsls	r3, r3, #3
    e73c:	687a      	ldr	r2, [r7, #4]
    e73e:	4413      	add	r3, r2
    e740:	681b      	ldr	r3, [r3, #0]
    e742:	2104      	movs	r1, #4
    e744:	4618      	mov	r0, r3
    e746:	f7fe fc71 	bl	d02c <am_hal_gpio_state_write>
    e74a:	e000      	b.n	e74e <am_devices_led_on+0x70>
        return;
    e74c:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e74e:	3708      	adds	r7, #8
    e750:	46bd      	mov	sp, r7
    e752:	bd80      	pop	{r7, pc}

0000e754 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e754:	b580      	push	{r7, lr}
    e756:	b082      	sub	sp, #8
    e758:	af00      	add	r7, sp, #0
    e75a:	6078      	str	r0, [r7, #4]
    e75c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e75e:	687b      	ldr	r3, [r7, #4]
    e760:	2b00      	cmp	r3, #0
    e762:	d031      	beq.n	e7c8 <am_devices_led_off+0x74>
    e764:	683b      	ldr	r3, [r7, #0]
    e766:	2b1e      	cmp	r3, #30
    e768:	d82e      	bhi.n	e7c8 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e76a:	683b      	ldr	r3, [r7, #0]
    e76c:	00db      	lsls	r3, r3, #3
    e76e:	687a      	ldr	r2, [r7, #4]
    e770:	4413      	add	r3, r2
    e772:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e774:	2b31      	cmp	r3, #49	; 0x31
    e776:	d827      	bhi.n	e7c8 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e778:	683b      	ldr	r3, [r7, #0]
    e77a:	00db      	lsls	r3, r3, #3
    e77c:	687a      	ldr	r2, [r7, #4]
    e77e:	4413      	add	r3, r2
    e780:	685b      	ldr	r3, [r3, #4]
    e782:	f003 0302 	and.w	r3, r3, #2
    e786:	2b00      	cmp	r3, #0
    e788:	d014      	beq.n	e7b4 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e78a:	683b      	ldr	r3, [r7, #0]
    e78c:	00db      	lsls	r3, r3, #3
    e78e:	687a      	ldr	r2, [r7, #4]
    e790:	4413      	add	r3, r2
    e792:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e794:	683b      	ldr	r3, [r7, #0]
    e796:	00db      	lsls	r3, r3, #3
    e798:	687a      	ldr	r2, [r7, #4]
    e79a:	4413      	add	r3, r2
    e79c:	685b      	ldr	r3, [r3, #4]
    e79e:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	bf0c      	ite	eq
    e7a6:	2301      	moveq	r3, #1
    e7a8:	2300      	movne	r3, #0
    e7aa:	b2db      	uxtb	r3, r3
    e7ac:	4619      	mov	r1, r3
    e7ae:	f7fe fc3d 	bl	d02c <am_hal_gpio_state_write>
    e7b2:	e00a      	b.n	e7ca <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7b4:	683b      	ldr	r3, [r7, #0]
    e7b6:	00db      	lsls	r3, r3, #3
    e7b8:	687a      	ldr	r2, [r7, #4]
    e7ba:	4413      	add	r3, r2
    e7bc:	681b      	ldr	r3, [r3, #0]
    e7be:	2103      	movs	r1, #3
    e7c0:	4618      	mov	r0, r3
    e7c2:	f7fe fc33 	bl	d02c <am_hal_gpio_state_write>
    e7c6:	e000      	b.n	e7ca <am_devices_led_off+0x76>
        return;
    e7c8:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e7ca:	3708      	adds	r7, #8
    e7cc:	46bd      	mov	sp, r7
    e7ce:	bd80      	pop	{r7, pc}

0000e7d0 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e7d0:	b580      	push	{r7, lr}
    e7d2:	b084      	sub	sp, #16
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	6078      	str	r0, [r7, #4]
    e7d8:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e7da:	687b      	ldr	r3, [r7, #4]
    e7dc:	2b00      	cmp	r3, #0
    e7de:	d042      	beq.n	e866 <am_devices_led_toggle+0x96>
    e7e0:	683b      	ldr	r3, [r7, #0]
    e7e2:	2b1e      	cmp	r3, #30
    e7e4:	d83f      	bhi.n	e866 <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e7e6:	683b      	ldr	r3, [r7, #0]
    e7e8:	00db      	lsls	r3, r3, #3
    e7ea:	687a      	ldr	r2, [r7, #4]
    e7ec:	4413      	add	r3, r2
    e7ee:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e7f0:	2b31      	cmp	r3, #49	; 0x31
    e7f2:	d838      	bhi.n	e866 <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e7f4:	683b      	ldr	r3, [r7, #0]
    e7f6:	00db      	lsls	r3, r3, #3
    e7f8:	687a      	ldr	r2, [r7, #4]
    e7fa:	4413      	add	r3, r2
    e7fc:	685b      	ldr	r3, [r3, #4]
    e7fe:	f003 0302 	and.w	r3, r3, #2
    e802:	2b00      	cmp	r3, #0
    e804:	d009      	beq.n	e81a <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e806:	683b      	ldr	r3, [r7, #0]
    e808:	00db      	lsls	r3, r3, #3
    e80a:	687a      	ldr	r2, [r7, #4]
    e80c:	4413      	add	r3, r2
    e80e:	681b      	ldr	r3, [r3, #0]
    e810:	2102      	movs	r1, #2
    e812:	4618      	mov	r0, r3
    e814:	f7fe fc0a 	bl	d02c <am_hal_gpio_state_write>
    e818:	e026      	b.n	e868 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e81a:	683b      	ldr	r3, [r7, #0]
    e81c:	00db      	lsls	r3, r3, #3
    e81e:	687a      	ldr	r2, [r7, #4]
    e820:	4413      	add	r3, r2
    e822:	681b      	ldr	r3, [r3, #0]
    e824:	f107 0208 	add.w	r2, r7, #8
    e828:	2102      	movs	r1, #2
    e82a:	4618      	mov	r0, r3
    e82c:	f7fe fb9e 	bl	cf6c <am_hal_gpio_state_read>
    e830:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e832:	68fb      	ldr	r3, [r7, #12]
    e834:	2b00      	cmp	r3, #0
    e836:	d117      	bne.n	e868 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e838:	68bb      	ldr	r3, [r7, #8]
    e83a:	2b00      	cmp	r3, #0
    e83c:	d009      	beq.n	e852 <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e83e:	683b      	ldr	r3, [r7, #0]
    e840:	00db      	lsls	r3, r3, #3
    e842:	687a      	ldr	r2, [r7, #4]
    e844:	4413      	add	r3, r2
    e846:	681b      	ldr	r3, [r3, #0]
    e848:	2103      	movs	r1, #3
    e84a:	4618      	mov	r0, r3
    e84c:	f7fe fbee 	bl	d02c <am_hal_gpio_state_write>
    e850:	e00a      	b.n	e868 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e852:	683b      	ldr	r3, [r7, #0]
    e854:	00db      	lsls	r3, r3, #3
    e856:	687a      	ldr	r2, [r7, #4]
    e858:	4413      	add	r3, r2
    e85a:	681b      	ldr	r3, [r3, #0]
    e85c:	2104      	movs	r1, #4
    e85e:	4618      	mov	r0, r3
    e860:	f7fe fbe4 	bl	d02c <am_hal_gpio_state_write>
    e864:	e000      	b.n	e868 <am_devices_led_toggle+0x98>
        return;
    e866:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e868:	3710      	adds	r7, #16
    e86a:	46bd      	mov	sp, r7
    e86c:	bd80      	pop	{r7, pc}
	...

0000e870 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e870:	4811      	ldr	r0, [pc, #68]	; (e8b8 <zero_loop+0x12>)
    e872:	4912      	ldr	r1, [pc, #72]	; (e8bc <zero_loop+0x16>)
    e874:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e876:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e87a:	4811      	ldr	r0, [pc, #68]	; (e8c0 <zero_loop+0x1a>)
    e87c:	6801      	ldr	r1, [r0, #0]
    e87e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e882:	6001      	str	r1, [r0, #0]
    e884:	f3bf 8f4f 	dsb	sy
    e888:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e88c:	480d      	ldr	r0, [pc, #52]	; (e8c4 <zero_loop+0x1e>)
    e88e:	490e      	ldr	r1, [pc, #56]	; (e8c8 <zero_loop+0x22>)
    e890:	4a0e      	ldr	r2, [pc, #56]	; (e8cc <zero_loop+0x26>)

0000e892 <copy_loop>:
    e892:	f850 3b04 	ldr.w	r3, [r0], #4
    e896:	f841 3b04 	str.w	r3, [r1], #4
    e89a:	4291      	cmp	r1, r2
    e89c:	dbf9      	blt.n	e892 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e89e:	480c      	ldr	r0, [pc, #48]	; (e8d0 <zero_loop+0x2a>)
    e8a0:	490c      	ldr	r1, [pc, #48]	; (e8d4 <zero_loop+0x2e>)
    e8a2:	f04f 0200 	mov.w	r2, #0

0000e8a6 <zero_loop>:
    e8a6:	4288      	cmp	r0, r1
    e8a8:	bfb8      	it	lt
    e8aa:	f840 2b04 	strlt.w	r2, [r0], #4
    e8ae:	dbfa      	blt.n	e8a6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e8b0:	f7fd fd10 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e8b4:	be00      	bkpt	0x0000
}
    e8b6:	bf00      	nop
    e8b8:	e000ed08 	.word	0xe000ed08
    e8bc:	0000c000 	.word	0x0000c000
    e8c0:	e000ed88 	.word	0xe000ed88
    e8c4:	00011368 	.word	0x00011368
    e8c8:	1000c000 	.word	0x1000c000
    e8cc:	1000c050 	.word	0x1000c050
    e8d0:	1000c050 	.word	0x1000c050
    e8d4:	1002bfc4 	.word	0x1002bfc4

0000e8d8 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e8d8:	b480      	push	{r7}
    e8da:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e8dc:	e7fe      	b.n	e8dc <NMI_Handler+0x4>

0000e8de <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e8de:	b480      	push	{r7}
    e8e0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e8e2:	e7fe      	b.n	e8e2 <DebugMon_Handler+0x4>

0000e8e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e8e4:	b480      	push	{r7}
    e8e6:	b083      	sub	sp, #12
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	4603      	mov	r3, r0
    e8ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	db0b      	blt.n	e90e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e8f6:	79fb      	ldrb	r3, [r7, #7]
    e8f8:	f003 021f 	and.w	r2, r3, #31
    e8fc:	4907      	ldr	r1, [pc, #28]	; (e91c <__NVIC_EnableIRQ+0x38>)
    e8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e902:	095b      	lsrs	r3, r3, #5
    e904:	2001      	movs	r0, #1
    e906:	fa00 f202 	lsl.w	r2, r0, r2
    e90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e90e:	bf00      	nop
    e910:	370c      	adds	r7, #12
    e912:	46bd      	mov	sp, r7
    e914:	f85d 7b04 	ldr.w	r7, [sp], #4
    e918:	4770      	bx	lr
    e91a:	bf00      	nop
    e91c:	e000e100 	.word	0xe000e100

0000e920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    e920:	b480      	push	{r7}
    e922:	b083      	sub	sp, #12
    e924:	af00      	add	r7, sp, #0
    e926:	4603      	mov	r3, r0
    e928:	6039      	str	r1, [r7, #0]
    e92a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e92c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e930:	2b00      	cmp	r3, #0
    e932:	db0a      	blt.n	e94a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e934:	683b      	ldr	r3, [r7, #0]
    e936:	b2da      	uxtb	r2, r3
    e938:	490c      	ldr	r1, [pc, #48]	; (e96c <__NVIC_SetPriority+0x4c>)
    e93a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e93e:	0152      	lsls	r2, r2, #5
    e940:	b2d2      	uxtb	r2, r2
    e942:	440b      	add	r3, r1
    e944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    e948:	e00a      	b.n	e960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e94a:	683b      	ldr	r3, [r7, #0]
    e94c:	b2da      	uxtb	r2, r3
    e94e:	4908      	ldr	r1, [pc, #32]	; (e970 <__NVIC_SetPriority+0x50>)
    e950:	79fb      	ldrb	r3, [r7, #7]
    e952:	f003 030f 	and.w	r3, r3, #15
    e956:	3b04      	subs	r3, #4
    e958:	0152      	lsls	r2, r2, #5
    e95a:	b2d2      	uxtb	r2, r2
    e95c:	440b      	add	r3, r1
    e95e:	761a      	strb	r2, [r3, #24]
}
    e960:	bf00      	nop
    e962:	370c      	adds	r7, #12
    e964:	46bd      	mov	sp, r7
    e966:	f85d 7b04 	ldr.w	r7, [sp], #4
    e96a:	4770      	bx	lr
    e96c:	e000e100 	.word	0xe000e100
    e970:	e000ed00 	.word	0xe000ed00

0000e974 <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    e974:	b580      	push	{r7, lr}
    e976:	b082      	sub	sp, #8
    e978:	af00      	add	r7, sp, #0
    e97a:	6078      	str	r0, [r7, #4]
    e97c:	6879      	ldr	r1, [r7, #4]
    e97e:	4803      	ldr	r0, [pc, #12]	; (e98c <DebugLog+0x18>)
    e980:	f7ff fbe8 	bl	e154 <am_util_stdio_printf>
    e984:	bf00      	nop
    e986:	3708      	adds	r7, #8
    e988:	46bd      	mov	sp, r7
    e98a:	bd80      	pop	{r7, pc}
    e98c:	00010ce8 	.word	0x00010ce8

0000e990 <DebugLogUInt32>:
void DebugLogInt32(int32_t i) { am_util_stdio_printf("%d", i); }
void DebugLogUInt32(uint32_t i) { am_util_stdio_printf("%u", i); }
    e990:	b580      	push	{r7, lr}
    e992:	b082      	sub	sp, #8
    e994:	af00      	add	r7, sp, #0
    e996:	6078      	str	r0, [r7, #4]
    e998:	6879      	ldr	r1, [r7, #4]
    e99a:	4803      	ldr	r0, [pc, #12]	; (e9a8 <DebugLogUInt32+0x18>)
    e99c:	f7ff fbda 	bl	e154 <am_util_stdio_printf>
    e9a0:	bf00      	nop
    e9a2:	3708      	adds	r7, #8
    e9a4:	46bd      	mov	sp, r7
    e9a6:	bd80      	pop	{r7, pc}
    e9a8:	00010cf0 	.word	0x00010cf0

0000e9ac <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    e9ac:	b580      	push	{r7, lr}
    e9ae:	b082      	sub	sp, #8
    e9b0:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    e9b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9b6:	2000      	movs	r0, #0
    e9b8:	f001 f950 	bl	fc5c <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    e9bc:	490a      	ldr	r1, [pc, #40]	; (e9e8 <timerA0_init+0x3c>)
    e9be:	2000      	movs	r0, #0
    e9c0:	f001 f8b2 	bl	fb28 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    e9c4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    e9c8:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    e9ca:	687b      	ldr	r3, [r7, #4]
    e9cc:	085b      	lsrs	r3, r3, #1
    e9ce:	687a      	ldr	r2, [r7, #4]
    e9d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9d4:	2000      	movs	r0, #0
    e9d6:	f001 f955 	bl	fc84 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e9da:	2001      	movs	r0, #1
    e9dc:	f001 f9ce 	bl	fd7c <am_hal_ctimer_int_clear>
}
    e9e0:	bf00      	nop
    e9e2:	3708      	adds	r7, #8
    e9e4:	46bd      	mov	sp, r7
    e9e6:	bd80      	pop	{r7, pc}
    e9e8:	1000c000 	.word	0x1000c000

0000e9ec <pdm_trigger_dma>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void pdm_trigger_dma(void)
{
    e9ec:	b580      	push	{r7, lr}
    e9ee:	b082      	sub	sp, #8
    e9f0:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    e9f2:	4b08      	ldr	r3, [pc, #32]	; (ea14 <pdm_trigger_dma+0x28>)
    e9f4:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    e9f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    e9fa:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    e9fc:	4b06      	ldr	r3, [pc, #24]	; (ea18 <pdm_trigger_dma+0x2c>)
    e9fe:	681b      	ldr	r3, [r3, #0]
    ea00:	463a      	mov	r2, r7
    ea02:	4611      	mov	r1, r2
    ea04:	4618      	mov	r0, r3
    ea06:	f7fd ff7b 	bl	c900 <am_hal_pdm_dma_start>
}
    ea0a:	bf00      	nop
    ea0c:	3708      	adds	r7, #8
    ea0e:	46bd      	mov	sp, r7
    ea10:	bd80      	pop	{r7, pc}
    ea12:	bf00      	nop
    ea14:	1000c1a8 	.word	0x1000c1a8
    ea18:	1000ca74 	.word	0x1000ca74

0000ea1c <am_app_mic_verif_pdm_init>:

void am_app_mic_verif_pdm_init(void) 
{
    ea1c:	b580      	push	{r7, lr}
    ea1e:	b08a      	sub	sp, #40	; 0x28
    ea20:	af00      	add	r7, sp, #0
    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ea22:	2300      	movs	r3, #0
    ea24:	627b      	str	r3, [r7, #36]	; 0x24

    // ARPIT 181019
    // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
    // am_hal_gpio_pinconfig(10, sPinCfg);
    sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    ea26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea2a:	2205      	movs	r2, #5
    ea2c:	f362 0302 	bfi	r3, r2, #0, #3
    ea30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(12, sPinCfg);
    ea34:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea36:	200c      	movs	r0, #12
    ea38:	f7fe f8c4 	bl	cbc4 <am_hal_gpio_pinconfig>

    sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    ea3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea40:	f043 0307 	orr.w	r3, r3, #7
    ea44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(11, sPinCfg);
    ea48:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea4a:	200b      	movs	r0, #11
    ea4c:	f7fe f8ba 	bl	cbc4 <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    ea50:	1d3b      	adds	r3, r7, #4
    ea52:	2220      	movs	r2, #32
    ea54:	2100      	movs	r1, #0
    ea56:	4618      	mov	r0, r3
    ea58:	f001 ffdc 	bl	10a14 <memset>
    ea5c:	230b      	movs	r3, #11
    ea5e:	717b      	strb	r3, [r7, #5]
    ea60:	230b      	movs	r3, #11
    ea62:	71bb      	strb	r3, [r7, #6]
    ea64:	2318      	movs	r3, #24
    ea66:	60bb      	str	r3, [r7, #8]
    ea68:	2308      	movs	r3, #8
    ea6a:	613b      	str	r3, [r7, #16]
    ea6c:	2305      	movs	r3, #5
    ea6e:	753b      	strb	r3, [r7, #20]
    ea70:	2301      	movs	r3, #1
    ea72:	763b      	strb	r3, [r7, #24]
    ea74:	2303      	movs	r3, #3
    ea76:	767b      	strb	r3, [r7, #25]
    };
    
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    ea78:	491c      	ldr	r1, [pc, #112]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    ea7a:	2000      	movs	r0, #0
    ea7c:	f7fd fd6c 	bl	c558 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    ea80:	4b1a      	ldr	r3, [pc, #104]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    ea82:	681b      	ldr	r3, [r3, #0]
    ea84:	2200      	movs	r2, #0
    ea86:	2100      	movs	r1, #0
    ea88:	4618      	mov	r0, r3
    ea8a:	f7fd fdc3 	bl	c614 <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    ea8e:	4b17      	ldr	r3, [pc, #92]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	1d3a      	adds	r2, r7, #4
    ea94:	4611      	mov	r1, r2
    ea96:	4618      	mov	r0, r3
    ea98:	f7fd fe24 	bl	c6e4 <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    ea9c:	4b13      	ldr	r3, [pc, #76]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    ea9e:	681b      	ldr	r3, [r3, #0]
    eaa0:	4618      	mov	r0, r3
    eaa2:	f7fd ffb1 	bl	ca08 <am_hal_pdm_fifo_flush>

    am_util_stdio_printf("PDM Settings:\r\n");
    eaa6:	4812      	ldr	r0, [pc, #72]	; (eaf0 <am_app_mic_verif_pdm_init+0xd4>)
    eaa8:	f7ff fb54 	bl	e154 <am_util_stdio_printf>
    am_util_stdio_printf("PDM Clock (Hz):         %12d\r\n", 750000);
    eaac:	4911      	ldr	r1, [pc, #68]	; (eaf4 <am_app_mic_verif_pdm_init+0xd8>)
    eaae:	4812      	ldr	r0, [pc, #72]	; (eaf8 <am_app_mic_verif_pdm_init+0xdc>)
    eab0:	f7ff fb50 	bl	e154 <am_util_stdio_printf>
    am_util_stdio_printf("Effective Sample Freq.: %12d\r\n\n", 16000);
    eab4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
    eab8:	4810      	ldr	r0, [pc, #64]	; (eafc <am_app_mic_verif_pdm_init+0xe0>)
    eaba:	f7ff fb4b 	bl	e154 <am_util_stdio_printf>

    am_hal_pdm_enable(PDMHandle);
    eabe:	4b0b      	ldr	r3, [pc, #44]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    eac0:	681b      	ldr	r3, [r3, #0]
    eac2:	4618      	mov	r0, r3
    eac4:	f7fd feea 	bl	c89c <am_hal_pdm_enable>

    //
    // Configure and enable PDM interrupts (set up to trigger on DMA
    // completion).
    //
    am_hal_pdm_interrupt_enable(PDMHandle,
    eac8:	4b08      	ldr	r3, [pc, #32]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	211e      	movs	r1, #30
    eace:	4618      	mov	r0, r3
    ead0:	f7fd ffc4 	bl	ca5c <am_hal_pdm_interrupt_enable>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    ead4:	4b05      	ldr	r3, [pc, #20]	; (eaec <am_app_mic_verif_pdm_init+0xd0>)
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	4618      	mov	r0, r3
    eada:	f7fd fedf 	bl	c89c <am_hal_pdm_enable>
    pdm_trigger_dma();
    eade:	f7ff ff85 	bl	e9ec <pdm_trigger_dma>

}
    eae2:	bf00      	nop
    eae4:	3728      	adds	r7, #40	; 0x28
    eae6:	46bd      	mov	sp, r7
    eae8:	bd80      	pop	{r7, pc}
    eaea:	bf00      	nop
    eaec:	1000ca74 	.word	0x1000ca74
    eaf0:	00010d00 	.word	0x00010d00
    eaf4:	000b71b0 	.word	0x000b71b0
    eaf8:	00010d10 	.word	0x00010d10
    eafc:	00010d30 	.word	0x00010d30

0000eb00 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    eb00:	b580      	push	{r7, lr}
    eb02:	b084      	sub	sp, #16
    eb04:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    eb06:	2301      	movs	r3, #1
    eb08:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    eb0a:	2301      	movs	r3, #1
    eb0c:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    eb0e:	2301      	movs	r3, #1
    eb10:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_COUNT;
    eb12:	2350      	movs	r3, #80	; 0x50
    eb14:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    eb16:	4b0c      	ldr	r3, [pc, #48]	; (eb48 <adc_config_dma+0x48>)
    eb18:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    eb1a:	4b0c      	ldr	r3, [pc, #48]	; (eb4c <adc_config_dma+0x4c>)
    eb1c:	681b      	ldr	r3, [r3, #0]
    eb1e:	1d3a      	adds	r2, r7, #4
    eb20:	4611      	mov	r1, r2
    eb22:	4618      	mov	r0, r3
    eb24:	f000 fc2a 	bl	f37c <am_hal_adc_configure_dma>
    eb28:	4603      	mov	r3, r0
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d002      	beq.n	eb34 <adc_config_dma+0x34>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    eb2e:	4808      	ldr	r0, [pc, #32]	; (eb50 <adc_config_dma+0x50>)
    eb30:	f7ff fb10 	bl	e154 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    eb34:	4b07      	ldr	r3, [pc, #28]	; (eb54 <adc_config_dma+0x54>)
    eb36:	2200      	movs	r2, #0
    eb38:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    eb3a:	4b07      	ldr	r3, [pc, #28]	; (eb58 <adc_config_dma+0x58>)
    eb3c:	2200      	movs	r2, #0
    eb3e:	701a      	strb	r2, [r3, #0]
}
    eb40:	bf00      	nop
    eb42:	3710      	adds	r7, #16
    eb44:	46bd      	mov	sp, r7
    eb46:	bd80      	pop	{r7, pc}
    eb48:	1000c6ac 	.word	0x1000c6ac
    eb4c:	1000ca6c 	.word	0x1000ca6c
    eb50:	00010d50 	.word	0x00010d50
    eb54:	1000ca71 	.word	0x1000ca71
    eb58:	1002beb4 	.word	0x1002beb4

0000eb5c <adc_config>:


void adc_config(void)
{
    eb5c:	b580      	push	{r7, lr}
    eb5e:	b084      	sub	sp, #16
    eb60:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    eb62:	493f      	ldr	r1, [pc, #252]	; (ec60 <adc_config+0x104>)
    eb64:	2000      	movs	r0, #0
    eb66:	f000 fb4b 	bl	f200 <am_hal_adc_initialize>
    eb6a:	4603      	mov	r3, r0
    eb6c:	2b00      	cmp	r3, #0
    eb6e:	d002      	beq.n	eb76 <adc_config+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    eb70:	483c      	ldr	r0, [pc, #240]	; (ec64 <adc_config+0x108>)
    eb72:	f7ff faef 	bl	e154 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    eb76:	4b3a      	ldr	r3, [pc, #232]	; (ec60 <adc_config+0x104>)
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	2200      	movs	r2, #0
    eb7c:	2100      	movs	r1, #0
    eb7e:	4618      	mov	r0, r3
    eb80:	f000 fcac 	bl	f4dc <am_hal_adc_power_control>
    eb84:	4603      	mov	r3, r0
    eb86:	2b00      	cmp	r3, #0
    eb88:	d002      	beq.n	eb90 <adc_config+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    eb8a:	4837      	ldr	r0, [pc, #220]	; (ec68 <adc_config+0x10c>)
    eb8c:	f7ff fae2 	bl	e154 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    eb90:	2301      	movs	r3, #1
    eb92:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    eb94:	2300      	movs	r3, #0
    eb96:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    eb98:	2307      	movs	r3, #7
    eb9a:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    eb9c:	2300      	movs	r3, #0
    eb9e:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    eba0:	2301      	movs	r3, #1
    eba2:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    eba4:	2300      	movs	r3, #0
    eba6:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    eba8:	2301      	movs	r3, #1
    ebaa:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    ebac:	4b2c      	ldr	r3, [pc, #176]	; (ec60 <adc_config+0x104>)
    ebae:	681b      	ldr	r3, [r3, #0]
    ebb0:	f107 0208 	add.w	r2, r7, #8
    ebb4:	4611      	mov	r1, r2
    ebb6:	4618      	mov	r0, r3
    ebb8:	f000 fb72 	bl	f2a0 <am_hal_adc_configure>
    ebbc:	4603      	mov	r3, r0
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	d002      	beq.n	ebc8 <adc_config+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    ebc2:	482a      	ldr	r0, [pc, #168]	; (ec6c <adc_config+0x110>)
    ebc4:	f7ff fac6 	bl	e154 <am_util_stdio_printf>
    }
    //
    // Try to calibrate ADC. It seems useless...
    //
    am_util_stdio_printf("Start ADC calibration...\r\n");
    ebc8:	4829      	ldr	r0, [pc, #164]	; (ec70 <adc_config+0x114>)
    ebca:	f7ff fac3 	bl	e154 <am_util_stdio_printf>
    am_util_stdio_printf("ADCCAL reg value is originally %x ...\r\n", *(uint32_t*)0x4002010c);
    ebce:	4b29      	ldr	r3, [pc, #164]	; (ec74 <adc_config+0x118>)
    ebd0:	681b      	ldr	r3, [r3, #0]
    ebd2:	4619      	mov	r1, r3
    ebd4:	4828      	ldr	r0, [pc, #160]	; (ec78 <adc_config+0x11c>)
    ebd6:	f7ff fabd 	bl	e154 <am_util_stdio_printf>
    *(uint32_t*)0x4002010c |= 0x00;
    ebda:	4b26      	ldr	r3, [pc, #152]	; (ec74 <adc_config+0x118>)
    ebdc:	4a25      	ldr	r2, [pc, #148]	; (ec74 <adc_config+0x118>)
    ebde:	681b      	ldr	r3, [r3, #0]
    ebe0:	6013      	str	r3, [r2, #0]
    am_util_stdio_printf("ADCCAL reg value now is %x ...\r\n", *(uint32_t*)0x4002010c);
    ebe2:	4b24      	ldr	r3, [pc, #144]	; (ec74 <adc_config+0x118>)
    ebe4:	681b      	ldr	r3, [r3, #0]
    ebe6:	4619      	mov	r1, r3
    ebe8:	4824      	ldr	r0, [pc, #144]	; (ec7c <adc_config+0x120>)
    ebea:	f7ff fab3 	bl	e154 <am_util_stdio_printf>
    while(!(*(uint32_t*)0x4002010c & 0x02));
    ebee:	bf00      	nop
    ebf0:	4b20      	ldr	r3, [pc, #128]	; (ec74 <adc_config+0x118>)
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	f003 0302 	and.w	r3, r3, #2
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d0f9      	beq.n	ebf0 <adc_config+0x94>
    am_util_stdio_printf("ADC calibration is finished...\n\r");
    ebfc:	4820      	ldr	r0, [pc, #128]	; (ec80 <adc_config+0x124>)
    ebfe:	f7ff faa9 	bl	e154 <am_util_stdio_printf>
    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    ec02:	2300      	movs	r3, #0
    ec04:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ec06:	2300      	movs	r3, #0
    ec08:	707b      	strb	r3, [r7, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE5;
    ec0a:	2305      	movs	r3, #5
    ec0c:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    ec0e:	2300      	movs	r3, #0
    ec10:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    ec12:	2301      	movs	r3, #1
    ec14:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    ec16:	4b12      	ldr	r3, [pc, #72]	; (ec60 <adc_config+0x104>)
    ec18:	681b      	ldr	r3, [r3, #0]
    ec1a:	463a      	mov	r2, r7
    ec1c:	2100      	movs	r1, #0
    ec1e:	4618      	mov	r0, r3
    ec20:	f000 fb76 	bl	f310 <am_hal_adc_configure_slot>
    ec24:	4603      	mov	r3, r0
    ec26:	2b00      	cmp	r3, #0
    ec28:	d002      	beq.n	ec30 <adc_config+0xd4>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    ec2a:	4816      	ldr	r0, [pc, #88]	; (ec84 <adc_config+0x128>)
    ec2c:	f7ff fa92 	bl	e154 <am_util_stdio_printf>
    }
    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    ec30:	f7ff ff66 	bl	eb00 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    ec34:	4b0a      	ldr	r3, [pc, #40]	; (ec60 <adc_config+0x104>)
    ec36:	681b      	ldr	r3, [r3, #0]
    ec38:	21c0      	movs	r1, #192	; 0xc0
    ec3a:	4618      	mov	r0, r3
    ec3c:	f000 fbf6 	bl	f42c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    ec40:	4b07      	ldr	r3, [pc, #28]	; (ec60 <adc_config+0x104>)
    ec42:	681b      	ldr	r3, [r3, #0]
    ec44:	4618      	mov	r0, r3
    ec46:	f000 fbd1 	bl	f3ec <am_hal_adc_enable>
    ec4a:	4603      	mov	r3, r0
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d002      	beq.n	ec56 <adc_config+0xfa>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    ec50:	480d      	ldr	r0, [pc, #52]	; (ec88 <adc_config+0x12c>)
    ec52:	f7ff fa7f 	bl	e154 <am_util_stdio_printf>
    }
}
    ec56:	bf00      	nop
    ec58:	3710      	adds	r7, #16
    ec5a:	46bd      	mov	sp, r7
    ec5c:	bd80      	pop	{r7, pc}
    ec5e:	bf00      	nop
    ec60:	1000ca6c 	.word	0x1000ca6c
    ec64:	00010d78 	.word	0x00010d78
    ec68:	00010dac 	.word	0x00010dac
    ec6c:	00010dcc 	.word	0x00010dcc
    ec70:	00010df0 	.word	0x00010df0
    ec74:	4002010c 	.word	0x4002010c
    ec78:	00010e0c 	.word	0x00010e0c
    ec7c:	00010e34 	.word	0x00010e34
    ec80:	00010e58 	.word	0x00010e58
    ec84:	00010e7c 	.word	0x00010e7c
    ec88:	00010ea4 	.word	0x00010ea4

0000ec8c <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    ec8c:	b580      	push	{r7, lr}
    ec8e:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (16000HZ sample rate).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    ec90:	2242      	movs	r2, #66	; 0x42
    ec92:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec96:	2003      	movs	r0, #3
    ec98:	f000 ff76 	bl	fb88 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     );

//    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 375);
    ec9c:	f240 1377 	movw	r3, #375	; 0x177
    eca0:	f240 22ee 	movw	r2, #750	; 0x2ee
    eca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eca8:	2003      	movs	r0, #3
    ecaa:	f000 ffeb 	bl	fc84 <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    ecae:	f001 f83f 	bl	fd30 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    ecb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ecb6:	2003      	movs	r0, #3
    ecb8:	f000 ffa6 	bl	fc08 <am_hal_ctimer_start>
}
    ecbc:	bf00      	nop
    ecbe:	bd80      	pop	{r7, pc}

0000ecc0 <am_app_mic_verif_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_mic_verif_sys_init(void)
{
    ecc0:	b580      	push	{r7, lr}
    ecc2:	b082      	sub	sp, #8
    ecc4:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    ecc6:	2100      	movs	r1, #0
    ecc8:	2000      	movs	r0, #0
    ecca:	f000 fe83 	bl	f9d4 <am_hal_clkgen_control>
    ecce:	4603      	mov	r3, r0
    ecd0:	2b00      	cmp	r3, #0
    ecd2:	d002      	beq.n	ecda <am_app_mic_verif_sys_init+0x1a>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    ecd4:	4857      	ldr	r0, [pc, #348]	; (ee34 <am_app_mic_verif_sys_init+0x174>)
    ecd6:	f7ff fa3d 	bl	e154 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    ecda:	4857      	ldr	r0, [pc, #348]	; (ee38 <am_app_mic_verif_sys_init+0x178>)
    ecdc:	f000 fcd8 	bl	f690 <am_hal_cachectrl_config>
    ece0:	4603      	mov	r3, r0
    ece2:	2b00      	cmp	r3, #0
    ece4:	d002      	beq.n	ecec <am_app_mic_verif_sys_init+0x2c>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    ece6:	4855      	ldr	r0, [pc, #340]	; (ee3c <am_app_mic_verif_sys_init+0x17c>)
    ece8:	f7ff fa34 	bl	e154 <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    ecec:	f000 fcf6 	bl	f6dc <am_hal_cachectrl_enable>
    ecf0:	4603      	mov	r3, r0
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d002      	beq.n	ecfc <am_app_mic_verif_sys_init+0x3c>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    ecf6:	4852      	ldr	r0, [pc, #328]	; (ee40 <am_app_mic_verif_sys_init+0x180>)
    ecf8:	f7ff fa2c 	bl	e154 <am_util_stdio_printf>
    }

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    ecfc:	f000 fa32 	bl	f164 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output
    //
#if configUSE_UART_PRINTF
    am_bsp_uart_printf_enable();
    ed00:	f000 fa50 	bl	f1a4 <am_bsp_uart_printf_enable>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_switch_button0);
    ed04:	4b4f      	ldr	r3, [pc, #316]	; (ee44 <am_app_mic_verif_sys_init+0x184>)
    ed06:	6819      	ldr	r1, [r3, #0]
    ed08:	2010      	movs	r0, #16
    ed0a:	f7fd ff5b 	bl	cbc4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_switch_button1);
    ed0e:	4b4e      	ldr	r3, [pc, #312]	; (ee48 <am_app_mic_verif_sys_init+0x188>)
    ed10:	6819      	ldr	r1, [r3, #0]
    ed12:	2012      	movs	r0, #18
    ed14:	f7fd ff56 	bl	cbc4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_switch_button2);
    ed18:	4b4c      	ldr	r3, [pc, #304]	; (ee4c <am_app_mic_verif_sys_init+0x18c>)
    ed1a:	6819      	ldr	r1, [r3, #0]
    ed1c:	2013      	movs	r0, #19
    ed1e:	f7fd ff51 	bl	cbc4 <am_hal_gpio_pinconfig>
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ed26:	f04f 0100 	mov.w	r1, #0
    ed2a:	f7fe fa3b 	bl	d1a4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ed2e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ed32:	f04f 0100 	mov.w	r1, #0
    ed36:	f7fe fa35 	bl	d1a4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed3e:	f04f 0100 	mov.w	r1, #0
    ed42:	f7fe fa2f 	bl	d1a4 <am_hal_gpio_interrupt_clear>
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ed4a:	f04f 0100 	mov.w	r1, #0
    ed4e:	f7fe f9eb 	bl	d128 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ed52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ed56:	f04f 0100 	mov.w	r1, #0
    ed5a:	f7fe f9e5 	bl	d128 <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed62:	f04f 0100 	mov.w	r1, #0
    ed66:	f7fe f9df 	bl	d128 <am_hal_gpio_interrupt_enable>
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ed6a:	2105      	movs	r1, #5
    ed6c:	4838      	ldr	r0, [pc, #224]	; (ee50 <am_app_mic_verif_sys_init+0x190>)
    ed6e:	f7ff fc95 	bl	e69c <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed72:	2300      	movs	r3, #0
    ed74:	607b      	str	r3, [r7, #4]
    ed76:	e007      	b.n	ed88 <am_app_mic_verif_sys_init+0xc8>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ed78:	687b      	ldr	r3, [r7, #4]
    ed7a:	4619      	mov	r1, r3
    ed7c:	4834      	ldr	r0, [pc, #208]	; (ee50 <am_app_mic_verif_sys_init+0x190>)
    ed7e:	f7ff fce9 	bl	e754 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed82:	687b      	ldr	r3, [r7, #4]
    ed84:	3301      	adds	r3, #1
    ed86:	607b      	str	r3, [r7, #4]
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	2b04      	cmp	r3, #4
    ed8c:	ddf4      	ble.n	ed78 <am_app_mic_verif_sys_init+0xb8>
#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    
    //
    // Initiate all ring buffers 
    //
    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    ed8e:	2202      	movs	r2, #2
    ed90:	4930      	ldr	r1, [pc, #192]	; (ee54 <am_app_mic_verif_sys_init+0x194>)
    ed92:	4831      	ldr	r0, [pc, #196]	; (ee58 <am_app_mic_verif_sys_init+0x198>)
    ed94:	f7ff fa46 	bl	e224 <am_app_utils_ring_buffer_init_all>
    
    //
    // Turn on PDM
    //
    am_app_mic_verif_pdm_init();
    ed98:	f7ff fe40 	bl	ea1c <am_app_mic_verif_pdm_init>

#if AM_APP_ANALOG_MIC
    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(33, g_AM_PIN_33_ADCSE5);
    ed9c:	4b2f      	ldr	r3, [pc, #188]	; (ee5c <am_app_mic_verif_sys_init+0x19c>)
    ed9e:	6819      	ldr	r1, [r3, #0]
    eda0:	2021      	movs	r0, #33	; 0x21
    eda2:	f7fd ff0f 	bl	cbc4 <am_hal_gpio_pinconfig>
    //
    // Configure the ADC
    //
    adc_config();
    eda6:	f7ff fed9 	bl	eb5c <adc_config>
    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    edaa:	f7ff ff6f 	bl	ec8c <init_timerA3_for_ADC>
#endif // AM_APP_ANALOG_MIC
    //
    // TimerA0 init.
    //
    timerA0_init();
    edae:	f7ff fdfd 	bl	e9ac <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    edb2:	2001      	movs	r0, #1
    edb4:	f000 ffce 	bl	fd54 <am_hal_ctimer_int_enable>

    NVIC_SetPriority(PDM_IRQn, 4);
    edb8:	2104      	movs	r1, #4
    edba:	2013      	movs	r0, #19
    edbc:	f7ff fdb0 	bl	e920 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    edc0:	2013      	movs	r0, #19
    edc2:	f7ff fd8f 	bl	e8e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPIO_IRQn);
    edc6:	200d      	movs	r0, #13
    edc8:	f7ff fd8c 	bl	e8e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    edcc:	200e      	movs	r0, #14
    edce:	f7ff fd89 	bl	e8e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC_IRQn);
    edd2:	2012      	movs	r0, #18
    edd4:	f7ff fd86 	bl	e8e4 <__NVIC_EnableIRQ>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    edd8:	f001 f834 	bl	fe44 <am_hal_interrupt_master_enable>
   
    //
    // Configure and enable burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    eddc:	4820      	ldr	r0, [pc, #128]	; (ee60 <am_app_mic_verif_sys_init+0x1a0>)
    edde:	f000 fbe1 	bl	f5a4 <am_hal_burst_mode_initialize>
    ede2:	4603      	mov	r3, r0
    ede4:	2b00      	cmp	r3, #0
    ede6:	d110      	bne.n	ee0a <am_app_mic_verif_sys_init+0x14a>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    ede8:	4b1d      	ldr	r3, [pc, #116]	; (ee60 <am_app_mic_verif_sys_init+0x1a0>)
    edea:	781b      	ldrb	r3, [r3, #0]
    edec:	2b00      	cmp	r3, #0
    edee:	d10c      	bne.n	ee0a <am_app_mic_verif_sys_init+0x14a>
        {
            // Put the MCU into "Burst" mode.
            if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    edf0:	481c      	ldr	r0, [pc, #112]	; (ee64 <am_app_mic_verif_sys_init+0x1a4>)
    edf2:	f000 fc1f 	bl	f634 <am_hal_burst_mode_enable>
    edf6:	4603      	mov	r3, r0
    edf8:	2b00      	cmp	r3, #0
    edfa:	d106      	bne.n	ee0a <am_app_mic_verif_sys_init+0x14a>
            {
                if (AM_HAL_BURST_MODE == eBurstMode)
    edfc:	4b19      	ldr	r3, [pc, #100]	; (ee64 <am_app_mic_verif_sys_init+0x1a4>)
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d102      	bne.n	ee0a <am_app_mic_verif_sys_init+0x14a>
                {
                    am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n\n");
    ee04:	4818      	ldr	r0, [pc, #96]	; (ee68 <am_app_mic_verif_sys_init+0x1a8>)
    ee06:	f7ff f9a5 	bl	e154 <am_util_stdio_printf>
            }

        }
    }

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    ee0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee0e:	2000      	movs	r0, #0
    ee10:	f000 fefa 	bl	fc08 <am_hal_ctimer_start>

#if AM_APP_ANALOG_MIC
    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    ee14:	4b15      	ldr	r3, [pc, #84]	; (ee6c <am_app_mic_verif_sys_init+0x1ac>)
    ee16:	681b      	ldr	r3, [r3, #0]
    ee18:	4618      	mov	r0, r3
    ee1a:	f000 fb4d 	bl	f4b8 <am_hal_adc_sw_trigger>
    ee1e:	4603      	mov	r3, r0
    ee20:	2b00      	cmp	r3, #0
    ee22:	d002      	beq.n	ee2a <am_app_mic_verif_sys_init+0x16a>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    ee24:	4812      	ldr	r0, [pc, #72]	; (ee70 <am_app_mic_verif_sys_init+0x1b0>)
    ee26:	f7ff f995 	bl	e154 <am_util_stdio_printf>
    }
#endif // AM_APP_ANALOG_MIC

}
    ee2a:	bf00      	nop
    ee2c:	3708      	adds	r7, #8
    ee2e:	46bd      	mov	sp, r7
    ee30:	bd80      	pop	{r7, pc}
    ee32:	bf00      	nop
    ee34:	00010f40 	.word	0x00010f40
    ee38:	00011230 	.word	0x00011230
    ee3c:	00010f70 	.word	0x00010f70
    ee40:	00010fa0 	.word	0x00010fa0
    ee44:	000111f0 	.word	0x000111f0
    ee48:	000111f4 	.word	0x000111f4
    ee4c:	000111f8 	.word	0x000111f8
    ee50:	1000c00c 	.word	0x1000c00c
    ee54:	000111d8 	.word	0x000111d8
    ee58:	1002be78 	.word	0x1002be78
    ee5c:	000111fc 	.word	0x000111fc
    ee60:	1000ca70 	.word	0x1000ca70
    ee64:	1000c6a8 	.word	0x1000c6a8
    ee68:	00010fcc 	.word	0x00010fcc
    ee6c:	1000ca6c 	.word	0x1000ca6c
    ee70:	00010ff8 	.word	0x00010ff8

0000ee74 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b082      	sub	sp, #8
    ee78:	af00      	add	r7, sp, #0
    uint32_t ui32Status;
    uint32_t ui32PushRet;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    ee7a:	4b27      	ldr	r3, [pc, #156]	; (ef18 <am_pdm0_isr+0xa4>)
    ee7c:	681b      	ldr	r3, [r3, #0]
    ee7e:	4639      	mov	r1, r7
    ee80:	2201      	movs	r2, #1
    ee82:	4618      	mov	r0, r3
    ee84:	f7fd fe46 	bl	cb14 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ee88:	4b23      	ldr	r3, [pc, #140]	; (ef18 <am_pdm0_isr+0xa4>)
    ee8a:	681b      	ldr	r3, [r3, #0]
    ee8c:	683a      	ldr	r2, [r7, #0]
    ee8e:	4611      	mov	r1, r2
    ee90:	4618      	mov	r0, r3
    ee92:	f7fd fe13 	bl	cabc <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ee96:	683b      	ldr	r3, [r7, #0]
    ee98:	f003 0308 	and.w	r3, r3, #8
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	d02d      	beq.n	eefc <am_pdm0_isr+0x88>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    eea0:	4b1e      	ldr	r3, [pc, #120]	; (ef1c <am_pdm0_isr+0xa8>)
    eea2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    eea6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
            }
        }
#endif // AM_AEP_MIKRO_CALIBRATION

#if AM_APP_ANALOG_MIC
        if((g_bPDMDataReady == false) && (g_bAMicEvalFlag == true))
    eeaa:	4b1d      	ldr	r3, [pc, #116]	; (ef20 <am_pdm0_isr+0xac>)
    eeac:	781b      	ldrb	r3, [r3, #0]
    eeae:	b2db      	uxtb	r3, r3
    eeb0:	f083 0301 	eor.w	r3, r3, #1
    eeb4:	b2db      	uxtb	r3, r3
    eeb6:	2b00      	cmp	r3, #0
    eeb8:	d02a      	beq.n	ef10 <am_pdm0_isr+0x9c>
    eeba:	4b1a      	ldr	r3, [pc, #104]	; (ef24 <am_pdm0_isr+0xb0>)
    eebc:	781b      	ldrb	r3, [r3, #0]
    eebe:	b2db      	uxtb	r3, r3
    eec0:	2b00      	cmp	r3, #0
    eec2:	d025      	beq.n	ef10 <am_pdm0_isr+0x9c>
        {
            ui32PushRet = am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], (void*)g_ui32PCMDataBuff, PCM_FRAME_SIZE*PCM_DATA_BYTES, true);
    eec4:	2301      	movs	r3, #1
    eec6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    eeca:	4917      	ldr	r1, [pc, #92]	; (ef28 <am_pdm0_isr+0xb4>)
    eecc:	4817      	ldr	r0, [pc, #92]	; (ef2c <am_pdm0_isr+0xb8>)
    eece:	f7ff f9cb 	bl	e268 <am_app_utils_ring_buffer_push>
    eed2:	6078      	str	r0, [r7, #4]
            g_ui32PCMDataSumBytes += ui32PushRet;
    eed4:	4b16      	ldr	r3, [pc, #88]	; (ef30 <am_pdm0_isr+0xbc>)
    eed6:	681a      	ldr	r2, [r3, #0]
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	4413      	add	r3, r2
    eedc:	4a14      	ldr	r2, [pc, #80]	; (ef30 <am_pdm0_isr+0xbc>)
    eede:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM]))
    eee0:	4b14      	ldr	r3, [pc, #80]	; (ef34 <am_pdm0_isr+0xc0>)
    eee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eee4:	4b13      	ldr	r3, [pc, #76]	; (ef34 <am_pdm0_isr+0xc0>)
    eee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    eee8:	429a      	cmp	r2, r3
    eeea:	d111      	bne.n	ef10 <am_pdm0_isr+0x9c>
    eeec:	4b11      	ldr	r3, [pc, #68]	; (ef34 <am_pdm0_isr+0xc0>)
    eeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eef0:	2b01      	cmp	r3, #1
    eef2:	d10d      	bne.n	ef10 <am_pdm0_isr+0x9c>
            {
                g_bPDMDataReady = true;
    eef4:	4b0a      	ldr	r3, [pc, #40]	; (ef20 <am_pdm0_isr+0xac>)
    eef6:	2201      	movs	r2, #1
    eef8:	701a      	strb	r2, [r3, #0]

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    eefa:	e009      	b.n	ef10 <am_pdm0_isr+0x9c>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    eefc:	683b      	ldr	r3, [r7, #0]
    eefe:	f003 0306 	and.w	r3, r3, #6
    ef02:	2b00      	cmp	r3, #0
    ef04:	d004      	beq.n	ef10 <am_pdm0_isr+0x9c>
        am_hal_pdm_fifo_flush(PDMHandle);
    ef06:	4b04      	ldr	r3, [pc, #16]	; (ef18 <am_pdm0_isr+0xa4>)
    ef08:	681b      	ldr	r3, [r3, #0]
    ef0a:	4618      	mov	r0, r3
    ef0c:	f7fd fd7c 	bl	ca08 <am_hal_pdm_fifo_flush>
}
    ef10:	bf00      	nop
    ef12:	3708      	adds	r7, #8
    ef14:	46bd      	mov	sp, r7
    ef16:	bd80      	pop	{r7, pc}
    ef18:	1000ca74 	.word	0x1000ca74
    ef1c:	50011000 	.word	0x50011000
    ef20:	1000c16a 	.word	0x1000c16a
    ef24:	1000c175 	.word	0x1000c175
    ef28:	1000c1a8 	.word	0x1000c1a8
    ef2c:	1002bea0 	.word	0x1002bea0
    ef30:	1000c16c 	.word	0x1000c16c
    ef34:	1002be78 	.word	0x1002be78

0000ef38 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    ef38:	b580      	push	{r7, lr}
    ef3a:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    ef3c:	4b0f      	ldr	r3, [pc, #60]	; (ef7c <am_ctimer_isr+0x44>)
    ef3e:	681b      	ldr	r3, [r3, #0]
    ef40:	3301      	adds	r3, #1
    ef42:	4a0e      	ldr	r2, [pc, #56]	; (ef7c <am_ctimer_isr+0x44>)
    ef44:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    ef46:	4b0e      	ldr	r3, [pc, #56]	; (ef80 <am_ctimer_isr+0x48>)
    ef48:	781b      	ldrb	r3, [r3, #0]
    ef4a:	b2db      	uxtb	r3, r3
    ef4c:	2b01      	cmp	r3, #1
    ef4e:	d10f      	bne.n	ef70 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    ef50:	4b0c      	ldr	r3, [pc, #48]	; (ef84 <am_ctimer_isr+0x4c>)
    ef52:	681b      	ldr	r3, [r3, #0]
    ef54:	3301      	adds	r3, #1
    ef56:	4a0b      	ldr	r2, [pc, #44]	; (ef84 <am_ctimer_isr+0x4c>)
    ef58:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    ef5a:	4b0a      	ldr	r3, [pc, #40]	; (ef84 <am_ctimer_isr+0x4c>)
    ef5c:	681b      	ldr	r3, [r3, #0]
    ef5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ef62:	d905      	bls.n	ef70 <am_ctimer_isr+0x38>
        {
            g_ui8ButtonPushedFlag = 1;
    ef64:	4b08      	ldr	r3, [pc, #32]	; (ef88 <am_ctimer_isr+0x50>)
    ef66:	2201      	movs	r2, #1
    ef68:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    ef6a:	4b05      	ldr	r3, [pc, #20]	; (ef80 <am_ctimer_isr+0x48>)
    ef6c:	2200      	movs	r2, #0
    ef6e:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ef70:	2001      	movs	r0, #1
    ef72:	f000 ff03 	bl	fd7c <am_hal_ctimer_int_clear>
}
    ef76:	bf00      	nop
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	bf00      	nop
    ef7c:	1000c15c 	.word	0x1000c15c
    ef80:	1000c160 	.word	0x1000c160
    ef84:	1000c164 	.word	0x1000c164
    ef88:	1000c169 	.word	0x1000c169

0000ef8c <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    ef8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    ef90:	b082      	sub	sp, #8
    ef92:	af00      	add	r7, sp, #0
    uint64_t ui64Status;
//
// Read and clear GPIO interrupt status
//
    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    ef94:	463b      	mov	r3, r7
    ef96:	4619      	mov	r1, r3
    ef98:	2000      	movs	r0, #0
    ef9a:	f7fe f939 	bl	d210 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    ef9e:	e9d7 3400 	ldrd	r3, r4, [r7]
    efa2:	4618      	mov	r0, r3
    efa4:	4621      	mov	r1, r4
    efa6:	f7fe f8fd 	bl	d1a4 <am_hal_gpio_interrupt_clear>
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    efaa:	4b22      	ldr	r3, [pc, #136]	; (f034 <am_gpio_isr+0xa8>)
    efac:	781b      	ldrb	r3, [r3, #0]
    efae:	b2db      	uxtb	r3, r3
    efb0:	2b00      	cmp	r3, #0
    efb2:	d134      	bne.n	f01e <am_gpio_isr+0x92>
    {
        if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0))
    efb4:	e9d7 bc00 	ldrd	fp, ip, [r7]
    efb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    efbc:	f04f 0200 	mov.w	r2, #0
    efc0:	ea0b 0301 	and.w	r3, fp, r1
    efc4:	ea0c 0402 	and.w	r4, ip, r2
    efc8:	4323      	orrs	r3, r4
    efca:	d003      	beq.n	efd4 <am_gpio_isr+0x48>
            g_sysKeyValue = AM_APP_KEY_0;
    efcc:	4b1a      	ldr	r3, [pc, #104]	; (f038 <am_gpio_isr+0xac>)
    efce:	2201      	movs	r2, #1
    efd0:	701a      	strb	r2, [r3, #0]
    efd2:	e01e      	b.n	f012 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1))
    efd4:	e9d7 bc00 	ldrd	fp, ip, [r7]
    efd8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    efdc:	f04f 0200 	mov.w	r2, #0
    efe0:	ea0b 0301 	and.w	r3, fp, r1
    efe4:	ea0c 0402 	and.w	r4, ip, r2
    efe8:	4323      	orrs	r3, r4
    efea:	d003      	beq.n	eff4 <am_gpio_isr+0x68>
            g_sysKeyValue = AM_APP_KEY_1;
    efec:	4b12      	ldr	r3, [pc, #72]	; (f038 <am_gpio_isr+0xac>)
    efee:	2202      	movs	r2, #2
    eff0:	701a      	strb	r2, [r3, #0]
    eff2:	e00e      	b.n	f012 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2))
    eff4:	e9d7 bc00 	ldrd	fp, ip, [r7]
    eff8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    effc:	f04f 0200 	mov.w	r2, #0
    f000:	ea0b 0301 	and.w	r3, fp, r1
    f004:	ea0c 0402 	and.w	r4, ip, r2
    f008:	4323      	orrs	r3, r4
    f00a:	d002      	beq.n	f012 <am_gpio_isr+0x86>
            g_sysKeyValue = AM_APP_KEY_2;
    f00c:	4b0a      	ldr	r3, [pc, #40]	; (f038 <am_gpio_isr+0xac>)
    f00e:	2203      	movs	r2, #3
    f010:	701a      	strb	r2, [r3, #0]

        g_ui8DebounceFlag = 1;
    f012:	4b08      	ldr	r3, [pc, #32]	; (f034 <am_gpio_isr+0xa8>)
    f014:	2201      	movs	r2, #1
    f016:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    f018:	4b08      	ldr	r3, [pc, #32]	; (f03c <am_gpio_isr+0xb0>)
    f01a:	2200      	movs	r2, #0
    f01c:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    f01e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    f022:	f04f 0100 	mov.w	r1, #0
    f026:	f7fe f8bd 	bl	d1a4 <am_hal_gpio_interrupt_clear>

}
    f02a:	bf00      	nop
    f02c:	3708      	adds	r7, #8
    f02e:	46bd      	mov	sp, r7
    f030:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    f034:	1000c160 	.word	0x1000c160
    f038:	1000c168 	.word	0x1000c168
    f03c:	1000c164 	.word	0x1000c164

0000f040 <am_adc_isr>:
//
//*****************************************************************************
#if AM_APP_ANALOG_MIC
void
am_adc_isr(void)
{
    f040:	b580      	push	{r7, lr}
    f042:	b082      	sub	sp, #8
    f044:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    f046:	4b2a      	ldr	r3, [pc, #168]	; (f0f0 <am_adc_isr+0xb0>)
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	1d39      	adds	r1, r7, #4
    f04c:	2200      	movs	r2, #0
    f04e:	4618      	mov	r0, r3
    f050:	f000 fa02 	bl	f458 <am_hal_adc_interrupt_status>
    f054:	4603      	mov	r3, r0
    f056:	2b00      	cmp	r3, #0
    f058:	d002      	beq.n	f060 <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    f05a:	4826      	ldr	r0, [pc, #152]	; (f0f4 <am_adc_isr+0xb4>)
    f05c:	f7ff f87a 	bl	e154 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    f060:	4b23      	ldr	r3, [pc, #140]	; (f0f0 <am_adc_isr+0xb0>)
    f062:	681b      	ldr	r3, [r3, #0]
    f064:	687a      	ldr	r2, [r7, #4]
    f066:	4611      	mov	r1, r2
    f068:	4618      	mov	r0, r3
    f06a:	f000 fa13 	bl	f494 <am_hal_adc_interrupt_clear>
    f06e:	4603      	mov	r3, r0
    f070:	2b00      	cmp	r3, #0
    f072:	d002      	beq.n	f07a <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    f074:	4820      	ldr	r0, [pc, #128]	; (f0f8 <am_adc_isr+0xb8>)
    f076:	f7ff f86d 	bl	e154 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    f07a:	687b      	ldr	r3, [r7, #4]
    f07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f080:	2b00      	cmp	r3, #0
    f082:	d029      	beq.n	f0d8 <am_adc_isr+0x98>
    {
        g_bADCDMAComplete = true;
    f084:	4b1d      	ldr	r3, [pc, #116]	; (f0fc <am_adc_isr+0xbc>)
    f086:	2201      	movs	r2, #1
    f088:	701a      	strb	r2, [r3, #0]
        if((g_bAMicDataReady == false) && (g_bAMicEvalFlag == true))
    f08a:	4b1d      	ldr	r3, [pc, #116]	; (f100 <am_adc_isr+0xc0>)
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	b2db      	uxtb	r3, r3
    f090:	f083 0301 	eor.w	r3, r3, #1
    f094:	b2db      	uxtb	r3, r3
    f096:	2b00      	cmp	r3, #0
    f098:	d01e      	beq.n	f0d8 <am_adc_isr+0x98>
    f09a:	4b1a      	ldr	r3, [pc, #104]	; (f104 <am_adc_isr+0xc4>)
    f09c:	781b      	ldrb	r3, [r3, #0]
    f09e:	b2db      	uxtb	r3, r3
    f0a0:	2b00      	cmp	r3, #0
    f0a2:	d019      	beq.n	f0d8 <am_adc_isr+0x98>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], (void*)g_ui32ADCSampleBuffer, ADC_SAMPLE_COUNT*ANALOG_MIC_DATA_BYTES, true);
    f0a4:	2301      	movs	r3, #1
    f0a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f0aa:	4917      	ldr	r1, [pc, #92]	; (f108 <am_adc_isr+0xc8>)
    f0ac:	4817      	ldr	r0, [pc, #92]	; (f10c <am_adc_isr+0xcc>)
    f0ae:	f7ff f8db 	bl	e268 <am_app_utils_ring_buffer_push>
            g_ui32AMicDataSumBytes += ADC_SAMPLE_COUNT * ANALOG_MIC_DATA_BYTES;
    f0b2:	4b17      	ldr	r3, [pc, #92]	; (f110 <am_adc_isr+0xd0>)
    f0b4:	681b      	ldr	r3, [r3, #0]
    f0b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f0ba:	4a15      	ldr	r2, [pc, #84]	; (f110 <am_adc_isr+0xd0>)
    f0bc:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA]))
    f0be:	4b15      	ldr	r3, [pc, #84]	; (f114 <am_adc_isr+0xd4>)
    f0c0:	699a      	ldr	r2, [r3, #24]
    f0c2:	4b14      	ldr	r3, [pc, #80]	; (f114 <am_adc_isr+0xd4>)
    f0c4:	69db      	ldr	r3, [r3, #28]
    f0c6:	429a      	cmp	r2, r3
    f0c8:	d106      	bne.n	f0d8 <am_adc_isr+0x98>
    f0ca:	4b12      	ldr	r3, [pc, #72]	; (f114 <am_adc_isr+0xd4>)
    f0cc:	6a1b      	ldr	r3, [r3, #32]
    f0ce:	2b01      	cmp	r3, #1
    f0d0:	d102      	bne.n	f0d8 <am_adc_isr+0x98>
            {
                g_bAMicDataReady = true;
    f0d2:	4b0b      	ldr	r3, [pc, #44]	; (f100 <am_adc_isr+0xc0>)
    f0d4:	2201      	movs	r2, #1
    f0d6:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    f0d8:	687b      	ldr	r3, [r7, #4]
    f0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f0de:	2b00      	cmp	r3, #0
    f0e0:	d002      	beq.n	f0e8 <am_adc_isr+0xa8>
    {
        g_bADCDMAError = true;
    f0e2:	4b0d      	ldr	r3, [pc, #52]	; (f118 <am_adc_isr+0xd8>)
    f0e4:	2201      	movs	r2, #1
    f0e6:	701a      	strb	r2, [r3, #0]
    }
}
    f0e8:	bf00      	nop
    f0ea:	3708      	adds	r7, #8
    f0ec:	46bd      	mov	sp, r7
    f0ee:	bd80      	pop	{r7, pc}
    f0f0:	1000ca6c 	.word	0x1000ca6c
    f0f4:	0001101c 	.word	0x0001101c
    f0f8:	00011040 	.word	0x00011040
    f0fc:	1000ca71 	.word	0x1000ca71
    f100:	1000c174 	.word	0x1000c174
    f104:	1000c175 	.word	0x1000c175
    f108:	1000c6ac 	.word	0x1000c6ac
    f10c:	1002be8c 	.word	0x1002be8c
    f110:	1000c170 	.word	0x1000c170
    f114:	1002be78 	.word	0x1002be78
    f118:	1002beb4 	.word	0x1002beb4

0000f11c <am_bsp_uart_string_print>:
    f11c:	b510      	push	{r4, lr}
    f11e:	b086      	sub	sp, #24
    f120:	7803      	ldrb	r3, [r0, #0]
    f122:	2400      	movs	r4, #0
    f124:	9400      	str	r4, [sp, #0]
    f126:	b1bb      	cbz	r3, f158 <am_bsp_uart_string_print+0x3c>
    f128:	4603      	mov	r3, r0
    f12a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f12e:	3401      	adds	r4, #1
    f130:	2a00      	cmp	r2, #0
    f132:	d1fa      	bne.n	f12a <am_bsp_uart_string_print+0xe>
    f134:	4b0a      	ldr	r3, [pc, #40]	; (f160 <am_bsp_uart_string_print+0x44>)
    f136:	9002      	str	r0, [sp, #8]
    f138:	2200      	movs	r2, #0
    f13a:	6818      	ldr	r0, [r3, #0]
    f13c:	9403      	str	r4, [sp, #12]
    f13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f142:	a901      	add	r1, sp, #4
    f144:	9304      	str	r3, [sp, #16]
    f146:	9201      	str	r2, [sp, #4]
    f148:	f8cd d014 	str.w	sp, [sp, #20]
    f14c:	f001 f9ac 	bl	104a8 <am_hal_uart_transfer>
    f150:	9b00      	ldr	r3, [sp, #0]
    f152:	42a3      	cmp	r3, r4
    f154:	d002      	beq.n	f15c <am_bsp_uart_string_print+0x40>
    f156:	e7fe      	b.n	f156 <am_bsp_uart_string_print+0x3a>
    f158:	461c      	mov	r4, r3
    f15a:	e7eb      	b.n	f134 <am_bsp_uart_string_print+0x18>
    f15c:	b006      	add	sp, #24
    f15e:	bd10      	pop	{r4, pc}
    f160:	1000c17c 	.word	0x1000c17c

0000f164 <am_bsp_low_power_init>:
    f164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f166:	f000 ff65 	bl	10034 <am_hal_pwrctrl_low_power_init>
    f16a:	f000 ffd5 	bl	10118 <am_hal_rtc_osc_disable>
    f16e:	4b0b      	ldr	r3, [pc, #44]	; (f19c <am_bsp_low_power_init+0x38>)
    f170:	4f0b      	ldr	r7, [pc, #44]	; (f1a0 <am_bsp_low_power_init+0x3c>)
    f172:	681e      	ldr	r6, [r3, #0]
    f174:	2400      	movs	r4, #0
    f176:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f17a:	4631      	mov	r1, r6
    f17c:	4628      	mov	r0, r5
    f17e:	f7fd fd21 	bl	cbc4 <am_hal_gpio_pinconfig>
    f182:	2103      	movs	r1, #3
    f184:	4628      	mov	r0, r5
    f186:	f7fd ff51 	bl	d02c <am_hal_gpio_state_write>
    f18a:	3401      	adds	r4, #1
    f18c:	4628      	mov	r0, r5
    f18e:	2100      	movs	r1, #0
    f190:	f7fd ff4c 	bl	d02c <am_hal_gpio_state_write>
    f194:	2c05      	cmp	r4, #5
    f196:	d1ee      	bne.n	f176 <am_bsp_low_power_init+0x12>
    f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f19a:	bf00      	nop
    f19c:	00011070 	.word	0x00011070
    f1a0:	1000c00c 	.word	0x1000c00c

0000f1a4 <am_bsp_uart_printf_enable>:
    f1a4:	b510      	push	{r4, lr}
    f1a6:	4c10      	ldr	r4, [pc, #64]	; (f1e8 <am_bsp_uart_printf_enable+0x44>)
    f1a8:	4b10      	ldr	r3, [pc, #64]	; (f1ec <am_bsp_uart_printf_enable+0x48>)
    f1aa:	4621      	mov	r1, r4
    f1ac:	2202      	movs	r2, #2
    f1ae:	2000      	movs	r0, #0
    f1b0:	601a      	str	r2, [r3, #0]
    f1b2:	f000 ffbb 	bl	1012c <am_hal_uart_initialize>
    f1b6:	2200      	movs	r2, #0
    f1b8:	4611      	mov	r1, r2
    f1ba:	6820      	ldr	r0, [r4, #0]
    f1bc:	f000 ffde 	bl	1017c <am_hal_uart_power_control>
    f1c0:	6820      	ldr	r0, [r4, #0]
    f1c2:	490b      	ldr	r1, [pc, #44]	; (f1f0 <am_bsp_uart_printf_enable+0x4c>)
    f1c4:	f001 f84c 	bl	10260 <am_hal_uart_configure>
    f1c8:	4b0a      	ldr	r3, [pc, #40]	; (f1f4 <am_bsp_uart_printf_enable+0x50>)
    f1ca:	2016      	movs	r0, #22
    f1cc:	6819      	ldr	r1, [r3, #0]
    f1ce:	f7fd fcf9 	bl	cbc4 <am_hal_gpio_pinconfig>
    f1d2:	4b09      	ldr	r3, [pc, #36]	; (f1f8 <am_bsp_uart_printf_enable+0x54>)
    f1d4:	2017      	movs	r0, #23
    f1d6:	6819      	ldr	r1, [r3, #0]
    f1d8:	f7fd fcf4 	bl	cbc4 <am_hal_gpio_pinconfig>
    f1dc:	4807      	ldr	r0, [pc, #28]	; (f1fc <am_bsp_uart_printf_enable+0x58>)
    f1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1e2:	f7fe b927 	b.w	d434 <am_util_stdio_printf_init>
    f1e6:	bf00      	nop
    f1e8:	1000c17c 	.word	0x1000c17c
    f1ec:	1000c178 	.word	0x1000c178
    f1f0:	00011200 	.word	0x00011200
    f1f4:	00011228 	.word	0x00011228
    f1f8:	0001122c 	.word	0x0001122c
    f1fc:	0000f11d 	.word	0x0000f11d

0000f200 <am_hal_adc_initialize>:
    f200:	b108      	cbz	r0, f206 <am_hal_adc_initialize+0x6>
    f202:	2005      	movs	r0, #5
    f204:	4770      	bx	lr
    f206:	b139      	cbz	r1, f218 <am_hal_adc_initialize+0x18>
    f208:	4a1b      	ldr	r2, [pc, #108]	; (f278 <am_hal_adc_initialize+0x78>)
    f20a:	b538      	push	{r3, r4, r5, lr}
    f20c:	78d3      	ldrb	r3, [r2, #3]
    f20e:	f013 0401 	ands.w	r4, r3, #1
    f212:	d003      	beq.n	f21c <am_hal_adc_initialize+0x1c>
    f214:	2007      	movs	r0, #7
    f216:	bd38      	pop	{r3, r4, r5, pc}
    f218:	2006      	movs	r0, #6
    f21a:	4770      	bx	lr
    f21c:	f043 0301 	orr.w	r3, r3, #1
    f220:	70d3      	strb	r3, [r2, #3]
    f222:	6813      	ldr	r3, [r2, #0]
    f224:	4d15      	ldr	r5, [pc, #84]	; (f27c <am_hal_adc_initialize+0x7c>)
    f226:	4816      	ldr	r0, [pc, #88]	; (f280 <am_hal_adc_initialize+0x80>)
    f228:	6054      	str	r4, [r2, #4]
    f22a:	f365 0317 	bfi	r3, r5, #0, #24
    f22e:	6013      	str	r3, [r2, #0]
    f230:	6004      	str	r4, [r0, #0]
    f232:	600a      	str	r2, [r1, #0]
    f234:	4813      	ldr	r0, [pc, #76]	; (f284 <am_hal_adc_initialize+0x84>)
    f236:	4d14      	ldr	r5, [pc, #80]	; (f288 <am_hal_adc_initialize+0x88>)
    f238:	f000 fdfa 	bl	fe30 <am_hal_flash_load_ui32>
    f23c:	6028      	str	r0, [r5, #0]
    f23e:	4813      	ldr	r0, [pc, #76]	; (f28c <am_hal_adc_initialize+0x8c>)
    f240:	f000 fdf6 	bl	fe30 <am_hal_flash_load_ui32>
    f244:	6068      	str	r0, [r5, #4]
    f246:	4812      	ldr	r0, [pc, #72]	; (f290 <am_hal_adc_initialize+0x90>)
    f248:	f000 fdf2 	bl	fe30 <am_hal_flash_load_ui32>
    f24c:	682b      	ldr	r3, [r5, #0]
    f24e:	60a8      	str	r0, [r5, #8]
    f250:	3301      	adds	r3, #1
    f252:	d008      	beq.n	f266 <am_hal_adc_initialize+0x66>
    f254:	686b      	ldr	r3, [r5, #4]
    f256:	3301      	adds	r3, #1
    f258:	d005      	beq.n	f266 <am_hal_adc_initialize+0x66>
    f25a:	3001      	adds	r0, #1
    f25c:	d003      	beq.n	f266 <am_hal_adc_initialize+0x66>
    f25e:	2301      	movs	r3, #1
    f260:	732b      	strb	r3, [r5, #12]
    f262:	4620      	mov	r0, r4
    f264:	bd38      	pop	{r3, r4, r5, pc}
    f266:	490b      	ldr	r1, [pc, #44]	; (f294 <am_hal_adc_initialize+0x94>)
    f268:	4a0b      	ldr	r2, [pc, #44]	; (f298 <am_hal_adc_initialize+0x98>)
    f26a:	4b0c      	ldr	r3, [pc, #48]	; (f29c <am_hal_adc_initialize+0x9c>)
    f26c:	6029      	str	r1, [r5, #0]
    f26e:	2000      	movs	r0, #0
    f270:	606a      	str	r2, [r5, #4]
    f272:	60ab      	str	r3, [r5, #8]
    f274:	7328      	strb	r0, [r5, #12]
    f276:	bd38      	pop	{r3, r4, r5, pc}
    f278:	1002bebc 	.word	0x1002bebc
    f27c:	00afafaf 	.word	0x00afafaf
    f280:	1002beb8 	.word	0x1002beb8
    f284:	50023840 	.word	0x50023840
    f288:	1000c180 	.word	0x1000c180
    f28c:	50023844 	.word	0x50023844
    f290:	50023848 	.word	0x50023848
    f294:	4395c000 	.word	0x4395c000
    f298:	3f839874 	.word	0x3f839874
    f29c:	bb8c47a1 	.word	0xbb8c47a1

0000f2a0 <am_hal_adc_configure>:
    f2a0:	b128      	cbz	r0, f2ae <am_hal_adc_configure+0xe>
    f2a2:	6803      	ldr	r3, [r0, #0]
    f2a4:	4a18      	ldr	r2, [pc, #96]	; (f308 <am_hal_adc_configure+0x68>)
    f2a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2aa:	4293      	cmp	r3, r2
    f2ac:	d001      	beq.n	f2b2 <am_hal_adc_configure+0x12>
    f2ae:	2002      	movs	r0, #2
    f2b0:	4770      	bx	lr
    f2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2b4:	7808      	ldrb	r0, [r1, #0]
    f2b6:	784d      	ldrb	r5, [r1, #1]
    f2b8:	788c      	ldrb	r4, [r1, #2]
    f2ba:	f891 e003 	ldrb.w	lr, [r1, #3]
    f2be:	790f      	ldrb	r7, [r1, #4]
    f2c0:	794a      	ldrb	r2, [r1, #5]
    f2c2:	798b      	ldrb	r3, [r1, #6]
    f2c4:	4e11      	ldr	r6, [pc, #68]	; (f30c <am_hal_adc_configure+0x6c>)
    f2c6:	0600      	lsls	r0, r0, #24
    f2c8:	04ed      	lsls	r5, r5, #19
    f2ca:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    f2ce:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    f2d2:	4328      	orrs	r0, r5
    f2d4:	0424      	lsls	r4, r4, #16
    f2d6:	ea4f 210e 	mov.w	r1, lr, lsl #8
    f2da:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    f2de:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    f2e2:	4304      	orrs	r4, r0
    f2e4:	f401 7040 	and.w	r0, r1, #768	; 0x300
    f2e8:	0139      	lsls	r1, r7, #4
    f2ea:	4320      	orrs	r0, r4
    f2ec:	f001 0110 	and.w	r1, r1, #16
    f2f0:	00d2      	lsls	r2, r2, #3
    f2f2:	4301      	orrs	r1, r0
    f2f4:	f002 0208 	and.w	r2, r2, #8
    f2f8:	009b      	lsls	r3, r3, #2
    f2fa:	430a      	orrs	r2, r1
    f2fc:	f003 0304 	and.w	r3, r3, #4
    f300:	4313      	orrs	r3, r2
    f302:	6033      	str	r3, [r6, #0]
    f304:	2000      	movs	r0, #0
    f306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f308:	01afafaf 	.word	0x01afafaf
    f30c:	50010000 	.word	0x50010000

0000f310 <am_hal_adc_configure_slot>:
    f310:	b128      	cbz	r0, f31e <am_hal_adc_configure_slot+0xe>
    f312:	6803      	ldr	r3, [r0, #0]
    f314:	4816      	ldr	r0, [pc, #88]	; (f370 <am_hal_adc_configure_slot+0x60>)
    f316:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f31a:	4283      	cmp	r3, r0
    f31c:	d001      	beq.n	f322 <am_hal_adc_configure_slot+0x12>
    f31e:	2002      	movs	r0, #2
    f320:	4770      	bx	lr
    f322:	2907      	cmp	r1, #7
    f324:	d901      	bls.n	f32a <am_hal_adc_configure_slot+0x1a>
    f326:	2005      	movs	r0, #5
    f328:	4770      	bx	lr
    f32a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f32c:	7813      	ldrb	r3, [r2, #0]
    f32e:	7854      	ldrb	r4, [r2, #1]
    f330:	7890      	ldrb	r0, [r2, #2]
    f332:	78d7      	ldrb	r7, [r2, #3]
    f334:	f892 e004 	ldrb.w	lr, [r2, #4]
    f338:	4d0e      	ldr	r5, [pc, #56]	; (f374 <am_hal_adc_configure_slot+0x64>)
    f33a:	4e0f      	ldr	r6, [pc, #60]	; (f378 <am_hal_adc_configure_slot+0x68>)
    f33c:	061b      	lsls	r3, r3, #24
    f33e:	0424      	lsls	r4, r4, #16
    f340:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    f344:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    f348:	4323      	orrs	r3, r4
    f34a:	0202      	lsls	r2, r0, #8
    f34c:	ea43 0e0e 	orr.w	lr, r3, lr
    f350:	440d      	add	r5, r1
    f352:	007b      	lsls	r3, r7, #1
    f354:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    f358:	ea4e 0202 	orr.w	r2, lr, r2
    f35c:	00ad      	lsls	r5, r5, #2
    f35e:	f003 0302 	and.w	r3, r3, #2
    f362:	4313      	orrs	r3, r2
    f364:	602b      	str	r3, [r5, #0]
    f366:	6833      	ldr	r3, [r6, #0]
    f368:	3301      	adds	r3, #1
    f36a:	6033      	str	r3, [r6, #0]
    f36c:	2000      	movs	r0, #0
    f36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f370:	01afafaf 	.word	0x01afafaf
    f374:	14004003 	.word	0x14004003
    f378:	1002beb8 	.word	0x1002beb8

0000f37c <am_hal_adc_configure_dma>:
    f37c:	b128      	cbz	r0, f38a <am_hal_adc_configure_dma+0xe>
    f37e:	6803      	ldr	r3, [r0, #0]
    f380:	4a17      	ldr	r2, [pc, #92]	; (f3e0 <am_hal_adc_configure_dma+0x64>)
    f382:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f386:	4293      	cmp	r3, r2
    f388:	d001      	beq.n	f38e <am_hal_adc_configure_dma+0x12>
    f38a:	2002      	movs	r0, #2
    f38c:	4770      	bx	lr
    f38e:	b410      	push	{r4}
    f390:	7808      	ldrb	r0, [r1, #0]
    f392:	784b      	ldrb	r3, [r1, #1]
    f394:	4c13      	ldr	r4, [pc, #76]	; (f3e4 <am_hal_adc_configure_dma+0x68>)
    f396:	4a14      	ldr	r2, [pc, #80]	; (f3e8 <am_hal_adc_configure_dma+0x6c>)
    f398:	6824      	ldr	r4, [r4, #0]
    f39a:	0240      	lsls	r0, r0, #9
    f39c:	021b      	lsls	r3, r3, #8
    f39e:	f400 7000 	and.w	r0, r0, #512	; 0x200
    f3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    f3a6:	4303      	orrs	r3, r0
    f3a8:	2c01      	cmp	r4, #1
    f3aa:	bf8c      	ite	hi
    f3ac:	2000      	movhi	r0, #0
    f3ae:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    f3b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    f3b6:	4303      	orrs	r3, r0
    f3b8:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    f3bc:	8888      	ldrh	r0, [r1, #4]
    f3be:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    f3c2:	f360 0391 	bfi	r3, r0, #2, #16
    f3c6:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    f3ca:	688b      	ldr	r3, [r1, #8]
    f3cc:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    f3d0:	2301      	movs	r3, #1
    f3d2:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    f3d6:	2000      	movs	r0, #0
    f3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    f3dc:	4770      	bx	lr
    f3de:	bf00      	nop
    f3e0:	01afafaf 	.word	0x01afafaf
    f3e4:	1002beb8 	.word	0x1002beb8
    f3e8:	50010000 	.word	0x50010000

0000f3ec <am_hal_adc_enable>:
    f3ec:	4603      	mov	r3, r0
    f3ee:	b128      	cbz	r0, f3fc <am_hal_adc_enable+0x10>
    f3f0:	6802      	ldr	r2, [r0, #0]
    f3f2:	490c      	ldr	r1, [pc, #48]	; (f424 <am_hal_adc_enable+0x38>)
    f3f4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f3f8:	428a      	cmp	r2, r1
    f3fa:	d001      	beq.n	f400 <am_hal_adc_enable+0x14>
    f3fc:	2002      	movs	r0, #2
    f3fe:	4770      	bx	lr
    f400:	78c2      	ldrb	r2, [r0, #3]
    f402:	f002 0202 	and.w	r2, r2, #2
    f406:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f40a:	b94a      	cbnz	r2, f420 <am_hal_adc_enable+0x34>
    f40c:	4906      	ldr	r1, [pc, #24]	; (f428 <am_hal_adc_enable+0x3c>)
    f40e:	680a      	ldr	r2, [r1, #0]
    f410:	f042 0201 	orr.w	r2, r2, #1
    f414:	600a      	str	r2, [r1, #0]
    f416:	78da      	ldrb	r2, [r3, #3]
    f418:	f042 0202 	orr.w	r2, r2, #2
    f41c:	70da      	strb	r2, [r3, #3]
    f41e:	4770      	bx	lr
    f420:	2000      	movs	r0, #0
    f422:	4770      	bx	lr
    f424:	01afafaf 	.word	0x01afafaf
    f428:	50010000 	.word	0x50010000

0000f42c <am_hal_adc_interrupt_enable>:
    f42c:	b128      	cbz	r0, f43a <am_hal_adc_interrupt_enable+0xe>
    f42e:	6803      	ldr	r3, [r0, #0]
    f430:	4a07      	ldr	r2, [pc, #28]	; (f450 <am_hal_adc_interrupt_enable+0x24>)
    f432:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f436:	4293      	cmp	r3, r2
    f438:	d001      	beq.n	f43e <am_hal_adc_interrupt_enable+0x12>
    f43a:	2002      	movs	r0, #2
    f43c:	4770      	bx	lr
    f43e:	4b05      	ldr	r3, [pc, #20]	; (f454 <am_hal_adc_interrupt_enable+0x28>)
    f440:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f444:	4311      	orrs	r1, r2
    f446:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    f44a:	2000      	movs	r0, #0
    f44c:	4770      	bx	lr
    f44e:	bf00      	nop
    f450:	01afafaf 	.word	0x01afafaf
    f454:	50010000 	.word	0x50010000

0000f458 <am_hal_adc_interrupt_status>:
    f458:	b128      	cbz	r0, f466 <am_hal_adc_interrupt_status+0xe>
    f45a:	6803      	ldr	r3, [r0, #0]
    f45c:	480b      	ldr	r0, [pc, #44]	; (f48c <am_hal_adc_interrupt_status+0x34>)
    f45e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f462:	4283      	cmp	r3, r0
    f464:	d001      	beq.n	f46a <am_hal_adc_interrupt_status+0x12>
    f466:	2002      	movs	r0, #2
    f468:	4770      	bx	lr
    f46a:	b92a      	cbnz	r2, f478 <am_hal_adc_interrupt_status+0x20>
    f46c:	4b08      	ldr	r3, [pc, #32]	; (f490 <am_hal_adc_interrupt_status+0x38>)
    f46e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f472:	600b      	str	r3, [r1, #0]
    f474:	4610      	mov	r0, r2
    f476:	4770      	bx	lr
    f478:	4a05      	ldr	r2, [pc, #20]	; (f490 <am_hal_adc_interrupt_status+0x38>)
    f47a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    f47e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f482:	4003      	ands	r3, r0
    f484:	600b      	str	r3, [r1, #0]
    f486:	2000      	movs	r0, #0
    f488:	4770      	bx	lr
    f48a:	bf00      	nop
    f48c:	01afafaf 	.word	0x01afafaf
    f490:	50010000 	.word	0x50010000

0000f494 <am_hal_adc_interrupt_clear>:
    f494:	b128      	cbz	r0, f4a2 <am_hal_adc_interrupt_clear+0xe>
    f496:	6803      	ldr	r3, [r0, #0]
    f498:	4a05      	ldr	r2, [pc, #20]	; (f4b0 <am_hal_adc_interrupt_clear+0x1c>)
    f49a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f49e:	4293      	cmp	r3, r2
    f4a0:	d001      	beq.n	f4a6 <am_hal_adc_interrupt_clear+0x12>
    f4a2:	2002      	movs	r0, #2
    f4a4:	4770      	bx	lr
    f4a6:	4b03      	ldr	r3, [pc, #12]	; (f4b4 <am_hal_adc_interrupt_clear+0x20>)
    f4a8:	2000      	movs	r0, #0
    f4aa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    f4ae:	4770      	bx	lr
    f4b0:	01afafaf 	.word	0x01afafaf
    f4b4:	50010000 	.word	0x50010000

0000f4b8 <am_hal_adc_sw_trigger>:
    f4b8:	b128      	cbz	r0, f4c6 <am_hal_adc_sw_trigger+0xe>
    f4ba:	6803      	ldr	r3, [r0, #0]
    f4bc:	4a05      	ldr	r2, [pc, #20]	; (f4d4 <am_hal_adc_sw_trigger+0x1c>)
    f4be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4c2:	4293      	cmp	r3, r2
    f4c4:	d001      	beq.n	f4ca <am_hal_adc_sw_trigger+0x12>
    f4c6:	2002      	movs	r0, #2
    f4c8:	4770      	bx	lr
    f4ca:	4b03      	ldr	r3, [pc, #12]	; (f4d8 <am_hal_adc_sw_trigger+0x20>)
    f4cc:	2237      	movs	r2, #55	; 0x37
    f4ce:	609a      	str	r2, [r3, #8]
    f4d0:	2000      	movs	r0, #0
    f4d2:	4770      	bx	lr
    f4d4:	01afafaf 	.word	0x01afafaf
    f4d8:	50010000 	.word	0x50010000

0000f4dc <am_hal_adc_power_control>:
    f4dc:	b140      	cbz	r0, f4f0 <am_hal_adc_power_control+0x14>
    f4de:	6803      	ldr	r3, [r0, #0]
    f4e0:	b570      	push	{r4, r5, r6, lr}
    f4e2:	4c2e      	ldr	r4, [pc, #184]	; (f59c <am_hal_adc_power_control+0xc0>)
    f4e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f4e8:	42a3      	cmp	r3, r4
    f4ea:	d003      	beq.n	f4f4 <am_hal_adc_power_control+0x18>
    f4ec:	2002      	movs	r0, #2
    f4ee:	bd70      	pop	{r4, r5, r6, pc}
    f4f0:	2002      	movs	r0, #2
    f4f2:	4770      	bx	lr
    f4f4:	4604      	mov	r4, r0
    f4f6:	4615      	mov	r5, r2
    f4f8:	460e      	mov	r6, r1
    f4fa:	b329      	cbz	r1, f548 <am_hal_adc_power_control+0x6c>
    f4fc:	2902      	cmp	r1, #2
    f4fe:	d821      	bhi.n	f544 <am_hal_adc_power_control+0x68>
    f500:	b1da      	cbz	r2, f53a <am_hal_adc_power_control+0x5e>
    f502:	4b27      	ldr	r3, [pc, #156]	; (f5a0 <am_hal_adc_power_control+0xc4>)
    f504:	68da      	ldr	r2, [r3, #12]
    f506:	6142      	str	r2, [r0, #20]
    f508:	691a      	ldr	r2, [r3, #16]
    f50a:	6182      	str	r2, [r0, #24]
    f50c:	695a      	ldr	r2, [r3, #20]
    f50e:	61c2      	str	r2, [r0, #28]
    f510:	699a      	ldr	r2, [r3, #24]
    f512:	6202      	str	r2, [r0, #32]
    f514:	69da      	ldr	r2, [r3, #28]
    f516:	6242      	str	r2, [r0, #36]	; 0x24
    f518:	6a1a      	ldr	r2, [r3, #32]
    f51a:	6282      	str	r2, [r0, #40]	; 0x28
    f51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f51e:	62c2      	str	r2, [r0, #44]	; 0x2c
    f520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f522:	6302      	str	r2, [r0, #48]	; 0x30
    f524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f526:	6342      	str	r2, [r0, #52]	; 0x34
    f528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f52a:	6382      	str	r2, [r0, #56]	; 0x38
    f52c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f530:	63c2      	str	r2, [r0, #60]	; 0x3c
    f532:	681b      	ldr	r3, [r3, #0]
    f534:	6103      	str	r3, [r0, #16]
    f536:	2301      	movs	r3, #1
    f538:	7303      	strb	r3, [r0, #12]
    f53a:	200a      	movs	r0, #10
    f53c:	f000 fd4e 	bl	ffdc <am_hal_pwrctrl_periph_disable>
    f540:	2000      	movs	r0, #0
    f542:	bd70      	pop	{r4, r5, r6, pc}
    f544:	2006      	movs	r0, #6
    f546:	bd70      	pop	{r4, r5, r6, pc}
    f548:	b11a      	cbz	r2, f552 <am_hal_adc_power_control+0x76>
    f54a:	7b03      	ldrb	r3, [r0, #12]
    f54c:	b933      	cbnz	r3, f55c <am_hal_adc_power_control+0x80>
    f54e:	2007      	movs	r0, #7
    f550:	bd70      	pop	{r4, r5, r6, pc}
    f552:	200a      	movs	r0, #10
    f554:	f000 fd18 	bl	ff88 <am_hal_pwrctrl_periph_enable>
    f558:	4628      	mov	r0, r5
    f55a:	bd70      	pop	{r4, r5, r6, pc}
    f55c:	200a      	movs	r0, #10
    f55e:	f000 fd13 	bl	ff88 <am_hal_pwrctrl_periph_enable>
    f562:	4b0f      	ldr	r3, [pc, #60]	; (f5a0 <am_hal_adc_power_control+0xc4>)
    f564:	6962      	ldr	r2, [r4, #20]
    f566:	60da      	str	r2, [r3, #12]
    f568:	69a2      	ldr	r2, [r4, #24]
    f56a:	611a      	str	r2, [r3, #16]
    f56c:	69e2      	ldr	r2, [r4, #28]
    f56e:	615a      	str	r2, [r3, #20]
    f570:	6a22      	ldr	r2, [r4, #32]
    f572:	619a      	str	r2, [r3, #24]
    f574:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f576:	61da      	str	r2, [r3, #28]
    f578:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f57a:	621a      	str	r2, [r3, #32]
    f57c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f57e:	625a      	str	r2, [r3, #36]	; 0x24
    f580:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f582:	629a      	str	r2, [r3, #40]	; 0x28
    f584:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f586:	62da      	str	r2, [r3, #44]	; 0x2c
    f588:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f58a:	631a      	str	r2, [r3, #48]	; 0x30
    f58c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f58e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f592:	6922      	ldr	r2, [r4, #16]
    f594:	601a      	str	r2, [r3, #0]
    f596:	4630      	mov	r0, r6
    f598:	7326      	strb	r6, [r4, #12]
    f59a:	bd70      	pop	{r4, r5, r6, pc}
    f59c:	01afafaf 	.word	0x01afafaf
    f5a0:	50010000 	.word	0x50010000

0000f5a4 <am_hal_burst_mode_initialize>:
    f5a4:	b570      	push	{r4, r5, r6, lr}
    f5a6:	4b1e      	ldr	r3, [pc, #120]	; (f620 <am_hal_burst_mode_initialize+0x7c>)
    f5a8:	695a      	ldr	r2, [r3, #20]
    f5aa:	07d5      	lsls	r5, r2, #31
    f5ac:	b082      	sub	sp, #8
    f5ae:	4604      	mov	r4, r0
    f5b0:	d407      	bmi.n	f5c2 <am_hal_burst_mode_initialize+0x1e>
    f5b2:	4a1c      	ldr	r2, [pc, #112]	; (f624 <am_hal_burst_mode_initialize+0x80>)
    f5b4:	2100      	movs	r1, #0
    f5b6:	2301      	movs	r3, #1
    f5b8:	7011      	strb	r1, [r2, #0]
    f5ba:	2007      	movs	r0, #7
    f5bc:	7023      	strb	r3, [r4, #0]
    f5be:	b002      	add	sp, #8
    f5c0:	bd70      	pop	{r4, r5, r6, pc}
    f5c2:	4a19      	ldr	r2, [pc, #100]	; (f628 <am_hal_burst_mode_initialize+0x84>)
    f5c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f5c6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f5ca:	6291      	str	r1, [r2, #40]	; 0x28
    f5cc:	6812      	ldr	r2, [r2, #0]
    f5ce:	07d0      	lsls	r0, r2, #31
    f5d0:	d507      	bpl.n	f5e2 <am_hal_burst_mode_initialize+0x3e>
    f5d2:	68db      	ldr	r3, [r3, #12]
    f5d4:	b2db      	uxtb	r3, r3
    f5d6:	2b11      	cmp	r3, #17
    f5d8:	d903      	bls.n	f5e2 <am_hal_burst_mode_initialize+0x3e>
    f5da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f5de:	4a13      	ldr	r2, [pc, #76]	; (f62c <am_hal_burst_mode_initialize+0x88>)
    f5e0:	63da      	str	r2, [r3, #60]	; 0x3c
    f5e2:	4d0f      	ldr	r5, [pc, #60]	; (f620 <am_hal_burst_mode_initialize+0x7c>)
    f5e4:	4912      	ldr	r1, [pc, #72]	; (f630 <am_hal_burst_mode_initialize+0x8c>)
    f5e6:	7e2a      	ldrb	r2, [r5, #24]
    f5e8:	2601      	movs	r6, #1
    f5ea:	f042 0210 	orr.w	r2, r2, #16
    f5ee:	2320      	movs	r3, #32
    f5f0:	762a      	strb	r2, [r5, #24]
    f5f2:	f242 7010 	movw	r0, #10000	; 0x2710
    f5f6:	461a      	mov	r2, r3
    f5f8:	9600      	str	r6, [sp, #0]
    f5fa:	f000 fbdf 	bl	fdbc <am_hal_flash_delay_status_check>
    f5fe:	b948      	cbnz	r0, f614 <am_hal_burst_mode_initialize+0x70>
    f600:	69aa      	ldr	r2, [r5, #24]
    f602:	0651      	lsls	r1, r2, #25
    f604:	d5d5      	bpl.n	f5b2 <am_hal_burst_mode_initialize+0xe>
    f606:	69aa      	ldr	r2, [r5, #24]
    f608:	0692      	lsls	r2, r2, #26
    f60a:	d5d2      	bpl.n	f5b2 <am_hal_burst_mode_initialize+0xe>
    f60c:	4a05      	ldr	r2, [pc, #20]	; (f624 <am_hal_burst_mode_initialize+0x80>)
    f60e:	7016      	strb	r6, [r2, #0]
    f610:	7020      	strb	r0, [r4, #0]
    f612:	e7d4      	b.n	f5be <am_hal_burst_mode_initialize+0x1a>
    f614:	4a03      	ldr	r2, [pc, #12]	; (f624 <am_hal_burst_mode_initialize+0x80>)
    f616:	2100      	movs	r1, #0
    f618:	7011      	strb	r1, [r2, #0]
    f61a:	7026      	strb	r6, [r4, #0]
    f61c:	b002      	add	sp, #8
    f61e:	bd70      	pop	{r4, r5, r6, pc}
    f620:	40020000 	.word	0x40020000
    f624:	1000c190 	.word	0x1000c190
    f628:	40021000 	.word	0x40021000
    f62c:	0fc0400f 	.word	0x0fc0400f
    f630:	40020018 	.word	0x40020018

0000f634 <am_hal_burst_mode_enable>:
    f634:	4b14      	ldr	r3, [pc, #80]	; (f688 <am_hal_burst_mode_enable+0x54>)
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	b91b      	cbnz	r3, f642 <am_hal_burst_mode_enable+0xe>
    f63a:	2301      	movs	r3, #1
    f63c:	7003      	strb	r3, [r0, #0]
    f63e:	2007      	movs	r0, #7
    f640:	4770      	bx	lr
    f642:	b570      	push	{r4, r5, r6, lr}
    f644:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f648:	b082      	sub	sp, #8
    f64a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f64e:	490f      	ldr	r1, [pc, #60]	; (f68c <am_hal_burst_mode_enable+0x58>)
    f650:	2601      	movs	r6, #1
    f652:	4332      	orrs	r2, r6
    f654:	2304      	movs	r3, #4
    f656:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f65a:	4604      	mov	r4, r0
    f65c:	461a      	mov	r2, r3
    f65e:	9600      	str	r6, [sp, #0]
    f660:	f242 7010 	movw	r0, #10000	; 0x2710
    f664:	f000 fbaa 	bl	fdbc <am_hal_flash_delay_status_check>
    f668:	b938      	cbnz	r0, f67a <am_hal_burst_mode_enable+0x46>
    f66a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f66c:	079a      	lsls	r2, r3, #30
    f66e:	d507      	bpl.n	f680 <am_hal_burst_mode_enable+0x4c>
    f670:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f672:	075b      	lsls	r3, r3, #29
    f674:	d501      	bpl.n	f67a <am_hal_burst_mode_enable+0x46>
    f676:	7020      	strb	r0, [r4, #0]
    f678:	e000      	b.n	f67c <am_hal_burst_mode_enable+0x48>
    f67a:	7026      	strb	r6, [r4, #0]
    f67c:	b002      	add	sp, #8
    f67e:	bd70      	pop	{r4, r5, r6, pc}
    f680:	7026      	strb	r6, [r4, #0]
    f682:	4630      	mov	r0, r6
    f684:	e7fa      	b.n	f67c <am_hal_burst_mode_enable+0x48>
    f686:	bf00      	nop
    f688:	1000c190 	.word	0x1000c190
    f68c:	40004034 	.word	0x40004034

0000f690 <am_hal_cachectrl_config>:
    f690:	b530      	push	{r4, r5, lr}
    f692:	b083      	sub	sp, #12
    f694:	4605      	mov	r5, r0
    f696:	f000 fbd9 	bl	fe4c <am_hal_interrupt_master_disable>
    f69a:	4c0f      	ldr	r4, [pc, #60]	; (f6d8 <am_hal_cachectrl_config+0x48>)
    f69c:	9001      	str	r0, [sp, #4]
    f69e:	6823      	ldr	r3, [r4, #0]
    f6a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f6a4:	6023      	str	r3, [r4, #0]
    f6a6:	9801      	ldr	r0, [sp, #4]
    f6a8:	f000 fbd4 	bl	fe54 <am_hal_interrupt_master_set>
    f6ac:	78ab      	ldrb	r3, [r5, #2]
    f6ae:	782a      	ldrb	r2, [r5, #0]
    f6b0:	7869      	ldrb	r1, [r5, #1]
    f6b2:	005b      	lsls	r3, r3, #1
    f6b4:	0112      	lsls	r2, r2, #4
    f6b6:	b2d2      	uxtb	r2, r2
    f6b8:	f003 0302 	and.w	r3, r3, #2
    f6bc:	4313      	orrs	r3, r2
    f6be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f6c2:	020a      	lsls	r2, r1, #8
    f6c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f6c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f6cc:	4313      	orrs	r3, r2
    f6ce:	2000      	movs	r0, #0
    f6d0:	6023      	str	r3, [r4, #0]
    f6d2:	b003      	add	sp, #12
    f6d4:	bd30      	pop	{r4, r5, pc}
    f6d6:	bf00      	nop
    f6d8:	40018000 	.word	0x40018000

0000f6dc <am_hal_cachectrl_enable>:
    f6dc:	4a03      	ldr	r2, [pc, #12]	; (f6ec <am_hal_cachectrl_enable+0x10>)
    f6de:	6813      	ldr	r3, [r2, #0]
    f6e0:	f043 0301 	orr.w	r3, r3, #1
    f6e4:	6013      	str	r3, [r2, #0]
    f6e6:	2000      	movs	r0, #0
    f6e8:	4770      	bx	lr
    f6ea:	bf00      	nop
    f6ec:	40018000 	.word	0x40018000

0000f6f0 <am_hal_cachectrl_control>:
    f6f0:	b510      	push	{r4, lr}
    f6f2:	3801      	subs	r0, #1
    f6f4:	b08e      	sub	sp, #56	; 0x38
    f6f6:	2810      	cmp	r0, #16
    f6f8:	f200 8143 	bhi.w	f982 <am_hal_cachectrl_control+0x292>
    f6fc:	e8df f010 	tbh	[pc, r0, lsl #1]
    f700:	01380136 	.word	0x01380136
    f704:	0011013e 	.word	0x0011013e
    f708:	001a0018 	.word	0x001a0018
    f70c:	001f001c 	.word	0x001f001c
    f710:	00300022 	.word	0x00300022
    f714:	0074003c 	.word	0x0074003c
    f718:	00e400ac 	.word	0x00e400ac
    f71c:	011a00ff 	.word	0x011a00ff
    f720:	0120      	.short	0x0120
    f722:	f44f 7208 	mov.w	r2, #544	; 0x220
    f726:	4ba8      	ldr	r3, [pc, #672]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f728:	2000      	movs	r0, #0
    f72a:	609a      	str	r2, [r3, #8]
    f72c:	b00e      	add	sp, #56	; 0x38
    f72e:	bd10      	pop	{r4, pc}
    f730:	2240      	movs	r2, #64	; 0x40
    f732:	e7f8      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f734:	2220      	movs	r2, #32
    f736:	e7f6      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f738:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f73c:	e7f3      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f73e:	f44f 7200 	mov.w	r2, #512	; 0x200
    f742:	e7f0      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f744:	f000 fb82 	bl	fe4c <am_hal_interrupt_master_disable>
    f748:	4a9f      	ldr	r2, [pc, #636]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f74a:	9000      	str	r0, [sp, #0]
    f74c:	6813      	ldr	r3, [r2, #0]
    f74e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f752:	6013      	str	r3, [r2, #0]
    f754:	9800      	ldr	r0, [sp, #0]
    f756:	f000 fb7d 	bl	fe54 <am_hal_interrupt_master_set>
    f75a:	2000      	movs	r0, #0
    f75c:	b00e      	add	sp, #56	; 0x38
    f75e:	bd10      	pop	{r4, pc}
    f760:	f000 fb74 	bl	fe4c <am_hal_interrupt_master_disable>
    f764:	4a98      	ldr	r2, [pc, #608]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f766:	9001      	str	r0, [sp, #4]
    f768:	6813      	ldr	r3, [r2, #0]
    f76a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f76e:	6013      	str	r3, [r2, #0]
    f770:	9801      	ldr	r0, [sp, #4]
    f772:	f000 fb6f 	bl	fe54 <am_hal_interrupt_master_set>
    f776:	e7f0      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f778:	f000 fb68 	bl	fe4c <am_hal_interrupt_master_disable>
    f77c:	4603      	mov	r3, r0
    f77e:	4893      	ldr	r0, [pc, #588]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f780:	9302      	str	r3, [sp, #8]
    f782:	f000 fb55 	bl	fe30 <am_hal_flash_load_ui32>
    f786:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f78a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f78e:	488f      	ldr	r0, [pc, #572]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f790:	f000 fb52 	bl	fe38 <am_hal_flash_store_ui32>
    f794:	9802      	ldr	r0, [sp, #8]
    f796:	f000 fb5d 	bl	fe54 <am_hal_interrupt_master_set>
    f79a:	f000 fb57 	bl	fe4c <am_hal_interrupt_master_disable>
    f79e:	4603      	mov	r3, r0
    f7a0:	488a      	ldr	r0, [pc, #552]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f7a2:	9303      	str	r3, [sp, #12]
    f7a4:	f000 fb44 	bl	fe30 <am_hal_flash_load_ui32>
    f7a8:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f7ac:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    f7b0:	4886      	ldr	r0, [pc, #536]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f7b2:	f000 fb41 	bl	fe38 <am_hal_flash_store_ui32>
    f7b6:	9803      	ldr	r0, [sp, #12]
    f7b8:	f000 fb4c 	bl	fe54 <am_hal_interrupt_master_set>
    f7bc:	f000 fb46 	bl	fe4c <am_hal_interrupt_master_disable>
    f7c0:	4603      	mov	r3, r0
    f7c2:	4882      	ldr	r0, [pc, #520]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f7c4:	9304      	str	r3, [sp, #16]
    f7c6:	f000 fb33 	bl	fe30 <am_hal_flash_load_ui32>
    f7ca:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f7ce:	f021 010f 	bic.w	r1, r1, #15
    f7d2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f7d6:	f041 0103 	orr.w	r1, r1, #3
    f7da:	487c      	ldr	r0, [pc, #496]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f7dc:	f000 fb2c 	bl	fe38 <am_hal_flash_store_ui32>
    f7e0:	9804      	ldr	r0, [sp, #16]
    f7e2:	f000 fb37 	bl	fe54 <am_hal_interrupt_master_set>
    f7e6:	e7b8      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f7e8:	f000 fb30 	bl	fe4c <am_hal_interrupt_master_disable>
    f7ec:	4603      	mov	r3, r0
    f7ee:	4877      	ldr	r0, [pc, #476]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f7f0:	9305      	str	r3, [sp, #20]
    f7f2:	f000 fb1d 	bl	fe30 <am_hal_flash_load_ui32>
    f7f6:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f7fa:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    f7fe:	4873      	ldr	r0, [pc, #460]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f800:	f000 fb1a 	bl	fe38 <am_hal_flash_store_ui32>
    f804:	9805      	ldr	r0, [sp, #20]
    f806:	f000 fb25 	bl	fe54 <am_hal_interrupt_master_set>
    f80a:	f000 fb1f 	bl	fe4c <am_hal_interrupt_master_disable>
    f80e:	4603      	mov	r3, r0
    f810:	486e      	ldr	r0, [pc, #440]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f812:	9306      	str	r3, [sp, #24]
    f814:	f000 fb0c 	bl	fe30 <am_hal_flash_load_ui32>
    f818:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f81c:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    f820:	486a      	ldr	r0, [pc, #424]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f822:	f000 fb09 	bl	fe38 <am_hal_flash_store_ui32>
    f826:	9806      	ldr	r0, [sp, #24]
    f828:	f000 fb14 	bl	fe54 <am_hal_interrupt_master_set>
    f82c:	f000 fb0e 	bl	fe4c <am_hal_interrupt_master_disable>
    f830:	4603      	mov	r3, r0
    f832:	4866      	ldr	r0, [pc, #408]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f834:	9307      	str	r3, [sp, #28]
    f836:	f000 fafb 	bl	fe30 <am_hal_flash_load_ui32>
    f83a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f83e:	f021 010f 	bic.w	r1, r1, #15
    f842:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f846:	f041 0101 	orr.w	r1, r1, #1
    f84a:	4860      	ldr	r0, [pc, #384]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f84c:	f000 faf4 	bl	fe38 <am_hal_flash_store_ui32>
    f850:	9807      	ldr	r0, [sp, #28]
    f852:	f000 faff 	bl	fe54 <am_hal_interrupt_master_set>
    f856:	e780      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f858:	f000 faf8 	bl	fe4c <am_hal_interrupt_master_disable>
    f85c:	4603      	mov	r3, r0
    f85e:	485b      	ldr	r0, [pc, #364]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f860:	9308      	str	r3, [sp, #32]
    f862:	f000 fae5 	bl	fe30 <am_hal_flash_load_ui32>
    f866:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f86a:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    f86e:	4857      	ldr	r0, [pc, #348]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f870:	f000 fae2 	bl	fe38 <am_hal_flash_store_ui32>
    f874:	9808      	ldr	r0, [sp, #32]
    f876:	f000 faed 	bl	fe54 <am_hal_interrupt_master_set>
    f87a:	f000 fae7 	bl	fe4c <am_hal_interrupt_master_disable>
    f87e:	4603      	mov	r3, r0
    f880:	4852      	ldr	r0, [pc, #328]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f882:	9309      	str	r3, [sp, #36]	; 0x24
    f884:	f000 fad4 	bl	fe30 <am_hal_flash_load_ui32>
    f888:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f88c:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    f890:	484e      	ldr	r0, [pc, #312]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f892:	f000 fad1 	bl	fe38 <am_hal_flash_store_ui32>
    f896:	9809      	ldr	r0, [sp, #36]	; 0x24
    f898:	f000 fadc 	bl	fe54 <am_hal_interrupt_master_set>
    f89c:	f000 fad6 	bl	fe4c <am_hal_interrupt_master_disable>
    f8a0:	4603      	mov	r3, r0
    f8a2:	484a      	ldr	r0, [pc, #296]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f8a4:	930a      	str	r3, [sp, #40]	; 0x28
    f8a6:	f000 fac3 	bl	fe30 <am_hal_flash_load_ui32>
    f8aa:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f8ae:	f021 010f 	bic.w	r1, r1, #15
    f8b2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    f8b6:	f041 0101 	orr.w	r1, r1, #1
    f8ba:	4844      	ldr	r0, [pc, #272]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f8bc:	f000 fabc 	bl	fe38 <am_hal_flash_store_ui32>
    f8c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    f8c2:	f000 fac7 	bl	fe54 <am_hal_interrupt_master_set>
    f8c6:	e748      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f8c8:	2900      	cmp	r1, #0
    f8ca:	d05a      	beq.n	f982 <am_hal_cachectrl_control+0x292>
    f8cc:	680c      	ldr	r4, [r1, #0]
    f8ce:	2c03      	cmp	r4, #3
    f8d0:	d834      	bhi.n	f93c <am_hal_cachectrl_control+0x24c>
    f8d2:	f000 fabb 	bl	fe4c <am_hal_interrupt_master_disable>
    f8d6:	4603      	mov	r3, r0
    f8d8:	483c      	ldr	r0, [pc, #240]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f8da:	930b      	str	r3, [sp, #44]	; 0x2c
    f8dc:	f000 faa8 	bl	fe30 <am_hal_flash_load_ui32>
    f8e0:	0323      	lsls	r3, r4, #12
    f8e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    f8e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    f8ea:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    f8ee:	4319      	orrs	r1, r3
    f8f0:	4836      	ldr	r0, [pc, #216]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f8f2:	f000 faa1 	bl	fe38 <am_hal_flash_store_ui32>
    f8f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f8f8:	f000 faac 	bl	fe54 <am_hal_interrupt_master_set>
    f8fc:	e72d      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f8fe:	2900      	cmp	r1, #0
    f900:	d03f      	beq.n	f982 <am_hal_cachectrl_control+0x292>
    f902:	680c      	ldr	r4, [r1, #0]
    f904:	2c07      	cmp	r4, #7
    f906:	d819      	bhi.n	f93c <am_hal_cachectrl_control+0x24c>
    f908:	f000 faa0 	bl	fe4c <am_hal_interrupt_master_disable>
    f90c:	4603      	mov	r3, r0
    f90e:	482f      	ldr	r0, [pc, #188]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f910:	930c      	str	r3, [sp, #48]	; 0x30
    f912:	f000 fa8d 	bl	fe30 <am_hal_flash_load_ui32>
    f916:	0123      	lsls	r3, r4, #4
    f918:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f91c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    f920:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    f924:	4319      	orrs	r1, r3
    f926:	4829      	ldr	r0, [pc, #164]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f928:	f000 fa86 	bl	fe38 <am_hal_flash_store_ui32>
    f92c:	980c      	ldr	r0, [sp, #48]	; 0x30
    f92e:	f000 fa91 	bl	fe54 <am_hal_interrupt_master_set>
    f932:	e712      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f934:	b329      	cbz	r1, f982 <am_hal_cachectrl_control+0x292>
    f936:	680c      	ldr	r4, [r1, #0]
    f938:	2c0f      	cmp	r4, #15
    f93a:	d926      	bls.n	f98a <am_hal_cachectrl_control+0x29a>
    f93c:	2001      	movs	r0, #1
    f93e:	e6f5      	b.n	f72c <am_hal_cachectrl_control+0x3c>
    f940:	b1f9      	cbz	r1, f982 <am_hal_cachectrl_control+0x292>
    f942:	684a      	ldr	r2, [r1, #4]
    f944:	4b22      	ldr	r3, [pc, #136]	; (f9d0 <am_hal_cachectrl_control+0x2e0>)
    f946:	4013      	ands	r3, r2
    f948:	b9db      	cbnz	r3, f982 <am_hal_cachectrl_control+0x292>
    f94a:	688b      	ldr	r3, [r1, #8]
    f94c:	4820      	ldr	r0, [pc, #128]	; (f9d0 <am_hal_cachectrl_control+0x2e0>)
    f94e:	4018      	ands	r0, r3
    f950:	b9b8      	cbnz	r0, f982 <am_hal_cachectrl_control+0x292>
    f952:	780c      	ldrb	r4, [r1, #0]
    f954:	b374      	cbz	r4, f9b4 <am_hal_cachectrl_control+0x2c4>
    f956:	2c01      	cmp	r4, #1
    f958:	d113      	bne.n	f982 <am_hal_cachectrl_control+0x292>
    f95a:	4c1b      	ldr	r4, [pc, #108]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f95c:	61a2      	str	r2, [r4, #24]
    f95e:	61e3      	str	r3, [r4, #28]
    f960:	784a      	ldrb	r2, [r1, #1]
    f962:	6823      	ldr	r3, [r4, #0]
    f964:	f362 03c3 	bfi	r3, r2, #3, #1
    f968:	6023      	str	r3, [r4, #0]
    f96a:	e6df      	b.n	f72c <am_hal_cachectrl_control+0x3c>
    f96c:	2201      	movs	r2, #1
    f96e:	e6da      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f970:	4b15      	ldr	r3, [pc, #84]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f972:	681b      	ldr	r3, [r3, #0]
    f974:	01db      	lsls	r3, r3, #7
    f976:	d406      	bmi.n	f986 <am_hal_cachectrl_control+0x296>
    f978:	2007      	movs	r0, #7
    f97a:	e6d7      	b.n	f72c <am_hal_cachectrl_control+0x3c>
    f97c:	f44f 6288 	mov.w	r2, #1088	; 0x440
    f980:	e6d1      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f982:	2006      	movs	r0, #6
    f984:	e6d2      	b.n	f72c <am_hal_cachectrl_control+0x3c>
    f986:	2202      	movs	r2, #2
    f988:	e6cd      	b.n	f726 <am_hal_cachectrl_control+0x36>
    f98a:	f000 fa5f 	bl	fe4c <am_hal_interrupt_master_disable>
    f98e:	4603      	mov	r3, r0
    f990:	480e      	ldr	r0, [pc, #56]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f992:	930d      	str	r3, [sp, #52]	; 0x34
    f994:	f000 fa4c 	bl	fe30 <am_hal_flash_load_ui32>
    f998:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    f99c:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    f9a0:	f021 010f 	bic.w	r1, r1, #15
    f9a4:	4321      	orrs	r1, r4
    f9a6:	4809      	ldr	r0, [pc, #36]	; (f9cc <am_hal_cachectrl_control+0x2dc>)
    f9a8:	f000 fa46 	bl	fe38 <am_hal_flash_store_ui32>
    f9ac:	980d      	ldr	r0, [sp, #52]	; 0x34
    f9ae:	f000 fa51 	bl	fe54 <am_hal_interrupt_master_set>
    f9b2:	e6d2      	b.n	f75a <am_hal_cachectrl_control+0x6a>
    f9b4:	4c04      	ldr	r4, [pc, #16]	; (f9c8 <am_hal_cachectrl_control+0x2d8>)
    f9b6:	6122      	str	r2, [r4, #16]
    f9b8:	6163      	str	r3, [r4, #20]
    f9ba:	784a      	ldrb	r2, [r1, #1]
    f9bc:	6823      	ldr	r3, [r4, #0]
    f9be:	f362 0382 	bfi	r3, r2, #2, #1
    f9c2:	6023      	str	r3, [r4, #0]
    f9c4:	e6b2      	b.n	f72c <am_hal_cachectrl_control+0x3c>
    f9c6:	bf00      	nop
    f9c8:	40018000 	.word	0x40018000
    f9cc:	40018004 	.word	0x40018004
    f9d0:	f800000f 	.word	0xf800000f

0000f9d4 <am_hal_clkgen_control>:
    f9d4:	4b41      	ldr	r3, [pc, #260]	; (fadc <am_hal_clkgen_control+0x108>)
    f9d6:	681a      	ldr	r2, [r3, #0]
    f9d8:	b912      	cbnz	r2, f9e0 <am_hal_clkgen_control+0xc>
    f9da:	4a41      	ldr	r2, [pc, #260]	; (fae0 <am_hal_clkgen_control+0x10c>)
    f9dc:	6812      	ldr	r2, [r2, #0]
    f9de:	601a      	str	r2, [r3, #0]
    f9e0:	2809      	cmp	r0, #9
    f9e2:	d878      	bhi.n	fad6 <am_hal_clkgen_control+0x102>
    f9e4:	e8df f000 	tbb	[pc, r0]
    f9e8:	261e160d 	.word	0x261e160d
    f9ec:	524c423a 	.word	0x524c423a
    f9f0:	055a      	.short	0x055a
    f9f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f9f6:	2000      	movs	r0, #0
    f9f8:	6a1a      	ldr	r2, [r3, #32]
    f9fa:	f36f 0200 	bfc	r2, #0, #1
    f9fe:	621a      	str	r2, [r3, #32]
    fa00:	4770      	bx	lr
    fa02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fa06:	2200      	movs	r2, #0
    fa08:	2147      	movs	r1, #71	; 0x47
    fa0a:	6159      	str	r1, [r3, #20]
    fa0c:	4610      	mov	r0, r2
    fa0e:	619a      	str	r2, [r3, #24]
    fa10:	615a      	str	r2, [r3, #20]
    fa12:	4770      	bx	lr
    fa14:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa18:	2000      	movs	r0, #0
    fa1a:	68d3      	ldr	r3, [r2, #12]
    fa1c:	f023 0301 	bic.w	r3, r3, #1
    fa20:	60d3      	str	r3, [r2, #12]
    fa22:	4770      	bx	lr
    fa24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa28:	2000      	movs	r0, #0
    fa2a:	68d3      	ldr	r3, [r2, #12]
    fa2c:	f023 0302 	bic.w	r3, r3, #2
    fa30:	60d3      	str	r3, [r2, #12]
    fa32:	4770      	bx	lr
    fa34:	4a2b      	ldr	r2, [pc, #172]	; (fae4 <am_hal_clkgen_control+0x110>)
    fa36:	68d3      	ldr	r3, [r2, #12]
    fa38:	b2db      	uxtb	r3, r3
    fa3a:	2b21      	cmp	r3, #33	; 0x21
    fa3c:	d106      	bne.n	fa4c <am_hal_clkgen_control+0x78>
    fa3e:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    fa42:	2101      	movs	r1, #1
    fa44:	f361 2309 	bfi	r3, r1, #8, #2
    fa48:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    fa4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa50:	2000      	movs	r0, #0
    fa52:	68d3      	ldr	r3, [r2, #12]
    fa54:	f043 0301 	orr.w	r3, r3, #1
    fa58:	60d3      	str	r3, [r2, #12]
    fa5a:	4770      	bx	lr
    fa5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa60:	2000      	movs	r0, #0
    fa62:	68d3      	ldr	r3, [r2, #12]
    fa64:	f043 0302 	orr.w	r3, r3, #2
    fa68:	60d3      	str	r3, [r2, #12]
    fa6a:	4770      	bx	lr
    fa6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fa70:	2200      	movs	r2, #0
    fa72:	2047      	movs	r0, #71	; 0x47
    fa74:	2101      	movs	r1, #1
    fa76:	6158      	str	r0, [r3, #20]
    fa78:	6199      	str	r1, [r3, #24]
    fa7a:	4610      	mov	r0, r2
    fa7c:	615a      	str	r2, [r3, #20]
    fa7e:	4770      	bx	lr
    fa80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fa84:	2000      	movs	r0, #0
    fa86:	68da      	ldr	r2, [r3, #12]
    fa88:	60da      	str	r2, [r3, #12]
    fa8a:	4770      	bx	lr
    fa8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fa90:	2000      	movs	r0, #0
    fa92:	68d3      	ldr	r3, [r2, #12]
    fa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fa98:	60d3      	str	r3, [r2, #12]
    fa9a:	4770      	bx	lr
    fa9c:	b510      	push	{r4, lr}
    fa9e:	4a11      	ldr	r2, [pc, #68]	; (fae4 <am_hal_clkgen_control+0x110>)
    faa0:	68d3      	ldr	r3, [r2, #12]
    faa2:	b2db      	uxtb	r3, r3
    faa4:	2b21      	cmp	r3, #33	; 0x21
    faa6:	460c      	mov	r4, r1
    faa8:	d008      	beq.n	fabc <am_hal_clkgen_control+0xe8>
    faaa:	b194      	cbz	r4, fad2 <am_hal_clkgen_control+0xfe>
    faac:	6823      	ldr	r3, [r4, #0]
    faae:	f043 0301 	orr.w	r3, r3, #1
    fab2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fab6:	2000      	movs	r0, #0
    fab8:	6213      	str	r3, [r2, #32]
    faba:	bd10      	pop	{r4, pc}
    fabc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    fac0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    fac4:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    fac8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    facc:	f000 f966 	bl	fd9c <am_hal_flash_delay>
    fad0:	e7eb      	b.n	faaa <am_hal_clkgen_control+0xd6>
    fad2:	4b05      	ldr	r3, [pc, #20]	; (fae8 <am_hal_clkgen_control+0x114>)
    fad4:	e7ed      	b.n	fab2 <am_hal_clkgen_control+0xde>
    fad6:	2006      	movs	r0, #6
    fad8:	4770      	bx	lr
    fada:	bf00      	nop
    fadc:	1000c194 	.word	0x1000c194
    fae0:	4ffff000 	.word	0x4ffff000
    fae4:	40020000 	.word	0x40020000
    fae8:	0025b801 	.word	0x0025b801

0000faec <am_hal_clkgen_status_get>:
    faec:	b1a8      	cbz	r0, fb1a <am_hal_clkgen_status_get+0x2e>
    faee:	b410      	push	{r4}
    faf0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    faf4:	490a      	ldr	r1, [pc, #40]	; (fb20 <am_hal_clkgen_status_get+0x34>)
    faf6:	6994      	ldr	r4, [r2, #24]
    faf8:	4b0a      	ldr	r3, [pc, #40]	; (fb24 <am_hal_clkgen_status_get+0x38>)
    fafa:	f014 0f01 	tst.w	r4, #1
    fafe:	bf08      	it	eq
    fb00:	460b      	moveq	r3, r1
    fb02:	6003      	str	r3, [r0, #0]
    fb04:	69d3      	ldr	r3, [r2, #28]
    fb06:	f85d 4b04 	ldr.w	r4, [sp], #4
    fb0a:	f003 0201 	and.w	r2, r3, #1
    fb0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    fb12:	6042      	str	r2, [r0, #4]
    fb14:	7203      	strb	r3, [r0, #8]
    fb16:	2000      	movs	r0, #0
    fb18:	4770      	bx	lr
    fb1a:	2006      	movs	r0, #6
    fb1c:	4770      	bx	lr
    fb1e:	bf00      	nop
    fb20:	02dc6c00 	.word	0x02dc6c00
    fb24:	016e3600 	.word	0x016e3600

0000fb28 <am_hal_ctimer_config>:
    fb28:	b570      	push	{r4, r5, r6, lr}
    fb2a:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    fb2e:	2a00      	cmp	r2, #0
    fb30:	b082      	sub	sp, #8
    fb32:	bf18      	it	ne
    fb34:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    fb38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    fb3c:	ea42 0403 	orr.w	r4, r2, r3
    fb40:	460d      	mov	r5, r1
    fb42:	4606      	mov	r6, r0
    fb44:	f000 f982 	bl	fe4c <am_hal_interrupt_master_disable>
    fb48:	4b0d      	ldr	r3, [pc, #52]	; (fb80 <am_hal_ctimer_config+0x58>)
    fb4a:	9001      	str	r0, [sp, #4]
    fb4c:	0172      	lsls	r2, r6, #5
    fb4e:	50d4      	str	r4, [r2, r3]
    fb50:	9801      	ldr	r0, [sp, #4]
    fb52:	f000 f97f 	bl	fe54 <am_hal_interrupt_master_set>
    fb56:	686b      	ldr	r3, [r5, #4]
    fb58:	b90b      	cbnz	r3, fb5e <am_hal_ctimer_config+0x36>
    fb5a:	682a      	ldr	r2, [r5, #0]
    fb5c:	b142      	cbz	r2, fb70 <am_hal_ctimer_config+0x48>
    fb5e:	f3c3 0344 	ubfx	r3, r3, #1, #5
    fb62:	2100      	movs	r1, #0
    fb64:	4a07      	ldr	r2, [pc, #28]	; (fb84 <am_hal_ctimer_config+0x5c>)
    fb66:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    fb6a:	5473      	strb	r3, [r6, r1]
    fb6c:	b002      	add	sp, #8
    fb6e:	bd70      	pop	{r4, r5, r6, pc}
    fb70:	68ab      	ldr	r3, [r5, #8]
    fb72:	2b00      	cmp	r3, #0
    fb74:	d0fa      	beq.n	fb6c <am_hal_ctimer_config+0x44>
    fb76:	f3c3 0344 	ubfx	r3, r3, #1, #5
    fb7a:	2101      	movs	r1, #1
    fb7c:	e7f2      	b.n	fb64 <am_hal_ctimer_config+0x3c>
    fb7e:	bf00      	nop
    fb80:	4000800c 	.word	0x4000800c
    fb84:	1000c034 	.word	0x1000c034

0000fb88 <am_hal_ctimer_config_single>:
    fb88:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb8a:	b083      	sub	sp, #12
    fb8c:	460e      	mov	r6, r1
    fb8e:	4614      	mov	r4, r2
    fb90:	0147      	lsls	r7, r0, #5
    fb92:	4605      	mov	r5, r0
    fb94:	f000 f95a 	bl	fe4c <am_hal_interrupt_master_disable>
    fb98:	4a19      	ldr	r2, [pc, #100]	; (fc00 <am_hal_ctimer_config_single+0x78>)
    fb9a:	9001      	str	r0, [sp, #4]
    fb9c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    fba0:	58bb      	ldr	r3, [r7, r2]
    fba2:	d021      	beq.n	fbe8 <am_hal_ctimer_config_single+0x60>
    fba4:	ea23 0306 	bic.w	r3, r3, r6
    fba8:	1c71      	adds	r1, r6, #1
    fbaa:	ea43 0304 	orr.w	r3, r3, r4
    fbae:	d00c      	beq.n	fbca <am_hal_ctimer_config_single+0x42>
    fbb0:	50bb      	str	r3, [r7, r2]
    fbb2:	9801      	ldr	r0, [sp, #4]
    fbb4:	f000 f94e 	bl	fe54 <am_hal_interrupt_master_set>
    fbb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fbbc:	429e      	cmp	r6, r3
    fbbe:	d01c      	beq.n	fbfa <am_hal_ctimer_config_single+0x72>
    fbc0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    fbc4:	d017      	beq.n	fbf6 <am_hal_ctimer_config_single+0x6e>
    fbc6:	b003      	add	sp, #12
    fbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fbce:	50bb      	str	r3, [r7, r2]
    fbd0:	9801      	ldr	r0, [sp, #4]
    fbd2:	f000 f93f 	bl	fe54 <am_hal_interrupt_master_set>
    fbd6:	2200      	movs	r2, #0
    fbd8:	4b0a      	ldr	r3, [pc, #40]	; (fc04 <am_hal_ctimer_config_single+0x7c>)
    fbda:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    fbde:	f3c4 0444 	ubfx	r4, r4, #1, #5
    fbe2:	54ac      	strb	r4, [r5, r2]
    fbe4:	b003      	add	sp, #12
    fbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbe8:	0424      	lsls	r4, r4, #16
    fbea:	b29b      	uxth	r3, r3
    fbec:	4323      	orrs	r3, r4
    fbee:	50bb      	str	r3, [r7, r2]
    fbf0:	9801      	ldr	r0, [sp, #4]
    fbf2:	f000 f92f 	bl	fe54 <am_hal_interrupt_master_set>
    fbf6:	2201      	movs	r2, #1
    fbf8:	e7ee      	b.n	fbd8 <am_hal_ctimer_config_single+0x50>
    fbfa:	2200      	movs	r2, #0
    fbfc:	e7ec      	b.n	fbd8 <am_hal_ctimer_config_single+0x50>
    fbfe:	bf00      	nop
    fc00:	4000800c 	.word	0x4000800c
    fc04:	1000c034 	.word	0x1000c034

0000fc08 <am_hal_ctimer_start>:
    fc08:	b570      	push	{r4, r5, r6, lr}
    fc0a:	b082      	sub	sp, #8
    fc0c:	460c      	mov	r4, r1
    fc0e:	0146      	lsls	r6, r0, #5
    fc10:	4605      	mov	r5, r0
    fc12:	f000 f91b 	bl	fe4c <am_hal_interrupt_master_disable>
    fc16:	4a0f      	ldr	r2, [pc, #60]	; (fc54 <am_hal_ctimer_start+0x4c>)
    fc18:	9001      	str	r0, [sp, #4]
    fc1a:	58b3      	ldr	r3, [r6, r2]
    fc1c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    fc20:	ea23 0301 	bic.w	r3, r3, r1
    fc24:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    fc28:	430b      	orrs	r3, r1
    fc2a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    fc2e:	bf0c      	ite	eq
    fc30:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    fc34:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    fc38:	50b3      	str	r3, [r6, r2]
    fc3a:	4b07      	ldr	r3, [pc, #28]	; (fc58 <am_hal_ctimer_start+0x50>)
    fc3c:	9801      	ldr	r0, [sp, #4]
    fc3e:	bf0c      	ite	eq
    fc40:	2101      	moveq	r1, #1
    fc42:	2100      	movne	r1, #0
    fc44:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    fc48:	545c      	strb	r4, [r3, r1]
    fc4a:	f000 f903 	bl	fe54 <am_hal_interrupt_master_set>
    fc4e:	b002      	add	sp, #8
    fc50:	bd70      	pop	{r4, r5, r6, pc}
    fc52:	bf00      	nop
    fc54:	4000800c 	.word	0x4000800c
    fc58:	1000c034 	.word	0x1000c034

0000fc5c <am_hal_ctimer_clear>:
    fc5c:	b570      	push	{r4, r5, r6, lr}
    fc5e:	b082      	sub	sp, #8
    fc60:	0146      	lsls	r6, r0, #5
    fc62:	460c      	mov	r4, r1
    fc64:	f000 f8f2 	bl	fe4c <am_hal_interrupt_master_disable>
    fc68:	4d05      	ldr	r5, [pc, #20]	; (fc80 <am_hal_ctimer_clear+0x24>)
    fc6a:	9001      	str	r0, [sp, #4]
    fc6c:	5973      	ldr	r3, [r6, r5]
    fc6e:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    fc72:	4319      	orrs	r1, r3
    fc74:	5171      	str	r1, [r6, r5]
    fc76:	9801      	ldr	r0, [sp, #4]
    fc78:	f000 f8ec 	bl	fe54 <am_hal_interrupt_master_set>
    fc7c:	b002      	add	sp, #8
    fc7e:	bd70      	pop	{r4, r5, r6, pc}
    fc80:	4000800c 	.word	0x4000800c

0000fc84 <am_hal_ctimer_period_set>:
    fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc88:	b082      	sub	sp, #8
    fc8a:	4689      	mov	r9, r1
    fc8c:	4698      	mov	r8, r3
    fc8e:	0147      	lsls	r7, r0, #5
    fc90:	4614      	mov	r4, r2
    fc92:	f000 f8db 	bl	fe4c <am_hal_interrupt_master_disable>
    fc96:	f8df a094 	ldr.w	sl, [pc, #148]	; fd2c <am_hal_ctimer_period_set+0xa8>
    fc9a:	9001      	str	r0, [sp, #4]
    fc9c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    fca0:	4d20      	ldr	r5, [pc, #128]	; (fd24 <am_hal_ctimer_period_set+0xa0>)
    fca2:	4e21      	ldr	r6, [pc, #132]	; (fd28 <am_hal_ctimer_period_set+0xa4>)
    fca4:	f857 300a 	ldr.w	r3, [r7, sl]
    fca8:	d01a      	beq.n	fce0 <am_hal_ctimer_period_set+0x5c>
    fcaa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    fcae:	2b80      	cmp	r3, #128	; 0x80
    fcb0:	d01b      	beq.n	fcea <am_hal_ctimer_period_set+0x66>
    fcb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fcb6:	2000      	movs	r0, #0
    fcb8:	4591      	cmp	r9, r2
    fcba:	4603      	mov	r3, r0
    fcbc:	d01e      	beq.n	fcfc <am_hal_ctimer_period_set+0x78>
    fcbe:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    fcc2:	d025      	beq.n	fd10 <am_hal_ctimer_period_set+0x8c>
    fcc4:	0c1b      	lsrs	r3, r3, #16
    fcc6:	b2a2      	uxth	r2, r4
    fcc8:	041b      	lsls	r3, r3, #16
    fcca:	4310      	orrs	r0, r2
    fccc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    fcd0:	5178      	str	r0, [r7, r5]
    fcd2:	51bb      	str	r3, [r7, r6]
    fcd4:	9801      	ldr	r0, [sp, #4]
    fcd6:	f000 f8bd 	bl	fe54 <am_hal_interrupt_master_set>
    fcda:	b002      	add	sp, #8
    fcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fce0:	0c1b      	lsrs	r3, r3, #16
    fce2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    fce6:	2b80      	cmp	r3, #128	; 0x80
    fce8:	d111      	bne.n	fd0e <am_hal_ctimer_period_set+0x8a>
    fcea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fcee:	4591      	cmp	r9, r2
    fcf0:	ea4f 4004 	mov.w	r0, r4, lsl #16
    fcf4:	4623      	mov	r3, r4
    fcf6:	ebc8 0404 	rsb	r4, r8, r4
    fcfa:	d1e0      	bne.n	fcbe <am_hal_ctimer_period_set+0x3a>
    fcfc:	b2a3      	uxth	r3, r4
    fcfe:	4318      	orrs	r0, r3
    fd00:	5178      	str	r0, [r7, r5]
    fd02:	9801      	ldr	r0, [sp, #4]
    fd04:	f000 f8a6 	bl	fe54 <am_hal_interrupt_master_set>
    fd08:	b002      	add	sp, #8
    fd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd0e:	2000      	movs	r0, #0
    fd10:	b2a3      	uxth	r3, r4
    fd12:	4318      	orrs	r0, r3
    fd14:	51b8      	str	r0, [r7, r6]
    fd16:	9801      	ldr	r0, [sp, #4]
    fd18:	f000 f89c 	bl	fe54 <am_hal_interrupt_master_set>
    fd1c:	b002      	add	sp, #8
    fd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd22:	bf00      	nop
    fd24:	40008004 	.word	0x40008004
    fd28:	40008008 	.word	0x40008008
    fd2c:	4000800c 	.word	0x4000800c

0000fd30 <am_hal_ctimer_adc_trigger_enable>:
    fd30:	b500      	push	{lr}
    fd32:	b083      	sub	sp, #12
    fd34:	f000 f88a 	bl	fe4c <am_hal_interrupt_master_disable>
    fd38:	4a05      	ldr	r2, [pc, #20]	; (fd50 <am_hal_ctimer_adc_trigger_enable+0x20>)
    fd3a:	9001      	str	r0, [sp, #4]
    fd3c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    fd3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    fd42:	66d3      	str	r3, [r2, #108]	; 0x6c
    fd44:	9801      	ldr	r0, [sp, #4]
    fd46:	f000 f885 	bl	fe54 <am_hal_interrupt_master_set>
    fd4a:	b003      	add	sp, #12
    fd4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fd50:	40008000 	.word	0x40008000

0000fd54 <am_hal_ctimer_int_enable>:
    fd54:	b510      	push	{r4, lr}
    fd56:	b082      	sub	sp, #8
    fd58:	4604      	mov	r4, r0
    fd5a:	f000 f877 	bl	fe4c <am_hal_interrupt_master_disable>
    fd5e:	4b06      	ldr	r3, [pc, #24]	; (fd78 <am_hal_ctimer_int_enable+0x24>)
    fd60:	9001      	str	r0, [sp, #4]
    fd62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fd66:	4314      	orrs	r4, r2
    fd68:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    fd6c:	9801      	ldr	r0, [sp, #4]
    fd6e:	f000 f871 	bl	fe54 <am_hal_interrupt_master_set>
    fd72:	b002      	add	sp, #8
    fd74:	bd10      	pop	{r4, pc}
    fd76:	bf00      	nop
    fd78:	40008000 	.word	0x40008000

0000fd7c <am_hal_ctimer_int_clear>:
    fd7c:	b510      	push	{r4, lr}
    fd7e:	b082      	sub	sp, #8
    fd80:	4604      	mov	r4, r0
    fd82:	f000 f863 	bl	fe4c <am_hal_interrupt_master_disable>
    fd86:	4b04      	ldr	r3, [pc, #16]	; (fd98 <am_hal_ctimer_int_clear+0x1c>)
    fd88:	9001      	str	r0, [sp, #4]
    fd8a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    fd8e:	9801      	ldr	r0, [sp, #4]
    fd90:	f000 f860 	bl	fe54 <am_hal_interrupt_master_set>
    fd94:	b002      	add	sp, #8
    fd96:	bd10      	pop	{r4, pc}
    fd98:	40008000 	.word	0x40008000

0000fd9c <am_hal_flash_delay>:
    fd9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fda2:	075b      	lsls	r3, r3, #29
    fda4:	bf46      	itte	mi
    fda6:	0040      	lslmi	r0, r0, #1
    fda8:	230e      	movmi	r3, #14
    fdaa:	230b      	movpl	r3, #11
    fdac:	4298      	cmp	r0, r3
    fdae:	d800      	bhi.n	fdb2 <am_hal_flash_delay+0x16>
    fdb0:	4770      	bx	lr
    fdb2:	1ac0      	subs	r0, r0, r3
    fdb4:	4b00      	ldr	r3, [pc, #0]	; (fdb8 <am_hal_flash_delay+0x1c>)
    fdb6:	4718      	bx	r3
    fdb8:	0800009d 	.word	0x0800009d

0000fdbc <am_hal_flash_delay_status_check>:
    fdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fdc0:	f89d 4020 	ldrb.w	r4, [sp, #32]
    fdc4:	460d      	mov	r5, r1
    fdc6:	4616      	mov	r6, r2
    fdc8:	461f      	mov	r7, r3
    fdca:	b1b4      	cbz	r4, fdfa <am_hal_flash_delay_status_check+0x3e>
    fdcc:	4604      	mov	r4, r0
    fdce:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    fdd2:	f8df 8058 	ldr.w	r8, [pc, #88]	; fe2c <am_hal_flash_delay_status_check+0x70>
    fdd6:	e009      	b.n	fdec <am_hal_flash_delay_status_check+0x30>
    fdd8:	b324      	cbz	r4, fe24 <am_hal_flash_delay_status_check+0x68>
    fdda:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    fdde:	f013 0f04 	tst.w	r3, #4
    fde2:	bf14      	ite	ne
    fde4:	2012      	movne	r0, #18
    fde6:	2005      	moveq	r0, #5
    fde8:	3c01      	subs	r4, #1
    fdea:	47c0      	blx	r8
    fdec:	682b      	ldr	r3, [r5, #0]
    fdee:	4033      	ands	r3, r6
    fdf0:	429f      	cmp	r7, r3
    fdf2:	d1f1      	bne.n	fdd8 <am_hal_flash_delay_status_check+0x1c>
    fdf4:	2000      	movs	r0, #0
    fdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fdfa:	f8df 8030 	ldr.w	r8, [pc, #48]	; fe2c <am_hal_flash_delay_status_check+0x70>
    fdfe:	4604      	mov	r4, r0
    fe00:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    fe04:	e009      	b.n	fe1a <am_hal_flash_delay_status_check+0x5e>
    fe06:	b16c      	cbz	r4, fe24 <am_hal_flash_delay_status_check+0x68>
    fe08:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    fe0c:	f013 0f04 	tst.w	r3, #4
    fe10:	bf14      	ite	ne
    fe12:	2012      	movne	r0, #18
    fe14:	2005      	moveq	r0, #5
    fe16:	3c01      	subs	r4, #1
    fe18:	47c0      	blx	r8
    fe1a:	682b      	ldr	r3, [r5, #0]
    fe1c:	4033      	ands	r3, r6
    fe1e:	429f      	cmp	r7, r3
    fe20:	d0f1      	beq.n	fe06 <am_hal_flash_delay_status_check+0x4a>
    fe22:	e7e7      	b.n	fdf4 <am_hal_flash_delay_status_check+0x38>
    fe24:	2004      	movs	r0, #4
    fe26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe2a:	bf00      	nop
    fe2c:	0800009d 	.word	0x0800009d

0000fe30 <am_hal_flash_load_ui32>:
    fe30:	4b00      	ldr	r3, [pc, #0]	; (fe34 <am_hal_flash_load_ui32+0x4>)
    fe32:	4718      	bx	r3
    fe34:	08000075 	.word	0x08000075

0000fe38 <am_hal_flash_store_ui32>:
    fe38:	4b01      	ldr	r3, [pc, #4]	; (fe40 <am_hal_flash_store_ui32+0x8>)
    fe3a:	f043 0301 	orr.w	r3, r3, #1
    fe3e:	4718      	bx	r3
    fe40:	1000c044 	.word	0x1000c044

0000fe44 <am_hal_interrupt_master_enable>:
    fe44:	f3ef 8010 	mrs	r0, PRIMASK
    fe48:	b662      	cpsie	i
    fe4a:	4770      	bx	lr

0000fe4c <am_hal_interrupt_master_disable>:
    fe4c:	f3ef 8010 	mrs	r0, PRIMASK
    fe50:	b672      	cpsid	i
    fe52:	4770      	bx	lr

0000fe54 <am_hal_interrupt_master_set>:
    fe54:	f380 8810 	msr	PRIMASK, r0
    fe58:	4770      	bx	lr
    fe5a:	bf00      	nop

0000fe5c <am_hal_mcuctrl_info_get>:
    fe5c:	b4f0      	push	{r4, r5, r6, r7}
    fe5e:	b121      	cbz	r1, fe6a <am_hal_mcuctrl_info_get+0xe>
    fe60:	2801      	cmp	r0, #1
    fe62:	d038      	beq.n	fed6 <am_hal_mcuctrl_info_get+0x7a>
    fe64:	d320      	bcc.n	fea8 <am_hal_mcuctrl_info_get+0x4c>
    fe66:	2802      	cmp	r0, #2
    fe68:	d002      	beq.n	fe70 <am_hal_mcuctrl_info_get+0x14>
    fe6a:	2006      	movs	r0, #6
    fe6c:	bcf0      	pop	{r4, r5, r6, r7}
    fe6e:	4770      	bx	lr
    fe70:	4a41      	ldr	r2, [pc, #260]	; (ff78 <am_hal_mcuctrl_info_get+0x11c>)
    fe72:	684d      	ldr	r5, [r1, #4]
    fe74:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    fe78:	694c      	ldr	r4, [r1, #20]
    fe7a:	f003 0601 	and.w	r6, r3, #1
    fe7e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    fe82:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fe86:	700e      	strb	r6, [r1, #0]
    fe88:	7208      	strb	r0, [r1, #8]
    fe8a:	740b      	strb	r3, [r1, #16]
    fe8c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    fe90:	60cb      	str	r3, [r1, #12]
    fe92:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    fe96:	4328      	orrs	r0, r5
    fe98:	6048      	str	r0, [r1, #4]
    fe9a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    fe9e:	4323      	orrs	r3, r4
    fea0:	2000      	movs	r0, #0
    fea2:	614b      	str	r3, [r1, #20]
    fea4:	bcf0      	pop	{r4, r5, r6, r7}
    fea6:	4770      	bx	lr
    fea8:	4a33      	ldr	r2, [pc, #204]	; (ff78 <am_hal_mcuctrl_info_get+0x11c>)
    feaa:	6993      	ldr	r3, [r2, #24]
    feac:	f3c3 1080 	ubfx	r0, r3, #6, #1
    feb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    feb4:	7008      	strb	r0, [r1, #0]
    feb6:	704b      	strb	r3, [r1, #1]
    feb8:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    febc:	f3c3 6381 	ubfx	r3, r3, #26, #2
    fec0:	710b      	strb	r3, [r1, #4]
    fec2:	6953      	ldr	r3, [r2, #20]
    fec4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    fec8:	f003 0301 	and.w	r3, r3, #1
    fecc:	2000      	movs	r0, #0
    fece:	708a      	strb	r2, [r1, #2]
    fed0:	70cb      	strb	r3, [r1, #3]
    fed2:	bcf0      	pop	{r4, r5, r6, r7}
    fed4:	4770      	bx	lr
    fed6:	4b28      	ldr	r3, [pc, #160]	; (ff78 <am_hal_mcuctrl_info_get+0x11c>)
    fed8:	4c28      	ldr	r4, [pc, #160]	; (ff7c <am_hal_mcuctrl_info_get+0x120>)
    feda:	681a      	ldr	r2, [r3, #0]
    fedc:	600a      	str	r2, [r1, #0]
    fede:	6858      	ldr	r0, [r3, #4]
    fee0:	6048      	str	r0, [r1, #4]
    fee2:	6898      	ldr	r0, [r3, #8]
    fee4:	6088      	str	r0, [r1, #8]
    fee6:	68d8      	ldr	r0, [r3, #12]
    fee8:	60c8      	str	r0, [r1, #12]
    feea:	691d      	ldr	r5, [r3, #16]
    feec:	4824      	ldr	r0, [pc, #144]	; (ff80 <am_hal_mcuctrl_info_get+0x124>)
    feee:	610d      	str	r5, [r1, #16]
    fef0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    fef4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    fef8:	695d      	ldr	r5, [r3, #20]
    fefa:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    fefe:	4b21      	ldr	r3, [pc, #132]	; (ff84 <am_hal_mcuctrl_info_get+0x128>)
    ff00:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    ff04:	6208      	str	r0, [r1, #32]
    ff06:	f002 0201 	and.w	r2, r2, #1
    ff0a:	614d      	str	r5, [r1, #20]
    ff0c:	61cc      	str	r4, [r1, #28]
    ff0e:	618a      	str	r2, [r1, #24]
    ff10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    ff14:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ff18:	b2d0      	uxtb	r0, r2
    ff1a:	f004 020f 	and.w	r2, r4, #15
    ff1e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    ff22:	624a      	str	r2, [r1, #36]	; 0x24
    ff24:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    ff28:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    ff2c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    ff30:	f004 020f 	and.w	r2, r4, #15
    ff34:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ff38:	628a      	str	r2, [r1, #40]	; 0x28
    ff3a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    ff3e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ff42:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ff46:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ff4a:	4302      	orrs	r2, r0
    ff4c:	62ca      	str	r2, [r1, #44]	; 0x2c
    ff4e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    ff52:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ff56:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ff5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ff5e:	b2c0      	uxtb	r0, r0
    ff60:	0400      	lsls	r0, r0, #16
    ff62:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ff66:	b2d2      	uxtb	r2, r2
    ff68:	431a      	orrs	r2, r3
    ff6a:	b2e3      	uxtb	r3, r4
    ff6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ff70:	630b      	str	r3, [r1, #48]	; 0x30
    ff72:	2000      	movs	r0, #0
    ff74:	bcf0      	pop	{r4, r5, r6, r7}
    ff76:	4770      	bx	lr
    ff78:	40020000 	.word	0x40020000
    ff7c:	00011234 	.word	0x00011234
    ff80:	00011274 	.word	0x00011274
    ff84:	f0000f00 	.word	0xf0000f00

0000ff88 <am_hal_pwrctrl_periph_enable>:
    ff88:	b570      	push	{r4, r5, r6, lr}
    ff8a:	b082      	sub	sp, #8
    ff8c:	4604      	mov	r4, r0
    ff8e:	f7ff ff5d 	bl	fe4c <am_hal_interrupt_master_disable>
    ff92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ff96:	4d0f      	ldr	r5, [pc, #60]	; (ffd4 <am_hal_pwrctrl_periph_enable+0x4c>)
    ff98:	4e0f      	ldr	r6, [pc, #60]	; (ffd8 <am_hal_pwrctrl_periph_enable+0x50>)
    ff9a:	9001      	str	r0, [sp, #4]
    ff9c:	00a4      	lsls	r4, r4, #2
    ff9e:	68aa      	ldr	r2, [r5, #8]
    ffa0:	5933      	ldr	r3, [r6, r4]
    ffa2:	4313      	orrs	r3, r2
    ffa4:	60ab      	str	r3, [r5, #8]
    ffa6:	9801      	ldr	r0, [sp, #4]
    ffa8:	4434      	add	r4, r6
    ffaa:	f7ff ff53 	bl	fe54 <am_hal_interrupt_master_set>
    ffae:	20a0      	movs	r0, #160	; 0xa0
    ffb0:	f7ff fef4 	bl	fd9c <am_hal_flash_delay>
    ffb4:	69ab      	ldr	r3, [r5, #24]
    ffb6:	6864      	ldr	r4, [r4, #4]
    ffb8:	4223      	tst	r3, r4
    ffba:	d103      	bne.n	ffc4 <am_hal_pwrctrl_periph_enable+0x3c>
    ffbc:	20a0      	movs	r0, #160	; 0xa0
    ffbe:	f7ff feed 	bl	fd9c <am_hal_flash_delay>
    ffc2:	69ab      	ldr	r3, [r5, #24]
    ffc4:	4b03      	ldr	r3, [pc, #12]	; (ffd4 <am_hal_pwrctrl_periph_enable+0x4c>)
    ffc6:	699b      	ldr	r3, [r3, #24]
    ffc8:	4223      	tst	r3, r4
    ffca:	bf0c      	ite	eq
    ffcc:	2001      	moveq	r0, #1
    ffce:	2000      	movne	r0, #0
    ffd0:	b002      	add	sp, #8
    ffd2:	bd70      	pop	{r4, r5, r6, pc}
    ffd4:	40021000 	.word	0x40021000
    ffd8:	000112b4 	.word	0x000112b4

0000ffdc <am_hal_pwrctrl_periph_disable>:
    ffdc:	b570      	push	{r4, r5, r6, lr}
    ffde:	b082      	sub	sp, #8
    ffe0:	4604      	mov	r4, r0
    ffe2:	f7ff ff33 	bl	fe4c <am_hal_interrupt_master_disable>
    ffe6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ffea:	4d10      	ldr	r5, [pc, #64]	; (1002c <am_hal_pwrctrl_periph_disable+0x50>)
    ffec:	4e10      	ldr	r6, [pc, #64]	; (10030 <am_hal_pwrctrl_periph_disable+0x54>)
    ffee:	9001      	str	r0, [sp, #4]
    fff0:	00a4      	lsls	r4, r4, #2
    fff2:	68ab      	ldr	r3, [r5, #8]
    fff4:	5932      	ldr	r2, [r6, r4]
    fff6:	ea23 0302 	bic.w	r3, r3, r2
    fffa:	60ab      	str	r3, [r5, #8]
    fffc:	9801      	ldr	r0, [sp, #4]
    fffe:	4434      	add	r4, r6
   10000:	f7ff ff28 	bl	fe54 <am_hal_interrupt_master_set>
   10004:	20a0      	movs	r0, #160	; 0xa0
   10006:	f7ff fec9 	bl	fd9c <am_hal_flash_delay>
   1000a:	69ab      	ldr	r3, [r5, #24]
   1000c:	6864      	ldr	r4, [r4, #4]
   1000e:	4223      	tst	r3, r4
   10010:	d003      	beq.n	1001a <am_hal_pwrctrl_periph_disable+0x3e>
   10012:	20a0      	movs	r0, #160	; 0xa0
   10014:	f7ff fec2 	bl	fd9c <am_hal_flash_delay>
   10018:	69ab      	ldr	r3, [r5, #24]
   1001a:	4b04      	ldr	r3, [pc, #16]	; (1002c <am_hal_pwrctrl_periph_disable+0x50>)
   1001c:	699b      	ldr	r3, [r3, #24]
   1001e:	4223      	tst	r3, r4
   10020:	bf14      	ite	ne
   10022:	2001      	movne	r0, #1
   10024:	2000      	moveq	r0, #0
   10026:	b002      	add	sp, #8
   10028:	bd70      	pop	{r4, r5, r6, pc}
   1002a:	bf00      	nop
   1002c:	40021000 	.word	0x40021000
   10030:	000112b4 	.word	0x000112b4

00010034 <am_hal_pwrctrl_low_power_init>:
   10034:	b530      	push	{r4, r5, lr}
   10036:	4b33      	ldr	r3, [pc, #204]	; (10104 <am_hal_pwrctrl_low_power_init+0xd0>)
   10038:	681a      	ldr	r2, [r3, #0]
   1003a:	b085      	sub	sp, #20
   1003c:	b912      	cbnz	r2, 10044 <am_hal_pwrctrl_low_power_init+0x10>
   1003e:	4a32      	ldr	r2, [pc, #200]	; (10108 <am_hal_pwrctrl_low_power_init+0xd4>)
   10040:	6812      	ldr	r2, [r2, #0]
   10042:	601a      	str	r2, [r3, #0]
   10044:	4b31      	ldr	r3, [pc, #196]	; (1010c <am_hal_pwrctrl_low_power_init+0xd8>)
   10046:	68db      	ldr	r3, [r3, #12]
   10048:	b2db      	uxtb	r3, r3
   1004a:	2b12      	cmp	r3, #18
   1004c:	d00a      	beq.n	10064 <am_hal_pwrctrl_low_power_init+0x30>
   1004e:	4c30      	ldr	r4, [pc, #192]	; (10110 <am_hal_pwrctrl_low_power_init+0xdc>)
   10050:	2100      	movs	r1, #0
   10052:	200c      	movs	r0, #12
   10054:	f7ff fb4c 	bl	f6f0 <am_hal_cachectrl_control>
   10058:	69a3      	ldr	r3, [r4, #24]
   1005a:	05d8      	lsls	r0, r3, #23
   1005c:	d520      	bpl.n	100a0 <am_hal_pwrctrl_low_power_init+0x6c>
   1005e:	2000      	movs	r0, #0
   10060:	b005      	add	sp, #20
   10062:	bd30      	pop	{r4, r5, pc}
   10064:	4c2a      	ldr	r4, [pc, #168]	; (10110 <am_hal_pwrctrl_low_power_init+0xdc>)
   10066:	6863      	ldr	r3, [r4, #4]
   10068:	07d9      	lsls	r1, r3, #31
   1006a:	d5f0      	bpl.n	1004e <am_hal_pwrctrl_low_power_init+0x1a>
   1006c:	f7ff feee 	bl	fe4c <am_hal_interrupt_master_disable>
   10070:	9003      	str	r0, [sp, #12]
   10072:	68a3      	ldr	r3, [r4, #8]
   10074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   10078:	60a3      	str	r3, [r4, #8]
   1007a:	9803      	ldr	r0, [sp, #12]
   1007c:	f7ff feea 	bl	fe54 <am_hal_interrupt_master_set>
   10080:	20a0      	movs	r0, #160	; 0xa0
   10082:	f7ff fe8b 	bl	fd9c <am_hal_flash_delay>
   10086:	69a3      	ldr	r3, [r4, #24]
   10088:	061a      	lsls	r2, r3, #24
   1008a:	d403      	bmi.n	10094 <am_hal_pwrctrl_low_power_init+0x60>
   1008c:	20a0      	movs	r0, #160	; 0xa0
   1008e:	f7ff fe85 	bl	fd9c <am_hal_flash_delay>
   10092:	69a3      	ldr	r3, [r4, #24]
   10094:	4b1e      	ldr	r3, [pc, #120]	; (10110 <am_hal_pwrctrl_low_power_init+0xdc>)
   10096:	699b      	ldr	r3, [r3, #24]
   10098:	061b      	lsls	r3, r3, #24
   1009a:	d4d8      	bmi.n	1004e <am_hal_pwrctrl_low_power_init+0x1a>
   1009c:	2001      	movs	r0, #1
   1009e:	e7df      	b.n	10060 <am_hal_pwrctrl_low_power_init+0x2c>
   100a0:	4d1a      	ldr	r5, [pc, #104]	; (1010c <am_hal_pwrctrl_low_power_init+0xd8>)
   100a2:	491c      	ldr	r1, [pc, #112]	; (10114 <am_hal_pwrctrl_low_power_init+0xe0>)
   100a4:	7e2a      	ldrb	r2, [r5, #24]
   100a6:	2001      	movs	r0, #1
   100a8:	4302      	orrs	r2, r0
   100aa:	2307      	movs	r3, #7
   100ac:	762a      	strb	r2, [r5, #24]
   100ae:	9000      	str	r0, [sp, #0]
   100b0:	461a      	mov	r2, r3
   100b2:	f242 7010 	movw	r0, #10000	; 0x2710
   100b6:	f7ff fe81 	bl	fdbc <am_hal_flash_delay_status_check>
   100ba:	b110      	cbz	r0, 100c2 <am_hal_pwrctrl_low_power_init+0x8e>
   100bc:	2004      	movs	r0, #4
   100be:	b005      	add	sp, #20
   100c0:	bd30      	pop	{r4, r5, pc}
   100c2:	6823      	ldr	r3, [r4, #0]
   100c4:	f043 0301 	orr.w	r3, r3, #1
   100c8:	6023      	str	r3, [r4, #0]
   100ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   100cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   100d0:	6263      	str	r3, [r4, #36]	; 0x24
   100d2:	68eb      	ldr	r3, [r5, #12]
   100d4:	b2db      	uxtb	r3, r3
   100d6:	2b11      	cmp	r3, #17
   100d8:	d1c1      	bne.n	1005e <am_hal_pwrctrl_low_power_init+0x2a>
   100da:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   100de:	f360 5356 	bfi	r3, r0, #21, #2
   100e2:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   100e6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   100ea:	220f      	movs	r2, #15
   100ec:	f362 138b 	bfi	r3, r2, #6, #6
   100f0:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   100f4:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   100f8:	f362 0305 	bfi	r3, r2, #0, #6
   100fc:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   10100:	e7ae      	b.n	10060 <am_hal_pwrctrl_low_power_init+0x2c>
   10102:	bf00      	nop
   10104:	1000c194 	.word	0x1000c194
   10108:	4ffff000 	.word	0x4ffff000
   1010c:	40020000 	.word	0x40020000
   10110:	40021000 	.word	0x40021000
   10114:	40020018 	.word	0x40020018

00010118 <am_hal_rtc_osc_disable>:
   10118:	4a03      	ldr	r2, [pc, #12]	; (10128 <am_hal_rtc_osc_disable+0x10>)
   1011a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1011e:	f043 0310 	orr.w	r3, r3, #16
   10122:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   10126:	4770      	bx	lr
   10128:	40004200 	.word	0x40004200

0001012c <am_hal_uart_initialize>:
   1012c:	2801      	cmp	r0, #1
   1012e:	d901      	bls.n	10134 <am_hal_uart_initialize+0x8>
   10130:	2005      	movs	r0, #5
   10132:	4770      	bx	lr
   10134:	b169      	cbz	r1, 10152 <am_hal_uart_initialize+0x26>
   10136:	b5f0      	push	{r4, r5, r6, r7, lr}
   10138:	2264      	movs	r2, #100	; 0x64
   1013a:	4e0e      	ldr	r6, [pc, #56]	; (10174 <am_hal_uart_initialize+0x48>)
   1013c:	fb02 f200 	mul.w	r2, r2, r0
   10140:	18b4      	adds	r4, r6, r2
   10142:	4603      	mov	r3, r0
   10144:	78e0      	ldrb	r0, [r4, #3]
   10146:	f3c0 0700 	ubfx	r7, r0, #0, #1
   1014a:	b2fd      	uxtb	r5, r7
   1014c:	b11d      	cbz	r5, 10156 <am_hal_uart_initialize+0x2a>
   1014e:	2007      	movs	r0, #7
   10150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10152:	2006      	movs	r0, #6
   10154:	4770      	bx	lr
   10156:	f040 0001 	orr.w	r0, r0, #1
   1015a:	70e0      	strb	r0, [r4, #3]
   1015c:	58b0      	ldr	r0, [r6, r2]
   1015e:	f8df e018 	ldr.w	lr, [pc, #24]	; 10178 <am_hal_uart_initialize+0x4c>
   10162:	f36e 0017 	bfi	r0, lr, #0, #24
   10166:	50b0      	str	r0, [r6, r2]
   10168:	6263      	str	r3, [r4, #36]	; 0x24
   1016a:	7127      	strb	r7, [r4, #4]
   1016c:	6625      	str	r5, [r4, #96]	; 0x60
   1016e:	4628      	mov	r0, r5
   10170:	600c      	str	r4, [r1, #0]
   10172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10174:	1002befc 	.word	0x1002befc
   10178:	00ea9e06 	.word	0x00ea9e06

0001017c <am_hal_uart_power_control>:
   1017c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10180:	6804      	ldr	r4, [r0, #0]
   10182:	4b36      	ldr	r3, [pc, #216]	; (1025c <am_hal_uart_power_control+0xe0>)
   10184:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   10188:	429c      	cmp	r4, r3
   1018a:	b083      	sub	sp, #12
   1018c:	d003      	beq.n	10196 <am_hal_uart_power_control+0x1a>
   1018e:	2002      	movs	r0, #2
   10190:	b003      	add	sp, #12
   10192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10196:	6a47      	ldr	r7, [r0, #36]	; 0x24
   10198:	4605      	mov	r5, r0
   1019a:	f107 0008 	add.w	r0, r7, #8
   1019e:	4691      	mov	r9, r2
   101a0:	460e      	mov	r6, r1
   101a2:	fa5f f880 	uxtb.w	r8, r0
   101a6:	b181      	cbz	r1, 101ca <am_hal_uart_power_control+0x4e>
   101a8:	2902      	cmp	r1, #2
   101aa:	d80c      	bhi.n	101c6 <am_hal_uart_power_control+0x4a>
   101ac:	b992      	cbnz	r2, 101d4 <am_hal_uart_power_control+0x58>
   101ae:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   101b2:	371c      	adds	r7, #28
   101b4:	033f      	lsls	r7, r7, #12
   101b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   101ba:	647b      	str	r3, [r7, #68]	; 0x44
   101bc:	4640      	mov	r0, r8
   101be:	f7ff ff0d 	bl	ffdc <am_hal_pwrctrl_periph_disable>
   101c2:	2000      	movs	r0, #0
   101c4:	e7e4      	b.n	10190 <am_hal_uart_power_control+0x14>
   101c6:	2006      	movs	r0, #6
   101c8:	e7e2      	b.n	10190 <am_hal_uart_power_control+0x14>
   101ca:	b322      	cbz	r2, 10216 <am_hal_uart_power_control+0x9a>
   101cc:	792b      	ldrb	r3, [r5, #4]
   101ce:	bb3b      	cbnz	r3, 10220 <am_hal_uart_power_control+0xa4>
   101d0:	2007      	movs	r0, #7
   101d2:	e7dd      	b.n	10190 <am_hal_uart_power_control+0x14>
   101d4:	f7ff fe3a 	bl	fe4c <am_hal_interrupt_master_disable>
   101d8:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   101dc:	331c      	adds	r3, #28
   101de:	031b      	lsls	r3, r3, #12
   101e0:	9001      	str	r0, [sp, #4]
   101e2:	6a1a      	ldr	r2, [r3, #32]
   101e4:	60aa      	str	r2, [r5, #8]
   101e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   101e8:	60ea      	str	r2, [r5, #12]
   101ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   101ec:	612a      	str	r2, [r5, #16]
   101ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   101f0:	616a      	str	r2, [r5, #20]
   101f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   101f4:	61aa      	str	r2, [r5, #24]
   101f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   101f8:	61ea      	str	r2, [r5, #28]
   101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   101fc:	622b      	str	r3, [r5, #32]
   101fe:	2301      	movs	r3, #1
   10200:	712b      	strb	r3, [r5, #4]
   10202:	9801      	ldr	r0, [sp, #4]
   10204:	f7ff fe26 	bl	fe54 <am_hal_interrupt_master_set>
   10208:	682b      	ldr	r3, [r5, #0]
   1020a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1020e:	42a3      	cmp	r3, r4
   10210:	d1d4      	bne.n	101bc <am_hal_uart_power_control+0x40>
   10212:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   10214:	e7cb      	b.n	101ae <am_hal_uart_power_control+0x32>
   10216:	4640      	mov	r0, r8
   10218:	f7ff feb6 	bl	ff88 <am_hal_pwrctrl_periph_enable>
   1021c:	4648      	mov	r0, r9
   1021e:	e7b7      	b.n	10190 <am_hal_uart_power_control+0x14>
   10220:	4640      	mov	r0, r8
   10222:	f7ff feb1 	bl	ff88 <am_hal_pwrctrl_periph_enable>
   10226:	f7ff fe11 	bl	fe4c <am_hal_interrupt_master_disable>
   1022a:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   1022e:	331c      	adds	r3, #28
   10230:	031b      	lsls	r3, r3, #12
   10232:	68aa      	ldr	r2, [r5, #8]
   10234:	9000      	str	r0, [sp, #0]
   10236:	621a      	str	r2, [r3, #32]
   10238:	68ea      	ldr	r2, [r5, #12]
   1023a:	625a      	str	r2, [r3, #36]	; 0x24
   1023c:	692a      	ldr	r2, [r5, #16]
   1023e:	629a      	str	r2, [r3, #40]	; 0x28
   10240:	696a      	ldr	r2, [r5, #20]
   10242:	62da      	str	r2, [r3, #44]	; 0x2c
   10244:	69aa      	ldr	r2, [r5, #24]
   10246:	631a      	str	r2, [r3, #48]	; 0x30
   10248:	69ea      	ldr	r2, [r5, #28]
   1024a:	635a      	str	r2, [r3, #52]	; 0x34
   1024c:	6a2a      	ldr	r2, [r5, #32]
   1024e:	639a      	str	r2, [r3, #56]	; 0x38
   10250:	9800      	ldr	r0, [sp, #0]
   10252:	712e      	strb	r6, [r5, #4]
   10254:	f7ff fdfe 	bl	fe54 <am_hal_interrupt_master_set>
   10258:	4630      	mov	r0, r6
   1025a:	e799      	b.n	10190 <am_hal_uart_power_control+0x14>
   1025c:	01ea9e06 	.word	0x01ea9e06

00010260 <am_hal_uart_configure>:
   10260:	6803      	ldr	r3, [r0, #0]
   10262:	4a84      	ldr	r2, [pc, #528]	; (10474 <am_hal_uart_configure+0x214>)
   10264:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10268:	4293      	cmp	r3, r2
   1026a:	d001      	beq.n	10270 <am_hal_uart_configure+0x10>
   1026c:	2002      	movs	r0, #2
   1026e:	4770      	bx	lr
   10270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10274:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10276:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1027a:	351c      	adds	r5, #28
   1027c:	032d      	lsls	r5, r5, #12
   1027e:	2700      	movs	r7, #0
   10280:	b084      	sub	sp, #16
   10282:	632f      	str	r7, [r5, #48]	; 0x30
   10284:	460e      	mov	r6, r1
   10286:	4604      	mov	r4, r0
   10288:	f7ff fde0 	bl	fe4c <am_hal_interrupt_master_disable>
   1028c:	9001      	str	r0, [sp, #4]
   1028e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10290:	f043 0308 	orr.w	r3, r3, #8
   10294:	862b      	strh	r3, [r5, #48]	; 0x30
   10296:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10298:	2201      	movs	r2, #1
   1029a:	f362 1306 	bfi	r3, r2, #4, #3
   1029e:	862b      	strh	r3, [r5, #48]	; 0x30
   102a0:	9801      	ldr	r0, [sp, #4]
   102a2:	f7ff fdd7 	bl	fe54 <am_hal_interrupt_master_set>
   102a6:	f7ff fdd1 	bl	fe4c <am_hal_interrupt_master_disable>
   102aa:	9002      	str	r0, [sp, #8]
   102ac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   102ae:	f367 0300 	bfi	r3, r7, #0, #1
   102b2:	862b      	strh	r3, [r5, #48]	; 0x30
   102b4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   102b6:	f367 2349 	bfi	r3, r7, #9, #1
   102ba:	862b      	strh	r3, [r5, #48]	; 0x30
   102bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   102be:	f367 2308 	bfi	r3, r7, #8, #1
   102c2:	862b      	strh	r3, [r5, #48]	; 0x30
   102c4:	9802      	ldr	r0, [sp, #8]
   102c6:	f7ff fdc5 	bl	fe54 <am_hal_interrupt_master_set>
   102ca:	4a6b      	ldr	r2, [pc, #428]	; (10478 <am_hal_uart_configure+0x218>)
   102cc:	6833      	ldr	r3, [r6, #0]
   102ce:	68d2      	ldr	r2, [r2, #12]
   102d0:	b2d2      	uxtb	r2, r2
   102d2:	2a12      	cmp	r2, #18
   102d4:	d00b      	beq.n	102ee <am_hal_uart_configure+0x8e>
   102d6:	4a68      	ldr	r2, [pc, #416]	; (10478 <am_hal_uart_configure+0x218>)
   102d8:	68d2      	ldr	r2, [r2, #12]
   102da:	b2d2      	uxtb	r2, r2
   102dc:	2a20      	cmp	r2, #32
   102de:	d90a      	bls.n	102f6 <am_hal_uart_configure+0x96>
   102e0:	4a66      	ldr	r2, [pc, #408]	; (1047c <am_hal_uart_configure+0x21c>)
   102e2:	4293      	cmp	r3, r2
   102e4:	d907      	bls.n	102f6 <am_hal_uart_configure+0x96>
   102e6:	4866      	ldr	r0, [pc, #408]	; (10480 <am_hal_uart_configure+0x220>)
   102e8:	b004      	add	sp, #16
   102ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102ee:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   102f2:	d8f8      	bhi.n	102e6 <am_hal_uart_configure+0x86>
   102f4:	e7ef      	b.n	102d6 <am_hal_uart_configure+0x76>
   102f6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   102f8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   102fc:	3a01      	subs	r2, #1
   102fe:	2a03      	cmp	r2, #3
   10300:	d852      	bhi.n	103a8 <am_hal_uart_configure+0x148>
   10302:	e8df f002 	tbb	[pc, r2]
   10306:	020f      	.short	0x020f
   10308:	1215      	.short	0x1215
   1030a:	4a5e      	ldr	r2, [pc, #376]	; (10484 <am_hal_uart_configure+0x224>)
   1030c:	495e      	ldr	r1, [pc, #376]	; (10488 <am_hal_uart_configure+0x228>)
   1030e:	011b      	lsls	r3, r3, #4
   10310:	fbb2 f2f3 	udiv	r2, r2, r3
   10314:	fbb1 f3f3 	udiv	r3, r1, r3
   10318:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
   1031c:	b95b      	cbnz	r3, 10336 <am_hal_uart_configure+0xd6>
   1031e:	6623      	str	r3, [r4, #96]	; 0x60
   10320:	4857      	ldr	r0, [pc, #348]	; (10480 <am_hal_uart_configure+0x220>)
   10322:	e7e1      	b.n	102e8 <am_hal_uart_configure+0x88>
   10324:	4a59      	ldr	r2, [pc, #356]	; (1048c <am_hal_uart_configure+0x22c>)
   10326:	495a      	ldr	r1, [pc, #360]	; (10490 <am_hal_uart_configure+0x230>)
   10328:	e7f1      	b.n	1030e <am_hal_uart_configure+0xae>
   1032a:	4a5a      	ldr	r2, [pc, #360]	; (10494 <am_hal_uart_configure+0x234>)
   1032c:	495a      	ldr	r1, [pc, #360]	; (10498 <am_hal_uart_configure+0x238>)
   1032e:	e7ee      	b.n	1030e <am_hal_uart_configure+0xae>
   10330:	4a5a      	ldr	r2, [pc, #360]	; (1049c <am_hal_uart_configure+0x23c>)
   10332:	495b      	ldr	r1, [pc, #364]	; (104a0 <am_hal_uart_configure+0x240>)
   10334:	e7eb      	b.n	1030e <am_hal_uart_configure+0xae>
   10336:	0890      	lsrs	r0, r2, #2
   10338:	626b      	str	r3, [r5, #36]	; 0x24
   1033a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1033e:	626b      	str	r3, [r5, #36]	; 0x24
   10340:	fbb1 f1f0 	udiv	r1, r1, r0
   10344:	62aa      	str	r2, [r5, #40]	; 0x28
   10346:	6621      	str	r1, [r4, #96]	; 0x60
   10348:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1034a:	f36f 338e 	bfc	r3, #14, #1
   1034e:	862b      	strh	r3, [r5, #48]	; 0x30
   10350:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10352:	f36f 33cf 	bfc	r3, #15, #1
   10356:	862b      	strh	r3, [r5, #48]	; 0x30
   10358:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1035a:	6933      	ldr	r3, [r6, #16]
   1035c:	4313      	orrs	r3, r2
   1035e:	632b      	str	r3, [r5, #48]	; 0x30
   10360:	6973      	ldr	r3, [r6, #20]
   10362:	636b      	str	r3, [r5, #52]	; 0x34
   10364:	6871      	ldr	r1, [r6, #4]
   10366:	68b3      	ldr	r3, [r6, #8]
   10368:	68f2      	ldr	r2, [r6, #12]
   1036a:	430b      	orrs	r3, r1
   1036c:	f043 0310 	orr.w	r3, r3, #16
   10370:	4313      	orrs	r3, r2
   10372:	62eb      	str	r3, [r5, #44]	; 0x2c
   10374:	f7ff fd6a 	bl	fe4c <am_hal_interrupt_master_disable>
   10378:	9003      	str	r0, [sp, #12]
   1037a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1037c:	f043 0301 	orr.w	r3, r3, #1
   10380:	862b      	strh	r3, [r5, #48]	; 0x30
   10382:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10388:	862b      	strh	r3, [r5, #48]	; 0x30
   1038a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1038c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10390:	862b      	strh	r3, [r5, #48]	; 0x30
   10392:	9803      	ldr	r0, [sp, #12]
   10394:	f7ff fd5e 	bl	fe54 <am_hal_interrupt_master_set>
   10398:	6825      	ldr	r5, [r4, #0]
   1039a:	4b36      	ldr	r3, [pc, #216]	; (10474 <am_hal_uart_configure+0x214>)
   1039c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   103a0:	429d      	cmp	r5, r3
   103a2:	d005      	beq.n	103b0 <am_hal_uart_configure+0x150>
   103a4:	2000      	movs	r0, #0
   103a6:	e79f      	b.n	102e8 <am_hal_uart_configure+0x88>
   103a8:	2300      	movs	r3, #0
   103aa:	6623      	str	r3, [r4, #96]	; 0x60
   103ac:	483d      	ldr	r0, [pc, #244]	; (104a4 <am_hal_uart_configure+0x244>)
   103ae:	e79b      	b.n	102e8 <am_hal_uart_configure+0x88>
   103b0:	69b1      	ldr	r1, [r6, #24]
   103b2:	6a37      	ldr	r7, [r6, #32]
   103b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   103b8:	b109      	cbz	r1, 103be <am_hal_uart_configure+0x15e>
   103ba:	69f3      	ldr	r3, [r6, #28]
   103bc:	bb3b      	cbnz	r3, 1040e <am_hal_uart_configure+0x1ae>
   103be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   103c0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   103c4:	f103 021c 	add.w	r2, r3, #28
   103c8:	0312      	lsls	r2, r2, #12
   103ca:	2100      	movs	r1, #0
   103cc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   103d0:	6b91      	ldr	r1, [r2, #56]	; 0x38
   103d2:	f021 0120 	bic.w	r1, r1, #32
   103d6:	6391      	str	r1, [r2, #56]	; 0x38
   103d8:	b1b7      	cbz	r7, 10408 <am_hal_uart_configure+0x1a8>
   103da:	f1b8 0f00 	cmp.w	r8, #0
   103de:	d12e      	bne.n	1043e <am_hal_uart_configure+0x1de>
   103e0:	6823      	ldr	r3, [r4, #0]
   103e2:	4a24      	ldr	r2, [pc, #144]	; (10474 <am_hal_uart_configure+0x214>)
   103e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   103e8:	2100      	movs	r1, #0
   103ea:	4293      	cmp	r3, r2
   103ec:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
   103f0:	d1d8      	bne.n	103a4 <am_hal_uart_configure+0x144>
   103f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   103f4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   103f8:	331c      	adds	r3, #28
   103fa:	031b      	lsls	r3, r3, #12
   103fc:	2000      	movs	r0, #0
   103fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10400:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   10404:	639a      	str	r2, [r3, #56]	; 0x38
   10406:	e76f      	b.n	102e8 <am_hal_uart_configure+0x88>
   10408:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
   1040c:	e7f4      	b.n	103f8 <am_hal_uart_configure+0x198>
   1040e:	2201      	movs	r2, #1
   10410:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   10414:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   10418:	f000 fa80 	bl	1091c <am_hal_queue_init>
   1041c:	6823      	ldr	r3, [r4, #0]
   1041e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10422:	42ab      	cmp	r3, r5
   10424:	d1be      	bne.n	103a4 <am_hal_uart_configure+0x144>
   10426:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10428:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1042c:	331c      	adds	r3, #28
   1042e:	031b      	lsls	r3, r3, #12
   10430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10432:	f042 0220 	orr.w	r2, r2, #32
   10436:	639a      	str	r2, [r3, #56]	; 0x38
   10438:	2f00      	cmp	r7, #0
   1043a:	d1ce      	bne.n	103da <am_hal_uart_configure+0x17a>
   1043c:	e7d0      	b.n	103e0 <am_hal_uart_configure+0x180>
   1043e:	2201      	movs	r2, #1
   10440:	4643      	mov	r3, r8
   10442:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   10446:	4639      	mov	r1, r7
   10448:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1044c:	f000 fa66 	bl	1091c <am_hal_queue_init>
   10450:	6823      	ldr	r3, [r4, #0]
   10452:	4a08      	ldr	r2, [pc, #32]	; (10474 <am_hal_uart_configure+0x214>)
   10454:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10458:	4293      	cmp	r3, r2
   1045a:	d1a3      	bne.n	103a4 <am_hal_uart_configure+0x144>
   1045c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1045e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10462:	331c      	adds	r3, #28
   10464:	031b      	lsls	r3, r3, #12
   10466:	2000      	movs	r0, #0
   10468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1046a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   1046e:	639a      	str	r2, [r3, #56]	; 0x38
   10470:	e73a      	b.n	102e8 <am_hal_uart_configure+0x88>
   10472:	bf00      	nop
   10474:	01ea9e06 	.word	0x01ea9e06
   10478:	40020000 	.word	0x40020000
   1047c:	0016e360 	.word	0x0016e360
   10480:	08000003 	.word	0x08000003
   10484:	2dc6c000 	.word	0x2dc6c000
   10488:	00b71b00 	.word	0x00b71b00
   1048c:	5b8d8000 	.word	0x5b8d8000
   10490:	016e3600 	.word	0x016e3600
   10494:	0b71b000 	.word	0x0b71b000
   10498:	002dc6c0 	.word	0x002dc6c0
   1049c:	16e36000 	.word	0x16e36000
   104a0:	005b8d80 	.word	0x005b8d80
   104a4:	08000002 	.word	0x08000002

000104a8 <am_hal_uart_transfer>:
   104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104ac:	680f      	ldr	r7, [r1, #0]
   104ae:	b091      	sub	sp, #68	; 0x44
   104b0:	4605      	mov	r5, r0
   104b2:	b13f      	cbz	r7, 104c4 <am_hal_uart_transfer+0x1c>
   104b4:	2f01      	cmp	r7, #1
   104b6:	bf18      	it	ne
   104b8:	2707      	movne	r7, #7
   104ba:	d024      	beq.n	10506 <am_hal_uart_transfer+0x5e>
   104bc:	4638      	mov	r0, r7
   104be:	b011      	add	sp, #68	; 0x44
   104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
   104c8:	690b      	ldr	r3, [r1, #16]
   104ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
   104ce:	688e      	ldr	r6, [r1, #8]
   104d0:	9300      	str	r3, [sp, #0]
   104d2:	f1b9 0f00 	cmp.w	r9, #0
   104d6:	d031      	beq.n	1053c <am_hal_uart_transfer+0x94>
   104d8:	2e00      	cmp	r6, #0
   104da:	f000 819c 	beq.w	10816 <am_hal_uart_transfer+0x36e>
   104de:	2800      	cmp	r0, #0
   104e0:	f000 8097 	beq.w	10612 <am_hal_uart_transfer+0x16a>
   104e4:	6803      	ldr	r3, [r0, #0]
   104e6:	4aa9      	ldr	r2, [pc, #676]	; (1078c <am_hal_uart_transfer+0x2e4>)
   104e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   104ec:	4293      	cmp	r3, r2
   104ee:	f000 8092 	beq.w	10616 <am_hal_uart_transfer+0x16e>
   104f2:	46b8      	mov	r8, r7
   104f4:	9b00      	ldr	r3, [sp, #0]
   104f6:	b10b      	cbz	r3, 104fc <am_hal_uart_transfer+0x54>
   104f8:	f8c3 8000 	str.w	r8, [r3]
   104fc:	2702      	movs	r7, #2
   104fe:	4638      	mov	r0, r7
   10500:	b011      	add	sp, #68	; 0x44
   10502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10506:	1d0b      	adds	r3, r1, #4
   10508:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
   1050c:	f1b9 0f00 	cmp.w	r9, #0
   10510:	d043      	beq.n	1059a <am_hal_uart_transfer+0xf2>
   10512:	2f00      	cmp	r7, #0
   10514:	f000 8185 	beq.w	10822 <am_hal_uart_transfer+0x37a>
   10518:	2800      	cmp	r0, #0
   1051a:	f000 80eb 	beq.w	106f4 <am_hal_uart_transfer+0x24c>
   1051e:	6802      	ldr	r2, [r0, #0]
   10520:	499a      	ldr	r1, [pc, #616]	; (1078c <am_hal_uart_transfer+0x2e4>)
   10522:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10526:	428a      	cmp	r2, r1
   10528:	f000 80e7 	beq.w	106fa <am_hal_uart_transfer+0x252>
   1052c:	2600      	movs	r6, #0
   1052e:	2702      	movs	r7, #2
   10530:	f1bb 0f00 	cmp.w	fp, #0
   10534:	d0c2      	beq.n	104bc <am_hal_uart_transfer+0x14>
   10536:	f8cb 6000 	str.w	r6, [fp]
   1053a:	e7bf      	b.n	104bc <am_hal_uart_transfer+0x14>
   1053c:	2800      	cmp	r0, #0
   1053e:	d0dd      	beq.n	104fc <am_hal_uart_transfer+0x54>
   10540:	6803      	ldr	r3, [r0, #0]
   10542:	4a92      	ldr	r2, [pc, #584]	; (1078c <am_hal_uart_transfer+0x2e4>)
   10544:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10548:	4293      	cmp	r3, r2
   1054a:	d1d7      	bne.n	104fc <am_hal_uart_transfer+0x54>
   1054c:	9b00      	ldr	r3, [sp, #0]
   1054e:	b10b      	cbz	r3, 10554 <am_hal_uart_transfer+0xac>
   10550:	f8c3 9000 	str.w	r9, [r3]
   10554:	b1fe      	cbz	r6, 10596 <am_hal_uart_transfer+0xee>
   10556:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1055a:	2b00      	cmp	r3, #0
   1055c:	f040 8165 	bne.w	1082a <am_hal_uart_transfer+0x382>
   10560:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10562:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10566:	311c      	adds	r1, #28
   10568:	0309      	lsls	r1, r1, #12
   1056a:	698a      	ldr	r2, [r1, #24]
   1056c:	f3c2 1240 	ubfx	r2, r2, #5, #1
   10570:	2a00      	cmp	r2, #0
   10572:	f040 818d 	bne.w	10890 <am_hal_uart_transfer+0x3e8>
   10576:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1057a:	e003      	b.n	10584 <am_hal_uart_transfer+0xdc>
   1057c:	6988      	ldr	r0, [r1, #24]
   1057e:	0680      	lsls	r0, r0, #26
   10580:	f100 8151 	bmi.w	10826 <am_hal_uart_transfer+0x37e>
   10584:	3201      	adds	r2, #1
   10586:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1058a:	6008      	str	r0, [r1, #0]
   1058c:	4296      	cmp	r6, r2
   1058e:	d1f5      	bne.n	1057c <am_hal_uart_transfer+0xd4>
   10590:	9b00      	ldr	r3, [sp, #0]
   10592:	b103      	cbz	r3, 10596 <am_hal_uart_transfer+0xee>
   10594:	601e      	str	r6, [r3, #0]
   10596:	2700      	movs	r7, #0
   10598:	e790      	b.n	104bc <am_hal_uart_transfer+0x14>
   1059a:	2800      	cmp	r0, #0
   1059c:	d0ae      	beq.n	104fc <am_hal_uart_transfer+0x54>
   1059e:	6802      	ldr	r2, [r0, #0]
   105a0:	497a      	ldr	r1, [pc, #488]	; (1078c <am_hal_uart_transfer+0x2e4>)
   105a2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   105a6:	428a      	cmp	r2, r1
   105a8:	d1a8      	bne.n	104fc <am_hal_uart_transfer+0x54>
   105aa:	f1bb 0f00 	cmp.w	fp, #0
   105ae:	d001      	beq.n	105b4 <am_hal_uart_transfer+0x10c>
   105b0:	f8cb 9000 	str.w	r9, [fp]
   105b4:	2f00      	cmp	r7, #0
   105b6:	d0ee      	beq.n	10596 <am_hal_uart_transfer+0xee>
   105b8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   105bc:	2c00      	cmp	r4, #0
   105be:	f040 816c 	bne.w	1089a <am_hal_uart_transfer+0x3f2>
   105c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   105c4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   105c8:	321c      	adds	r2, #28
   105ca:	0312      	lsls	r2, r2, #12
   105cc:	6990      	ldr	r0, [r2, #24]
   105ce:	f3c0 1000 	ubfx	r0, r0, #4, #1
   105d2:	2800      	cmp	r0, #0
   105d4:	f040 819d 	bne.w	10912 <am_hal_uart_transfer+0x46a>
   105d8:	6811      	ldr	r1, [r2, #0]
   105da:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   105de:	bf08      	it	eq
   105e0:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   105e4:	d008      	beq.n	105f8 <am_hal_uart_transfer+0x150>
   105e6:	e190      	b.n	1090a <am_hal_uart_transfer+0x462>
   105e8:	6991      	ldr	r1, [r2, #24]
   105ea:	06c8      	lsls	r0, r1, #27
   105ec:	d409      	bmi.n	10602 <am_hal_uart_transfer+0x15a>
   105ee:	6811      	ldr	r1, [r2, #0]
   105f0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   105f4:	f040 814e 	bne.w	10894 <am_hal_uart_transfer+0x3ec>
   105f8:	3401      	adds	r4, #1
   105fa:	42a7      	cmp	r7, r4
   105fc:	f803 1f01 	strb.w	r1, [r3, #1]!
   10600:	d1f2      	bne.n	105e8 <am_hal_uart_transfer+0x140>
   10602:	2700      	movs	r7, #0
   10604:	f1bb 0f00 	cmp.w	fp, #0
   10608:	f43f af58 	beq.w	104bc <am_hal_uart_transfer+0x14>
   1060c:	f8cb 4000 	str.w	r4, [fp]
   10610:	e754      	b.n	104bc <am_hal_uart_transfer+0x14>
   10612:	4680      	mov	r8, r0
   10614:	e76e      	b.n	104f4 <am_hal_uart_transfer+0x4c>
   10616:	9301      	str	r3, [sp, #4]
   10618:	4651      	mov	r1, sl
   1061a:	46bb      	mov	fp, r7
   1061c:	46b8      	mov	r8, r7
   1061e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   10622:	b9f2      	cbnz	r2, 10662 <am_hal_uart_transfer+0x1ba>
   10624:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10626:	b19e      	cbz	r6, 10650 <am_hal_uart_transfer+0x1a8>
   10628:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1062c:	321c      	adds	r2, #28
   1062e:	0312      	lsls	r2, r2, #12
   10630:	3901      	subs	r1, #1
   10632:	6994      	ldr	r4, [r2, #24]
   10634:	f3c4 1440 	ubfx	r4, r4, #5, #1
   10638:	b11c      	cbz	r4, 10642 <am_hal_uart_transfer+0x19a>
   1063a:	e047      	b.n	106cc <am_hal_uart_transfer+0x224>
   1063c:	6993      	ldr	r3, [r2, #24]
   1063e:	069b      	lsls	r3, r3, #26
   10640:	d441      	bmi.n	106c6 <am_hal_uart_transfer+0x21e>
   10642:	3401      	adds	r4, #1
   10644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10648:	6013      	str	r3, [r2, #0]
   1064a:	42b4      	cmp	r4, r6
   1064c:	d1f6      	bne.n	1063c <am_hal_uart_transfer+0x194>
   1064e:	44a0      	add	r8, r4
   10650:	9b00      	ldr	r3, [sp, #0]
   10652:	2b00      	cmp	r3, #0
   10654:	d09f      	beq.n	10596 <am_hal_uart_transfer+0xee>
   10656:	4638      	mov	r0, r7
   10658:	f8c3 8000 	str.w	r8, [r3]
   1065c:	b011      	add	sp, #68	; 0x44
   1065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10662:	6baa      	ldr	r2, [r5, #56]	; 0x38
   10664:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   10666:	1b14      	subs	r4, r2, r4
   10668:	42b4      	cmp	r4, r6
   1066a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   1066e:	bf28      	it	cs
   10670:	4634      	movcs	r4, r6
   10672:	4622      	mov	r2, r4
   10674:	4618      	mov	r0, r3
   10676:	9302      	str	r3, [sp, #8]
   10678:	f000 f95c 	bl	10934 <am_hal_queue_item_add>
   1067c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1067e:	9303      	str	r3, [sp, #12]
   10680:	f7ff fbe4 	bl	fe4c <am_hal_interrupt_master_disable>
   10684:	9b03      	ldr	r3, [sp, #12]
   10686:	9008      	str	r0, [sp, #32]
   10688:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1068c:	331c      	adds	r3, #28
   1068e:	031b      	lsls	r3, r3, #12
   10690:	9303      	str	r3, [sp, #12]
   10692:	e00d      	b.n	106b0 <am_hal_uart_transfer+0x208>
   10694:	f000 f986 	bl	109a4 <am_hal_queue_item_get>
   10698:	b190      	cbz	r0, 106c0 <am_hal_uart_transfer+0x218>
   1069a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1069c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   106a0:	331c      	adds	r3, #28
   106a2:	031b      	lsls	r3, r3, #12
   106a4:	699a      	ldr	r2, [r3, #24]
   106a6:	0692      	lsls	r2, r2, #26
   106a8:	bf5c      	itt	pl
   106aa:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   106ae:	601a      	strpl	r2, [r3, #0]
   106b0:	9b03      	ldr	r3, [sp, #12]
   106b2:	9802      	ldr	r0, [sp, #8]
   106b4:	699b      	ldr	r3, [r3, #24]
   106b6:	069b      	lsls	r3, r3, #26
   106b8:	f04f 0201 	mov.w	r2, #1
   106bc:	a907      	add	r1, sp, #28
   106be:	d5e9      	bpl.n	10694 <am_hal_uart_transfer+0x1ec>
   106c0:	9808      	ldr	r0, [sp, #32]
   106c2:	f7ff fbc7 	bl	fe54 <am_hal_interrupt_master_set>
   106c6:	1b36      	subs	r6, r6, r4
   106c8:	44a0      	add	r8, r4
   106ca:	d0c1      	beq.n	10650 <am_hal_uart_transfer+0x1a8>
   106cc:	2010      	movs	r0, #16
   106ce:	f7ff fb65 	bl	fd9c <am_hal_flash_delay>
   106d2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   106d6:	d001      	beq.n	106dc <am_hal_uart_transfer+0x234>
   106d8:	f10b 0b01 	add.w	fp, fp, #1
   106dc:	45d9      	cmp	r9, fp
   106de:	d9b7      	bls.n	10650 <am_hal_uart_transfer+0x1a8>
   106e0:	682a      	ldr	r2, [r5, #0]
   106e2:	9b01      	ldr	r3, [sp, #4]
   106e4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   106e8:	429a      	cmp	r2, r3
   106ea:	eb0a 0108 	add.w	r1, sl, r8
   106ee:	f47f af01 	bne.w	104f4 <am_hal_uart_transfer+0x4c>
   106f2:	e794      	b.n	1061e <am_hal_uart_transfer+0x176>
   106f4:	4606      	mov	r6, r0
   106f6:	2702      	movs	r7, #2
   106f8:	e71a      	b.n	10530 <am_hal_uart_transfer+0x88>
   106fa:	9200      	str	r2, [sp, #0]
   106fc:	f100 0248 	add.w	r2, r0, #72	; 0x48
   10700:	f04f 0a00 	mov.w	sl, #0
   10704:	9202      	str	r2, [sp, #8]
   10706:	465a      	mov	r2, fp
   10708:	4698      	mov	r8, r3
   1070a:	469b      	mov	fp, r3
   1070c:	4656      	mov	r6, sl
   1070e:	4613      	mov	r3, r2
   10710:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   10714:	2a00      	cmp	r2, #0
   10716:	d152      	bne.n	107be <am_hal_uart_transfer+0x316>
   10718:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1071a:	b3a7      	cbz	r7, 10786 <am_hal_uart_transfer+0x2de>
   1071c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10720:	311c      	adds	r1, #28
   10722:	0309      	lsls	r1, r1, #12
   10724:	698a      	ldr	r2, [r1, #24]
   10726:	06d0      	lsls	r0, r2, #27
   10728:	d432      	bmi.n	10790 <am_hal_uart_transfer+0x2e8>
   1072a:	680a      	ldr	r2, [r1, #0]
   1072c:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   10730:	f040 80aa 	bne.w	10888 <am_hal_uart_transfer+0x3e0>
   10734:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10738:	e006      	b.n	10748 <am_hal_uart_transfer+0x2a0>
   1073a:	698a      	ldr	r2, [r1, #24]
   1073c:	06d2      	lsls	r2, r2, #27
   1073e:	d41f      	bmi.n	10780 <am_hal_uart_transfer+0x2d8>
   10740:	680a      	ldr	r2, [r1, #0]
   10742:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   10746:	d161      	bne.n	1080c <am_hal_uart_transfer+0x364>
   10748:	3401      	adds	r4, #1
   1074a:	42bc      	cmp	r4, r7
   1074c:	f808 2f01 	strb.w	r2, [r8, #1]!
   10750:	d1f3      	bne.n	1073a <am_hal_uart_transfer+0x292>
   10752:	469b      	mov	fp, r3
   10754:	4426      	add	r6, r4
   10756:	f1bb 0f00 	cmp.w	fp, #0
   1075a:	f43f af1c 	beq.w	10596 <am_hal_uart_transfer+0xee>
   1075e:	f8cb 6000 	str.w	r6, [fp]
   10762:	2700      	movs	r7, #0
   10764:	e6aa      	b.n	104bc <am_hal_uart_transfer+0x14>
   10766:	9807      	ldr	r0, [sp, #28]
   10768:	f7ff fb74 	bl	fe54 <am_hal_interrupt_master_set>
   1076c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1076e:	9802      	ldr	r0, [sp, #8]
   10770:	42bc      	cmp	r4, r7
   10772:	bf28      	it	cs
   10774:	463c      	movcs	r4, r7
   10776:	4641      	mov	r1, r8
   10778:	4622      	mov	r2, r4
   1077a:	f000 f913 	bl	109a4 <am_hal_queue_item_get>
   1077e:	9b01      	ldr	r3, [sp, #4]
   10780:	1b3f      	subs	r7, r7, r4
   10782:	4426      	add	r6, r4
   10784:	d104      	bne.n	10790 <am_hal_uart_transfer+0x2e8>
   10786:	469b      	mov	fp, r3
   10788:	e7e5      	b.n	10756 <am_hal_uart_transfer+0x2ae>
   1078a:	bf00      	nop
   1078c:	01ea9e06 	.word	0x01ea9e06
   10790:	2010      	movs	r0, #16
   10792:	9301      	str	r3, [sp, #4]
   10794:	f7ff fb02 	bl	fd9c <am_hal_flash_delay>
   10798:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1079c:	9b01      	ldr	r3, [sp, #4]
   1079e:	d001      	beq.n	107a4 <am_hal_uart_transfer+0x2fc>
   107a0:	f10a 0a01 	add.w	sl, sl, #1
   107a4:	45d1      	cmp	r9, sl
   107a6:	d9ee      	bls.n	10786 <am_hal_uart_transfer+0x2de>
   107a8:	682a      	ldr	r2, [r5, #0]
   107aa:	9900      	ldr	r1, [sp, #0]
   107ac:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   107b0:	428a      	cmp	r2, r1
   107b2:	eb0b 0806 	add.w	r8, fp, r6
   107b6:	d0ab      	beq.n	10710 <am_hal_uart_transfer+0x268>
   107b8:	469b      	mov	fp, r3
   107ba:	2702      	movs	r7, #2
   107bc:	e6b8      	b.n	10530 <am_hal_uart_transfer+0x88>
   107be:	9301      	str	r3, [sp, #4]
   107c0:	f7ff fb44 	bl	fe4c <am_hal_interrupt_master_disable>
   107c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   107c6:	9007      	str	r0, [sp, #28]
   107c8:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   107cc:	301c      	adds	r0, #28
   107ce:	9b01      	ldr	r3, [sp, #4]
   107d0:	0300      	lsls	r0, r0, #12
   107d2:	ac08      	add	r4, sp, #32
   107d4:	2200      	movs	r2, #0
   107d6:	6981      	ldr	r1, [r0, #24]
   107d8:	06c9      	lsls	r1, r1, #27
   107da:	d409      	bmi.n	107f0 <am_hal_uart_transfer+0x348>
   107dc:	6801      	ldr	r1, [r0, #0]
   107de:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   107e2:	f102 0201 	add.w	r2, r2, #1
   107e6:	d118      	bne.n	1081a <am_hal_uart_transfer+0x372>
   107e8:	2a20      	cmp	r2, #32
   107ea:	f804 1b01 	strb.w	r1, [r4], #1
   107ee:	d1f2      	bne.n	107d6 <am_hal_uart_transfer+0x32e>
   107f0:	a908      	add	r1, sp, #32
   107f2:	9802      	ldr	r0, [sp, #8]
   107f4:	9301      	str	r3, [sp, #4]
   107f6:	f000 f89d 	bl	10934 <am_hal_queue_item_add>
   107fa:	9b01      	ldr	r3, [sp, #4]
   107fc:	2800      	cmp	r0, #0
   107fe:	d1b2      	bne.n	10766 <am_hal_uart_transfer+0x2be>
   10800:	4f45      	ldr	r7, [pc, #276]	; (10918 <am_hal_uart_transfer+0x470>)
   10802:	469b      	mov	fp, r3
   10804:	9807      	ldr	r0, [sp, #28]
   10806:	f7ff fb25 	bl	fe54 <am_hal_interrupt_master_set>
   1080a:	e691      	b.n	10530 <am_hal_uart_transfer+0x88>
   1080c:	469b      	mov	fp, r3
   1080e:	4426      	add	r6, r4
   10810:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10814:	e68c      	b.n	10530 <am_hal_uart_transfer+0x88>
   10816:	46b8      	mov	r8, r7
   10818:	e71a      	b.n	10650 <am_hal_uart_transfer+0x1a8>
   1081a:	469b      	mov	fp, r3
   1081c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10820:	e7f0      	b.n	10804 <am_hal_uart_transfer+0x35c>
   10822:	463e      	mov	r6, r7
   10824:	e797      	b.n	10756 <am_hal_uart_transfer+0x2ae>
   10826:	4616      	mov	r6, r2
   10828:	e6b2      	b.n	10590 <am_hal_uart_transfer+0xe8>
   1082a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1082c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1082e:	1a9b      	subs	r3, r3, r2
   10830:	429e      	cmp	r6, r3
   10832:	bf28      	it	cs
   10834:	461e      	movcs	r6, r3
   10836:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   1083a:	4651      	mov	r1, sl
   1083c:	4632      	mov	r2, r6
   1083e:	4620      	mov	r0, r4
   10840:	f000 f878 	bl	10934 <am_hal_queue_item_add>
   10844:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   10846:	f7ff fb01 	bl	fe4c <am_hal_interrupt_master_disable>
   1084a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   1084e:	371c      	adds	r7, #28
   10850:	033f      	lsls	r7, r7, #12
   10852:	9005      	str	r0, [sp, #20]
   10854:	e00d      	b.n	10872 <am_hal_uart_transfer+0x3ca>
   10856:	f000 f8a5 	bl	109a4 <am_hal_queue_item_get>
   1085a:	b188      	cbz	r0, 10880 <am_hal_uart_transfer+0x3d8>
   1085c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1085e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10862:	331c      	adds	r3, #28
   10864:	031b      	lsls	r3, r3, #12
   10866:	699a      	ldr	r2, [r3, #24]
   10868:	0692      	lsls	r2, r2, #26
   1086a:	bf5c      	itt	pl
   1086c:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   10870:	601a      	strpl	r2, [r3, #0]
   10872:	69bb      	ldr	r3, [r7, #24]
   10874:	069b      	lsls	r3, r3, #26
   10876:	f04f 0201 	mov.w	r2, #1
   1087a:	a908      	add	r1, sp, #32
   1087c:	4620      	mov	r0, r4
   1087e:	d5ea      	bpl.n	10856 <am_hal_uart_transfer+0x3ae>
   10880:	9805      	ldr	r0, [sp, #20]
   10882:	f7ff fae7 	bl	fe54 <am_hal_interrupt_master_set>
   10886:	e683      	b.n	10590 <am_hal_uart_transfer+0xe8>
   10888:	469b      	mov	fp, r3
   1088a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1088e:	e64f      	b.n	10530 <am_hal_uart_transfer+0x88>
   10890:	461e      	mov	r6, r3
   10892:	e67d      	b.n	10590 <am_hal_uart_transfer+0xe8>
   10894:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10898:	e6b4      	b.n	10604 <am_hal_uart_transfer+0x15c>
   1089a:	9300      	str	r3, [sp, #0]
   1089c:	f7ff fad6 	bl	fe4c <am_hal_interrupt_master_disable>
   108a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   108a2:	9006      	str	r0, [sp, #24]
   108a4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   108a8:	321c      	adds	r2, #28
   108aa:	0311      	lsls	r1, r2, #12
   108ac:	a808      	add	r0, sp, #32
   108ae:	2200      	movs	r2, #0
   108b0:	9b00      	ldr	r3, [sp, #0]
   108b2:	e009      	b.n	108c8 <am_hal_uart_transfer+0x420>
   108b4:	680c      	ldr	r4, [r1, #0]
   108b6:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   108ba:	f102 0201 	add.w	r2, r2, #1
   108be:	d121      	bne.n	10904 <am_hal_uart_transfer+0x45c>
   108c0:	2a20      	cmp	r2, #32
   108c2:	f800 4b01 	strb.w	r4, [r0], #1
   108c6:	d002      	beq.n	108ce <am_hal_uart_transfer+0x426>
   108c8:	698c      	ldr	r4, [r1, #24]
   108ca:	06e4      	lsls	r4, r4, #27
   108cc:	d5f2      	bpl.n	108b4 <am_hal_uart_transfer+0x40c>
   108ce:	f105 0648 	add.w	r6, r5, #72	; 0x48
   108d2:	a908      	add	r1, sp, #32
   108d4:	4630      	mov	r0, r6
   108d6:	9300      	str	r3, [sp, #0]
   108d8:	f000 f82c 	bl	10934 <am_hal_queue_item_add>
   108dc:	b920      	cbnz	r0, 108e8 <am_hal_uart_transfer+0x440>
   108de:	4f0e      	ldr	r7, [pc, #56]	; (10918 <am_hal_uart_transfer+0x470>)
   108e0:	9806      	ldr	r0, [sp, #24]
   108e2:	f7ff fab7 	bl	fe54 <am_hal_interrupt_master_set>
   108e6:	e5e9      	b.n	104bc <am_hal_uart_transfer+0x14>
   108e8:	9806      	ldr	r0, [sp, #24]
   108ea:	f7ff fab3 	bl	fe54 <am_hal_interrupt_master_set>
   108ee:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   108f0:	9b00      	ldr	r3, [sp, #0]
   108f2:	42bc      	cmp	r4, r7
   108f4:	bf28      	it	cs
   108f6:	463c      	movcs	r4, r7
   108f8:	4619      	mov	r1, r3
   108fa:	4630      	mov	r0, r6
   108fc:	4622      	mov	r2, r4
   108fe:	f000 f851 	bl	109a4 <am_hal_queue_item_get>
   10902:	e67e      	b.n	10602 <am_hal_uart_transfer+0x15a>
   10904:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10908:	e7ea      	b.n	108e0 <am_hal_uart_transfer+0x438>
   1090a:	4604      	mov	r4, r0
   1090c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10910:	e678      	b.n	10604 <am_hal_uart_transfer+0x15c>
   10912:	4627      	mov	r7, r4
   10914:	e676      	b.n	10604 <am_hal_uart_transfer+0x15c>
   10916:	bf00      	nop
   10918:	08000001 	.word	0x08000001

0001091c <am_hal_queue_init>:
   1091c:	b410      	push	{r4}
   1091e:	2400      	movs	r4, #0
   10920:	6004      	str	r4, [r0, #0]
   10922:	6044      	str	r4, [r0, #4]
   10924:	6084      	str	r4, [r0, #8]
   10926:	60c3      	str	r3, [r0, #12]
   10928:	6102      	str	r2, [r0, #16]
   1092a:	6141      	str	r1, [r0, #20]
   1092c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10930:	4770      	bx	lr
   10932:	bf00      	nop

00010934 <am_hal_queue_item_add>:
   10934:	b5f0      	push	{r4, r5, r6, r7, lr}
   10936:	4604      	mov	r4, r0
   10938:	6906      	ldr	r6, [r0, #16]
   1093a:	b083      	sub	sp, #12
   1093c:	fb06 f602 	mul.w	r6, r6, r2
   10940:	460d      	mov	r5, r1
   10942:	f7ff fa83 	bl	fe4c <am_hal_interrupt_master_disable>
   10946:	68e7      	ldr	r7, [r4, #12]
   10948:	68a2      	ldr	r2, [r4, #8]
   1094a:	9001      	str	r0, [sp, #4]
   1094c:	1abb      	subs	r3, r7, r2
   1094e:	429e      	cmp	r6, r3
   10950:	d826      	bhi.n	109a0 <am_hal_queue_item_add+0x6c>
   10952:	b196      	cbz	r6, 1097a <am_hal_queue_item_add+0x46>
   10954:	6823      	ldr	r3, [r4, #0]
   10956:	4629      	mov	r1, r5
   10958:	b1c5      	cbz	r5, 1098c <am_hal_queue_item_add+0x58>
   1095a:	19af      	adds	r7, r5, r6
   1095c:	6962      	ldr	r2, [r4, #20]
   1095e:	f811 0b01 	ldrb.w	r0, [r1], #1
   10962:	54d0      	strb	r0, [r2, r3]
   10964:	6823      	ldr	r3, [r4, #0]
   10966:	68e5      	ldr	r5, [r4, #12]
   10968:	3301      	adds	r3, #1
   1096a:	42b9      	cmp	r1, r7
   1096c:	fbb3 f0f5 	udiv	r0, r3, r5
   10970:	fb05 3310 	mls	r3, r5, r0, r3
   10974:	6023      	str	r3, [r4, #0]
   10976:	d1f1      	bne.n	1095c <am_hal_queue_item_add+0x28>
   10978:	68a2      	ldr	r2, [r4, #8]
   1097a:	4432      	add	r2, r6
   1097c:	60a2      	str	r2, [r4, #8]
   1097e:	2401      	movs	r4, #1
   10980:	9801      	ldr	r0, [sp, #4]
   10982:	f7ff fa67 	bl	fe54 <am_hal_interrupt_master_set>
   10986:	4620      	mov	r0, r4
   10988:	b003      	add	sp, #12
   1098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1098c:	3101      	adds	r1, #1
   1098e:	3301      	adds	r3, #1
   10990:	428e      	cmp	r6, r1
   10992:	fbb3 f0f7 	udiv	r0, r3, r7
   10996:	fb07 3310 	mls	r3, r7, r0, r3
   1099a:	d1f7      	bne.n	1098c <am_hal_queue_item_add+0x58>
   1099c:	6023      	str	r3, [r4, #0]
   1099e:	e7ec      	b.n	1097a <am_hal_queue_item_add+0x46>
   109a0:	2400      	movs	r4, #0
   109a2:	e7ed      	b.n	10980 <am_hal_queue_item_add+0x4c>

000109a4 <am_hal_queue_item_get>:
   109a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109a6:	4604      	mov	r4, r0
   109a8:	6906      	ldr	r6, [r0, #16]
   109aa:	b083      	sub	sp, #12
   109ac:	fb06 f602 	mul.w	r6, r6, r2
   109b0:	460d      	mov	r5, r1
   109b2:	f7ff fa4b 	bl	fe4c <am_hal_interrupt_master_disable>
   109b6:	68a2      	ldr	r2, [r4, #8]
   109b8:	9001      	str	r0, [sp, #4]
   109ba:	4296      	cmp	r6, r2
   109bc:	d81c      	bhi.n	109f8 <am_hal_queue_item_get+0x54>
   109be:	b196      	cbz	r6, 109e6 <am_hal_queue_item_get+0x42>
   109c0:	6863      	ldr	r3, [r4, #4]
   109c2:	b1dd      	cbz	r5, 109fc <am_hal_queue_item_get+0x58>
   109c4:	4629      	mov	r1, r5
   109c6:	19af      	adds	r7, r5, r6
   109c8:	6962      	ldr	r2, [r4, #20]
   109ca:	5cd3      	ldrb	r3, [r2, r3]
   109cc:	f801 3b01 	strb.w	r3, [r1], #1
   109d0:	6863      	ldr	r3, [r4, #4]
   109d2:	68e5      	ldr	r5, [r4, #12]
   109d4:	3301      	adds	r3, #1
   109d6:	428f      	cmp	r7, r1
   109d8:	fbb3 f0f5 	udiv	r0, r3, r5
   109dc:	fb05 3310 	mls	r3, r5, r0, r3
   109e0:	6063      	str	r3, [r4, #4]
   109e2:	d1f1      	bne.n	109c8 <am_hal_queue_item_get+0x24>
   109e4:	68a2      	ldr	r2, [r4, #8]
   109e6:	1b92      	subs	r2, r2, r6
   109e8:	60a2      	str	r2, [r4, #8]
   109ea:	2401      	movs	r4, #1
   109ec:	9801      	ldr	r0, [sp, #4]
   109ee:	f7ff fa31 	bl	fe54 <am_hal_interrupt_master_set>
   109f2:	4620      	mov	r0, r4
   109f4:	b003      	add	sp, #12
   109f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109f8:	2400      	movs	r4, #0
   109fa:	e7f7      	b.n	109ec <am_hal_queue_item_get+0x48>
   109fc:	68e0      	ldr	r0, [r4, #12]
   109fe:	4629      	mov	r1, r5
   10a00:	3101      	adds	r1, #1
   10a02:	3301      	adds	r3, #1
   10a04:	428e      	cmp	r6, r1
   10a06:	fbb3 f5f0 	udiv	r5, r3, r0
   10a0a:	fb00 3315 	mls	r3, r0, r5, r3
   10a0e:	d1f7      	bne.n	10a00 <am_hal_queue_item_get+0x5c>
   10a10:	6063      	str	r3, [r4, #4]
   10a12:	e7e8      	b.n	109e6 <am_hal_queue_item_get+0x42>

00010a14 <memset>:
   10a14:	b4f0      	push	{r4, r5, r6, r7}
   10a16:	0786      	lsls	r6, r0, #30
   10a18:	d043      	beq.n	10aa2 <memset+0x8e>
   10a1a:	1e54      	subs	r4, r2, #1
   10a1c:	2a00      	cmp	r2, #0
   10a1e:	d03e      	beq.n	10a9e <memset+0x8a>
   10a20:	b2ca      	uxtb	r2, r1
   10a22:	4603      	mov	r3, r0
   10a24:	e002      	b.n	10a2c <memset+0x18>
   10a26:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   10a2a:	d338      	bcc.n	10a9e <memset+0x8a>
   10a2c:	f803 2b01 	strb.w	r2, [r3], #1
   10a30:	079d      	lsls	r5, r3, #30
   10a32:	d1f8      	bne.n	10a26 <memset+0x12>
   10a34:	2c03      	cmp	r4, #3
   10a36:	d92b      	bls.n	10a90 <memset+0x7c>
   10a38:	b2cd      	uxtb	r5, r1
   10a3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10a3e:	2c0f      	cmp	r4, #15
   10a40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10a44:	d916      	bls.n	10a74 <memset+0x60>
   10a46:	f1a4 0710 	sub.w	r7, r4, #16
   10a4a:	093f      	lsrs	r7, r7, #4
   10a4c:	f103 0620 	add.w	r6, r3, #32
   10a50:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   10a54:	f103 0210 	add.w	r2, r3, #16
   10a58:	e942 5504 	strd	r5, r5, [r2, #-16]
   10a5c:	e942 5502 	strd	r5, r5, [r2, #-8]
   10a60:	3210      	adds	r2, #16
   10a62:	42b2      	cmp	r2, r6
   10a64:	d1f8      	bne.n	10a58 <memset+0x44>
   10a66:	f004 040f 	and.w	r4, r4, #15
   10a6a:	3701      	adds	r7, #1
   10a6c:	2c03      	cmp	r4, #3
   10a6e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   10a72:	d90d      	bls.n	10a90 <memset+0x7c>
   10a74:	461e      	mov	r6, r3
   10a76:	4622      	mov	r2, r4
   10a78:	3a04      	subs	r2, #4
   10a7a:	2a03      	cmp	r2, #3
   10a7c:	f846 5b04 	str.w	r5, [r6], #4
   10a80:	d8fa      	bhi.n	10a78 <memset+0x64>
   10a82:	1f22      	subs	r2, r4, #4
   10a84:	f022 0203 	bic.w	r2, r2, #3
   10a88:	3204      	adds	r2, #4
   10a8a:	4413      	add	r3, r2
   10a8c:	f004 0403 	and.w	r4, r4, #3
   10a90:	b12c      	cbz	r4, 10a9e <memset+0x8a>
   10a92:	b2c9      	uxtb	r1, r1
   10a94:	441c      	add	r4, r3
   10a96:	f803 1b01 	strb.w	r1, [r3], #1
   10a9a:	429c      	cmp	r4, r3
   10a9c:	d1fb      	bne.n	10a96 <memset+0x82>
   10a9e:	bcf0      	pop	{r4, r5, r6, r7}
   10aa0:	4770      	bx	lr
   10aa2:	4614      	mov	r4, r2
   10aa4:	4603      	mov	r3, r0
   10aa6:	e7c5      	b.n	10a34 <memset+0x20>
   10aa8:	7263694d 	.word	0x7263694d
   10aac:	6f68706f 	.word	0x6f68706f
   10ab0:	7620656e 	.word	0x7620656e
   10ab4:	66697265 	.word	0x66697265
   10ab8:	74616369 	.word	0x74616369
   10abc:	206e6f69 	.word	0x206e6f69
   10ac0:	636f7270 	.word	0x636f7270
   10ac4:	72756465 	.word	0x72756465
   10ac8:	73692065 	.word	0x73692065
   10acc:	61657220 	.word	0x61657220
   10ad0:	0d217964 	.word	0x0d217964
   10ad4:	00000a0a 	.word	0x00000a0a
   10ad8:	20414d44 	.word	0x20414d44
   10adc:	6f727245 	.word	0x6f727245
   10ae0:	636f2072 	.word	0x636f2072
   10ae4:	65727563 	.word	0x65727563
   10ae8:	00000a64 	.word	0x00000a64
   10aec:	6f727245 	.word	0x6f727245
   10af0:	202d2072 	.word	0x202d2072
   10af4:	61656c63 	.word	0x61656c63
   10af8:	676e6972 	.word	0x676e6972
   10afc:	65687420 	.word	0x65687420
   10b00:	43444120 	.word	0x43444120
   10b04:	746e6920 	.word	0x746e6920
   10b08:	75727265 	.word	0x75727265
   10b0c:	20737470 	.word	0x20737470
   10b10:	6c696166 	.word	0x6c696166
   10b14:	0a2e6465 	.word	0x0a2e6465
   10b18:	00000000 	.word	0x00000000
   10b1c:	6f727245 	.word	0x6f727245
   10b20:	202d2072 	.word	0x202d2072
   10b24:	67697274 	.word	0x67697274
   10b28:	69726567 	.word	0x69726567
   10b2c:	7420676e 	.word	0x7420676e
   10b30:	41206568 	.word	0x41206568
   10b34:	66204344 	.word	0x66204344
   10b38:	656c6961 	.word	0x656c6961
   10b3c:	000a2e64 	.word	0x000a2e64
   10b40:	20746547 	.word	0x20746547
   10b44:	6c616e41 	.word	0x6c616e41
   10b48:	4d20676f 	.word	0x4d20676f
   10b4c:	64206369 	.word	0x64206369
   10b50:	20617461 	.word	0x20617461
   10b54:	62206425 	.word	0x62206425
   10b58:	73657479 	.word	0x73657479
   10b5c:	000d0a21 	.word	0x000d0a21
   10b60:	20746547 	.word	0x20746547
   10b64:	204d4450 	.word	0x204d4450
   10b68:	69647561 	.word	0x69647561
   10b6c:	6164206f 	.word	0x6164206f
   10b70:	25206174 	.word	0x25206174
   10b74:	79622064 	.word	0x79622064
   10b78:	21736574 	.word	0x21736574
   10b7c:	00000d0a 	.word	0x00000d0a
   10b80:	69647541 	.word	0x69647541
   10b84:	6164206f 	.word	0x6164206f
   10b88:	63206174 	.word	0x63206174
   10b8c:	656c6c6f 	.word	0x656c6c6f
   10b90:	6f697463 	.word	0x6f697463
   10b94:	6e65206e 	.word	0x6e65206e
   10b98:	2e646564 	.word	0x2e646564
   10b9c:	002e2e2e 	.word	0x002e2e2e
   10ba0:	6c616e41 	.word	0x6c616e41
   10ba4:	4d20676f 	.word	0x4d20676f
   10ba8:	64206369 	.word	0x64206369
   10bac:	20617461 	.word	0x20617461
   10bb0:	66207361 	.word	0x66207361
   10bb4:	6f6c6c6f 	.word	0x6f6c6c6f
   10bb8:	676e6977 	.word	0x676e6977
   10bbc:	0d0a203a 	.word	0x0d0a203a
   10bc0:	00000000 	.word	0x00000000
   10bc4:	63694d41 	.word	0x63694d41
   10bc8:	6e697220 	.word	0x6e697220
   10bcc:	75622067 	.word	0x75622067
   10bd0:	72656666 	.word	0x72656666
   10bd4:	20736920 	.word	0x20736920
   10bd8:	65726c61 	.word	0x65726c61
   10bdc:	20796461 	.word	0x20796461
   10be0:	74706d65 	.word	0x74706d65
   10be4:	2e2e2e79 	.word	0x2e2e2e79
   10be8:	00000d0a 	.word	0x00000d0a
   10bec:	72656854 	.word	0x72656854
   10bf0:	65722765 	.word	0x65722765
   10bf4:	6d6f7320 	.word	0x6d6f7320
   10bf8:	69687465 	.word	0x69687465
   10bfc:	7720676e 	.word	0x7720676e
   10c00:	65726965 	.word	0x65726965
   10c04:	2e2e2e64 	.word	0x2e2e2e64
   10c08:	63694d41 	.word	0x63694d41
   10c0c:	6e697220 	.word	0x6e697220
   10c10:	75622067 	.word	0x75622067
   10c14:	72656666 	.word	0x72656666
   10c18:	746f6e20 	.word	0x746f6e20
   10c1c:	62203420 	.word	0x62203420
   10c20:	73657479 	.word	0x73657479
   10c24:	696c6120 	.word	0x696c6120
   10c28:	64656e67 	.word	0x64656e67
   10c2c:	0a2e2e2e 	.word	0x0a2e2e2e
   10c30:	0000000d 	.word	0x0000000d
   10c34:	00000020 	.word	0x00000020
   10c38:	00000d0a 	.word	0x00000d0a
   10c3c:	646e6553 	.word	0x646e6553
   10c40:	74756f20 	.word	0x74756f20
   10c44:	4c4c4120 	.word	0x4c4c4120
   10c48:	694d4120 	.word	0x694d4120
   10c4c:	61642063 	.word	0x61642063
   10c50:	20216174 	.word	0x20216174
   10c54:	72656854 	.word	0x72656854
   10c58:	65722765 	.word	0x65722765
   10c5c:	746f7420 	.word	0x746f7420
   10c60:	796c6c61 	.word	0x796c6c61
   10c64:	20642520 	.word	0x20642520
   10c68:	706d6173 	.word	0x706d6173
   10c6c:	0a73656c 	.word	0x0a73656c
   10c70:	00000d0a 	.word	0x00000d0a
   10c74:	206c6c41 	.word	0x206c6c41
   10c78:	61746164 	.word	0x61746164
   10c7c:	72657720 	.word	0x72657720
   10c80:	65732065 	.word	0x65732065
   10c84:	6465646e 	.word	0x6465646e
   10c88:	74756f20 	.word	0x74756f20
   10c8c:	0a2e2e2e 	.word	0x0a2e2e2e
   10c90:	000d0a0a 	.word	0x000d0a0a
   10c94:	74696157 	.word	0x74696157
   10c98:	20676e69 	.word	0x20676e69
   10c9c:	65732032 	.word	0x65732032
   10ca0:	646e6f63 	.word	0x646e6f63
   10ca4:	6f742073 	.word	0x6f742073
   10ca8:	61766520 	.word	0x61766520
   10cac:	7461756c 	.word	0x7461756c
   10cb0:	4d412065 	.word	0x4d412065
   10cb4:	61206369 	.word	0x61206369
   10cb8:	4420646e 	.word	0x4420646e
   10cbc:	2e63694d 	.word	0x2e63694d
   10cc0:	0a0d2e2e 	.word	0x0a0d2e2e
   10cc4:	00000000 	.word	0x00000000
   10cc8:	72617453 	.word	0x72617453
   10ccc:	6f742074 	.word	0x6f742074
   10cd0:	74656720 	.word	0x74656720
   10cd4:	64756120 	.word	0x64756120
   10cd8:	64206f69 	.word	0x64206f69
   10cdc:	2e617461 	.word	0x2e617461
   10ce0:	0a0d2e2e 	.word	0x0a0d2e2e
   10ce4:	00000000 	.word	0x00000000
   10ce8:	00007325 	.word	0x00007325
   10cec:	00006425 	.word	0x00006425
   10cf0:	00007525 	.word	0x00007525
   10cf4:	38257830 	.word	0x38257830
   10cf8:	00000078 	.word	0x00000078
   10cfc:	00006625 	.word	0x00006625
   10d00:	204d4450 	.word	0x204d4450
   10d04:	74746553 	.word	0x74746553
   10d08:	73676e69 	.word	0x73676e69
   10d0c:	000a0d3a 	.word	0x000a0d3a
   10d10:	204d4450 	.word	0x204d4450
   10d14:	636f6c43 	.word	0x636f6c43
   10d18:	4828206b 	.word	0x4828206b
   10d1c:	203a297a 	.word	0x203a297a
   10d20:	20202020 	.word	0x20202020
   10d24:	20202020 	.word	0x20202020
   10d28:	64323125 	.word	0x64323125
   10d2c:	00000a0d 	.word	0x00000a0d
   10d30:	65666645 	.word	0x65666645
   10d34:	76697463 	.word	0x76697463
   10d38:	61532065 	.word	0x61532065
   10d3c:	656c706d 	.word	0x656c706d
   10d40:	65724620 	.word	0x65724620
   10d44:	203a2e71 	.word	0x203a2e71
   10d48:	64323125 	.word	0x64323125
   10d4c:	000a0a0d 	.word	0x000a0a0d
   10d50:	6f727245 	.word	0x6f727245
   10d54:	202d2072 	.word	0x202d2072
   10d58:	666e6f63 	.word	0x666e6f63
   10d5c:	72756769 	.word	0x72756769
   10d60:	20676e69 	.word	0x20676e69
   10d64:	20434441 	.word	0x20434441
   10d68:	20414d44 	.word	0x20414d44
   10d6c:	6c696166 	.word	0x6c696166
   10d70:	0a2e6465 	.word	0x0a2e6465
   10d74:	00000000 	.word	0x00000000
   10d78:	6f727245 	.word	0x6f727245
   10d7c:	202d2072 	.word	0x202d2072
   10d80:	65736572 	.word	0x65736572
   10d84:	74617672 	.word	0x74617672
   10d88:	206e6f69 	.word	0x206e6f69
   10d8c:	7420666f 	.word	0x7420666f
   10d90:	41206568 	.word	0x41206568
   10d94:	69204344 	.word	0x69204344
   10d98:	6174736e 	.word	0x6174736e
   10d9c:	2065636e 	.word	0x2065636e
   10da0:	6c696166 	.word	0x6c696166
   10da4:	0a2e6465 	.word	0x0a2e6465
   10da8:	00000000 	.word	0x00000000
   10dac:	6f727245 	.word	0x6f727245
   10db0:	202d2072 	.word	0x202d2072
   10db4:	20434441 	.word	0x20434441
   10db8:	65776f70 	.word	0x65776f70
   10dbc:	6e6f2072 	.word	0x6e6f2072
   10dc0:	69616620 	.word	0x69616620
   10dc4:	2e64656c 	.word	0x2e64656c
   10dc8:	0000000a 	.word	0x0000000a
   10dcc:	6f727245 	.word	0x6f727245
   10dd0:	202d2072 	.word	0x202d2072
   10dd4:	666e6f63 	.word	0x666e6f63
   10dd8:	72756769 	.word	0x72756769
   10ddc:	20676e69 	.word	0x20676e69
   10de0:	20434441 	.word	0x20434441
   10de4:	6c696166 	.word	0x6c696166
   10de8:	0a2e6465 	.word	0x0a2e6465
   10dec:	00000000 	.word	0x00000000
   10df0:	72617453 	.word	0x72617453
   10df4:	44412074 	.word	0x44412074
   10df8:	61632043 	.word	0x61632043
   10dfc:	7262696c 	.word	0x7262696c
   10e00:	6f697461 	.word	0x6f697461
   10e04:	2e2e2e6e 	.word	0x2e2e2e6e
   10e08:	00000a0d 	.word	0x00000a0d
   10e0c:	43434441 	.word	0x43434441
   10e10:	72204c41 	.word	0x72204c41
   10e14:	76206765 	.word	0x76206765
   10e18:	65756c61 	.word	0x65756c61
   10e1c:	20736920 	.word	0x20736920
   10e20:	6769726f 	.word	0x6769726f
   10e24:	6c616e69 	.word	0x6c616e69
   10e28:	2520796c 	.word	0x2520796c
   10e2c:	2e2e2078 	.word	0x2e2e2078
   10e30:	000a0d2e 	.word	0x000a0d2e
   10e34:	43434441 	.word	0x43434441
   10e38:	72204c41 	.word	0x72204c41
   10e3c:	76206765 	.word	0x76206765
   10e40:	65756c61 	.word	0x65756c61
   10e44:	776f6e20 	.word	0x776f6e20
   10e48:	20736920 	.word	0x20736920
   10e4c:	2e207825 	.word	0x2e207825
   10e50:	0a0d2e2e 	.word	0x0a0d2e2e
   10e54:	00000000 	.word	0x00000000
   10e58:	20434441 	.word	0x20434441
   10e5c:	696c6163 	.word	0x696c6163
   10e60:	74617262 	.word	0x74617262
   10e64:	206e6f69 	.word	0x206e6f69
   10e68:	66207369 	.word	0x66207369
   10e6c:	73696e69 	.word	0x73696e69
   10e70:	2e646568 	.word	0x2e646568
   10e74:	0d0a2e2e 	.word	0x0d0a2e2e
   10e78:	00000000 	.word	0x00000000
   10e7c:	6f727245 	.word	0x6f727245
   10e80:	202d2072 	.word	0x202d2072
   10e84:	666e6f63 	.word	0x666e6f63
   10e88:	72756769 	.word	0x72756769
   10e8c:	20676e69 	.word	0x20676e69
   10e90:	20434441 	.word	0x20434441
   10e94:	746f6c53 	.word	0x746f6c53
   10e98:	66203020 	.word	0x66203020
   10e9c:	656c6961 	.word	0x656c6961
   10ea0:	000a2e64 	.word	0x000a2e64
   10ea4:	6f727245 	.word	0x6f727245
   10ea8:	202d2072 	.word	0x202d2072
   10eac:	62616e65 	.word	0x62616e65
   10eb0:	676e696c 	.word	0x676e696c
   10eb4:	43444120 	.word	0x43444120
   10eb8:	69616620 	.word	0x69616620
   10ebc:	2e64656c 	.word	0x2e64656c
   10ec0:	0000000a 	.word	0x0000000a
   10ec4:	6f727245 	.word	0x6f727245
   10ec8:	202d2072 	.word	0x202d2072
   10ecc:	61736964 	.word	0x61736964
   10ed0:	20656c62 	.word	0x20656c62
   10ed4:	20434441 	.word	0x20434441
   10ed8:	6c696166 	.word	0x6c696166
   10edc:	0a2e6465 	.word	0x0a2e6465
   10ee0:	00000000 	.word	0x00000000
   10ee4:	6f727245 	.word	0x6f727245
   10ee8:	202d2072 	.word	0x202d2072
   10eec:	61736964 	.word	0x61736964
   10ef0:	6e696c62 	.word	0x6e696c62
   10ef4:	68742067 	.word	0x68742067
   10ef8:	44412065 	.word	0x44412065
   10efc:	6f702043 	.word	0x6f702043
   10f00:	20726577 	.word	0x20726577
   10f04:	616d6f64 	.word	0x616d6f64
   10f08:	66206e69 	.word	0x66206e69
   10f0c:	656c6961 	.word	0x656c6961
   10f10:	000a2e64 	.word	0x000a2e64
   10f14:	6f727245 	.word	0x6f727245
   10f18:	202d2072 	.word	0x202d2072
   10f1c:	75746572 	.word	0x75746572
   10f20:	6f206e72 	.word	0x6f206e72
   10f24:	68742066 	.word	0x68742066
   10f28:	44412065 	.word	0x44412065
   10f2c:	6e692043 	.word	0x6e692043
   10f30:	6e617473 	.word	0x6e617473
   10f34:	66206563 	.word	0x66206563
   10f38:	656c6961 	.word	0x656c6961
   10f3c:	000a2e64 	.word	0x000a2e64
   10f40:	6f727245 	.word	0x6f727245
   10f44:	202d2072 	.word	0x202d2072
   10f48:	666e6f63 	.word	0x666e6f63
   10f4c:	72756769 	.word	0x72756769
   10f50:	20676e69 	.word	0x20676e69
   10f54:	20656874 	.word	0x20656874
   10f58:	74737973 	.word	0x74737973
   10f5c:	63206d65 	.word	0x63206d65
   10f60:	6b636f6c 	.word	0x6b636f6c
   10f64:	69616620 	.word	0x69616620
   10f68:	2e64656c 	.word	0x2e64656c
   10f6c:	0000000a 	.word	0x0000000a
   10f70:	6f727245 	.word	0x6f727245
   10f74:	202d2072 	.word	0x202d2072
   10f78:	666e6f63 	.word	0x666e6f63
   10f7c:	72756769 	.word	0x72756769
   10f80:	20676e69 	.word	0x20676e69
   10f84:	20656874 	.word	0x20656874
   10f88:	74737973 	.word	0x74737973
   10f8c:	63206d65 	.word	0x63206d65
   10f90:	65686361 	.word	0x65686361
   10f94:	69616620 	.word	0x69616620
   10f98:	2e64656c 	.word	0x2e64656c
   10f9c:	0000000a 	.word	0x0000000a
   10fa0:	6f727245 	.word	0x6f727245
   10fa4:	202d2072 	.word	0x202d2072
   10fa8:	62616e65 	.word	0x62616e65
   10fac:	676e696c 	.word	0x676e696c
   10fb0:	65687420 	.word	0x65687420
   10fb4:	73797320 	.word	0x73797320
   10fb8:	206d6574 	.word	0x206d6574
   10fbc:	68636163 	.word	0x68636163
   10fc0:	61662065 	.word	0x61662065
   10fc4:	64656c69 	.word	0x64656c69
   10fc8:	00000a2e 	.word	0x00000a2e
   10fcc:	6c6f7041 	.word	0x6c6f7041
   10fd0:	20336f6c 	.word	0x20336f6c
   10fd4:	7265706f 	.word	0x7265706f
   10fd8:	6e697461 	.word	0x6e697461
   10fdc:	6e692067 	.word	0x6e692067
   10fe0:	72754220 	.word	0x72754220
   10fe4:	4d207473 	.word	0x4d207473
   10fe8:	2065646f 	.word	0x2065646f
   10fec:	4d363928 	.word	0x4d363928
   10ff0:	0d297a48 	.word	0x0d297a48
   10ff4:	00000a0a 	.word	0x00000a0a
   10ff8:	6f727245 	.word	0x6f727245
   10ffc:	202d2072 	.word	0x202d2072
   11000:	67697274 	.word	0x67697274
   11004:	69726567 	.word	0x69726567
   11008:	7420676e 	.word	0x7420676e
   1100c:	41206568 	.word	0x41206568
   11010:	66204344 	.word	0x66204344
   11014:	656c6961 	.word	0x656c6961
   11018:	000a2e64 	.word	0x000a2e64
   1101c:	6f727245 	.word	0x6f727245
   11020:	65722072 	.word	0x65722072
   11024:	6e696461 	.word	0x6e696461
   11028:	44412067 	.word	0x44412067
   1102c:	6e692043 	.word	0x6e692043
   11030:	72726574 	.word	0x72726574
   11034:	20747075 	.word	0x20747075
   11038:	74617473 	.word	0x74617473
   1103c:	000a7375 	.word	0x000a7375
   11040:	6f727245 	.word	0x6f727245
   11044:	6c632072 	.word	0x6c632072
   11048:	69726165 	.word	0x69726165
   1104c:	4120676e 	.word	0x4120676e
   11050:	69204344 	.word	0x69204344
   11054:	7265746e 	.word	0x7265746e
   11058:	74707572 	.word	0x74707572
   1105c:	61747320 	.word	0x61747320
   11060:	0a737574 	.word	0x0a737574
   11064:	00000000 	.word	0x00000000

00011068 <g_AM_HAL_GPIO_DISABLE>:
   11068:	00000003                                ....

0001106c <g_AM_HAL_GPIO_TRISTATE>:
   1106c:	00000c03                                ....

00011070 <g_AM_HAL_GPIO_OUTPUT>:
   11070:	00000403                                ....

00011074 <g_ui8Inpen>:
   11074:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   11084:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   11094:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   110a4:	00003130                                01..

000110a8 <g_ui8Bit76Capabilities>:
   110a8:	02800101 80010180 80800101 80808080     ................
   110b8:	80808080 80808008 01800180 80808080     ................
   110c8:	80808080 01800402 01010401 80808080     ................
   110d8:	00000101                                ....

000110dc <g_ui8nCEpins>:
   110dc:	02070707 00080802 01020202 01010101     ................
   110ec:	01010101 01010101 01010101 01010101     ................
   110fc:	01010101 08010101 01010008 01010101     ................
   1110c:	00000101                                ....

00011110 <g_ui8NCEtable>:
   11110:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   11120:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   11130:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11140:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11150:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11160:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11170:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11180:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11190:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   111a0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   111b0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   111c0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   111d0:	32221202 43231303                       .."2..#C

000111d8 <g_SysRingBuffSetup>:
   111d8:	00000001 1000ca78 0000fa00 00000002     ....x...........
   111e8:	1001c478 0000fa00                       x.......

000111f0 <g_switch_button0>:
   111f0:	00001003                                ....

000111f4 <g_switch_button1>:
   111f4:	00001003                                ....

000111f8 <g_switch_button2>:
   111f8:	00001003                                ....

000111fc <g_AM_PIN_33_ADCSE5>:
   111fc:	00000000                                ....

00011200 <g_sBspUartConfig>:
   11200:	0001c200 00000060 00000000 00000000     ....`...........
   11210:	00000000 00000012 00000000 00000000     ................
	...

00011228 <g_AM_BSP_GPIO_COM_UART_TX>:
   11228:	00000000                                ....

0001122c <g_AM_BSP_GPIO_COM_UART_RX>:
   1122c:	00000000                                ....

00011230 <am_hal_cachectrl_defaults>:
   11230:	00000308                                ....

00011234 <g_am_hal_mcuctrl_flash_size>:
   11234:	00004000 00008000 00010000 00020000     .@..............
   11244:	00040000 00080000 00100000 00200000     .............. .
   11254:	00180000 00000000 00000000 00000000     ................
	...

00011274 <g_am_hal_mcuctrl_sram_size>:
   11274:	00004000 00008000 00010000 00020000     .@..............
   11284:	00040000 00080000 00100000 00060000     ................
   11294:	000c0000 00000000 00000000 00000000     ................
	...

000112b4 <am_hal_pwrctrl_peripheral_control>:
	...
   112c0:	00000001 00000004 00000004 00000002     ................
   112d0:	00000008 00000008 00000004 00000008     ................
   112e0:	00000008 00000008 00000008 00000008     ................
   112f0:	00000010 00000010 00000010 00000020     ............ ...
   11300:	00000010 00000010 00000040 00000010     ........@.......
   11310:	00000010 00000080 00000004 00000004     ................
   11320:	00000100 00000004 00000004 00000200     ................
   11330:	00000020 00000020 00000400 00000004      ... ...........
   11340:	00000004 00000800 00000040 00000040     ........@...@...
   11350:	00001000 00000080 00000080 00002000     ............. ..
   11360:	00000100 00000100                       ........
