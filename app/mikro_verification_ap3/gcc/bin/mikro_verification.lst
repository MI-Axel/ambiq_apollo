
bin/mikro_verification.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 85 e8 00 00 ed e8 00 00 39 d3 00 00     ............9...
    c010:	39 d3 00 00 39 d3 00 00 39 d3 00 00 00 00 00 00     9...9...9.......
	...
    c02c:	f3 e8 00 00 f3 e8 00 00 00 00 00 00 f3 e8 00 00     ................
    c03c:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     ................
    c04c:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     ................
    c05c:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     ................
    c06c:	f3 e8 00 00 f3 e8 00 00 51 ef 00 00 fd ee 00 00     ........Q.......
    c07c:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 05 f0 00 00     ................
    c08c:	39 ee 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     9...............
    c09c:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     ................
    c0ac:	f3 e8 00 00 f3 e8 00 00 f3 e8 00 00 f3 e8 00 00     ................
    c0bc:	f3 e8 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:

// sharing variables in whole procedures
volatile uint8_t g_ui8PcmDataReadyFlag = 0;

int main(void)
{
    c2d4:	b580      	push	{r7, lr}
    c2d6:	b082      	sub	sp, #8
    c2d8:	af00      	add	r7, sp, #0
    am_app_mic_verif_sys_init();
    c2da:	f002 fcd3 	bl	ec84 <am_app_mic_verif_sys_init>
#endif // configUSE_SYSVIEW

    //
    // Print the banner.
    //
    DebugLog("Microphone verification procedure is ready!\r\n\n");
    c2de:	487a      	ldr	r0, [pc, #488]	; (c4c8 <main+0x1f4>)
    c2e0:	f002 fb52 	bl	e988 <DebugLog>

#if AM_APP_ANALOG_MIC
        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c2e4:	4b79      	ldr	r3, [pc, #484]	; (c4cc <main+0x1f8>)
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <main+0x22>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c2ee:	4878      	ldr	r0, [pc, #480]	; (c4d0 <main+0x1fc>)
    c2f0:	f001 ff3a 	bl	e168 <am_util_stdio_printf>
            while(1);
    c2f4:	e7fe      	b.n	c2f4 <main+0x20>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c2f6:	4b77      	ldr	r3, [pc, #476]	; (c4d4 <main+0x200>)
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	b2db      	uxtb	r3, r3
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d01c      	beq.n	c33a <main+0x66>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c300:	4b74      	ldr	r3, [pc, #464]	; (c4d4 <main+0x200>)
    c302:	2200      	movs	r2, #0
    c304:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c306:	f002 fc05 	bl	eb14 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c30a:	4b73      	ldr	r3, [pc, #460]	; (c4d8 <main+0x204>)
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c312:	4618      	mov	r0, r3
    c314:	f003 f884 	bl	f420 <am_hal_adc_interrupt_clear>
    c318:	4603      	mov	r3, r0
    c31a:	2b00      	cmp	r3, #0
    c31c:	d002      	beq.n	c324 <main+0x50>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c31e:	486f      	ldr	r0, [pc, #444]	; (c4dc <main+0x208>)
    c320:	f001 ff22 	bl	e168 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c324:	4b6c      	ldr	r3, [pc, #432]	; (c4d8 <main+0x204>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	4618      	mov	r0, r3
    c32a:	f003 f88b 	bl	f444 <am_hal_adc_sw_trigger>
    c32e:	4603      	mov	r3, r0
    c330:	2b00      	cmp	r3, #0
    c332:	d002      	beq.n	c33a <main+0x66>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c334:	486a      	ldr	r0, [pc, #424]	; (c4e0 <main+0x20c>)
    c336:	f001 ff17 	bl	e168 <am_util_stdio_printf>
            }
        }
        
        if((g_bAMicDataReady == true) && (g_bAMicEvalFlag == true) && (g_bPDMDataReady == true))
    c33a:	4b6a      	ldr	r3, [pc, #424]	; (c4e4 <main+0x210>)
    c33c:	781b      	ldrb	r3, [r3, #0]
    c33e:	b2db      	uxtb	r3, r3
    c340:	2b00      	cmp	r3, #0
    c342:	d018      	beq.n	c376 <main+0xa2>
    c344:	4b68      	ldr	r3, [pc, #416]	; (c4e8 <main+0x214>)
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	2b00      	cmp	r3, #0
    c34c:	d013      	beq.n	c376 <main+0xa2>
    c34e:	4b67      	ldr	r3, [pc, #412]	; (c4ec <main+0x218>)
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b2db      	uxtb	r3, r3
    c354:	2b00      	cmp	r3, #0
    c356:	d00e      	beq.n	c376 <main+0xa2>
        {
            am_util_stdio_printf("Get Analog Mic data %d bytes!\n\r", g_ui32AMicDataSumBytes);
    c358:	4b65      	ldr	r3, [pc, #404]	; (c4f0 <main+0x21c>)
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	4619      	mov	r1, r3
    c35e:	4865      	ldr	r0, [pc, #404]	; (c4f4 <main+0x220>)
    c360:	f001 ff02 	bl	e168 <am_util_stdio_printf>

            am_util_stdio_printf("Get PDM audio data %d bytes!\n\r", g_ui32PCMDataSumBytes);
    c364:	4b64      	ldr	r3, [pc, #400]	; (c4f8 <main+0x224>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4619      	mov	r1, r3
    c36a:	4864      	ldr	r0, [pc, #400]	; (c4fc <main+0x228>)
    c36c:	f001 fefc 	bl	e168 <am_util_stdio_printf>

            am_util_stdio_printf("Audio data collection ended....");
    c370:	4863      	ldr	r0, [pc, #396]	; (c500 <main+0x22c>)
    c372:	f001 fef9 	bl	e168 <am_util_stdio_printf>
        }

        if((g_bPDMDataReady == true) && (g_bAMicDataReady == true))
    c376:	4b5d      	ldr	r3, [pc, #372]	; (c4ec <main+0x218>)
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	b2db      	uxtb	r3, r3
    c37c:	2b00      	cmp	r3, #0
    c37e:	d05b      	beq.n	c438 <main+0x164>
    c380:	4b58      	ldr	r3, [pc, #352]	; (c4e4 <main+0x210>)
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	b2db      	uxtb	r3, r3
    c386:	2b00      	cmp	r3, #0
    c388:	d056      	beq.n	c438 <main+0x164>
        {
            am_devices_led_off(am_bsp_psLEDs, 1);
    c38a:	2101      	movs	r1, #1
    c38c:	485d      	ldr	r0, [pc, #372]	; (c504 <main+0x230>)
    c38e:	f002 f9eb 	bl	e768 <am_devices_led_off>
            g_bAMicEvalFlag = false;
    c392:	4b55      	ldr	r3, [pc, #340]	; (c4e8 <main+0x214>)
    c394:	2200      	movs	r2, #0
    c396:	701a      	strb	r2, [r3, #0]
            g_bPDMDataReady = false;
    c398:	4b54      	ldr	r3, [pc, #336]	; (c4ec <main+0x218>)
    c39a:	2200      	movs	r2, #0
    c39c:	701a      	strb	r2, [r3, #0]
            g_bAMicDataReady = false;
    c39e:	4b51      	ldr	r3, [pc, #324]	; (c4e4 <main+0x210>)
    c3a0:	2200      	movs	r2, #0
    c3a2:	701a      	strb	r2, [r3, #0]
            am_util_stdio_printf("Analog Mic data as following: \n\r");
    c3a4:	4858      	ldr	r0, [pc, #352]	; (c508 <main+0x234>)
    c3a6:	f001 fedf 	bl	e168 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c3aa:	e02f      	b.n	c40c <main+0x138>
            {
                uint8_t indx = 0;
    c3ac:	2300      	movs	r3, #0
    c3ae:	71fb      	strb	r3, [r7, #7]
                uint32_t ringbuff_ret = 0;
    c3b0:	2300      	movs	r3, #0
    c3b2:	603b      	str	r3, [r7, #0]
                for(indx==0; indx<16; indx++)
    c3b4:	e024      	b.n	c400 <main+0x12c>
                {
                    ringbuff_ret = am_app_utils_ring_buffer_pop(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], &g_ui32AD_Val, 4);
    c3b6:	2204      	movs	r2, #4
    c3b8:	4954      	ldr	r1, [pc, #336]	; (c50c <main+0x238>)
    c3ba:	4855      	ldr	r0, [pc, #340]	; (c510 <main+0x23c>)
    c3bc:	f002 f87f 	bl	e4be <am_app_utils_ring_buffer_pop>
    c3c0:	6038      	str	r0, [r7, #0]
                    if(ringbuff_ret == 4)
    c3c2:	683b      	ldr	r3, [r7, #0]
    c3c4:	2b04      	cmp	r3, #4
    c3c6:	d105      	bne.n	c3d4 <main+0x100>
                    {    
                        g_ui32OutSamples += 1;
    c3c8:	4b52      	ldr	r3, [pc, #328]	; (c514 <main+0x240>)
    c3ca:	681b      	ldr	r3, [r3, #0]
    c3cc:	3301      	adds	r3, #1
    c3ce:	4a51      	ldr	r2, [pc, #324]	; (c514 <main+0x240>)
    c3d0:	6013      	str	r3, [r2, #0]
    c3d2:	e009      	b.n	c3e8 <main+0x114>
                    }
                    else if(ringbuff_ret ==0)
    c3d4:	683b      	ldr	r3, [r7, #0]
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d103      	bne.n	c3e2 <main+0x10e>
                    {
                        am_util_stdio_printf("AMic ring buffer is already empty...\n\r");
    c3da:	484f      	ldr	r0, [pc, #316]	; (c518 <main+0x244>)
    c3dc:	f001 fec4 	bl	e168 <am_util_stdio_printf>
                        break;
    c3e0:	e011      	b.n	c406 <main+0x132>
                    }
                    else
                    {
                        am_util_stdio_printf("There're something weired...AMic ring buffer not 4 bytes aligned...\n\r");
    c3e2:	484e      	ldr	r0, [pc, #312]	; (c51c <main+0x248>)
    c3e4:	f001 fec0 	bl	e168 <am_util_stdio_printf>
                    }
                    //
                    // follow the ADC data format
                    //
                    DebugLogUInt32(g_ui32AD_Val>>6);
    c3e8:	4b48      	ldr	r3, [pc, #288]	; (c50c <main+0x238>)
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	099b      	lsrs	r3, r3, #6
    c3ee:	4618      	mov	r0, r3
    c3f0:	f002 fad8 	bl	e9a4 <DebugLogUInt32>
                    DebugLog(" ");
    c3f4:	484a      	ldr	r0, [pc, #296]	; (c520 <main+0x24c>)
    c3f6:	f002 fac7 	bl	e988 <DebugLog>
                for(indx==0; indx<16; indx++)
    c3fa:	79fb      	ldrb	r3, [r7, #7]
    c3fc:	3301      	adds	r3, #1
    c3fe:	71fb      	strb	r3, [r7, #7]
    c400:	79fb      	ldrb	r3, [r7, #7]
    c402:	2b0f      	cmp	r3, #15
    c404:	d9d7      	bls.n	c3b6 <main+0xe2>
                }
                am_util_stdio_printf("\n\r");
    c406:	4847      	ldr	r0, [pc, #284]	; (c524 <main+0x250>)
    c408:	f001 feae 	bl	e168 <am_util_stdio_printf>
            while(!(am_app_utils_ring_buffer_empty(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA])))
    c40c:	4b46      	ldr	r3, [pc, #280]	; (c528 <main+0x254>)
    c40e:	699a      	ldr	r2, [r3, #24]
    c410:	4b45      	ldr	r3, [pc, #276]	; (c528 <main+0x254>)
    c412:	69db      	ldr	r3, [r3, #28]
    c414:	429a      	cmp	r2, r3
    c416:	d1c9      	bne.n	c3ac <main+0xd8>
    c418:	4b43      	ldr	r3, [pc, #268]	; (c528 <main+0x254>)
    c41a:	6a1b      	ldr	r3, [r3, #32]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d1c5      	bne.n	c3ac <main+0xd8>
            }
            am_util_stdio_printf("Send out ALL AMic data! There're totally %d samples\n\n\r", g_ui32OutSamples); 
    c420:	4b3c      	ldr	r3, [pc, #240]	; (c514 <main+0x240>)
    c422:	681b      	ldr	r3, [r3, #0]
    c424:	4619      	mov	r1, r3
    c426:	4841      	ldr	r0, [pc, #260]	; (c52c <main+0x258>)
    c428:	f001 fe9e 	bl	e168 <am_util_stdio_printf>
            g_ui32OutSamples = 0;
    c42c:	4b39      	ldr	r3, [pc, #228]	; (c514 <main+0x240>)
    c42e:	2200      	movs	r2, #0
    c430:	601a      	str	r2, [r3, #0]

            }
            am_util_stdio_printf("Send out ALL DMic data! There're totally %d samples\n\r", g_ui32OutSamples); 
            g_ui32OutSamples = 0;
#endif // 0
            am_util_stdio_printf("All data were sended out...\n\n\n\r");
    c432:	483f      	ldr	r0, [pc, #252]	; (c530 <main+0x25c>)
    c434:	f001 fe98 	bl	e168 <am_util_stdio_printf>
        }
#endif // AM_APP_ANALOG_MIC

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c438:	4b3e      	ldr	r3, [pc, #248]	; (c534 <main+0x260>)
    c43a:	681b      	ldr	r3, [r3, #0]
    c43c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c440:	d306      	bcc.n	c450 <main+0x17c>
        {
            g_ui32TimerCount = 0;
    c442:	4b3c      	ldr	r3, [pc, #240]	; (c534 <main+0x260>)
    c444:	2200      	movs	r2, #0
    c446:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c448:	2100      	movs	r1, #0
    c44a:	482e      	ldr	r0, [pc, #184]	; (c504 <main+0x230>)
    c44c:	f002 f9ca 	bl	e7e4 <am_devices_led_toggle>

//
// Board key interface for different procedure switch
//

        if((g_sysKeyValue == AM_APP_KEY_0) && (g_ui8ButtonPushedFlag == 1))
    c450:	4b39      	ldr	r3, [pc, #228]	; (c538 <main+0x264>)
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	b2db      	uxtb	r3, r3
    c456:	2b01      	cmp	r3, #1
    c458:	d123      	bne.n	c4a2 <main+0x1ce>
    c45a:	4b38      	ldr	r3, [pc, #224]	; (c53c <main+0x268>)
    c45c:	781b      	ldrb	r3, [r3, #0]
    c45e:	b2db      	uxtb	r3, r3
    c460:	2b01      	cmp	r3, #1
    c462:	d11e      	bne.n	c4a2 <main+0x1ce>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c464:	4b34      	ldr	r3, [pc, #208]	; (c538 <main+0x264>)
    c466:	2200      	movs	r2, #0
    c468:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c46a:	4b34      	ldr	r3, [pc, #208]	; (c53c <main+0x268>)
    c46c:	2200      	movs	r2, #0
    c46e:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
            }
#endif // AM_APP_MIC_CALIBRATION

#if AM_APP_ANALOG_MIC
            if(g_bAMicEvalFlag == false)
    c470:	4b1d      	ldr	r3, [pc, #116]	; (c4e8 <main+0x214>)
    c472:	781b      	ldrb	r3, [r3, #0]
    c474:	b2db      	uxtb	r3, r3
    c476:	f083 0301 	eor.w	r3, r3, #1
    c47a:	b2db      	uxtb	r3, r3
    c47c:	2b00      	cmp	r3, #0
    c47e:	d010      	beq.n	c4a2 <main+0x1ce>
            {
                am_util_stdio_printf("Waiting 2 seconds to evaluate AMic and DMic...\r\n");
    c480:	482f      	ldr	r0, [pc, #188]	; (c540 <main+0x26c>)
    c482:	f001 fe71 	bl	e168 <am_util_stdio_printf>
                am_util_delay_ms(2000);
    c486:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c48a:	f000 ff37 	bl	d2fc <am_util_delay_ms>
                am_util_stdio_printf("Start to get audio data...\r\n");
    c48e:	482d      	ldr	r0, [pc, #180]	; (c544 <main+0x270>)
    c490:	f001 fe6a 	bl	e168 <am_util_stdio_printf>
                am_devices_led_on(am_bsp_psLEDs, 1);
    c494:	2101      	movs	r1, #1
    c496:	481b      	ldr	r0, [pc, #108]	; (c504 <main+0x230>)
    c498:	f002 f92b 	bl	e6f2 <am_devices_led_on>
                g_bAMicEvalFlag = true;
    c49c:	4b12      	ldr	r3, [pc, #72]	; (c4e8 <main+0x214>)
    c49e:	2201      	movs	r2, #1
    c4a0:	701a      	strb	r2, [r3, #0]
            }
#endif // AM_APP_ANALOG_MIC

        }

        if((g_sysKeyValue == AM_APP_KEY_1) && (g_ui8ButtonPushedFlag == 1))
    c4a2:	4b25      	ldr	r3, [pc, #148]	; (c538 <main+0x264>)
    c4a4:	781b      	ldrb	r3, [r3, #0]
    c4a6:	b2db      	uxtb	r3, r3
    c4a8:	2b02      	cmp	r3, #2
    c4aa:	f47f af1b 	bne.w	c2e4 <main+0x10>
    c4ae:	4b23      	ldr	r3, [pc, #140]	; (c53c <main+0x268>)
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	b2db      	uxtb	r3, r3
    c4b4:	2b01      	cmp	r3, #1
    c4b6:	f47f af15 	bne.w	c2e4 <main+0x10>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c4ba:	4b1f      	ldr	r3, [pc, #124]	; (c538 <main+0x264>)
    c4bc:	2200      	movs	r2, #0
    c4be:	701a      	strb	r2, [r3, #0]
            g_ui8ButtonPushedFlag = 0;
    c4c0:	4b1e      	ldr	r3, [pc, #120]	; (c53c <main+0x268>)
    c4c2:	2200      	movs	r2, #0
    c4c4:	701a      	strb	r2, [r3, #0]
        if (g_bADCDMAError)
    c4c6:	e70d      	b.n	c2e4 <main+0x10>
    c4c8:	00010714 	.word	0x00010714
    c4cc:	1002c258 	.word	0x1002c258
    c4d0:	00010744 	.word	0x00010744
    c4d4:	1000ce15 	.word	0x1000ce15
    c4d8:	1000ce10 	.word	0x1000ce10
    c4dc:	00010758 	.word	0x00010758
    c4e0:	00010788 	.word	0x00010788
    c4e4:	1000c168 	.word	0x1000c168
    c4e8:	1000c169 	.word	0x1000c169
    c4ec:	1000c15e 	.word	0x1000c15e
    c4f0:	1000c164 	.word	0x1000c164
    c4f4:	000107ac 	.word	0x000107ac
    c4f8:	1000c160 	.word	0x1000c160
    c4fc:	000107cc 	.word	0x000107cc
    c500:	000107ec 	.word	0x000107ec
    c504:	1000c00c 	.word	0x1000c00c
    c508:	0001080c 	.word	0x0001080c
    c50c:	1000c044 	.word	0x1000c044
    c510:	1002c230 	.word	0x1002c230
    c514:	1000c048 	.word	0x1000c048
    c518:	00010830 	.word	0x00010830
    c51c:	00010858 	.word	0x00010858
    c520:	000108a0 	.word	0x000108a0
    c524:	000108a4 	.word	0x000108a4
    c528:	1002c21c 	.word	0x1002c21c
    c52c:	000108a8 	.word	0x000108a8
    c530:	000108e0 	.word	0x000108e0
    c534:	1000c150 	.word	0x1000c150
    c538:	1000c15c 	.word	0x1000c15c
    c53c:	1000c15d 	.word	0x1000c15d
    c540:	00010900 	.word	0x00010900
    c544:	00010934 	.word	0x00010934

0000c548 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c548:	b480      	push	{r7}
    c54a:	b083      	sub	sp, #12
    c54c:	af00      	add	r7, sp, #0
    c54e:	6078      	str	r0, [r7, #4]
    c550:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c552:	687b      	ldr	r3, [r7, #4]
    c554:	2b00      	cmp	r3, #0
    c556:	d001      	beq.n	c55c <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c558:	2305      	movs	r3, #5
    c55a:	e048      	b.n	c5ee <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c55c:	683b      	ldr	r3, [r7, #0]
    c55e:	2b00      	cmp	r3, #0
    c560:	d101      	bne.n	c566 <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c562:	2306      	movs	r3, #6
    c564:	e043      	b.n	c5ee <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c566:	4925      	ldr	r1, [pc, #148]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c568:	687a      	ldr	r2, [r7, #4]
    c56a:	4613      	mov	r3, r2
    c56c:	005b      	lsls	r3, r3, #1
    c56e:	4413      	add	r3, r2
    c570:	009b      	lsls	r3, r3, #2
    c572:	440b      	add	r3, r1
    c574:	78db      	ldrb	r3, [r3, #3]
    c576:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c57a:	b2db      	uxtb	r3, r3
    c57c:	2b00      	cmp	r3, #0
    c57e:	d001      	beq.n	c584 <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c580:	2307      	movs	r3, #7
    c582:	e034      	b.n	c5ee <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c584:	491d      	ldr	r1, [pc, #116]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c586:	687a      	ldr	r2, [r7, #4]
    c588:	4613      	mov	r3, r2
    c58a:	005b      	lsls	r3, r3, #1
    c58c:	4413      	add	r3, r2
    c58e:	009b      	lsls	r3, r3, #2
    c590:	18ca      	adds	r2, r1, r3
    c592:	78d3      	ldrb	r3, [r2, #3]
    c594:	f043 0301 	orr.w	r3, r3, #1
    c598:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c59a:	4918      	ldr	r1, [pc, #96]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c59c:	687a      	ldr	r2, [r7, #4]
    c59e:	4613      	mov	r3, r2
    c5a0:	005b      	lsls	r3, r3, #1
    c5a2:	4413      	add	r3, r2
    c5a4:	009b      	lsls	r3, r3, #2
    c5a6:	18ca      	adds	r2, r1, r3
    c5a8:	6813      	ldr	r3, [r2, #0]
    c5aa:	4915      	ldr	r1, [pc, #84]	; (c600 <am_hal_pdm_initialize+0xb8>)
    c5ac:	f361 0317 	bfi	r3, r1, #0, #24
    c5b0:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    c5b2:	4912      	ldr	r1, [pc, #72]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c5b4:	687a      	ldr	r2, [r7, #4]
    c5b6:	4613      	mov	r3, r2
    c5b8:	005b      	lsls	r3, r3, #1
    c5ba:	4413      	add	r3, r2
    c5bc:	009b      	lsls	r3, r3, #2
    c5be:	440b      	add	r3, r1
    c5c0:	3308      	adds	r3, #8
    c5c2:	687a      	ldr	r2, [r7, #4]
    c5c4:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    c5c6:	490d      	ldr	r1, [pc, #52]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c5c8:	687a      	ldr	r2, [r7, #4]
    c5ca:	4613      	mov	r3, r2
    c5cc:	005b      	lsls	r3, r3, #1
    c5ce:	4413      	add	r3, r2
    c5d0:	009b      	lsls	r3, r3, #2
    c5d2:	440b      	add	r3, r1
    c5d4:	3304      	adds	r3, #4
    c5d6:	2200      	movs	r2, #0
    c5d8:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    c5da:	687a      	ldr	r2, [r7, #4]
    c5dc:	4613      	mov	r3, r2
    c5de:	005b      	lsls	r3, r3, #1
    c5e0:	4413      	add	r3, r2
    c5e2:	009b      	lsls	r3, r3, #2
    c5e4:	4a05      	ldr	r2, [pc, #20]	; (c5fc <am_hal_pdm_initialize+0xb4>)
    c5e6:	441a      	add	r2, r3
    c5e8:	683b      	ldr	r3, [r7, #0]
    c5ea:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c5ec:	2300      	movs	r3, #0
}
    c5ee:	4618      	mov	r0, r3
    c5f0:	370c      	adds	r7, #12
    c5f2:	46bd      	mov	sp, r7
    c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5f8:	4770      	bx	lr
    c5fa:	bf00      	nop
    c5fc:	1000c17c 	.word	0x1000c17c
    c600:	00f956e2 	.word	0x00f956e2

0000c604 <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    c604:	b580      	push	{r7, lr}
    c606:	b088      	sub	sp, #32
    c608:	af00      	add	r7, sp, #0
    c60a:	6078      	str	r0, [r7, #4]
    c60c:	460b      	mov	r3, r1
    c60e:	70fb      	strb	r3, [r7, #3]
    c610:	4613      	mov	r3, r2
    c612:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c618:	69fb      	ldr	r3, [r7, #28]
    c61a:	689b      	ldr	r3, [r3, #8]
    c61c:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    c61e:	69bb      	ldr	r3, [r7, #24]
    c620:	b2db      	uxtb	r3, r3
    c622:	330d      	adds	r3, #13
    c624:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c626:	687b      	ldr	r3, [r7, #4]
    c628:	2b00      	cmp	r3, #0
    c62a:	d00d      	beq.n	c648 <am_hal_pdm_power_control+0x44>
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	78db      	ldrb	r3, [r3, #3]
    c630:	f003 0301 	and.w	r3, r3, #1
    c634:	b2db      	uxtb	r3, r3
    c636:	2b00      	cmp	r3, #0
    c638:	d006      	beq.n	c648 <am_hal_pdm_power_control+0x44>
    c63a:	687b      	ldr	r3, [r7, #4]
    c63c:	681b      	ldr	r3, [r3, #0]
    c63e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c642:	4a23      	ldr	r2, [pc, #140]	; (c6d0 <am_hal_pdm_power_control+0xcc>)
    c644:	4293      	cmp	r3, r2
    c646:	d001      	beq.n	c64c <am_hal_pdm_power_control+0x48>
    c648:	2302      	movs	r3, #2
    c64a:	e03d      	b.n	c6c8 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    c64c:	78fb      	ldrb	r3, [r7, #3]
    c64e:	2b00      	cmp	r3, #0
    c650:	d004      	beq.n	c65c <am_hal_pdm_power_control+0x58>
    c652:	2b00      	cmp	r3, #0
    c654:	db34      	blt.n	c6c0 <am_hal_pdm_power_control+0xbc>
    c656:	2b02      	cmp	r3, #2
    c658:	dc32      	bgt.n	c6c0 <am_hal_pdm_power_control+0xbc>
    c65a:	e01e      	b.n	c69a <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    c65c:	78bb      	ldrb	r3, [r7, #2]
    c65e:	2b00      	cmp	r3, #0
    c660:	d008      	beq.n	c674 <am_hal_pdm_power_control+0x70>
    c662:	69fb      	ldr	r3, [r7, #28]
    c664:	791b      	ldrb	r3, [r3, #4]
    c666:	f083 0301 	eor.w	r3, r3, #1
    c66a:	b2db      	uxtb	r3, r3
    c66c:	2b00      	cmp	r3, #0
    c66e:	d001      	beq.n	c674 <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    c670:	2307      	movs	r3, #7
    c672:	e029      	b.n	c6c8 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    c674:	7dfb      	ldrb	r3, [r7, #23]
    c676:	4618      	mov	r0, r3
    c678:	f003 faf0 	bl	fc5c <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    c67c:	78bb      	ldrb	r3, [r7, #2]
    c67e:	2b00      	cmp	r3, #0
    c680:	d020      	beq.n	c6c4 <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    c682:	f003 f9f7 	bl	fa74 <am_hal_interrupt_master_disable>
    c686:	4603      	mov	r3, r0
    c688:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    c68a:	69fb      	ldr	r3, [r7, #28]
    c68c:	2200      	movs	r2, #0
    c68e:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c690:	693b      	ldr	r3, [r7, #16]
    c692:	4618      	mov	r0, r3
    c694:	f003 f9f2 	bl	fa7c <am_hal_interrupt_master_set>
            }
            break;
    c698:	e014      	b.n	c6c4 <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    c69a:	78bb      	ldrb	r3, [r7, #2]
    c69c:	2b00      	cmp	r3, #0
    c69e:	d00a      	beq.n	c6b6 <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    c6a0:	f003 f9e8 	bl	fa74 <am_hal_interrupt_master_disable>
    c6a4:	4603      	mov	r3, r0
    c6a6:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    c6a8:	69fb      	ldr	r3, [r7, #28]
    c6aa:	2201      	movs	r2, #1
    c6ac:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    c6ae:	68fb      	ldr	r3, [r7, #12]
    c6b0:	4618      	mov	r0, r3
    c6b2:	f003 f9e3 	bl	fa7c <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    c6b6:	7dfb      	ldrb	r3, [r7, #23]
    c6b8:	4618      	mov	r0, r3
    c6ba:	f003 faf9 	bl	fcb0 <am_hal_pwrctrl_periph_disable>
            break;
    c6be:	e002      	b.n	c6c6 <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    c6c0:	2306      	movs	r3, #6
    c6c2:	e001      	b.n	c6c8 <am_hal_pdm_power_control+0xc4>
            break;
    c6c4:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    c6c6:	2300      	movs	r3, #0
}
    c6c8:	4618      	mov	r0, r3
    c6ca:	3720      	adds	r7, #32
    c6cc:	46bd      	mov	sp, r7
    c6ce:	bd80      	pop	{r7, pc}
    c6d0:	00f956e2 	.word	0x00f956e2

0000c6d4 <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b088      	sub	sp, #32
    c6d8:	af00      	add	r7, sp, #0
    c6da:	6078      	str	r0, [r7, #4]
    c6dc:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    c6e2:	69fb      	ldr	r3, [r7, #28]
    c6e4:	689b      	ldr	r3, [r3, #8]
    c6e6:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d00d      	beq.n	c70a <am_hal_pdm_configure+0x36>
    c6ee:	687b      	ldr	r3, [r7, #4]
    c6f0:	78db      	ldrb	r3, [r3, #3]
    c6f2:	f003 0301 	and.w	r3, r3, #1
    c6f6:	b2db      	uxtb	r3, r3
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d006      	beq.n	c70a <am_hal_pdm_configure+0x36>
    c6fc:	687b      	ldr	r3, [r7, #4]
    c6fe:	681b      	ldr	r3, [r3, #0]
    c700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c704:	4a5e      	ldr	r2, [pc, #376]	; (c880 <am_hal_pdm_configure+0x1ac>)
    c706:	4293      	cmp	r3, r2
    c708:	d001      	beq.n	c70e <am_hal_pdm_configure+0x3a>
    c70a:	2302      	movs	r3, #2
    c70c:	e0b4      	b.n	c878 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    c70e:	4a5d      	ldr	r2, [pc, #372]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c710:	683b      	ldr	r3, [r7, #0]
    c712:	7f59      	ldrb	r1, [r3, #29]
    c714:	6813      	ldr	r3, [r2, #0]
    c716:	f361 0341 	bfi	r3, r1, #1, #1
    c71a:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    c71c:	683b      	ldr	r3, [r7, #0]
    c71e:	699b      	ldr	r3, [r3, #24]
    c720:	4a58      	ldr	r2, [pc, #352]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c722:	f003 0307 	and.w	r3, r3, #7
    c726:	b2d9      	uxtb	r1, r3
    c728:	6813      	ldr	r3, [r2, #0]
    c72a:	f361 0384 	bfi	r3, r1, #2, #3
    c72e:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    c730:	683b      	ldr	r3, [r7, #0]
    c732:	68db      	ldr	r3, [r3, #12]
    c734:	4a53      	ldr	r2, [pc, #332]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c736:	f003 030f 	and.w	r3, r3, #15
    c73a:	b2d9      	uxtb	r1, r3
    c73c:	6813      	ldr	r3, [r2, #0]
    c73e:	f361 1348 	bfi	r3, r1, #5, #4
    c742:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    c744:	4a4f      	ldr	r2, [pc, #316]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c746:	683b      	ldr	r3, [r7, #0]
    c748:	7a19      	ldrb	r1, [r3, #8]
    c74a:	6813      	ldr	r3, [r2, #0]
    c74c:	f361 2349 	bfi	r3, r1, #9, #1
    c750:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    c752:	683b      	ldr	r3, [r7, #0]
    c754:	685b      	ldr	r3, [r3, #4]
    c756:	4a4b      	ldr	r2, [pc, #300]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c75c:	b2d9      	uxtb	r1, r3
    c75e:	6813      	ldr	r3, [r2, #0]
    c760:	f361 2390 	bfi	r3, r1, #10, #7
    c764:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    c766:	683b      	ldr	r3, [r7, #0]
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	4a46      	ldr	r2, [pc, #280]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c76c:	f003 0303 	and.w	r3, r3, #3
    c770:	b2d9      	uxtb	r1, r3
    c772:	6813      	ldr	r3, [r2, #0]
    c774:	f361 4352 	bfi	r3, r1, #17, #2
    c778:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    c77a:	683b      	ldr	r3, [r7, #0]
    c77c:	785b      	ldrb	r3, [r3, #1]
    c77e:	4a41      	ldr	r2, [pc, #260]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c780:	f003 031f 	and.w	r3, r3, #31
    c784:	b2d9      	uxtb	r1, r3
    c786:	6813      	ldr	r3, [r2, #0]
    c788:	f361 5359 	bfi	r3, r1, #21, #5
    c78c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    c78e:	683b      	ldr	r3, [r7, #0]
    c790:	789b      	ldrb	r3, [r3, #2]
    c792:	4a3c      	ldr	r2, [pc, #240]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c794:	f003 031f 	and.w	r3, r3, #31
    c798:	b2d9      	uxtb	r1, r3
    c79a:	6813      	ldr	r3, [r2, #0]
    c79c:	f361 639e 	bfi	r3, r1, #26, #5
    c7a0:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    c7a2:	4a38      	ldr	r2, [pc, #224]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7a4:	683b      	ldr	r3, [r7, #0]
    c7a6:	7f99      	ldrb	r1, [r3, #30]
    c7a8:	6813      	ldr	r3, [r2, #0]
    c7aa:	f361 73df 	bfi	r3, r1, #31, #1
    c7ae:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    c7b0:	4a34      	ldr	r2, [pc, #208]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7b2:	6813      	ldr	r3, [r2, #0]
    c7b4:	f043 0301 	orr.w	r3, r3, #1
    c7b8:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    c7ba:	4a32      	ldr	r2, [pc, #200]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7bc:	6853      	ldr	r3, [r2, #4]
    c7be:	f36f 639a 	bfc	r3, #26, #1
    c7c2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    c7c4:	4a2f      	ldr	r2, [pc, #188]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7c6:	6853      	ldr	r3, [r2, #4]
    c7c8:	f36f 73df 	bfc	r3, #31, #1
    c7cc:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    c7ce:	4a2d      	ldr	r2, [pc, #180]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7d0:	6853      	ldr	r3, [r2, #4]
    c7d2:	f36f 739e 	bfc	r3, #30, #1
    c7d6:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    c7d8:	683b      	ldr	r3, [r7, #0]
    c7da:	7d5b      	ldrb	r3, [r3, #21]
    c7dc:	4a29      	ldr	r2, [pc, #164]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7de:	f003 0303 	and.w	r3, r3, #3
    c7e2:	b2d9      	uxtb	r1, r3
    c7e4:	6853      	ldr	r3, [r2, #4]
    c7e6:	f361 03c4 	bfi	r3, r1, #3, #2
    c7ea:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    c7ec:	4a25      	ldr	r2, [pc, #148]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c7ee:	683b      	ldr	r3, [r7, #0]
    c7f0:	7d19      	ldrb	r1, [r3, #20]
    c7f2:	6853      	ldr	r3, [r2, #4]
    c7f4:	f361 2308 	bfi	r3, r1, #8, #1
    c7f8:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    c7fa:	683b      	ldr	r3, [r7, #0]
    c7fc:	7c9b      	ldrb	r3, [r3, #18]
    c7fe:	4a21      	ldr	r2, [pc, #132]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c800:	f003 0301 	and.w	r3, r3, #1
    c804:	b2d9      	uxtb	r1, r3
    c806:	6853      	ldr	r3, [r2, #4]
    c808:	f361 4310 	bfi	r3, r1, #16, #1
    c80c:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    c80e:	4a1d      	ldr	r2, [pc, #116]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c810:	683b      	ldr	r3, [r7, #0]
    c812:	7cd9      	ldrb	r1, [r3, #19]
    c814:	6853      	ldr	r3, [r2, #4]
    c816:	f361 4351 	bfi	r3, r1, #17, #1
    c81a:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    c81c:	4a19      	ldr	r2, [pc, #100]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c81e:	683b      	ldr	r3, [r7, #0]
    c820:	7c59      	ldrb	r1, [r3, #17]
    c822:	6853      	ldr	r3, [r2, #4]
    c824:	f361 43d3 	bfi	r3, r1, #19, #1
    c828:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    c82a:	4a16      	ldr	r2, [pc, #88]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c82c:	683b      	ldr	r3, [r7, #0]
    c82e:	7f19      	ldrb	r1, [r3, #28]
    c830:	6853      	ldr	r3, [r2, #4]
    c832:	f361 5314 	bfi	r3, r1, #20, #1
    c836:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    c838:	683b      	ldr	r3, [r7, #0]
    c83a:	7c1b      	ldrb	r3, [r3, #16]
    c83c:	4a11      	ldr	r2, [pc, #68]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c83e:	f003 0307 	and.w	r3, r3, #7
    c842:	b2d9      	uxtb	r1, r3
    c844:	6853      	ldr	r3, [r2, #4]
    c846:	f361 63dd 	bfi	r3, r1, #27, #3
    c84a:	6053      	str	r3, [r2, #4]

    delay_us(100);
    c84c:	f107 030c 	add.w	r3, r7, #12
    c850:	4618      	mov	r0, r3
    c852:	f002 ff83 	bl	f75c <am_hal_clkgen_status_get>
    c856:	68fb      	ldr	r3, [r7, #12]
    c858:	4a0b      	ldr	r2, [pc, #44]	; (c888 <am_hal_pdm_configure+0x1b4>)
    c85a:	fba2 2303 	umull	r2, r3, r2, r3
    c85e:	0c9b      	lsrs	r3, r3, #18
    c860:	2264      	movs	r2, #100	; 0x64
    c862:	fb02 f303 	mul.w	r3, r2, r3
    c866:	4618      	mov	r0, r3
    c868:	f003 f8d0 	bl	fa0c <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    c86c:	4a05      	ldr	r2, [pc, #20]	; (c884 <am_hal_pdm_configure+0x1b0>)
    c86e:	6853      	ldr	r3, [r2, #4]
    c870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c874:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c876:	2300      	movs	r3, #0
}
    c878:	4618      	mov	r0, r3
    c87a:	3720      	adds	r7, #32
    c87c:	46bd      	mov	sp, r7
    c87e:	bd80      	pop	{r7, pc}
    c880:	00f956e2 	.word	0x00f956e2
    c884:	50011000 	.word	0x50011000
    c888:	165e9f81 	.word	0x165e9f81

0000c88c <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    c88c:	b480      	push	{r7}
    c88e:	b085      	sub	sp, #20
    c890:	af00      	add	r7, sp, #0
    c892:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c894:	687b      	ldr	r3, [r7, #4]
    c896:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c898:	68fb      	ldr	r3, [r7, #12]
    c89a:	689b      	ldr	r3, [r3, #8]
    c89c:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c89e:	687b      	ldr	r3, [r7, #4]
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d00d      	beq.n	c8c0 <am_hal_pdm_enable+0x34>
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	78db      	ldrb	r3, [r3, #3]
    c8a8:	f003 0301 	and.w	r3, r3, #1
    c8ac:	b2db      	uxtb	r3, r3
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d006      	beq.n	c8c0 <am_hal_pdm_enable+0x34>
    c8b2:	687b      	ldr	r3, [r7, #4]
    c8b4:	681b      	ldr	r3, [r3, #0]
    c8b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c8ba:	4a0b      	ldr	r2, [pc, #44]	; (c8e8 <am_hal_pdm_enable+0x5c>)
    c8bc:	4293      	cmp	r3, r2
    c8be:	d001      	beq.n	c8c4 <am_hal_pdm_enable+0x38>
    c8c0:	2302      	movs	r3, #2
    c8c2:	e00a      	b.n	c8da <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    c8c4:	4a09      	ldr	r2, [pc, #36]	; (c8ec <am_hal_pdm_enable+0x60>)
    c8c6:	6853      	ldr	r3, [r2, #4]
    c8c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c8cc:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    c8ce:	4a07      	ldr	r2, [pc, #28]	; (c8ec <am_hal_pdm_enable+0x60>)
    c8d0:	6853      	ldr	r3, [r2, #4]
    c8d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c8d6:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    c8d8:	2300      	movs	r3, #0
}
    c8da:	4618      	mov	r0, r3
    c8dc:	3714      	adds	r7, #20
    c8de:	46bd      	mov	sp, r7
    c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e4:	4770      	bx	lr
    c8e6:	bf00      	nop
    c8e8:	00f956e2 	.word	0x00f956e2
    c8ec:	50011000 	.word	0x50011000

0000c8f0 <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    c8f0:	b480      	push	{r7}
    c8f2:	b087      	sub	sp, #28
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	6078      	str	r0, [r7, #4]
    c8f8:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    c8fe:	68fb      	ldr	r3, [r7, #12]
    c900:	689b      	ldr	r3, [r3, #8]
    c902:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    c904:	687b      	ldr	r3, [r7, #4]
    c906:	2b00      	cmp	r3, #0
    c908:	d00d      	beq.n	c926 <am_hal_pdm_dma_start+0x36>
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	78db      	ldrb	r3, [r3, #3]
    c90e:	f003 0301 	and.w	r3, r3, #1
    c912:	b2db      	uxtb	r3, r3
    c914:	2b00      	cmp	r3, #0
    c916:	d006      	beq.n	c926 <am_hal_pdm_dma_start+0x36>
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	681b      	ldr	r3, [r3, #0]
    c91c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c920:	4a33      	ldr	r2, [pc, #204]	; (c9f0 <am_hal_pdm_dma_start+0x100>)
    c922:	4293      	cmp	r3, r2
    c924:	d001      	beq.n	c92a <am_hal_pdm_dma_start+0x3a>
    c926:	2302      	movs	r3, #2
    c928:	e05b      	b.n	c9e2 <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    c92a:	2300      	movs	r3, #0
    c92c:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    c92e:	2301      	movs	r3, #1
    c930:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c932:	2301      	movs	r3, #1
    c934:	613b      	str	r3, [r7, #16]
    c936:	e01b      	b.n	c970 <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c938:	683b      	ldr	r3, [r7, #0]
    c93a:	685b      	ldr	r3, [r3, #4]
    c93c:	693a      	ldr	r2, [r7, #16]
    c93e:	fbb3 f2f2 	udiv	r2, r3, r2
    c942:	6939      	ldr	r1, [r7, #16]
    c944:	fb01 f202 	mul.w	r2, r1, r2
    c948:	1a9b      	subs	r3, r3, r2
    c94a:	2b00      	cmp	r3, #0
    c94c:	d10d      	bne.n	c96a <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    c94e:	683b      	ldr	r3, [r7, #0]
    c950:	685a      	ldr	r2, [r3, #4]
    c952:	693b      	ldr	r3, [r7, #16]
    c954:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    c958:	2b1f      	cmp	r3, #31
    c95a:	d806      	bhi.n	c96a <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    c95c:	683b      	ldr	r3, [r7, #0]
    c95e:	685a      	ldr	r2, [r3, #4]
    c960:	693b      	ldr	r3, [r7, #16]
    c962:	fbb2 f3f3 	udiv	r3, r2, r3
    c966:	617b      	str	r3, [r7, #20]
            break;
    c968:	e007      	b.n	c97a <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    c96a:	693b      	ldr	r3, [r7, #16]
    c96c:	3301      	adds	r3, #1
    c96e:	613b      	str	r3, [r7, #16]
    c970:	683b      	ldr	r3, [r7, #0]
    c972:	685b      	ldr	r3, [r3, #4]
    c974:	693a      	ldr	r2, [r7, #16]
    c976:	429a      	cmp	r2, r3
    c978:	d3de      	bcc.n	c938 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    c97a:	697b      	ldr	r3, [r7, #20]
    c97c:	2b00      	cmp	r3, #0
    c97e:	d102      	bne.n	c986 <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    c980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c984:	e02d      	b.n	c9e2 <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    c986:	4a1b      	ldr	r2, [pc, #108]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c988:	697b      	ldr	r3, [r7, #20]
    c98a:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    c98c:	4b19      	ldr	r3, [pc, #100]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c98e:	2200      	movs	r2, #0
    c990:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    c994:	4a17      	ldr	r2, [pc, #92]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c996:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c99a:	f36f 2308 	bfc	r3, #8, #1
    c99e:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    c9a2:	4a14      	ldr	r2, [pc, #80]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c9a4:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9a8:	f36f 0382 	bfc	r3, #2, #1
    c9ac:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    c9b0:	4a10      	ldr	r2, [pc, #64]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c9b2:	683b      	ldr	r3, [r7, #0]
    c9b4:	685b      	ldr	r3, [r3, #4]
    c9b6:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    c9ba:	4a0e      	ldr	r2, [pc, #56]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c9bc:	683b      	ldr	r3, [r7, #0]
    c9be:	681b      	ldr	r3, [r3, #0]
    c9c0:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    c9c4:	4a0b      	ldr	r2, [pc, #44]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c9c6:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    c9ca:	f043 0301 	orr.w	r3, r3, #1
    c9ce:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    c9d2:	4a08      	ldr	r2, [pc, #32]	; (c9f4 <am_hal_pdm_dma_start+0x104>)
    c9d4:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    c9d8:	f043 0301 	orr.w	r3, r3, #1
    c9dc:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    c9e0:	2300      	movs	r3, #0
}
    c9e2:	4618      	mov	r0, r3
    c9e4:	371c      	adds	r7, #28
    c9e6:	46bd      	mov	sp, r7
    c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9ec:	4770      	bx	lr
    c9ee:	bf00      	nop
    c9f0:	00f956e2 	.word	0x00f956e2
    c9f4:	50011000 	.word	0x50011000

0000c9f8 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    c9f8:	b480      	push	{r7}
    c9fa:	b085      	sub	sp, #20
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca00:	687b      	ldr	r3, [r7, #4]
    ca02:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca04:	68fb      	ldr	r3, [r7, #12]
    ca06:	689b      	ldr	r3, [r3, #8]
    ca08:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca0a:	687b      	ldr	r3, [r7, #4]
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d00d      	beq.n	ca2c <am_hal_pdm_fifo_flush+0x34>
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	78db      	ldrb	r3, [r3, #3]
    ca14:	f003 0301 	and.w	r3, r3, #1
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d006      	beq.n	ca2c <am_hal_pdm_fifo_flush+0x34>
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	681b      	ldr	r3, [r3, #0]
    ca22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca26:	4a07      	ldr	r2, [pc, #28]	; (ca44 <am_hal_pdm_fifo_flush+0x4c>)
    ca28:	4293      	cmp	r3, r2
    ca2a:	d001      	beq.n	ca30 <am_hal_pdm_fifo_flush+0x38>
    ca2c:	2302      	movs	r3, #2
    ca2e:	e003      	b.n	ca38 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    ca30:	4b05      	ldr	r3, [pc, #20]	; (ca48 <am_hal_pdm_fifo_flush+0x50>)
    ca32:	2201      	movs	r2, #1
    ca34:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    ca36:	2300      	movs	r3, #0
}
    ca38:	4618      	mov	r0, r3
    ca3a:	3714      	adds	r7, #20
    ca3c:	46bd      	mov	sp, r7
    ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca42:	4770      	bx	lr
    ca44:	00f956e2 	.word	0x00f956e2
    ca48:	50011000 	.word	0x50011000

0000ca4c <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    ca4c:	b480      	push	{r7}
    ca4e:	b085      	sub	sp, #20
    ca50:	af00      	add	r7, sp, #0
    ca52:	6078      	str	r0, [r7, #4]
    ca54:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ca5a:	68fb      	ldr	r3, [r7, #12]
    ca5c:	689b      	ldr	r3, [r3, #8]
    ca5e:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	2b00      	cmp	r3, #0
    ca64:	d00d      	beq.n	ca82 <am_hal_pdm_interrupt_enable+0x36>
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	78db      	ldrb	r3, [r3, #3]
    ca6a:	f003 0301 	and.w	r3, r3, #1
    ca6e:	b2db      	uxtb	r3, r3
    ca70:	2b00      	cmp	r3, #0
    ca72:	d006      	beq.n	ca82 <am_hal_pdm_interrupt_enable+0x36>
    ca74:	687b      	ldr	r3, [r7, #4]
    ca76:	681b      	ldr	r3, [r3, #0]
    ca78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca7c:	4a09      	ldr	r2, [pc, #36]	; (caa4 <am_hal_pdm_interrupt_enable+0x58>)
    ca7e:	4293      	cmp	r3, r2
    ca80:	d001      	beq.n	ca86 <am_hal_pdm_interrupt_enable+0x3a>
    ca82:	2302      	movs	r3, #2
    ca84:	e008      	b.n	ca98 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    ca86:	4b08      	ldr	r3, [pc, #32]	; (caa8 <am_hal_pdm_interrupt_enable+0x5c>)
    ca88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ca8c:	4906      	ldr	r1, [pc, #24]	; (caa8 <am_hal_pdm_interrupt_enable+0x5c>)
    ca8e:	683b      	ldr	r3, [r7, #0]
    ca90:	4313      	orrs	r3, r2
    ca92:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    ca96:	2300      	movs	r3, #0
}
    ca98:	4618      	mov	r0, r3
    ca9a:	3714      	adds	r7, #20
    ca9c:	46bd      	mov	sp, r7
    ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    caa2:	4770      	bx	lr
    caa4:	00f956e2 	.word	0x00f956e2
    caa8:	50011000 	.word	0x50011000

0000caac <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    caac:	b480      	push	{r7}
    caae:	b085      	sub	sp, #20
    cab0:	af00      	add	r7, sp, #0
    cab2:	6078      	str	r0, [r7, #4]
    cab4:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    caba:	68fb      	ldr	r3, [r7, #12]
    cabc:	689b      	ldr	r3, [r3, #8]
    cabe:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cac0:	687b      	ldr	r3, [r7, #4]
    cac2:	2b00      	cmp	r3, #0
    cac4:	d00d      	beq.n	cae2 <am_hal_pdm_interrupt_clear+0x36>
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	78db      	ldrb	r3, [r3, #3]
    caca:	f003 0301 	and.w	r3, r3, #1
    cace:	b2db      	uxtb	r3, r3
    cad0:	2b00      	cmp	r3, #0
    cad2:	d006      	beq.n	cae2 <am_hal_pdm_interrupt_clear+0x36>
    cad4:	687b      	ldr	r3, [r7, #4]
    cad6:	681b      	ldr	r3, [r3, #0]
    cad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cadc:	4a07      	ldr	r2, [pc, #28]	; (cafc <am_hal_pdm_interrupt_clear+0x50>)
    cade:	4293      	cmp	r3, r2
    cae0:	d001      	beq.n	cae6 <am_hal_pdm_interrupt_clear+0x3a>
    cae2:	2302      	movs	r3, #2
    cae4:	e004      	b.n	caf0 <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    cae6:	4a06      	ldr	r2, [pc, #24]	; (cb00 <am_hal_pdm_interrupt_clear+0x54>)
    cae8:	683b      	ldr	r3, [r7, #0]
    caea:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    caee:	2300      	movs	r3, #0
}
    caf0:	4618      	mov	r0, r3
    caf2:	3714      	adds	r7, #20
    caf4:	46bd      	mov	sp, r7
    caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cafa:	4770      	bx	lr
    cafc:	00f956e2 	.word	0x00f956e2
    cb00:	50011000 	.word	0x50011000

0000cb04 <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    cb04:	b480      	push	{r7}
    cb06:	b087      	sub	sp, #28
    cb08:	af00      	add	r7, sp, #0
    cb0a:	60f8      	str	r0, [r7, #12]
    cb0c:	60b9      	str	r1, [r7, #8]
    cb0e:	4613      	mov	r3, r2
    cb10:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb12:	68fb      	ldr	r3, [r7, #12]
    cb14:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    cb16:	697b      	ldr	r3, [r7, #20]
    cb18:	689b      	ldr	r3, [r3, #8]
    cb1a:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb1c:	68fb      	ldr	r3, [r7, #12]
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d00d      	beq.n	cb3e <am_hal_pdm_interrupt_status_get+0x3a>
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	78db      	ldrb	r3, [r3, #3]
    cb26:	f003 0301 	and.w	r3, r3, #1
    cb2a:	b2db      	uxtb	r3, r3
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d006      	beq.n	cb3e <am_hal_pdm_interrupt_status_get+0x3a>
    cb30:	68fb      	ldr	r3, [r7, #12]
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb38:	4a10      	ldr	r2, [pc, #64]	; (cb7c <am_hal_pdm_interrupt_status_get+0x78>)
    cb3a:	4293      	cmp	r3, r2
    cb3c:	d001      	beq.n	cb42 <am_hal_pdm_interrupt_status_get+0x3e>
    cb3e:	2302      	movs	r3, #2
    cb40:	e016      	b.n	cb70 <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    cb42:	79fb      	ldrb	r3, [r7, #7]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d00d      	beq.n	cb64 <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb48:	4b0d      	ldr	r3, [pc, #52]	; (cb80 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb4e:	68bb      	ldr	r3, [r7, #8]
    cb50:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    cb52:	4b0b      	ldr	r3, [pc, #44]	; (cb80 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cb58:	68bb      	ldr	r3, [r7, #8]
    cb5a:	681b      	ldr	r3, [r3, #0]
    cb5c:	401a      	ands	r2, r3
    cb5e:	68bb      	ldr	r3, [r7, #8]
    cb60:	601a      	str	r2, [r3, #0]
    cb62:	e004      	b.n	cb6e <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cb64:	4b06      	ldr	r3, [pc, #24]	; (cb80 <am_hal_pdm_interrupt_status_get+0x7c>)
    cb66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb6a:	68bb      	ldr	r3, [r7, #8]
    cb6c:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    cb6e:	2300      	movs	r3, #0
}
    cb70:	4618      	mov	r0, r3
    cb72:	371c      	adds	r7, #28
    cb74:	46bd      	mov	sp, r7
    cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb7a:	4770      	bx	lr
    cb7c:	00f956e2 	.word	0x00f956e2
    cb80:	50011000 	.word	0x50011000

0000cb84 <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    cb84:	b480      	push	{r7}
    cb86:	b085      	sub	sp, #20
    cb88:	af00      	add	r7, sp, #0
    cb8a:	6078      	str	r0, [r7, #4]
    cb8c:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    cb8e:	687b      	ldr	r3, [r7, #4]
    cb90:	681b      	ldr	r3, [r3, #0]
    cb92:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    cb94:	683b      	ldr	r3, [r7, #0]
    cb96:	681b      	ldr	r3, [r3, #0]
    cb98:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    cb9a:	68fa      	ldr	r2, [r7, #12]
    cb9c:	68bb      	ldr	r3, [r7, #8]
    cb9e:	429a      	cmp	r2, r3
    cba0:	bf0c      	ite	eq
    cba2:	2301      	moveq	r3, #1
    cba4:	2300      	movne	r3, #0
    cba6:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    cba8:	4618      	mov	r0, r3
    cbaa:	3714      	adds	r7, #20
    cbac:	46bd      	mov	sp, r7
    cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb2:	4770      	bx	lr

0000cbb4 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b092      	sub	sp, #72	; 0x48
    cbb8:	af00      	add	r7, sp, #0
    cbba:	6078      	str	r0, [r7, #4]
    cbbc:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    cbbe:	2300      	movs	r3, #0
    cbc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	2b31      	cmp	r3, #49	; 0x31
    cbc8:	d901      	bls.n	cbce <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cbca:	2306      	movs	r3, #6
    cbcc:	e1c1      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    cbce:	2300      	movs	r3, #0
    cbd0:	643b      	str	r3, [r7, #64]	; 0x40
    cbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cbd4:	647b      	str	r3, [r7, #68]	; 0x44
    cbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    cbda:	783b      	ldrb	r3, [r7, #0]
    cbdc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbe0:	b2db      	uxtb	r3, r3
    cbe2:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    cbe4:	783b      	ldrb	r3, [r7, #0]
    cbe6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cbea:	b2db      	uxtb	r3, r3
    cbec:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cbf0:	00db      	lsls	r3, r3, #3
    cbf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cbf4:	4313      	orrs	r3, r2
    cbf6:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    cbf8:	783b      	ldrb	r3, [r7, #0]
    cbfa:	f023 031f 	bic.w	r3, r3, #31
    cbfe:	b2db      	uxtb	r3, r3
    cc00:	2b00      	cmp	r3, #0
    cc02:	d03e      	beq.n	cc82 <am_hal_gpio_pinconfig+0xce>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    cc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc06:	f043 0301 	orr.w	r3, r3, #1
    cc0a:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc0c:	783b      	ldrb	r3, [r7, #0]
    cc0e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc12:	b2db      	uxtb	r3, r3
    cc14:	2b01      	cmp	r3, #1
    cc16:	d919      	bls.n	cc4c <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    cc18:	783b      	ldrb	r3, [r7, #0]
    cc1a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc1e:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    cc20:	2b05      	cmp	r3, #5
    cc22:	d813      	bhi.n	cc4c <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    cc24:	783b      	ldrb	r3, [r7, #0]
    cc26:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc2a:	b2db      	uxtb	r3, r3
    cc2c:	3b02      	subs	r3, #2
    cc2e:	019b      	lsls	r3, r3, #6
    cc30:	461a      	mov	r2, r3
    cc32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc34:	4313      	orrs	r3, r2
    cc36:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    cc38:	4a7b      	ldr	r2, [pc, #492]	; (ce28 <am_hal_gpio_pinconfig+0x274>)
    cc3a:	687b      	ldr	r3, [r7, #4]
    cc3c:	4413      	add	r3, r2
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	f003 0301 	and.w	r3, r3, #1
    cc44:	2b00      	cmp	r3, #0
    cc46:	d11c      	bne.n	cc82 <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc48:	4b78      	ldr	r3, [pc, #480]	; (ce2c <am_hal_gpio_pinconfig+0x278>)
    cc4a:	e182      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    cc4c:	783b      	ldrb	r3, [r7, #0]
    cc4e:	f023 031f 	bic.w	r3, r3, #31
    cc52:	b2db      	uxtb	r3, r3
    cc54:	2bc0      	cmp	r3, #192	; 0xc0
    cc56:	d104      	bne.n	cc62 <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	2b14      	cmp	r3, #20
    cc5c:	d011      	beq.n	cc82 <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    cc5e:	4b74      	ldr	r3, [pc, #464]	; (ce30 <am_hal_gpio_pinconfig+0x27c>)
    cc60:	e177      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    cc62:	783b      	ldrb	r3, [r7, #0]
    cc64:	f023 031f 	bic.w	r3, r3, #31
    cc68:	b2db      	uxtb	r3, r3
    cc6a:	2b20      	cmp	r3, #32
    cc6c:	d109      	bne.n	cc82 <am_hal_gpio_pinconfig+0xce>
        {
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    cc6e:	4a6e      	ldr	r2, [pc, #440]	; (ce28 <am_hal_gpio_pinconfig+0x274>)
    cc70:	687b      	ldr	r3, [r7, #4]
    cc72:	4413      	add	r3, r2
    cc74:	781b      	ldrb	r3, [r3, #0]
    cc76:	f003 0309 	and.w	r3, r3, #9
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d001      	beq.n	cc82 <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    cc7e:	4b6b      	ldr	r3, [pc, #428]	; (ce2c <am_hal_gpio_pinconfig+0x278>)
    cc80:	e167      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc84:	2b00      	cmp	r3, #0
    cc86:	d021      	beq.n	cccc <am_hal_gpio_pinconfig+0x118>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc8a:	2b01      	cmp	r3, #1
    cc8c:	d10c      	bne.n	cca8 <am_hal_gpio_pinconfig+0xf4>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    cc8e:	4a66      	ldr	r2, [pc, #408]	; (ce28 <am_hal_gpio_pinconfig+0x274>)
    cc90:	687b      	ldr	r3, [r7, #4]
    cc92:	4413      	add	r3, r2
    cc94:	781b      	ldrb	r3, [r3, #0]
    cc96:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d004      	beq.n	cca8 <am_hal_gpio_pinconfig+0xf4>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    cc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cca4:	647b      	str	r3, [r7, #68]	; 0x44
    cca6:	e011      	b.n	cccc <am_hal_gpio_pinconfig+0x118>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccaa:	2b02      	cmp	r3, #2
    ccac:	d10c      	bne.n	ccc8 <am_hal_gpio_pinconfig+0x114>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    ccae:	4a5e      	ldr	r2, [pc, #376]	; (ce28 <am_hal_gpio_pinconfig+0x274>)
    ccb0:	687b      	ldr	r3, [r7, #4]
    ccb2:	4413      	add	r3, r2
    ccb4:	781b      	ldrb	r3, [r3, #0]
    ccb6:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d004      	beq.n	ccc8 <am_hal_gpio_pinconfig+0x114>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    ccbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ccc4:	647b      	str	r3, [r7, #68]	; 0x44
    ccc6:	e001      	b.n	cccc <am_hal_gpio_pinconfig+0x118>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    ccc8:	4b5a      	ldr	r3, [pc, #360]	; (ce34 <am_hal_gpio_pinconfig+0x280>)
    ccca:	e142      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    cccc:	4a5a      	ldr	r2, [pc, #360]	; (ce38 <am_hal_gpio_pinconfig+0x284>)
    ccce:	687b      	ldr	r3, [r7, #4]
    ccd0:	4413      	add	r3, r2
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	461a      	mov	r2, r3
    ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccd8:	fa42 f303 	asr.w	r3, r2, r3
    ccdc:	005b      	lsls	r3, r3, #1
    ccde:	f003 0302 	and.w	r3, r3, #2
    cce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cce4:	4313      	orrs	r3, r2
    cce6:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    cce8:	4a54      	ldr	r2, [pc, #336]	; (ce3c <am_hal_gpio_pinconfig+0x288>)
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	4413      	add	r3, r2
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	461a      	mov	r2, r3
    ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccf4:	4293      	cmp	r3, r2
    ccf6:	d13d      	bne.n	cd74 <am_hal_gpio_pinconfig+0x1c0>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    ccf8:	78bb      	ldrb	r3, [r7, #2]
    ccfa:	f003 0307 	and.w	r3, r3, #7
    ccfe:	b2db      	uxtb	r3, r3
    cd00:	2b07      	cmp	r3, #7
    cd02:	d101      	bne.n	cd08 <am_hal_gpio_pinconfig+0x154>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    cd04:	4b4e      	ldr	r3, [pc, #312]	; (ce40 <am_hal_gpio_pinconfig+0x28c>)
    cd06:	e124      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    cd08:	78bb      	ldrb	r3, [r7, #2]
    cd0a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cd0e:	b2db      	uxtb	r3, r3
    cd10:	011b      	lsls	r3, r3, #4
    cd12:	b25a      	sxtb	r2, r3
    cd14:	78bb      	ldrb	r3, [r7, #2]
    cd16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    cd1a:	b2db      	uxtb	r3, r3
    cd1c:	b25b      	sxtb	r3, r3
    cd1e:	4313      	orrs	r3, r2
    cd20:	b25b      	sxtb	r3, r3
    cd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd26:	2300      	movs	r3, #0
    cd28:	637b      	str	r3, [r7, #52]	; 0x34
    cd2a:	e00d      	b.n	cd48 <am_hal_gpio_pinconfig+0x194>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    cd2c:	4a45      	ldr	r2, [pc, #276]	; (ce44 <am_hal_gpio_pinconfig+0x290>)
    cd2e:	687b      	ldr	r3, [r7, #4]
    cd30:	009b      	lsls	r3, r3, #2
    cd32:	441a      	add	r2, r3
    cd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd36:	4413      	add	r3, r2
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cd3e:	429a      	cmp	r2, r3
    cd40:	d006      	beq.n	cd50 <am_hal_gpio_pinconfig+0x19c>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd44:	3301      	adds	r3, #1
    cd46:	637b      	str	r3, [r7, #52]	; 0x34
    cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd4a:	2b03      	cmp	r3, #3
    cd4c:	d9ee      	bls.n	cd2c <am_hal_gpio_pinconfig+0x178>
    cd4e:	e000      	b.n	cd52 <am_hal_gpio_pinconfig+0x19e>
            {
                break;
    cd50:	bf00      	nop
            }
        }

#ifdef AM_HAL_ENABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    cd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd54:	2b03      	cmp	r3, #3
    cd56:	d901      	bls.n	cd5c <am_hal_gpio_pinconfig+0x1a8>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    cd58:	4b3b      	ldr	r3, [pc, #236]	; (ce48 <am_hal_gpio_pinconfig+0x294>)
    cd5a:	e0fa      	b.n	cf52 <am_hal_gpio_pinconfig+0x39e>
        }
#endif // AM_HAL_ENABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd5e:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    cd60:	78ba      	ldrb	r2, [r7, #2]
    cd62:	f3c2 1240 	ubfx	r2, r2, #5, #1
    cd66:	b2d2      	uxtb	r2, r2
    cd68:	00d2      	lsls	r2, r2, #3
    cd6a:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    cd6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cd6e:	4313      	orrs	r3, r2
    cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
    cd72:	e044      	b.n	cdfe <am_hal_gpio_pinconfig+0x24a>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    cd74:	787b      	ldrb	r3, [r7, #1]
    cd76:	f3c3 1300 	ubfx	r3, r3, #4, #1
    cd7a:	b2db      	uxtb	r3, r3
    cd7c:	005b      	lsls	r3, r3, #1
    cd7e:	461a      	mov	r2, r3
    cd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd82:	4313      	orrs	r3, r2
    cd84:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cd86:	787b      	ldrb	r3, [r7, #1]
    cd88:	f3c3 0381 	ubfx	r3, r3, #2, #2
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cd90:	787b      	ldrb	r3, [r7, #1]
    cd92:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cd96:	b2db      	uxtb	r3, r3
    cd98:	00db      	lsls	r3, r3, #3
    cd9a:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cd9e:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    cda0:	787b      	ldrb	r3, [r7, #1]
    cda2:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cda6:	b2db      	uxtb	r3, r3
    cda8:	105b      	asrs	r3, r3, #1
    cdaa:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    cdae:	4313      	orrs	r3, r2
    cdb0:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdb4:	4313      	orrs	r3, r2
    cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cdb8:	787b      	ldrb	r3, [r7, #1]
    cdba:	f003 030c 	and.w	r3, r3, #12
    cdbe:	b2db      	uxtb	r3, r3
    cdc0:	2b04      	cmp	r3, #4
    cdc2:	d007      	beq.n	cdd4 <am_hal_gpio_pinconfig+0x220>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    cdc4:	463b      	mov	r3, r7
    cdc6:	4921      	ldr	r1, [pc, #132]	; (ce4c <am_hal_gpio_pinconfig+0x298>)
    cdc8:	4618      	mov	r0, r3
    cdca:	f7ff fedb 	bl	cb84 <pincfg_equ>
    cdce:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d002      	beq.n	cdda <am_hal_gpio_pinconfig+0x226>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    cdd4:	2301      	movs	r3, #1
    cdd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    cdda:	787b      	ldrb	r3, [r7, #1]
    cddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
    cde0:	b2db      	uxtb	r3, r3
    cde2:	2b00      	cmp	r3, #0
    cde4:	d10b      	bne.n	cdfe <am_hal_gpio_pinconfig+0x24a>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    cde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cde8:	f023 0301 	bic.w	r3, r3, #1
    cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    cdee:	787b      	ldrb	r3, [r7, #1]
    cdf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cdf4:	b2db      	uxtb	r3, r3
    cdf6:	461a      	mov	r2, r3
    cdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdfa:	4313      	orrs	r3, r2
    cdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    cdfe:	787b      	ldrb	r3, [r7, #1]
    ce00:	f3c3 0301 	ubfx	r3, r3, #0, #2
    ce04:	b2db      	uxtb	r3, r3
    ce06:	2b02      	cmp	r3, #2
    ce08:	d009      	beq.n	ce1e <am_hal_gpio_pinconfig+0x26a>
    ce0a:	2b03      	cmp	r3, #3
    ce0c:	d020      	beq.n	ce50 <am_hal_gpio_pinconfig+0x29c>
    ce0e:	2b01      	cmp	r3, #1
    ce10:	d000      	beq.n	ce14 <am_hal_gpio_pinconfig+0x260>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    ce12:	e026      	b.n	ce62 <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce16:	f043 0304 	orr.w	r3, r3, #4
    ce1a:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    ce1c:	e021      	b.n	ce62 <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    ce1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce20:	f043 0301 	orr.w	r3, r3, #1
    ce24:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce26:	e01c      	b.n	ce62 <am_hal_gpio_pinconfig+0x2ae>
    ce28:	00010c88 	.word	0x00010c88
    ce2c:	08000100 	.word	0x08000100
    ce30:	08000101 	.word	0x08000101
    ce34:	08000102 	.word	0x08000102
    ce38:	00010c54 	.word	0x00010c54
    ce3c:	00010cbc 	.word	0x00010cbc
    ce40:	08000103 	.word	0x08000103
    ce44:	00010cf0 	.word	0x00010cf0
    ce48:	08000104 	.word	0x08000104
    ce4c:	00010c48 	.word	0x00010c48
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ce50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce52:	f043 0304 	orr.w	r3, r3, #4
    ce56:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    ce58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce5a:	f043 0301 	orr.w	r3, r3, #1
    ce5e:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    ce60:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    ce62:	687b      	ldr	r3, [r7, #4]
    ce64:	085b      	lsrs	r3, r3, #1
    ce66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ce6a:	f023 0303 	bic.w	r3, r3, #3
    ce6e:	4a3b      	ldr	r2, [pc, #236]	; (cf5c <am_hal_gpio_pinconfig+0x3a8>)
    ce70:	441a      	add	r2, r3
    ce72:	627a      	str	r2, [r7, #36]	; 0x24
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    ce74:	687b      	ldr	r3, [r7, #4]
    ce76:	f023 0303 	bic.w	r3, r3, #3
    ce7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ce7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ce82:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    ce84:	687b      	ldr	r3, [r7, #4]
    ce86:	f023 0203 	bic.w	r2, r3, #3
    ce8a:	4b35      	ldr	r3, [pc, #212]	; (cf60 <am_hal_gpio_pinconfig+0x3ac>)
    ce8c:	4413      	add	r3, r2
    ce8e:	61fb      	str	r3, [r7, #28]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    ce90:	687b      	ldr	r3, [r7, #4]
    ce92:	009b      	lsls	r3, r3, #2
    ce94:	f003 031c 	and.w	r3, r3, #28
    ce98:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	00db      	lsls	r3, r3, #3
    ce9e:	f003 0318 	and.w	r3, r3, #24
    cea2:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    cea4:	220f      	movs	r2, #15
    cea6:	69bb      	ldr	r3, [r7, #24]
    cea8:	fa02 f303 	lsl.w	r3, r2, r3
    ceac:	43db      	mvns	r3, r3
    ceae:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    ceb0:	22ff      	movs	r2, #255	; 0xff
    ceb2:	697b      	ldr	r3, [r7, #20]
    ceb4:	fa02 f303 	lsl.w	r3, r2, r3
    ceb8:	43db      	mvns	r3, r3
    ceba:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    cebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cebe:	697b      	ldr	r3, [r7, #20]
    cec0:	fa02 f303 	lsl.w	r3, r2, r3
    cec4:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    cec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cec8:	697b      	ldr	r3, [r7, #20]
    ceca:	fa02 f303 	lsl.w	r3, r2, r3
    cece:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    ced0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ced2:	69bb      	ldr	r3, [r7, #24]
    ced4:	fa02 f303 	lsl.w	r3, r2, r3
    ced8:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    ceda:	f002 fdcb 	bl	fa74 <am_hal_interrupt_master_disable>
    cede:	4603      	mov	r3, r0
    cee0:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    cee2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cee6:	2b00      	cmp	r3, #0
    cee8:	d00d      	beq.n	cf06 <am_hal_gpio_pinconfig+0x352>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    ceea:	687b      	ldr	r3, [r7, #4]
    ceec:	f003 021f 	and.w	r2, r3, #31
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	095b      	lsrs	r3, r3, #5
    cef4:	f003 0301 	and.w	r3, r3, #1
    cef8:	0099      	lsls	r1, r3, #2
    cefa:	4b1a      	ldr	r3, [pc, #104]	; (cf64 <am_hal_gpio_pinconfig+0x3b0>)
    cefc:	440b      	add	r3, r1
    cefe:	2101      	movs	r1, #1
    cf00:	fa01 f202 	lsl.w	r2, r1, r2
    cf04:	601a      	str	r2, [r3, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    cf06:	4b18      	ldr	r3, [pc, #96]	; (cf68 <am_hal_gpio_pinconfig+0x3b4>)
    cf08:	2273      	movs	r2, #115	; 0x73
    cf0a:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    cf0c:	6a3b      	ldr	r3, [r7, #32]
    cf0e:	681a      	ldr	r2, [r3, #0]
    cf10:	68fb      	ldr	r3, [r7, #12]
    cf12:	ea02 0103 	and.w	r1, r2, r3
    cf16:	6a3b      	ldr	r3, [r7, #32]
    cf18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf1a:	430a      	orrs	r2, r1
    cf1c:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf20:	681a      	ldr	r2, [r3, #0]
    cf22:	693b      	ldr	r3, [r7, #16]
    cf24:	ea02 0103 	and.w	r1, r2, r3
    cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf2c:	430a      	orrs	r2, r1
    cf2e:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    cf30:	69fb      	ldr	r3, [r7, #28]
    cf32:	681a      	ldr	r2, [r3, #0]
    cf34:	68fb      	ldr	r3, [r7, #12]
    cf36:	ea02 0103 	and.w	r1, r2, r3
    cf3a:	69fb      	ldr	r3, [r7, #28]
    cf3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cf3e:	430a      	orrs	r2, r1
    cf40:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    cf42:	4b09      	ldr	r3, [pc, #36]	; (cf68 <am_hal_gpio_pinconfig+0x3b4>)
    cf44:	2200      	movs	r2, #0
    cf46:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    cf48:	68bb      	ldr	r3, [r7, #8]
    cf4a:	4618      	mov	r0, r3
    cf4c:	f002 fd96 	bl	fa7c <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    cf50:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    cf52:	4618      	mov	r0, r3
    cf54:	3748      	adds	r7, #72	; 0x48
    cf56:	46bd      	mov	sp, r7
    cf58:	bd80      	pop	{r7, pc}
    cf5a:	bf00      	nop
    cf5c:	40010040 	.word	0x40010040
    cf60:	400100e0 	.word	0x400100e0
    cf64:	400100b4 	.word	0x400100b4
    cf68:	40010000 	.word	0x40010000

0000cf6c <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    cf6c:	b480      	push	{r7}
    cf6e:	b089      	sub	sp, #36	; 0x24
    cf70:	af00      	add	r7, sp, #0
    cf72:	60f8      	str	r0, [r7, #12]
    cf74:	460b      	mov	r3, r1
    cf76:	607a      	str	r2, [r7, #4]
    cf78:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    cf7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf7e:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	2b00      	cmp	r3, #0
    cf84:	d101      	bne.n	cf8a <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cf86:	2306      	movs	r3, #6
    cf88:	e047      	b.n	d01a <am_hal_gpio_state_read+0xae>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	2b31      	cmp	r3, #49	; 0x31
    cf8e:	d904      	bls.n	cf9a <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	69fa      	ldr	r2, [r7, #28]
    cf94:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    cf96:	2305      	movs	r3, #5
    cf98:	e03f      	b.n	d01a <am_hal_gpio_state_read+0xae>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    cf9a:	68fb      	ldr	r3, [r7, #12]
    cf9c:	095b      	lsrs	r3, r3, #5
    cf9e:	f003 0301 	and.w	r3, r3, #1
    cfa2:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    cfa4:	68fb      	ldr	r3, [r7, #12]
    cfa6:	f003 031f 	and.w	r3, r3, #31
    cfaa:	617b      	str	r3, [r7, #20]
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    cfac:	7afb      	ldrb	r3, [r7, #11]
    cfae:	2b01      	cmp	r3, #1
    cfb0:	d011      	beq.n	cfd6 <am_hal_gpio_state_read+0x6a>
    cfb2:	2b02      	cmp	r3, #2
    cfb4:	d01d      	beq.n	cff2 <am_hal_gpio_state_read+0x86>
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d129      	bne.n	d00e <am_hal_gpio_state_read+0xa2>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    cfba:	69bb      	ldr	r3, [r7, #24]
    cfbc:	009a      	lsls	r2, r3, #2
    cfbe:	4b1a      	ldr	r3, [pc, #104]	; (d028 <am_hal_gpio_state_read+0xbc>)
    cfc0:	4413      	add	r3, r2
    cfc2:	681b      	ldr	r3, [r3, #0]
    cfc4:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfc6:	69fa      	ldr	r2, [r7, #28]
    cfc8:	697b      	ldr	r3, [r7, #20]
    cfca:	fa22 f303 	lsr.w	r3, r2, r3
    cfce:	f003 0301 	and.w	r3, r3, #1
    cfd2:	61fb      	str	r3, [r7, #28]
            break;
    cfd4:	e01d      	b.n	d012 <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    cfd6:	69bb      	ldr	r3, [r7, #24]
    cfd8:	009a      	lsls	r2, r3, #2
    cfda:	4b14      	ldr	r3, [pc, #80]	; (d02c <am_hal_gpio_state_read+0xc0>)
    cfdc:	4413      	add	r3, r2
    cfde:	681b      	ldr	r3, [r3, #0]
    cfe0:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cfe2:	69fa      	ldr	r2, [r7, #28]
    cfe4:	697b      	ldr	r3, [r7, #20]
    cfe6:	fa22 f303 	lsr.w	r3, r2, r3
    cfea:	f003 0301 	and.w	r3, r3, #1
    cfee:	61fb      	str	r3, [r7, #28]
            break;
    cff0:	e00f      	b.n	d012 <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    cff2:	69bb      	ldr	r3, [r7, #24]
    cff4:	009a      	lsls	r2, r3, #2
    cff6:	4b0e      	ldr	r3, [pc, #56]	; (d030 <am_hal_gpio_state_read+0xc4>)
    cff8:	4413      	add	r3, r2
    cffa:	681b      	ldr	r3, [r3, #0]
    cffc:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    cffe:	69fa      	ldr	r2, [r7, #28]
    d000:	697b      	ldr	r3, [r7, #20]
    d002:	fa22 f303 	lsr.w	r3, r2, r3
    d006:	f003 0301 	and.w	r3, r3, #1
    d00a:	61fb      	str	r3, [r7, #28]
            break;
    d00c:	e001      	b.n	d012 <am_hal_gpio_state_read+0xa6>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d00e:	2306      	movs	r3, #6
    d010:	e003      	b.n	d01a <am_hal_gpio_state_read+0xae>
    }

    *pui32ReadState = ui32ReadValue;
    d012:	687b      	ldr	r3, [r7, #4]
    d014:	69fa      	ldr	r2, [r7, #28]
    d016:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d018:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d01a:	4618      	mov	r0, r3
    d01c:	3724      	adds	r7, #36	; 0x24
    d01e:	46bd      	mov	sp, r7
    d020:	f85d 7b04 	ldr.w	r7, [sp], #4
    d024:	4770      	bx	lr
    d026:	bf00      	nop
    d028:	40010080 	.word	0x40010080
    d02c:	40010088 	.word	0x40010088
    d030:	400100a0 	.word	0x400100a0

0000d034 <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d034:	b580      	push	{r7, lr}
    d036:	b086      	sub	sp, #24
    d038:	af00      	add	r7, sp, #0
    d03a:	6078      	str	r0, [r7, #4]
    d03c:	460b      	mov	r3, r1
    d03e:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d040:	2300      	movs	r3, #0
    d042:	617b      	str	r3, [r7, #20]

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d044:	687b      	ldr	r3, [r7, #4]
    d046:	2b31      	cmp	r3, #49	; 0x31
    d048:	d901      	bls.n	d04e <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d04a:	2305      	movs	r3, #5
    d04c:	e068      	b.n	d120 <am_hal_gpio_state_write+0xec>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d04e:	78fb      	ldrb	r3, [r7, #3]
    d050:	2b05      	cmp	r3, #5
    d052:	d901      	bls.n	d058 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d054:	2306      	movs	r3, #6
    d056:	e063      	b.n	d120 <am_hal_gpio_state_write+0xec>
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d058:	687b      	ldr	r3, [r7, #4]
    d05a:	f003 031f 	and.w	r3, r3, #31
    d05e:	2201      	movs	r2, #1
    d060:	fa02 f303 	lsl.w	r3, r2, r3
    d064:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d066:	687b      	ldr	r3, [r7, #4]
    d068:	08db      	lsrs	r3, r3, #3
    d06a:	f003 0304 	and.w	r3, r3, #4
    d06e:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d070:	f002 fd00 	bl	fa74 <am_hal_interrupt_master_disable>
    d074:	4603      	mov	r3, r0
    d076:	60bb      	str	r3, [r7, #8]

    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    d078:	68fb      	ldr	r3, [r7, #12]
    d07a:	089b      	lsrs	r3, r3, #2
    d07c:	60fb      	str	r3, [r7, #12]
    switch ( eWriteType )
    d07e:	78fb      	ldrb	r3, [r7, #3]
    d080:	2b05      	cmp	r3, #5
    d082:	d845      	bhi.n	d110 <am_hal_gpio_state_write+0xdc>
    d084:	a201      	add	r2, pc, #4	; (adr r2, d08c <am_hal_gpio_state_write+0x58>)
    d086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d08a:	bf00      	nop
    d08c:	0000d0b3 	.word	0x0000d0b3
    d090:	0000d0a5 	.word	0x0000d0a5
    d094:	0000d0c1 	.word	0x0000d0c1
    d098:	0000d0e9 	.word	0x0000d0e9
    d09c:	0000d0db 	.word	0x0000d0db
    d0a0:	0000d0f7 	.word	0x0000d0f7
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    d0a4:	68fb      	ldr	r3, [r7, #12]
    d0a6:	009a      	lsls	r2, r3, #2
    d0a8:	4b1f      	ldr	r3, [pc, #124]	; (d128 <am_hal_gpio_state_write+0xf4>)
    d0aa:	4413      	add	r3, r2
    d0ac:	693a      	ldr	r2, [r7, #16]
    d0ae:	601a      	str	r2, [r3, #0]
            break;
    d0b0:	e031      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    d0b2:	68fb      	ldr	r3, [r7, #12]
    d0b4:	009a      	lsls	r2, r3, #2
    d0b6:	4b1d      	ldr	r3, [pc, #116]	; (d12c <am_hal_gpio_state_write+0xf8>)
    d0b8:	4413      	add	r3, r2
    d0ba:	693a      	ldr	r2, [r7, #16]
    d0bc:	601a      	str	r2, [r3, #0]
            break;
    d0be:	e02a      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    d0c0:	68fb      	ldr	r3, [r7, #12]
    d0c2:	009a      	lsls	r2, r3, #2
    d0c4:	4b1a      	ldr	r3, [pc, #104]	; (d130 <am_hal_gpio_state_write+0xfc>)
    d0c6:	4413      	add	r3, r2
    d0c8:	6819      	ldr	r1, [r3, #0]
    d0ca:	68fb      	ldr	r3, [r7, #12]
    d0cc:	009a      	lsls	r2, r3, #2
    d0ce:	4b18      	ldr	r3, [pc, #96]	; (d130 <am_hal_gpio_state_write+0xfc>)
    d0d0:	4413      	add	r3, r2
    d0d2:	693a      	ldr	r2, [r7, #16]
    d0d4:	404a      	eors	r2, r1
    d0d6:	601a      	str	r2, [r3, #0]
            break;
    d0d8:	e01d      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    d0da:	68fb      	ldr	r3, [r7, #12]
    d0dc:	009a      	lsls	r2, r3, #2
    d0de:	4b15      	ldr	r3, [pc, #84]	; (d134 <am_hal_gpio_state_write+0x100>)
    d0e0:	4413      	add	r3, r2
    d0e2:	693a      	ldr	r2, [r7, #16]
    d0e4:	601a      	str	r2, [r3, #0]
            break;
    d0e6:	e016      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    d0e8:	68fb      	ldr	r3, [r7, #12]
    d0ea:	009a      	lsls	r2, r3, #2
    d0ec:	4b12      	ldr	r3, [pc, #72]	; (d138 <am_hal_gpio_state_write+0x104>)
    d0ee:	4413      	add	r3, r2
    d0f0:	693a      	ldr	r2, [r7, #16]
    d0f2:	601a      	str	r2, [r3, #0]
            break;
    d0f4:	e00f      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    d0f6:	68fb      	ldr	r3, [r7, #12]
    d0f8:	009a      	lsls	r2, r3, #2
    d0fa:	4b0f      	ldr	r3, [pc, #60]	; (d138 <am_hal_gpio_state_write+0x104>)
    d0fc:	4413      	add	r3, r2
    d0fe:	6819      	ldr	r1, [r3, #0]
    d100:	68fb      	ldr	r3, [r7, #12]
    d102:	009a      	lsls	r2, r3, #2
    d104:	4b0c      	ldr	r3, [pc, #48]	; (d138 <am_hal_gpio_state_write+0x104>)
    d106:	4413      	add	r3, r2
    d108:	693a      	ldr	r2, [r7, #16]
    d10a:	404a      	eors	r2, r1
    d10c:	601a      	str	r2, [r3, #0]
            break;
    d10e:	e002      	b.n	d116 <am_hal_gpio_state_write+0xe2>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d110:	2306      	movs	r3, #6
    d112:	617b      	str	r3, [r7, #20]
            break;
    d114:	bf00      	nop
    }

    AM_CRITICAL_END;
    d116:	68bb      	ldr	r3, [r7, #8]
    d118:	4618      	mov	r0, r3
    d11a:	f002 fcaf 	bl	fa7c <am_hal_interrupt_master_set>

    return ui32Return;
    d11e:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d120:	4618      	mov	r0, r3
    d122:	3718      	adds	r7, #24
    d124:	46bd      	mov	sp, r7
    d126:	bd80      	pop	{r7, pc}
    d128:	40010090 	.word	0x40010090
    d12c:	40010098 	.word	0x40010098
    d130:	40010088 	.word	0x40010088
    d134:	400100a8 	.word	0x400100a8
    d138:	400100b4 	.word	0x400100b4

0000d13c <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d13c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d140:	b084      	sub	sp, #16
    d142:	af00      	add	r7, sp, #0
    d144:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d148:	e9d7 3400 	ldrd	r3, r4, [r7]
    d14c:	f04f 0100 	mov.w	r1, #0
    d150:	4a17      	ldr	r2, [pc, #92]	; (d1b0 <am_hal_gpio_interrupt_enable+0x74>)
    d152:	ea03 0b01 	and.w	fp, r3, r1
    d156:	ea04 0c02 	and.w	ip, r4, r2
    d15a:	ea5b 030c 	orrs.w	r3, fp, ip
    d15e:	d001      	beq.n	d164 <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d160:	2305      	movs	r3, #5
    d162:	e01f      	b.n	d1a4 <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d164:	f002 fc86 	bl	fa74 <am_hal_interrupt_master_disable>
    d168:	4603      	mov	r3, r0
    d16a:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d16c:	4b11      	ldr	r3, [pc, #68]	; (d1b4 <am_hal_gpio_interrupt_enable+0x78>)
    d16e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d172:	683b      	ldr	r3, [r7, #0]
    d174:	490f      	ldr	r1, [pc, #60]	; (d1b4 <am_hal_gpio_interrupt_enable+0x78>)
    d176:	4313      	orrs	r3, r2
    d178:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d17c:	4b0d      	ldr	r3, [pc, #52]	; (d1b4 <am_hal_gpio_interrupt_enable+0x78>)
    d17e:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d182:	e9d7 1200 	ldrd	r1, r2, [r7]
    d186:	f04f 0300 	mov.w	r3, #0
    d18a:	f04f 0400 	mov.w	r4, #0
    d18e:	0013      	movs	r3, r2
    d190:	2400      	movs	r4, #0
    d192:	4a08      	ldr	r2, [pc, #32]	; (d1b4 <am_hal_gpio_interrupt_enable+0x78>)
    d194:	4303      	orrs	r3, r0
    d196:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d19a:	68fb      	ldr	r3, [r7, #12]
    d19c:	4618      	mov	r0, r3
    d19e:	f002 fc6d 	bl	fa7c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d1a2:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d1a4:	4618      	mov	r0, r3
    d1a6:	3710      	adds	r7, #16
    d1a8:	46bd      	mov	sp, r7
    d1aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d1ae:	bf00      	nop
    d1b0:	fffc0000 	.word	0xfffc0000
    d1b4:	40010000 	.word	0x40010000

0000d1b8 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d1b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d1bc:	b084      	sub	sp, #16
    d1be:	af00      	add	r7, sp, #0
    d1c0:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d1c4:	e9d7 3400 	ldrd	r3, r4, [r7]
    d1c8:	f04f 0100 	mov.w	r1, #0
    d1cc:	4a13      	ldr	r2, [pc, #76]	; (d21c <am_hal_gpio_interrupt_clear+0x64>)
    d1ce:	ea03 0b01 	and.w	fp, r3, r1
    d1d2:	ea04 0c02 	and.w	ip, r4, r2
    d1d6:	ea5b 030c 	orrs.w	r3, fp, ip
    d1da:	d001      	beq.n	d1e0 <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d1dc:	2305      	movs	r3, #5
    d1de:	e017      	b.n	d210 <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d1e0:	f002 fc48 	bl	fa74 <am_hal_interrupt_master_disable>
    d1e4:	4603      	mov	r3, r0
    d1e6:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d1e8:	4a0d      	ldr	r2, [pc, #52]	; (d220 <am_hal_gpio_interrupt_clear+0x68>)
    d1ea:	683b      	ldr	r3, [r7, #0]
    d1ec:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d1f0:	e9d7 1200 	ldrd	r1, r2, [r7]
    d1f4:	f04f 0300 	mov.w	r3, #0
    d1f8:	f04f 0400 	mov.w	r4, #0
    d1fc:	0013      	movs	r3, r2
    d1fe:	2400      	movs	r4, #0
    d200:	4a07      	ldr	r2, [pc, #28]	; (d220 <am_hal_gpio_interrupt_clear+0x68>)
    d202:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d206:	68fb      	ldr	r3, [r7, #12]
    d208:	4618      	mov	r0, r3
    d20a:	f002 fc37 	bl	fa7c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d20e:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d210:	4618      	mov	r0, r3
    d212:	3710      	adds	r7, #16
    d214:	46bd      	mov	sp, r7
    d216:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d21a:	bf00      	nop
    d21c:	fffc0000 	.word	0xfffc0000
    d220:	40010000 	.word	0x40010000

0000d224 <am_hal_gpio_interrupt_status_get>:
// Get GPIO interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_status_get(bool bEnabledOnly, uint64_t *pui64IntStatus)
{
    d224:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d228:	b088      	sub	sp, #32
    d22a:	af00      	add	r7, sp, #0
    d22c:	4603      	mov	r3, r0
    d22e:	6039      	str	r1, [r7, #0]
    d230:	71fb      	strb	r3, [r7, #7]

    uint64_t ui64RetVal, ui64Mask;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
    d232:	683b      	ldr	r3, [r7, #0]
    d234:	2b00      	cmp	r3, #0
    d236:	d101      	bne.n	d23c <am_hal_gpio_interrupt_status_get+0x18>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d238:	2306      	movs	r3, #6
    d23a:	e058      	b.n	d2ee <am_hal_gpio_interrupt_status_get+0xca>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize variable outside critical section
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    d23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d244:	e9c7 3406 	strd	r3, r4, [r7, #24]

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
    d248:	f002 fc14 	bl	fa74 <am_hal_interrupt_master_disable>
    d24c:	4603      	mov	r3, r0
    d24e:	60fb      	str	r3, [r7, #12]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
    d250:	4b29      	ldr	r3, [pc, #164]	; (d2f8 <am_hal_gpio_interrupt_status_get+0xd4>)
    d252:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    d256:	4619      	mov	r1, r3
    d258:	f04f 0200 	mov.w	r2, #0
    d25c:	f04f 0300 	mov.w	r3, #0
    d260:	f04f 0400 	mov.w	r4, #0
    d264:	000c      	movs	r4, r1
    d266:	2300      	movs	r3, #0
    d268:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
    d26c:	4b22      	ldr	r3, [pc, #136]	; (d2f8 <am_hal_gpio_interrupt_status_get+0xd4>)
    d26e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d272:	469b      	mov	fp, r3
    d274:	f04f 0c00 	mov.w	ip, #0
    d278:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d27c:	ea4b 0301 	orr.w	r3, fp, r1
    d280:	ea4c 0402 	orr.w	r4, ip, r2
    d284:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if ( bEnabledOnly )
    d288:	79fb      	ldrb	r3, [r7, #7]
    d28a:	2b00      	cmp	r3, #0
    d28c:	d01b      	beq.n	d2c6 <am_hal_gpio_interrupt_status_get+0xa2>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
    d28e:	4b1a      	ldr	r3, [pc, #104]	; (d2f8 <am_hal_gpio_interrupt_status_get+0xd4>)
    d290:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d294:	4619      	mov	r1, r3
    d296:	f04f 0200 	mov.w	r2, #0
    d29a:	f04f 0300 	mov.w	r3, #0
    d29e:	f04f 0400 	mov.w	r4, #0
    d2a2:	000c      	movs	r4, r1
    d2a4:	2300      	movs	r3, #0
    d2a6:	e9c7 3406 	strd	r3, r4, [r7, #24]
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
    d2aa:	4b13      	ldr	r3, [pc, #76]	; (d2f8 <am_hal_gpio_interrupt_status_get+0xd4>)
    d2ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d2b0:	469b      	mov	fp, r3
    d2b2:	f04f 0c00 	mov.w	ip, #0
    d2b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d2ba:	ea4b 0301 	orr.w	r3, fp, r1
    d2be:	ea4c 0402 	orr.w	r4, ip, r2
    d2c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }

    ui64RetVal &= ui64Mask;
    d2c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d2ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d2ce:	ea03 0b01 	and.w	fp, r3, r1
    d2d2:	ea04 0c02 	and.w	ip, r4, r2
    d2d6:	e9c7 bc04 	strd	fp, ip, [r7, #16]

    *pui64IntStatus = ui64RetVal;
    d2da:	683a      	ldr	r2, [r7, #0]
    d2dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d2e0:	e9c2 3400 	strd	r3, r4, [r2]

    AM_CRITICAL_END
    d2e4:	68fb      	ldr	r3, [r7, #12]
    d2e6:	4618      	mov	r0, r3
    d2e8:	f002 fbc8 	bl	fa7c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d2ec:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_status_get()
    d2ee:	4618      	mov	r0, r3
    d2f0:	3720      	adds	r7, #32
    d2f2:	46bd      	mov	sp, r7
    d2f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d2f8:	40010000 	.word	0x40010000

0000d2fc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	b088      	sub	sp, #32
    d300:	af00      	add	r7, sp, #0
    d302:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d304:	f107 030c 	add.w	r3, r7, #12
    d308:	4618      	mov	r0, r3
    d30a:	f002 fa27 	bl	f75c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    d30e:	68fb      	ldr	r3, [r7, #12]
    d310:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d312:	69fb      	ldr	r3, [r7, #28]
    d314:	4a07      	ldr	r2, [pc, #28]	; (d334 <am_util_delay_ms+0x38>)
    d316:	fba2 2303 	umull	r2, r3, r2, r3
    d31a:	099a      	lsrs	r2, r3, #6
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	fb02 f303 	mul.w	r3, r2, r3
    d322:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d324:	69b8      	ldr	r0, [r7, #24]
    d326:	f002 fb71 	bl	fa0c <am_hal_flash_delay>
}
    d32a:	bf00      	nop
    d32c:	3720      	adds	r7, #32
    d32e:	46bd      	mov	sp, r7
    d330:	bd80      	pop	{r7, pc}
    d332:	bf00      	nop
    d334:	057619f1 	.word	0x057619f1

0000d338 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d338:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d33a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d33e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d340:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d344:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d348:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d34c:	f000 f80a 	bl	d364 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d350:	bd01      	pop	{r0, pc}
}
    d352:	bf00      	nop
    d354:	4618      	mov	r0, r3

0000d356 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d356:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d358:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d35a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d35c:	4770      	bx	lr
}
    d35e:	bf00      	nop
    d360:	4618      	mov	r0, r3
	...

0000d364 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d364:	b580      	push	{r7, lr}
    d366:	b096      	sub	sp, #88	; 0x58
    d368:	af00      	add	r7, sp, #0
    d36a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d36c:	f107 030c 	add.w	r3, r7, #12
    d370:	2200      	movs	r2, #0
    d372:	601a      	str	r2, [r3, #0]
    d374:	605a      	str	r2, [r3, #4]
    d376:	609a      	str	r2, [r3, #8]
    d378:	60da      	str	r2, [r3, #12]
    d37a:	611a      	str	r2, [r3, #16]
    d37c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d37e:	2300      	movs	r3, #0
    d380:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d384:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d386:	4b2e      	ldr	r3, [pc, #184]	; (d440 <am_util_faultisr_collect_data+0xdc>)
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d38e:	b2db      	uxtb	r3, r3
    d390:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d396:	0a1b      	lsrs	r3, r3, #8
    d398:	b2db      	uxtb	r3, r3
    d39a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d3a0:	0c1b      	lsrs	r3, r3, #16
    d3a2:	b29b      	uxth	r3, r3
    d3a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d3a8:	4b26      	ldr	r3, [pc, #152]	; (d444 <am_util_faultisr_collect_data+0xe0>)
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d3ae:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d3b2:	b2db      	uxtb	r3, r3
    d3b4:	f003 0302 	and.w	r3, r3, #2
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d005      	beq.n	d3c8 <am_util_faultisr_collect_data+0x64>
    d3bc:	6879      	ldr	r1, [r7, #4]
    d3be:	2006      	movs	r0, #6
    d3c0:	f7ff ffc9 	bl	d356 <getStackedReg>
    d3c4:	4603      	mov	r3, r0
    d3c6:	e001      	b.n	d3cc <am_util_faultisr_collect_data+0x68>
    d3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3cc:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d3ce:	6879      	ldr	r1, [r7, #4]
    d3d0:	2000      	movs	r0, #0
    d3d2:	f7ff ffc0 	bl	d356 <getStackedReg>
    d3d6:	4603      	mov	r3, r0
    d3d8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d3da:	6879      	ldr	r1, [r7, #4]
    d3dc:	2001      	movs	r0, #1
    d3de:	f7ff ffba 	bl	d356 <getStackedReg>
    d3e2:	4603      	mov	r3, r0
    d3e4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d3e6:	6879      	ldr	r1, [r7, #4]
    d3e8:	2002      	movs	r0, #2
    d3ea:	f7ff ffb4 	bl	d356 <getStackedReg>
    d3ee:	4603      	mov	r3, r0
    d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d3f2:	6879      	ldr	r1, [r7, #4]
    d3f4:	2003      	movs	r0, #3
    d3f6:	f7ff ffae 	bl	d356 <getStackedReg>
    d3fa:	4603      	mov	r3, r0
    d3fc:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d3fe:	6879      	ldr	r1, [r7, #4]
    d400:	2004      	movs	r0, #4
    d402:	f7ff ffa8 	bl	d356 <getStackedReg>
    d406:	4603      	mov	r3, r0
    d408:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d40a:	6879      	ldr	r1, [r7, #4]
    d40c:	2005      	movs	r0, #5
    d40e:	f7ff ffa2 	bl	d356 <getStackedReg>
    d412:	4603      	mov	r3, r0
    d414:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d416:	6879      	ldr	r1, [r7, #4]
    d418:	2006      	movs	r0, #6
    d41a:	f7ff ff9c 	bl	d356 <getStackedReg>
    d41e:	4603      	mov	r3, r0
    d420:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d422:	6879      	ldr	r1, [r7, #4]
    d424:	2007      	movs	r0, #7
    d426:	f7ff ff96 	bl	d356 <getStackedReg>
    d42a:	4603      	mov	r3, r0
    d42c:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d42e:	f107 030c 	add.w	r3, r7, #12
    d432:	4619      	mov	r1, r3
    d434:	2002      	movs	r0, #2
    d436:	f002 fb7b 	bl	fb30 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d43a:	2300      	movs	r3, #0
    d43c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d43e:	e7fe      	b.n	d43e <am_util_faultisr_collect_data+0xda>
    d440:	e000ed28 	.word	0xe000ed28
    d444:	e000ed38 	.word	0xe000ed38

0000d448 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d448:	b480      	push	{r7}
    d44a:	b083      	sub	sp, #12
    d44c:	af00      	add	r7, sp, #0
    d44e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d450:	4a04      	ldr	r2, [pc, #16]	; (d464 <am_util_stdio_printf_init+0x1c>)
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	6013      	str	r3, [r2, #0]
}
    d456:	bf00      	nop
    d458:	370c      	adds	r7, #12
    d45a:	46bd      	mov	sp, r7
    d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d460:	4770      	bx	lr
    d462:	bf00      	nop
    d464:	1000c188 	.word	0x1000c188

0000d468 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d468:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d46c:	b08b      	sub	sp, #44	; 0x2c
    d46e:	af00      	add	r7, sp, #0
    d470:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d474:	e9d7 1200 	ldrd	r1, r2, [r7]
    d478:	f04f 0300 	mov.w	r3, #0
    d47c:	f04f 0400 	mov.w	r4, #0
    d480:	0013      	movs	r3, r2
    d482:	2400      	movs	r4, #0
    d484:	4323      	orrs	r3, r4
    d486:	f000 809d 	beq.w	d5c4 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d48a:	e9d7 3400 	ldrd	r3, r4, [r7]
    d48e:	0866      	lsrs	r6, r4, #1
    d490:	ea4f 0533 	mov.w	r5, r3, rrx
    d494:	e9d7 1200 	ldrd	r1, r2, [r7]
    d498:	f04f 0b00 	mov.w	fp, #0
    d49c:	f04f 0c00 	mov.w	ip, #0
    d4a0:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d4a4:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d4a8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d4ac:	eb1b 0305 	adds.w	r3, fp, r5
    d4b0:	eb4c 0406 	adc.w	r4, ip, r6
    d4b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d4b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4bc:	f04f 0500 	mov.w	r5, #0
    d4c0:	f04f 0600 	mov.w	r6, #0
    d4c4:	090d      	lsrs	r5, r1, #4
    d4c6:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d4ca:	0916      	lsrs	r6, r2, #4
    d4cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4d0:	186b      	adds	r3, r5, r1
    d4d2:	eb46 0402 	adc.w	r4, r6, r2
    d4d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d4da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4de:	f04f 0500 	mov.w	r5, #0
    d4e2:	f04f 0600 	mov.w	r6, #0
    d4e6:	0a0d      	lsrs	r5, r1, #8
    d4e8:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d4ec:	0a16      	lsrs	r6, r2, #8
    d4ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d4f2:	186b      	adds	r3, r5, r1
    d4f4:	eb46 0402 	adc.w	r4, r6, r2
    d4f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d4fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d500:	f04f 0500 	mov.w	r5, #0
    d504:	f04f 0600 	mov.w	r6, #0
    d508:	0c0d      	lsrs	r5, r1, #16
    d50a:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d50e:	0c16      	lsrs	r6, r2, #16
    d510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d514:	186b      	adds	r3, r5, r1
    d516:	eb46 0402 	adc.w	r4, r6, r2
    d51a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d51e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d522:	f04f 0500 	mov.w	r5, #0
    d526:	f04f 0600 	mov.w	r6, #0
    d52a:	0015      	movs	r5, r2
    d52c:	2600      	movs	r6, #0
    d52e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d532:	186b      	adds	r3, r5, r1
    d534:	eb46 0402 	adc.w	r4, r6, r2
    d538:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d53c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d540:	f04f 0300 	mov.w	r3, #0
    d544:	f04f 0400 	mov.w	r4, #0
    d548:	08cb      	lsrs	r3, r1, #3
    d54a:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d54e:	08d4      	lsrs	r4, r2, #3
    d550:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d554:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d558:	46ab      	mov	fp, r5
    d55a:	46b4      	mov	ip, r6
    d55c:	f04f 0100 	mov.w	r1, #0
    d560:	f04f 0200 	mov.w	r2, #0
    d564:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d568:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d56c:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d570:	468b      	mov	fp, r1
    d572:	4694      	mov	ip, r2
    d574:	eb1b 0b05 	adds.w	fp, fp, r5
    d578:	eb4c 0c06 	adc.w	ip, ip, r6
    d57c:	eb1b 030b 	adds.w	r3, fp, fp
    d580:	eb4c 040c 	adc.w	r4, ip, ip
    d584:	469b      	mov	fp, r3
    d586:	46a4      	mov	ip, r4
    d588:	4659      	mov	r1, fp
    d58a:	4662      	mov	r2, ip
    d58c:	e9d7 3400 	ldrd	r3, r4, [r7]
    d590:	1a5b      	subs	r3, r3, r1
    d592:	eb64 0402 	sbc.w	r4, r4, r2
    d596:	461d      	mov	r5, r3
    d598:	4626      	mov	r6, r4
    d59a:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d59e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d5a2:	1d99      	adds	r1, r3, #6
    d5a4:	f144 0200 	adc.w	r2, r4, #0
    d5a8:	f04f 0500 	mov.w	r5, #0
    d5ac:	f04f 0600 	mov.w	r6, #0
    d5b0:	090d      	lsrs	r5, r1, #4
    d5b2:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d5b6:	0916      	lsrs	r6, r2, #4
    d5b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d5bc:	186b      	adds	r3, r5, r1
    d5be:	eb46 0402 	adc.w	r4, r6, r2
    d5c2:	e029      	b.n	d618 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d5c4:	683b      	ldr	r3, [r7, #0]
    d5c6:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5ca:	085a      	lsrs	r2, r3, #1
    d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5ce:	089b      	lsrs	r3, r3, #2
    d5d0:	4413      	add	r3, r2
    d5d2:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d5d4:	6a3b      	ldr	r3, [r7, #32]
    d5d6:	091b      	lsrs	r3, r3, #4
    d5d8:	6a3a      	ldr	r2, [r7, #32]
    d5da:	4413      	add	r3, r2
    d5dc:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d5de:	6a3b      	ldr	r3, [r7, #32]
    d5e0:	0a1b      	lsrs	r3, r3, #8
    d5e2:	6a3a      	ldr	r2, [r7, #32]
    d5e4:	4413      	add	r3, r2
    d5e6:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d5e8:	6a3b      	ldr	r3, [r7, #32]
    d5ea:	0c1b      	lsrs	r3, r3, #16
    d5ec:	6a3a      	ldr	r2, [r7, #32]
    d5ee:	4413      	add	r3, r2
    d5f0:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d5f2:	6a3b      	ldr	r3, [r7, #32]
    d5f4:	08db      	lsrs	r3, r3, #3
    d5f6:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d5f8:	6a3a      	ldr	r2, [r7, #32]
    d5fa:	4613      	mov	r3, r2
    d5fc:	009b      	lsls	r3, r3, #2
    d5fe:	4413      	add	r3, r2
    d600:	005b      	lsls	r3, r3, #1
    d602:	461a      	mov	r2, r3
    d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d606:	1a9b      	subs	r3, r3, r2
    d608:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d60a:	69fb      	ldr	r3, [r7, #28]
    d60c:	3306      	adds	r3, #6
    d60e:	091a      	lsrs	r2, r3, #4
    d610:	6a3b      	ldr	r3, [r7, #32]
    d612:	4413      	add	r3, r2
    d614:	f04f 0400 	mov.w	r4, #0
    }
}
    d618:	4618      	mov	r0, r3
    d61a:	4621      	mov	r1, r4
    d61c:	372c      	adds	r7, #44	; 0x2c
    d61e:	46bd      	mov	sp, r7
    d620:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d624:	4770      	bx	lr

0000d626 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d626:	b590      	push	{r4, r7, lr}
    d628:	b085      	sub	sp, #20
    d62a:	af00      	add	r7, sp, #0
    d62c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d630:	683a      	ldr	r2, [r7, #0]
    d632:	687b      	ldr	r3, [r7, #4]
    d634:	4313      	orrs	r3, r2
    d636:	2b00      	cmp	r3, #0
    d638:	bf0c      	ite	eq
    d63a:	2301      	moveq	r3, #1
    d63c:	2300      	movne	r3, #0
    d63e:	b2db      	uxtb	r3, r3
    d640:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d642:	e008      	b.n	d656 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d644:	e9d7 0100 	ldrd	r0, r1, [r7]
    d648:	f7ff ff0e 	bl	d468 <divu64_10>
    d64c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	3301      	adds	r3, #1
    d654:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d656:	e9d7 3400 	ldrd	r3, r4, [r7]
    d65a:	4323      	orrs	r3, r4
    d65c:	d1f2      	bne.n	d644 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d65e:	68fb      	ldr	r3, [r7, #12]
}
    d660:	4618      	mov	r0, r3
    d662:	3714      	adds	r7, #20
    d664:	46bd      	mov	sp, r7
    d666:	bd90      	pop	{r4, r7, pc}

0000d668 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d668:	b590      	push	{r4, r7, lr}
    d66a:	b083      	sub	sp, #12
    d66c:	af00      	add	r7, sp, #0
    d66e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d672:	e9d7 3400 	ldrd	r3, r4, [r7]
    d676:	2b00      	cmp	r3, #0
    d678:	f174 0300 	sbcs.w	r3, r4, #0
    d67c:	da06      	bge.n	d68c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d67e:	e9d7 3400 	ldrd	r3, r4, [r7]
    d682:	425b      	negs	r3, r3
    d684:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d688:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d68c:	e9d7 3400 	ldrd	r3, r4, [r7]
    d690:	4618      	mov	r0, r3
    d692:	4621      	mov	r1, r4
    d694:	f7ff ffc7 	bl	d626 <ndigits_in_u64>
    d698:	4603      	mov	r3, r0
}
    d69a:	4618      	mov	r0, r3
    d69c:	370c      	adds	r7, #12
    d69e:	46bd      	mov	sp, r7
    d6a0:	bd90      	pop	{r4, r7, pc}

0000d6a2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d6a2:	b490      	push	{r4, r7}
    d6a4:	b084      	sub	sp, #16
    d6a6:	af00      	add	r7, sp, #0
    d6a8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d6ac:	683a      	ldr	r2, [r7, #0]
    d6ae:	687b      	ldr	r3, [r7, #4]
    d6b0:	4313      	orrs	r3, r2
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	bf0c      	ite	eq
    d6b6:	2301      	moveq	r3, #1
    d6b8:	2300      	movne	r3, #0
    d6ba:	b2db      	uxtb	r3, r3
    d6bc:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d6be:	e00e      	b.n	d6de <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    d6c0:	e9d7 1200 	ldrd	r1, r2, [r7]
    d6c4:	f04f 0300 	mov.w	r3, #0
    d6c8:	f04f 0400 	mov.w	r4, #0
    d6cc:	090b      	lsrs	r3, r1, #4
    d6ce:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d6d2:	0914      	lsrs	r4, r2, #4
    d6d4:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    d6d8:	68fb      	ldr	r3, [r7, #12]
    d6da:	3301      	adds	r3, #1
    d6dc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d6de:	e9d7 3400 	ldrd	r3, r4, [r7]
    d6e2:	4323      	orrs	r3, r4
    d6e4:	d1ec      	bne.n	d6c0 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d6e6:	68fb      	ldr	r3, [r7, #12]
}
    d6e8:	4618      	mov	r0, r3
    d6ea:	3710      	adds	r7, #16
    d6ec:	46bd      	mov	sp, r7
    d6ee:	bc90      	pop	{r4, r7}
    d6f0:	4770      	bx	lr

0000d6f2 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d6f2:	b480      	push	{r7}
    d6f4:	b087      	sub	sp, #28
    d6f6:	af00      	add	r7, sp, #0
    d6f8:	6078      	str	r0, [r7, #4]
    d6fa:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d6fc:	2300      	movs	r3, #0
    d6fe:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d700:	2300      	movs	r3, #0
    d702:	613b      	str	r3, [r7, #16]
    d704:	2300      	movs	r3, #0
    d706:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d708:	687b      	ldr	r3, [r7, #4]
    d70a:	781b      	ldrb	r3, [r3, #0]
    d70c:	2b2d      	cmp	r3, #45	; 0x2d
    d70e:	d11b      	bne.n	d748 <decstr_to_int+0x56>
    {
        bNeg = true;
    d710:	2301      	movs	r3, #1
    d712:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d714:	687b      	ldr	r3, [r7, #4]
    d716:	3301      	adds	r3, #1
    d718:	607b      	str	r3, [r7, #4]
        uCnt++;
    d71a:	68fb      	ldr	r3, [r7, #12]
    d71c:	3301      	adds	r3, #1
    d71e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d720:	e012      	b.n	d748 <decstr_to_int+0x56>
    {
        ++uCnt;
    d722:	68fb      	ldr	r3, [r7, #12]
    d724:	3301      	adds	r3, #1
    d726:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d728:	693a      	ldr	r2, [r7, #16]
    d72a:	4613      	mov	r3, r2
    d72c:	009b      	lsls	r3, r3, #2
    d72e:	4413      	add	r3, r2
    d730:	005b      	lsls	r3, r3, #1
    d732:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	461a      	mov	r2, r3
    d73a:	693b      	ldr	r3, [r7, #16]
    d73c:	4413      	add	r3, r2
    d73e:	3b30      	subs	r3, #48	; 0x30
    d740:	613b      	str	r3, [r7, #16]
        pcStr++;
    d742:	687b      	ldr	r3, [r7, #4]
    d744:	3301      	adds	r3, #1
    d746:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d748:	687b      	ldr	r3, [r7, #4]
    d74a:	781b      	ldrb	r3, [r3, #0]
    d74c:	2b2f      	cmp	r3, #47	; 0x2f
    d74e:	d903      	bls.n	d758 <decstr_to_int+0x66>
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	781b      	ldrb	r3, [r3, #0]
    d754:	2b39      	cmp	r3, #57	; 0x39
    d756:	d9e4      	bls.n	d722 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d758:	683b      	ldr	r3, [r7, #0]
    d75a:	2b00      	cmp	r3, #0
    d75c:	d002      	beq.n	d764 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d75e:	683b      	ldr	r3, [r7, #0]
    d760:	68fa      	ldr	r2, [r7, #12]
    d762:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d764:	7dfb      	ldrb	r3, [r7, #23]
    d766:	2b00      	cmp	r3, #0
    d768:	d002      	beq.n	d770 <decstr_to_int+0x7e>
    d76a:	693b      	ldr	r3, [r7, #16]
    d76c:	425b      	negs	r3, r3
    d76e:	e000      	b.n	d772 <decstr_to_int+0x80>
    d770:	693b      	ldr	r3, [r7, #16]
}
    d772:	4618      	mov	r0, r3
    d774:	371c      	adds	r7, #28
    d776:	46bd      	mov	sp, r7
    d778:	f85d 7b04 	ldr.w	r7, [sp], #4
    d77c:	4770      	bx	lr

0000d77e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d77e:	b590      	push	{r4, r7, lr}
    d780:	b091      	sub	sp, #68	; 0x44
    d782:	af00      	add	r7, sp, #0
    d784:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d788:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d78a:	2300      	movs	r3, #0
    d78c:	63fb      	str	r3, [r7, #60]	; 0x3c
    d78e:	2300      	movs	r3, #0
    d790:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d796:	f7ff fe67 	bl	d468 <divu64_10>
    d79a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d79e:	68b9      	ldr	r1, [r7, #8]
    d7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7a2:	4613      	mov	r3, r2
    d7a4:	009b      	lsls	r3, r3, #2
    d7a6:	4413      	add	r3, r2
    d7a8:	005b      	lsls	r3, r3, #1
    d7aa:	1acb      	subs	r3, r1, r3
    d7ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b0:	b2da      	uxtb	r2, r3
    d7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7b4:	1c59      	adds	r1, r3, #1
    d7b6:	63f9      	str	r1, [r7, #60]	; 0x3c
    d7b8:	3230      	adds	r2, #48	; 0x30
    d7ba:	b2d2      	uxtb	r2, r2
    d7bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d7c0:	440b      	add	r3, r1
    d7c2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d7c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d7ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d7ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d7d2:	4323      	orrs	r3, r4
    d7d4:	d1dd      	bne.n	d792 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7d8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d7da:	687b      	ldr	r3, [r7, #4]
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d011      	beq.n	d804 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d7e0:	e008      	b.n	d7f4 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d7e2:	687b      	ldr	r3, [r7, #4]
    d7e4:	1c5a      	adds	r2, r3, #1
    d7e6:	607a      	str	r2, [r7, #4]
    d7e8:	f107 0110 	add.w	r1, r7, #16
    d7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d7ee:	440a      	add	r2, r1
    d7f0:	7812      	ldrb	r2, [r2, #0]
    d7f2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7f6:	1e5a      	subs	r2, r3, #1
    d7f8:	63fa      	str	r2, [r7, #60]	; 0x3c
    d7fa:	2b00      	cmp	r3, #0
    d7fc:	d1f1      	bne.n	d7e2 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d7fe:	687b      	ldr	r3, [r7, #4]
    d800:	2200      	movs	r2, #0
    d802:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d806:	4618      	mov	r0, r3
    d808:	3744      	adds	r7, #68	; 0x44
    d80a:	46bd      	mov	sp, r7
    d80c:	bd90      	pop	{r4, r7, pc}

0000d80e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d80e:	b490      	push	{r4, r7}
    d810:	b08c      	sub	sp, #48	; 0x30
    d812:	af00      	add	r7, sp, #0
    d814:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d818:	607a      	str	r2, [r7, #4]
    d81a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d81c:	2300      	movs	r3, #0
    d81e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d820:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d824:	4323      	orrs	r3, r4
    d826:	d135      	bne.n	d894 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d82a:	1c5a      	adds	r2, r3, #1
    d82c:	62fa      	str	r2, [r7, #44]	; 0x2c
    d82e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d832:	4413      	add	r3, r2
    d834:	2230      	movs	r2, #48	; 0x30
    d836:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d83a:	e02b      	b.n	d894 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    d83c:	7a3b      	ldrb	r3, [r7, #8]
    d83e:	f003 030f 	and.w	r3, r3, #15
    d842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d84a:	2b09      	cmp	r3, #9
    d84c:	d90a      	bls.n	d864 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d84e:	78fb      	ldrb	r3, [r7, #3]
    d850:	2b00      	cmp	r3, #0
    d852:	d001      	beq.n	d858 <uint64_to_hexstr+0x4a>
    d854:	2227      	movs	r2, #39	; 0x27
    d856:	e000      	b.n	d85a <uint64_to_hexstr+0x4c>
    d858:	2207      	movs	r2, #7
    d85a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d85e:	4413      	add	r3, r2
    d860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d866:	1c5a      	adds	r2, r3, #1
    d868:	62fa      	str	r2, [r7, #44]	; 0x2c
    d86a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d86e:	3230      	adds	r2, #48	; 0x30
    d870:	b2d2      	uxtb	r2, r2
    d872:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d876:	440b      	add	r3, r1
    d878:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d87c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    d880:	f04f 0300 	mov.w	r3, #0
    d884:	f04f 0400 	mov.w	r4, #0
    d888:	090b      	lsrs	r3, r1, #4
    d88a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d88e:	0914      	lsrs	r4, r2, #4
    d890:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    d894:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d898:	4323      	orrs	r3, r4
    d89a:	d1cf      	bne.n	d83c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d89e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d011      	beq.n	d8ca <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    d8a6:	e008      	b.n	d8ba <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	1c5a      	adds	r2, r3, #1
    d8ac:	607a      	str	r2, [r7, #4]
    d8ae:	f107 0110 	add.w	r1, r7, #16
    d8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d8b4:	440a      	add	r2, r1
    d8b6:	7812      	ldrb	r2, [r2, #0]
    d8b8:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8bc:	1e5a      	subs	r2, r3, #1
    d8be:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d1f1      	bne.n	d8a8 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d8c4:	687b      	ldr	r3, [r7, #4]
    d8c6:	2200      	movs	r2, #0
    d8c8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d8cc:	4618      	mov	r0, r3
    d8ce:	3730      	adds	r7, #48	; 0x30
    d8d0:	46bd      	mov	sp, r7
    d8d2:	bc90      	pop	{r4, r7}
    d8d4:	4770      	bx	lr

0000d8d6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d8d6:	b480      	push	{r7}
    d8d8:	b085      	sub	sp, #20
    d8da:	af00      	add	r7, sp, #0
    d8dc:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d8de:	2300      	movs	r3, #0
    d8e0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d104      	bne.n	d8f2 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d8e8:	68fb      	ldr	r3, [r7, #12]
    d8ea:	e009      	b.n	d900 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d8ec:	68fb      	ldr	r3, [r7, #12]
    d8ee:	3301      	adds	r3, #1
    d8f0:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d8f2:	687b      	ldr	r3, [r7, #4]
    d8f4:	1c5a      	adds	r2, r3, #1
    d8f6:	607a      	str	r2, [r7, #4]
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d1f6      	bne.n	d8ec <simple_strlen+0x16>
    }
    return ui32RetVal;
    d8fe:	68fb      	ldr	r3, [r7, #12]
}
    d900:	4618      	mov	r0, r3
    d902:	3714      	adds	r7, #20
    d904:	46bd      	mov	sp, r7
    d906:	f85d 7b04 	ldr.w	r7, [sp], #4
    d90a:	4770      	bx	lr

0000d90c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d90c:	b480      	push	{r7}
    d90e:	b087      	sub	sp, #28
    d910:	af00      	add	r7, sp, #0
    d912:	60f8      	str	r0, [r7, #12]
    d914:	460b      	mov	r3, r1
    d916:	607a      	str	r2, [r7, #4]
    d918:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d91a:	2300      	movs	r3, #0
    d91c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d91e:	687b      	ldr	r3, [r7, #4]
    d920:	2b00      	cmp	r3, #0
    d922:	dc0c      	bgt.n	d93e <padbuffer+0x32>
    {
        return i32Cnt;
    d924:	697b      	ldr	r3, [r7, #20]
    d926:	e010      	b.n	d94a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d928:	68fb      	ldr	r3, [r7, #12]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d004      	beq.n	d938 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d92e:	68fb      	ldr	r3, [r7, #12]
    d930:	1c5a      	adds	r2, r3, #1
    d932:	60fa      	str	r2, [r7, #12]
    d934:	7afa      	ldrb	r2, [r7, #11]
    d936:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d938:	697b      	ldr	r3, [r7, #20]
    d93a:	3301      	adds	r3, #1
    d93c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	1e5a      	subs	r2, r3, #1
    d942:	607a      	str	r2, [r7, #4]
    d944:	2b00      	cmp	r3, #0
    d946:	d1ef      	bne.n	d928 <padbuffer+0x1c>
    }

    return i32Cnt;
    d948:	697b      	ldr	r3, [r7, #20]
}
    d94a:	4618      	mov	r0, r3
    d94c:	371c      	adds	r7, #28
    d94e:	46bd      	mov	sp, r7
    d950:	f85d 7b04 	ldr.w	r7, [sp], #4
    d954:	4770      	bx	lr
	...

0000d958 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d958:	b590      	push	{r4, r7, lr}
    d95a:	b08f      	sub	sp, #60	; 0x3c
    d95c:	af00      	add	r7, sp, #0
    d95e:	ed87 0a03 	vstr	s0, [r7, #12]
    d962:	60b8      	str	r0, [r7, #8]
    d964:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d966:	68bb      	ldr	r3, [r7, #8]
    d968:	681b      	ldr	r3, [r3, #0]
    d96a:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d96e:	2b03      	cmp	r3, #3
    d970:	dc02      	bgt.n	d978 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d972:	f06f 0302 	mvn.w	r3, #2
    d976:	e0e7      	b.n	db48 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    d978:	edd7 7a03 	vldr	s15, [r7, #12]
    d97c:	eef5 7a40 	vcmp.f32	s15, #0.0
    d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d984:	d104      	bne.n	d990 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d986:	68bb      	ldr	r3, [r7, #8]
    d988:	4a71      	ldr	r2, [pc, #452]	; (db50 <ftoa+0x1f8>)
    d98a:	601a      	str	r2, [r3, #0]
        return 3;
    d98c:	2303      	movs	r3, #3
    d98e:	e0db      	b.n	db48 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    d990:	68bb      	ldr	r3, [r7, #8]
    d992:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d994:	68fb      	ldr	r3, [r7, #12]
    d996:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d998:	693b      	ldr	r3, [r7, #16]
    d99a:	15db      	asrs	r3, r3, #23
    d99c:	b2db      	uxtb	r3, r3
    d99e:	3b7f      	subs	r3, #127	; 0x7f
    d9a0:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d9a2:	693b      	ldr	r3, [r7, #16]
    d9a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d9a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d9ac:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d9ae:	2300      	movs	r3, #0
    d9b0:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d9b2:	2300      	movs	r3, #0
    d9b4:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d9b6:	69fb      	ldr	r3, [r7, #28]
    d9b8:	2b1e      	cmp	r3, #30
    d9ba:	dd02      	ble.n	d9c2 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d9bc:	f06f 0301 	mvn.w	r3, #1
    d9c0:	e0c2      	b.n	db48 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    d9c2:	69fb      	ldr	r3, [r7, #28]
    d9c4:	f113 0f17 	cmn.w	r3, #23
    d9c8:	da02      	bge.n	d9d0 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9ce:	e0bb      	b.n	db48 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    d9d0:	69fb      	ldr	r3, [r7, #28]
    d9d2:	2b16      	cmp	r3, #22
    d9d4:	dd06      	ble.n	d9e4 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d9d6:	69fb      	ldr	r3, [r7, #28]
    d9d8:	3b17      	subs	r3, #23
    d9da:	69ba      	ldr	r2, [r7, #24]
    d9dc:	fa02 f303 	lsl.w	r3, r2, r3
    d9e0:	637b      	str	r3, [r7, #52]	; 0x34
    d9e2:	e01a      	b.n	da1a <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    d9e4:	69fb      	ldr	r3, [r7, #28]
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	db0f      	blt.n	da0a <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d9ea:	69fb      	ldr	r3, [r7, #28]
    d9ec:	f1c3 0317 	rsb	r3, r3, #23
    d9f0:	69ba      	ldr	r2, [r7, #24]
    d9f2:	fa42 f303 	asr.w	r3, r2, r3
    d9f6:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d9f8:	69fb      	ldr	r3, [r7, #28]
    d9fa:	3301      	adds	r3, #1
    d9fc:	69ba      	ldr	r2, [r7, #24]
    d9fe:	fa02 f303 	lsl.w	r3, r2, r3
    da02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da06:	633b      	str	r3, [r7, #48]	; 0x30
    da08:	e007      	b.n	da1a <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    da0a:	69bb      	ldr	r3, [r7, #24]
    da0c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    da10:	69fb      	ldr	r3, [r7, #28]
    da12:	43db      	mvns	r3, r3
    da14:	fa42 f303 	asr.w	r3, r2, r3
    da18:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    da1a:	693b      	ldr	r3, [r7, #16]
    da1c:	2b00      	cmp	r3, #0
    da1e:	da04      	bge.n	da2a <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    da20:	68bb      	ldr	r3, [r7, #8]
    da22:	1c5a      	adds	r2, r3, #1
    da24:	60ba      	str	r2, [r7, #8]
    da26:	222d      	movs	r2, #45	; 0x2d
    da28:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    da2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da2c:	2b00      	cmp	r3, #0
    da2e:	d105      	bne.n	da3c <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    da30:	68bb      	ldr	r3, [r7, #8]
    da32:	1c5a      	adds	r2, r3, #1
    da34:	60ba      	str	r2, [r7, #8]
    da36:	2230      	movs	r2, #48	; 0x30
    da38:	701a      	strb	r2, [r3, #0]
    da3a:	e021      	b.n	da80 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    da3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da3e:	2b00      	cmp	r3, #0
    da40:	dd08      	ble.n	da54 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    da42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da44:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da48:	68ba      	ldr	r2, [r7, #8]
    da4a:	4618      	mov	r0, r3
    da4c:	4621      	mov	r1, r4
    da4e:	f7ff fe96 	bl	d77e <uint64_to_str>
    da52:	e011      	b.n	da78 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    da54:	68bb      	ldr	r3, [r7, #8]
    da56:	1c5a      	adds	r2, r3, #1
    da58:	60ba      	str	r2, [r7, #8]
    da5a:	222d      	movs	r2, #45	; 0x2d
    da5c:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    da5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    da60:	425b      	negs	r3, r3
    da62:	ea4f 74e3 	mov.w	r4, r3, asr #31
    da66:	68ba      	ldr	r2, [r7, #8]
    da68:	4618      	mov	r0, r3
    da6a:	4621      	mov	r1, r4
    da6c:	f7ff fe87 	bl	d77e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    da70:	e002      	b.n	da78 <ftoa+0x120>
        {
            pcBuf++;
    da72:	68bb      	ldr	r3, [r7, #8]
    da74:	3301      	adds	r3, #1
    da76:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    da78:	68bb      	ldr	r3, [r7, #8]
    da7a:	781b      	ldrb	r3, [r3, #0]
    da7c:	2b00      	cmp	r3, #0
    da7e:	d1f8      	bne.n	da72 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    da80:	68bb      	ldr	r3, [r7, #8]
    da82:	1c5a      	adds	r2, r3, #1
    da84:	60ba      	str	r2, [r7, #8]
    da86:	222e      	movs	r2, #46	; 0x2e
    da88:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    da8c:	2b00      	cmp	r3, #0
    da8e:	d105      	bne.n	da9c <ftoa+0x144>
    {
        *pcBuf++ = '0';
    da90:	68bb      	ldr	r3, [r7, #8]
    da92:	1c5a      	adds	r2, r3, #1
    da94:	60ba      	str	r2, [r7, #8]
    da96:	2230      	movs	r2, #48	; 0x30
    da98:	701a      	strb	r2, [r3, #0]
    da9a:	e04f      	b.n	db3c <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    da9c:	68ba      	ldr	r2, [r7, #8]
    da9e:	6a3b      	ldr	r3, [r7, #32]
    daa0:	1ad3      	subs	r3, r2, r3
    daa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    daa4:	1ad3      	subs	r3, r2, r3
    daa6:	3b01      	subs	r3, #1
    daa8:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    daaa:	697a      	ldr	r2, [r7, #20]
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	4293      	cmp	r3, r2
    dab0:	bfa8      	it	ge
    dab2:	4613      	movge	r3, r2
    dab4:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    dab6:	2300      	movs	r3, #0
    dab8:	62bb      	str	r3, [r7, #40]	; 0x28
    daba:	e015      	b.n	dae8 <ftoa+0x190>
        {
            i32FracPart *= 10;
    dabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dabe:	4613      	mov	r3, r2
    dac0:	009b      	lsls	r3, r3, #2
    dac2:	4413      	add	r3, r2
    dac4:	005b      	lsls	r3, r3, #1
    dac6:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    daca:	161b      	asrs	r3, r3, #24
    dacc:	b2da      	uxtb	r2, r3
    dace:	68bb      	ldr	r3, [r7, #8]
    dad0:	1c59      	adds	r1, r3, #1
    dad2:	60b9      	str	r1, [r7, #8]
    dad4:	3230      	adds	r2, #48	; 0x30
    dad6:	b2d2      	uxtb	r2, r2
    dad8:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dadc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    dae0:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dae4:	3301      	adds	r3, #1
    dae6:	62bb      	str	r3, [r7, #40]	; 0x28
    dae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    daea:	697b      	ldr	r3, [r7, #20]
    daec:	429a      	cmp	r2, r3
    daee:	dbe5      	blt.n	dabc <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    daf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    daf2:	4613      	mov	r3, r2
    daf4:	009b      	lsls	r3, r3, #2
    daf6:	4413      	add	r3, r2
    daf8:	005b      	lsls	r3, r3, #1
    dafa:	161b      	asrs	r3, r3, #24
    dafc:	2b04      	cmp	r3, #4
    dafe:	dd1d      	ble.n	db3c <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    db00:	68bb      	ldr	r3, [r7, #8]
    db02:	3b01      	subs	r3, #1
    db04:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db06:	e015      	b.n	db34 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db0a:	781b      	ldrb	r3, [r3, #0]
    db0c:	2b2e      	cmp	r3, #46	; 0x2e
    db0e:	d00e      	beq.n	db2e <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db12:	781b      	ldrb	r3, [r3, #0]
    db14:	2b39      	cmp	r3, #57	; 0x39
    db16:	d103      	bne.n	db20 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db1a:	2230      	movs	r2, #48	; 0x30
    db1c:	701a      	strb	r2, [r3, #0]
    db1e:	e006      	b.n	db2e <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db22:	781b      	ldrb	r3, [r3, #0]
    db24:	3301      	adds	r3, #1
    db26:	b2da      	uxtb	r2, r3
    db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db2a:	701a      	strb	r2, [r3, #0]
                    break;
    db2c:	e006      	b.n	db3c <ftoa+0x1e4>
                }
                pcBuftmp--;
    db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db30:	3b01      	subs	r3, #1
    db32:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    db34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    db36:	6a3b      	ldr	r3, [r7, #32]
    db38:	429a      	cmp	r2, r3
    db3a:	d2e5      	bcs.n	db08 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    db3c:	68bb      	ldr	r3, [r7, #8]
    db3e:	2200      	movs	r2, #0
    db40:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    db42:	68ba      	ldr	r2, [r7, #8]
    db44:	6a3b      	ldr	r3, [r7, #32]
    db46:	1ad3      	subs	r3, r2, r3
} // ftoa()
    db48:	4618      	mov	r0, r3
    db4a:	373c      	adds	r7, #60	; 0x3c
    db4c:	46bd      	mov	sp, r7
    db4e:	bd90      	pop	{r4, r7, pc}
    db50:	00302e30 	.word	0x00302e30

0000db54 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    db54:	b590      	push	{r4, r7, lr}
    db56:	b097      	sub	sp, #92	; 0x5c
    db58:	af00      	add	r7, sp, #0
    db5a:	60f8      	str	r0, [r7, #12]
    db5c:	60b9      	str	r1, [r7, #8]
    db5e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    db60:	2300      	movs	r3, #0
    db62:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    db64:	2300      	movs	r3, #0
    db66:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    db68:	e2e7      	b.n	e13a <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    db6a:	2306      	movs	r3, #6
    db6c:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    db6e:	68bb      	ldr	r3, [r7, #8]
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	2b25      	cmp	r3, #37	; 0x25
    db74:	d01f      	beq.n	dbb6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    db76:	68fb      	ldr	r3, [r7, #12]
    db78:	2b00      	cmp	r3, #0
    db7a:	d015      	beq.n	dba8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    db7c:	68bb      	ldr	r3, [r7, #8]
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	2b0a      	cmp	r3, #10
    db82:	d10b      	bne.n	db9c <am_util_stdio_vsprintf+0x48>
    db84:	4bb1      	ldr	r3, [pc, #708]	; (de4c <am_util_stdio_vsprintf+0x2f8>)
    db86:	781b      	ldrb	r3, [r3, #0]
    db88:	2b00      	cmp	r3, #0
    db8a:	d007      	beq.n	db9c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    db8c:	68fb      	ldr	r3, [r7, #12]
    db8e:	1c5a      	adds	r2, r3, #1
    db90:	60fa      	str	r2, [r7, #12]
    db92:	220d      	movs	r2, #13
    db94:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    db96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    db98:	3301      	adds	r3, #1
    db9a:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    db9c:	68fb      	ldr	r3, [r7, #12]
    db9e:	1c5a      	adds	r2, r3, #1
    dba0:	60fa      	str	r2, [r7, #12]
    dba2:	68ba      	ldr	r2, [r7, #8]
    dba4:	7812      	ldrb	r2, [r2, #0]
    dba6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    dba8:	68bb      	ldr	r3, [r7, #8]
    dbaa:	3301      	adds	r3, #1
    dbac:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    dbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dbb0:	3301      	adds	r3, #1
    dbb2:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    dbb4:	e2c1      	b.n	e13a <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    dbb6:	68bb      	ldr	r3, [r7, #8]
    dbb8:	3301      	adds	r3, #1
    dbba:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    dbbc:	2300      	movs	r3, #0
    dbbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    dbc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    dbc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    dbca:	2320      	movs	r3, #32
    dbcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    dbd0:	68bb      	ldr	r3, [r7, #8]
    dbd2:	781b      	ldrb	r3, [r3, #0]
    dbd4:	2b30      	cmp	r3, #48	; 0x30
    dbd6:	d105      	bne.n	dbe4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    dbd8:	2330      	movs	r3, #48	; 0x30
    dbda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    dbde:	68bb      	ldr	r3, [r7, #8]
    dbe0:	3301      	adds	r3, #1
    dbe2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    dbe4:	f107 0314 	add.w	r3, r7, #20
    dbe8:	4619      	mov	r1, r3
    dbea:	68b8      	ldr	r0, [r7, #8]
    dbec:	f7ff fd81 	bl	d6f2 <decstr_to_int>
    dbf0:	4603      	mov	r3, r0
    dbf2:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    dbf4:	697b      	ldr	r3, [r7, #20]
    dbf6:	68ba      	ldr	r2, [r7, #8]
    dbf8:	4413      	add	r3, r2
    dbfa:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    dbfc:	68bb      	ldr	r3, [r7, #8]
    dbfe:	781b      	ldrb	r3, [r3, #0]
    dc00:	2b73      	cmp	r3, #115	; 0x73
    dc02:	d005      	beq.n	dc10 <am_util_stdio_vsprintf+0xbc>
    dc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc06:	2b00      	cmp	r3, #0
    dc08:	da02      	bge.n	dc10 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    dc0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dc0c:	425b      	negs	r3, r3
    dc0e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    dc10:	68bb      	ldr	r3, [r7, #8]
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	2b2e      	cmp	r3, #46	; 0x2e
    dc16:	d10e      	bne.n	dc36 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    dc18:	68bb      	ldr	r3, [r7, #8]
    dc1a:	3301      	adds	r3, #1
    dc1c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    dc1e:	f107 0314 	add.w	r3, r7, #20
    dc22:	4619      	mov	r1, r3
    dc24:	68b8      	ldr	r0, [r7, #8]
    dc26:	f7ff fd64 	bl	d6f2 <decstr_to_int>
    dc2a:	4603      	mov	r3, r0
    dc2c:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    dc2e:	697b      	ldr	r3, [r7, #20]
    dc30:	68ba      	ldr	r2, [r7, #8]
    dc32:	4413      	add	r3, r2
    dc34:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dc36:	68bb      	ldr	r3, [r7, #8]
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	2b6c      	cmp	r3, #108	; 0x6c
    dc3c:	d10c      	bne.n	dc58 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dc3e:	68bb      	ldr	r3, [r7, #8]
    dc40:	3301      	adds	r3, #1
    dc42:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dc44:	68bb      	ldr	r3, [r7, #8]
    dc46:	781b      	ldrb	r3, [r3, #0]
    dc48:	2b6c      	cmp	r3, #108	; 0x6c
    dc4a:	d105      	bne.n	dc58 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dc4c:	68bb      	ldr	r3, [r7, #8]
    dc4e:	3301      	adds	r3, #1
    dc50:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dc52:	2301      	movs	r3, #1
    dc54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    dc58:	68bb      	ldr	r3, [r7, #8]
    dc5a:	781b      	ldrb	r3, [r3, #0]
    dc5c:	3b46      	subs	r3, #70	; 0x46
    dc5e:	2b32      	cmp	r3, #50	; 0x32
    dc60:	f200 8258 	bhi.w	e114 <am_util_stdio_vsprintf+0x5c0>
    dc64:	a201      	add	r2, pc, #4	; (adr r2, dc6c <am_util_stdio_vsprintf+0x118>)
    dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dc6a:	bf00      	nop
    dc6c:	0000e09b 	.word	0x0000e09b
    dc70:	0000e115 	.word	0x0000e115
    dc74:	0000e115 	.word	0x0000e115
    dc78:	0000e115 	.word	0x0000e115
    dc7c:	0000e115 	.word	0x0000e115
    dc80:	0000e115 	.word	0x0000e115
    dc84:	0000e115 	.word	0x0000e115
    dc88:	0000e115 	.word	0x0000e115
    dc8c:	0000e115 	.word	0x0000e115
    dc90:	0000e115 	.word	0x0000e115
    dc94:	0000e115 	.word	0x0000e115
    dc98:	0000e115 	.word	0x0000e115
    dc9c:	0000e115 	.word	0x0000e115
    dca0:	0000e115 	.word	0x0000e115
    dca4:	0000e115 	.word	0x0000e115
    dca8:	0000e115 	.word	0x0000e115
    dcac:	0000e115 	.word	0x0000e115
    dcb0:	0000e115 	.word	0x0000e115
    dcb4:	0000de2f 	.word	0x0000de2f
    dcb8:	0000e115 	.word	0x0000e115
    dcbc:	0000e115 	.word	0x0000e115
    dcc0:	0000e115 	.word	0x0000e115
    dcc4:	0000e115 	.word	0x0000e115
    dcc8:	0000e115 	.word	0x0000e115
    dccc:	0000e115 	.word	0x0000e115
    dcd0:	0000e115 	.word	0x0000e115
    dcd4:	0000e115 	.word	0x0000e115
    dcd8:	0000e115 	.word	0x0000e115
    dcdc:	0000e115 	.word	0x0000e115
    dce0:	0000dd39 	.word	0x0000dd39
    dce4:	0000df61 	.word	0x0000df61
    dce8:	0000e115 	.word	0x0000e115
    dcec:	0000e09b 	.word	0x0000e09b
    dcf0:	0000e115 	.word	0x0000e115
    dcf4:	0000e115 	.word	0x0000e115
    dcf8:	0000df61 	.word	0x0000df61
    dcfc:	0000e115 	.word	0x0000e115
    dd00:	0000e115 	.word	0x0000e115
    dd04:	0000e115 	.word	0x0000e115
    dd08:	0000e115 	.word	0x0000e115
    dd0c:	0000e115 	.word	0x0000e115
    dd10:	0000e115 	.word	0x0000e115
    dd14:	0000e115 	.word	0x0000e115
    dd18:	0000e115 	.word	0x0000e115
    dd1c:	0000e115 	.word	0x0000e115
    dd20:	0000dd5b 	.word	0x0000dd5b
    dd24:	0000e115 	.word	0x0000e115
    dd28:	0000decd 	.word	0x0000decd
    dd2c:	0000e115 	.word	0x0000e115
    dd30:	0000e115 	.word	0x0000e115
    dd34:	0000de29 	.word	0x0000de29
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	1d1a      	adds	r2, r3, #4
    dd3c:	607a      	str	r2, [r7, #4]
    dd3e:	681b      	ldr	r3, [r3, #0]
    dd40:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d004      	beq.n	dd52 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    dd48:	68fb      	ldr	r3, [r7, #12]
    dd4a:	1c5a      	adds	r2, r3, #1
    dd4c:	60fa      	str	r2, [r7, #12]
    dd4e:	7ffa      	ldrb	r2, [r7, #31]
    dd50:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    dd52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd54:	3301      	adds	r3, #1
    dd56:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    dd58:	e1ec      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    dd5a:	687b      	ldr	r3, [r7, #4]
    dd5c:	1d1a      	adds	r2, r3, #4
    dd5e:	607a      	str	r2, [r7, #4]
    dd60:	681b      	ldr	r3, [r3, #0]
    dd62:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    dd64:	6d78      	ldr	r0, [r7, #84]	; 0x54
    dd66:	f7ff fdb6 	bl	d8d6 <simple_strlen>
    dd6a:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    dd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd6e:	2b00      	cmp	r3, #0
    dd70:	dd2e      	ble.n	ddd0 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    dd72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dd76:	429a      	cmp	r2, r3
    dd78:	d22a      	bcs.n	ddd0 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    dd7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd7e:	1ad3      	subs	r3, r2, r3
    dd80:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dd82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dd86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    dd88:	4619      	mov	r1, r3
    dd8a:	68f8      	ldr	r0, [r7, #12]
    dd8c:	f7ff fdbe 	bl	d90c <padbuffer>
    dd90:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    dd92:	68fb      	ldr	r3, [r7, #12]
    dd94:	2b00      	cmp	r3, #0
    dd96:	d001      	beq.n	dd9c <am_util_stdio_vsprintf+0x248>
    dd98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dd9a:	e000      	b.n	dd9e <am_util_stdio_vsprintf+0x24a>
    dd9c:	2300      	movs	r3, #0
    dd9e:	68fa      	ldr	r2, [r7, #12]
    dda0:	4413      	add	r3, r2
    dda2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    dda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dda6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dda8:	4413      	add	r3, r2
    ddaa:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    ddac:	2300      	movs	r3, #0
    ddae:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    ddb0:	e00e      	b.n	ddd0 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    ddb2:	68fb      	ldr	r3, [r7, #12]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d005      	beq.n	ddc4 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    ddb8:	68fb      	ldr	r3, [r7, #12]
    ddba:	1c5a      	adds	r2, r3, #1
    ddbc:	60fa      	str	r2, [r7, #12]
    ddbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ddc0:	7812      	ldrb	r2, [r2, #0]
    ddc2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ddc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddc6:	3301      	adds	r3, #1
    ddc8:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    ddca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ddcc:	3301      	adds	r3, #1
    ddce:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    ddd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ddd2:	781b      	ldrb	r3, [r3, #0]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d1ec      	bne.n	ddb2 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    ddd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ddda:	2b00      	cmp	r3, #0
    dddc:	f000 81a7 	beq.w	e12e <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    dde0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dde2:	425b      	negs	r3, r3
    dde4:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    dde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ddea:	429a      	cmp	r2, r3
    ddec:	f080 819f 	bcs.w	e12e <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ddf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ddf4:	1ad3      	subs	r3, r2, r3
    ddf6:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ddf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    ddfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ddfe:	4619      	mov	r1, r3
    de00:	68f8      	ldr	r0, [r7, #12]
    de02:	f7ff fd83 	bl	d90c <padbuffer>
    de06:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    de08:	68fb      	ldr	r3, [r7, #12]
    de0a:	2b00      	cmp	r3, #0
    de0c:	d001      	beq.n	de12 <am_util_stdio_vsprintf+0x2be>
    de0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de10:	e000      	b.n	de14 <am_util_stdio_vsprintf+0x2c0>
    de12:	2300      	movs	r3, #0
    de14:	68fa      	ldr	r2, [r7, #12]
    de16:	4413      	add	r3, r2
    de18:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    de1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de1e:	4413      	add	r3, r2
    de20:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    de22:	2300      	movs	r3, #0
    de24:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    de26:	e182      	b.n	e12e <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    de28:	2301      	movs	r3, #1
    de2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    de32:	2b00      	cmp	r3, #0
    de34:	d00c      	beq.n	de50 <am_util_stdio_vsprintf+0x2fc>
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	3307      	adds	r3, #7
    de3a:	f023 0307 	bic.w	r3, r3, #7
    de3e:	f103 0208 	add.w	r2, r3, #8
    de42:	607a      	str	r2, [r7, #4]
    de44:	e9d3 3400 	ldrd	r3, r4, [r3]
    de48:	e008      	b.n	de5c <am_util_stdio_vsprintf+0x308>
    de4a:	bf00      	nop
    de4c:	1000c14c 	.word	0x1000c14c
                                      va_arg(pArgs, uint32_t);
    de50:	687b      	ldr	r3, [r7, #4]
    de52:	1d1a      	adds	r2, r3, #4
    de54:	607a      	str	r2, [r7, #4]
    de56:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    de58:	f04f 0400 	mov.w	r4, #0
    de5c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    de60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de62:	2b00      	cmp	r3, #0
    de64:	d01e      	beq.n	dea4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    de66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    de6a:	f7ff fc1a 	bl	d6a2 <ndigits_in_hex>
    de6e:	4602      	mov	r2, r0
    de70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de72:	1a9b      	subs	r3, r3, r2
    de74:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    de7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    de7c:	4619      	mov	r1, r3
    de7e:	68f8      	ldr	r0, [r7, #12]
    de80:	f7ff fd44 	bl	d90c <padbuffer>
    de84:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    de86:	68fb      	ldr	r3, [r7, #12]
    de88:	2b00      	cmp	r3, #0
    de8a:	d001      	beq.n	de90 <am_util_stdio_vsprintf+0x33c>
    de8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de8e:	e000      	b.n	de92 <am_util_stdio_vsprintf+0x33e>
    de90:	2300      	movs	r3, #0
    de92:	68fa      	ldr	r2, [r7, #12]
    de94:	4413      	add	r3, r2
    de96:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    de98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    de9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    de9c:	4413      	add	r3, r2
    de9e:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    dea0:	2300      	movs	r3, #0
    dea2:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    dea4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    dea8:	68fa      	ldr	r2, [r7, #12]
    deaa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    deae:	f7ff fcae 	bl	d80e <uint64_to_hexstr>
    deb2:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    deb4:	68fb      	ldr	r3, [r7, #12]
    deb6:	2b00      	cmp	r3, #0
    deb8:	d003      	beq.n	dec2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    deba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    debc:	68fa      	ldr	r2, [r7, #12]
    debe:	4413      	add	r3, r2
    dec0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    dec6:	4413      	add	r3, r2
    dec8:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    deca:	e133      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    decc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    ded0:	2b00      	cmp	r3, #0
    ded2:	d009      	beq.n	dee8 <am_util_stdio_vsprintf+0x394>
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	3307      	adds	r3, #7
    ded8:	f023 0307 	bic.w	r3, r3, #7
    dedc:	f103 0208 	add.w	r2, r3, #8
    dee0:	607a      	str	r2, [r7, #4]
    dee2:	e9d3 3400 	ldrd	r3, r4, [r3]
    dee6:	e005      	b.n	def4 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    dee8:	687b      	ldr	r3, [r7, #4]
    deea:	1d1a      	adds	r2, r3, #4
    deec:	607a      	str	r2, [r7, #4]
    deee:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    def0:	f04f 0400 	mov.w	r4, #0
    def4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    def8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    defa:	2b00      	cmp	r3, #0
    defc:	d01e      	beq.n	df3c <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    defe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df02:	f7ff fb90 	bl	d626 <ndigits_in_u64>
    df06:	4602      	mov	r2, r0
    df08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df0a:	1a9b      	subs	r3, r3, r2
    df0c:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    df0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    df12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    df14:	4619      	mov	r1, r3
    df16:	68f8      	ldr	r0, [r7, #12]
    df18:	f7ff fcf8 	bl	d90c <padbuffer>
    df1c:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    df1e:	68fb      	ldr	r3, [r7, #12]
    df20:	2b00      	cmp	r3, #0
    df22:	d001      	beq.n	df28 <am_util_stdio_vsprintf+0x3d4>
    df24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df26:	e000      	b.n	df2a <am_util_stdio_vsprintf+0x3d6>
    df28:	2300      	movs	r3, #0
    df2a:	68fa      	ldr	r2, [r7, #12]
    df2c:	4413      	add	r3, r2
    df2e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    df30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df34:	4413      	add	r3, r2
    df36:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    df38:	2300      	movs	r3, #0
    df3a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    df3c:	68fa      	ldr	r2, [r7, #12]
    df3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    df42:	f7ff fc1c 	bl	d77e <uint64_to_str>
    df46:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    df48:	68fb      	ldr	r3, [r7, #12]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d003      	beq.n	df56 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df50:	68fa      	ldr	r2, [r7, #12]
    df52:	4413      	add	r3, r2
    df54:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    df56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    df5a:	4413      	add	r3, r2
    df5c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    df5e:	e0e9      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    df64:	2b00      	cmp	r3, #0
    df66:	d009      	beq.n	df7c <am_util_stdio_vsprintf+0x428>
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	3307      	adds	r3, #7
    df6c:	f023 0307 	bic.w	r3, r3, #7
    df70:	f103 0208 	add.w	r2, r3, #8
    df74:	607a      	str	r2, [r7, #4]
    df76:	e9d3 3400 	ldrd	r3, r4, [r3]
    df7a:	e005      	b.n	df88 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	1d1a      	adds	r2, r3, #4
    df80:	607a      	str	r2, [r7, #4]
    df82:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    df84:	ea4f 74e3 	mov.w	r4, r3, asr #31
    df88:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    df8c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df90:	2b00      	cmp	r3, #0
    df92:	f174 0300 	sbcs.w	r3, r4, #0
    df96:	da0a      	bge.n	dfae <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    df98:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    df9c:	425b      	negs	r3, r3
    df9e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    dfa2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    dfa6:	2301      	movs	r3, #1
    dfa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    dfac:	e006      	b.n	dfbc <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    dfae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    dfb2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    dfb6:	2300      	movs	r3, #0
    dfb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    dfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d04a      	beq.n	e058 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    dfc2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    dfc6:	4618      	mov	r0, r3
    dfc8:	4621      	mov	r1, r4
    dfca:	f7ff fb4d 	bl	d668 <ndigits_in_i64>
    dfce:	4602      	mov	r2, r0
    dfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfd2:	1a9b      	subs	r3, r3, r2
    dfd4:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    dfd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d011      	beq.n	e002 <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    dfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfe0:	3b01      	subs	r3, #1
    dfe2:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    dfe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    dfe8:	2b30      	cmp	r3, #48	; 0x30
    dfea:	d10a      	bne.n	e002 <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    dfec:	68fb      	ldr	r3, [r7, #12]
    dfee:	2b00      	cmp	r3, #0
    dff0:	d004      	beq.n	dffc <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    dff2:	68fb      	ldr	r3, [r7, #12]
    dff4:	1c5a      	adds	r2, r3, #1
    dff6:	60fa      	str	r2, [r7, #12]
    dff8:	222d      	movs	r2, #45	; 0x2d
    dffa:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    dffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dffe:	3301      	adds	r3, #1
    e000:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e008:	4619      	mov	r1, r3
    e00a:	68f8      	ldr	r0, [r7, #12]
    e00c:	f7ff fc7e 	bl	d90c <padbuffer>
    e010:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e012:	68fb      	ldr	r3, [r7, #12]
    e014:	2b00      	cmp	r3, #0
    e016:	d001      	beq.n	e01c <am_util_stdio_vsprintf+0x4c8>
    e018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e01a:	e000      	b.n	e01e <am_util_stdio_vsprintf+0x4ca>
    e01c:	2300      	movs	r3, #0
    e01e:	68fa      	ldr	r2, [r7, #12]
    e020:	4413      	add	r3, r2
    e022:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e028:	4413      	add	r3, r2
    e02a:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e02c:	2300      	movs	r3, #0
    e02e:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e030:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e034:	2b00      	cmp	r3, #0
    e036:	d01e      	beq.n	e076 <am_util_stdio_vsprintf+0x522>
    e038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e03c:	2b20      	cmp	r3, #32
    e03e:	d11a      	bne.n	e076 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e040:	68fb      	ldr	r3, [r7, #12]
    e042:	2b00      	cmp	r3, #0
    e044:	d004      	beq.n	e050 <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e046:	68fb      	ldr	r3, [r7, #12]
    e048:	1c5a      	adds	r2, r3, #1
    e04a:	60fa      	str	r2, [r7, #12]
    e04c:	222d      	movs	r2, #45	; 0x2d
    e04e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e052:	3301      	adds	r3, #1
    e054:	647b      	str	r3, [r7, #68]	; 0x44
    e056:	e00e      	b.n	e076 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e058:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e05c:	2b00      	cmp	r3, #0
    e05e:	d00a      	beq.n	e076 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e060:	68fb      	ldr	r3, [r7, #12]
    e062:	2b00      	cmp	r3, #0
    e064:	d004      	beq.n	e070 <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e066:	68fb      	ldr	r3, [r7, #12]
    e068:	1c5a      	adds	r2, r3, #1
    e06a:	60fa      	str	r2, [r7, #12]
    e06c:	222d      	movs	r2, #45	; 0x2d
    e06e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e072:	3301      	adds	r3, #1
    e074:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e076:	68fa      	ldr	r2, [r7, #12]
    e078:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e07c:	f7ff fb7f 	bl	d77e <uint64_to_str>
    e080:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e082:	68fb      	ldr	r3, [r7, #12]
    e084:	2b00      	cmp	r3, #0
    e086:	d003      	beq.n	e090 <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e08a:	68fa      	ldr	r2, [r7, #12]
    e08c:	4413      	add	r3, r2
    e08e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e094:	4413      	add	r3, r2
    e096:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e098:	e04c      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e09a:	68fb      	ldr	r3, [r7, #12]
    e09c:	2b00      	cmp	r3, #0
    e09e:	d048      	beq.n	e132 <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	3307      	adds	r3, #7
    e0a4:	f023 0307 	bic.w	r3, r3, #7
    e0a8:	f103 0208 	add.w	r2, r3, #8
    e0ac:	607a      	str	r2, [r7, #4]
    e0ae:	e9d3 3400 	ldrd	r3, r4, [r3]
    e0b2:	4618      	mov	r0, r3
    e0b4:	4621      	mov	r1, r4
    e0b6:	f7fe f8bd 	bl	c234 <__aeabi_d2f>
    e0ba:	4603      	mov	r3, r0
    e0bc:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e0be:	68fb      	ldr	r3, [r7, #12]
    e0c0:	2214      	movs	r2, #20
    e0c2:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e0c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e0c6:	68f8      	ldr	r0, [r7, #12]
    e0c8:	ed97 0a06 	vldr	s0, [r7, #24]
    e0cc:	f7ff fc44 	bl	d958 <ftoa>
    e0d0:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	da14      	bge.n	e102 <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e0de:	d102      	bne.n	e0e6 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e0e0:	4b1e      	ldr	r3, [pc, #120]	; (e15c <am_util_stdio_vsprintf+0x608>)
    e0e2:	633b      	str	r3, [r7, #48]	; 0x30
    e0e4:	e008      	b.n	e0f8 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0e8:	f113 0f02 	cmn.w	r3, #2
    e0ec:	d102      	bne.n	e0f4 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e0ee:	4b1c      	ldr	r3, [pc, #112]	; (e160 <am_util_stdio_vsprintf+0x60c>)
    e0f0:	633b      	str	r3, [r7, #48]	; 0x30
    e0f2:	e001      	b.n	e0f8 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e0f4:	4b1b      	ldr	r3, [pc, #108]	; (e164 <am_util_stdio_vsprintf+0x610>)
    e0f6:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e0f8:	68fb      	ldr	r3, [r7, #12]
    e0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e0fc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e0fe:	2303      	movs	r3, #3
    e100:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e106:	4413      	add	r3, r2
    e108:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e10c:	68fa      	ldr	r2, [r7, #12]
    e10e:	4413      	add	r3, r2
    e110:	60fb      	str	r3, [r7, #12]
                }
                break;
    e112:	e00e      	b.n	e132 <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e114:	68fb      	ldr	r3, [r7, #12]
    e116:	2b00      	cmp	r3, #0
    e118:	d005      	beq.n	e126 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e11a:	68fb      	ldr	r3, [r7, #12]
    e11c:	1c5a      	adds	r2, r3, #1
    e11e:	60fa      	str	r2, [r7, #12]
    e120:	68ba      	ldr	r2, [r7, #8]
    e122:	7812      	ldrb	r2, [r2, #0]
    e124:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e128:	3301      	adds	r3, #1
    e12a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e12c:	e002      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>
                break;
    e12e:	bf00      	nop
    e130:	e000      	b.n	e134 <am_util_stdio_vsprintf+0x5e0>
                break;
    e132:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e134:	68bb      	ldr	r3, [r7, #8]
    e136:	3301      	adds	r3, #1
    e138:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e13a:	68bb      	ldr	r3, [r7, #8]
    e13c:	781b      	ldrb	r3, [r3, #0]
    e13e:	2b00      	cmp	r3, #0
    e140:	f47f ad13 	bne.w	db6a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e144:	68fb      	ldr	r3, [r7, #12]
    e146:	2b00      	cmp	r3, #0
    e148:	d002      	beq.n	e150 <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e14a:	68fb      	ldr	r3, [r7, #12]
    e14c:	2200      	movs	r2, #0
    e14e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e152:	4618      	mov	r0, r3
    e154:	375c      	adds	r7, #92	; 0x5c
    e156:	46bd      	mov	sp, r7
    e158:	bd90      	pop	{r4, r7, pc}
    e15a:	bf00      	nop
    e15c:	00302e30 	.word	0x00302e30
    e160:	00232e23 	.word	0x00232e23
    e164:	003f2e3f 	.word	0x003f2e3f

0000e168 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e168:	b40f      	push	{r0, r1, r2, r3}
    e16a:	b580      	push	{r7, lr}
    e16c:	b082      	sub	sp, #8
    e16e:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e170:	4b0d      	ldr	r3, [pc, #52]	; (e1a8 <am_util_stdio_printf+0x40>)
    e172:	681b      	ldr	r3, [r3, #0]
    e174:	2b00      	cmp	r3, #0
    e176:	d101      	bne.n	e17c <am_util_stdio_printf+0x14>
    {
        return 0;
    e178:	2300      	movs	r3, #0
    e17a:	e00d      	b.n	e198 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e17c:	f107 0314 	add.w	r3, r7, #20
    e180:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e182:	683a      	ldr	r2, [r7, #0]
    e184:	6939      	ldr	r1, [r7, #16]
    e186:	4809      	ldr	r0, [pc, #36]	; (e1ac <am_util_stdio_printf+0x44>)
    e188:	f7ff fce4 	bl	db54 <am_util_stdio_vsprintf>
    e18c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e18e:	4b06      	ldr	r3, [pc, #24]	; (e1a8 <am_util_stdio_printf+0x40>)
    e190:	681b      	ldr	r3, [r3, #0]
    e192:	4806      	ldr	r0, [pc, #24]	; (e1ac <am_util_stdio_printf+0x44>)
    e194:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e196:	687b      	ldr	r3, [r7, #4]
}
    e198:	4618      	mov	r0, r3
    e19a:	3708      	adds	r7, #8
    e19c:	46bd      	mov	sp, r7
    e19e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e1a2:	b004      	add	sp, #16
    e1a4:	4770      	bx	lr
    e1a6:	bf00      	nop
    e1a8:	1000c188 	.word	0x1000c188
    e1ac:	1000c04c 	.word	0x1000c04c

0000e1b0 <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e1b0:	b480      	push	{r7}
    e1b2:	b085      	sub	sp, #20
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	60f8      	str	r0, [r7, #12]
    e1b8:	4638      	mov	r0, r7
    e1ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e1be:	683b      	ldr	r3, [r7, #0]
    e1c0:	461a      	mov	r2, r3
    e1c2:	4613      	mov	r3, r2
    e1c4:	009b      	lsls	r3, r3, #2
    e1c6:	4413      	add	r3, r2
    e1c8:	009b      	lsls	r3, r3, #2
    e1ca:	461a      	mov	r2, r3
    e1cc:	68fb      	ldr	r3, [r7, #12]
    e1ce:	4413      	add	r3, r2
    e1d0:	2200      	movs	r2, #0
    e1d2:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e1d4:	683b      	ldr	r3, [r7, #0]
    e1d6:	461a      	mov	r2, r3
    e1d8:	4613      	mov	r3, r2
    e1da:	009b      	lsls	r3, r3, #2
    e1dc:	4413      	add	r3, r2
    e1de:	009b      	lsls	r3, r3, #2
    e1e0:	461a      	mov	r2, r3
    e1e2:	68fb      	ldr	r3, [r7, #12]
    e1e4:	4413      	add	r3, r2
    e1e6:	2200      	movs	r2, #0
    e1e8:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e1ea:	683b      	ldr	r3, [r7, #0]
    e1ec:	461a      	mov	r2, r3
    e1ee:	4613      	mov	r3, r2
    e1f0:	009b      	lsls	r3, r3, #2
    e1f2:	4413      	add	r3, r2
    e1f4:	009b      	lsls	r3, r3, #2
    e1f6:	461a      	mov	r2, r3
    e1f8:	68fb      	ldr	r3, [r7, #12]
    e1fa:	4413      	add	r3, r2
    e1fc:	2200      	movs	r2, #0
    e1fe:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e200:	683b      	ldr	r3, [r7, #0]
    e202:	461a      	mov	r2, r3
    e204:	4613      	mov	r3, r2
    e206:	009b      	lsls	r3, r3, #2
    e208:	4413      	add	r3, r2
    e20a:	009b      	lsls	r3, r3, #2
    e20c:	461a      	mov	r2, r3
    e20e:	68fb      	ldr	r3, [r7, #12]
    e210:	4413      	add	r3, r2
    e212:	68ba      	ldr	r2, [r7, #8]
    e214:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e216:	683b      	ldr	r3, [r7, #0]
    e218:	461a      	mov	r2, r3
    e21a:	4613      	mov	r3, r2
    e21c:	009b      	lsls	r3, r3, #2
    e21e:	4413      	add	r3, r2
    e220:	009b      	lsls	r3, r3, #2
    e222:	461a      	mov	r2, r3
    e224:	68fb      	ldr	r3, [r7, #12]
    e226:	4413      	add	r3, r2
    e228:	687a      	ldr	r2, [r7, #4]
    e22a:	601a      	str	r2, [r3, #0]
}
    e22c:	bf00      	nop
    e22e:	3714      	adds	r7, #20
    e230:	46bd      	mov	sp, r7
    e232:	f85d 7b04 	ldr.w	r7, [sp], #4
    e236:	4770      	bx	lr

0000e238 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e238:	b580      	push	{r7, lr}
    e23a:	b086      	sub	sp, #24
    e23c:	af00      	add	r7, sp, #0
    e23e:	60f8      	str	r0, [r7, #12]
    e240:	60b9      	str	r1, [r7, #8]
    e242:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e244:	2300      	movs	r3, #0
    e246:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e248:	2300      	movs	r3, #0
    e24a:	617b      	str	r3, [r7, #20]
    e24c:	e00e      	b.n	e26c <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e24e:	697a      	ldr	r2, [r7, #20]
    e250:	4613      	mov	r3, r2
    e252:	005b      	lsls	r3, r3, #1
    e254:	4413      	add	r3, r2
    e256:	009b      	lsls	r3, r3, #2
    e258:	461a      	mov	r2, r3
    e25a:	68bb      	ldr	r3, [r7, #8]
    e25c:	4413      	add	r3, r2
    e25e:	cb0e      	ldmia	r3, {r1, r2, r3}
    e260:	68f8      	ldr	r0, [r7, #12]
    e262:	f7ff ffa5 	bl	e1b0 <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e266:	697b      	ldr	r3, [r7, #20]
    e268:	3301      	adds	r3, #1
    e26a:	617b      	str	r3, [r7, #20]
    e26c:	697a      	ldr	r2, [r7, #20]
    e26e:	687b      	ldr	r3, [r7, #4]
    e270:	429a      	cmp	r2, r3
    e272:	d3ec      	bcc.n	e24e <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e274:	bf00      	nop
    e276:	3718      	adds	r7, #24
    e278:	46bd      	mov	sp, r7
    e27a:	bd80      	pop	{r7, pc}

0000e27c <am_app_utils_ring_buffer_push>:
//                  If false, data could be pushed no matter buffer is full or not.
// Return:
//      bytes pushed into the ring buffer
//*****************************************************************************
uint32_t am_app_utils_ring_buffer_push(am_app_utils_ring_buffer_t *psBuffer, void *pvSource, uint32_t ui32Bytes, bool bFullCheck)
{
    e27c:	b580      	push	{r7, lr}
    e27e:	b088      	sub	sp, #32
    e280:	af00      	add	r7, sp, #0
    e282:	60f8      	str	r0, [r7, #12]
    e284:	60b9      	str	r1, [r7, #8]
    e286:	607a      	str	r2, [r7, #4]
    e288:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32CopyLen = 0;
    e28a:	2300      	movs	r3, #0
    e28c:	61fb      	str	r3, [r7, #28]
    uint32_t ui32ReturnPushLen = 0;
    e28e:	2300      	movs	r3, #0
    e290:	617b      	str	r3, [r7, #20]
    uint32_t ui32TempLen = 0;
    e292:	2300      	movs	r3, #0
    e294:	61bb      	str	r3, [r7, #24]
    uint8_t *pui8Source;
    
    ui32CopyLen = ui32Bytes;
    e296:	687b      	ldr	r3, [r7, #4]
    e298:	61fb      	str	r3, [r7, #28]
    pui8Source = (uint8_t*)pvSource;
    e29a:	68bb      	ldr	r3, [r7, #8]
    e29c:	613b      	str	r3, [r7, #16]

    if(bFullCheck == true)
    e29e:	78fb      	ldrb	r3, [r7, #3]
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	f000 8092 	beq.w	e3ca <am_app_utils_ring_buffer_push+0x14e>
    {
        // won't push any data if buffer is full
        if(am_app_utils_ring_buffer_full(psBuffer))
    e2a6:	68fb      	ldr	r3, [r7, #12]
    e2a8:	685a      	ldr	r2, [r3, #4]
    e2aa:	68fb      	ldr	r3, [r7, #12]
    e2ac:	689b      	ldr	r3, [r3, #8]
    e2ae:	429a      	cmp	r2, r3
    e2b0:	d109      	bne.n	e2c6 <am_app_utils_ring_buffer_push+0x4a>
    e2b2:	68fb      	ldr	r3, [r7, #12]
    e2b4:	68db      	ldr	r3, [r3, #12]
    e2b6:	2b01      	cmp	r3, #1
    e2b8:	d105      	bne.n	e2c6 <am_app_utils_ring_buffer_push+0x4a>
        {
            ui32CopyLen = 0;
    e2ba:	2300      	movs	r3, #0
    e2bc:	61fb      	str	r3, [r7, #28]
            ui32ReturnPushLen =0;
    e2be:	2300      	movs	r3, #0
    e2c0:	617b      	str	r3, [r7, #20]
            return ui32ReturnPushLen;
    e2c2:	697b      	ldr	r3, [r7, #20]
    e2c4:	e0f7      	b.n	e4b6 <am_app_utils_ring_buffer_push+0x23a>
        }
    
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e2c6:	68fb      	ldr	r3, [r7, #12]
    e2c8:	685a      	ldr	r2, [r3, #4]
    e2ca:	68fb      	ldr	r3, [r7, #12]
    e2cc:	689b      	ldr	r3, [r3, #8]
    e2ce:	429a      	cmp	r2, r3
    e2d0:	d10f      	bne.n	e2f2 <am_app_utils_ring_buffer_push+0x76>
    e2d2:	68fb      	ldr	r3, [r7, #12]
    e2d4:	68db      	ldr	r3, [r3, #12]
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d10b      	bne.n	e2f2 <am_app_utils_ring_buffer_push+0x76>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2da:	68fb      	ldr	r3, [r7, #12]
    e2dc:	691b      	ldr	r3, [r3, #16]
    e2de:	69fa      	ldr	r2, [r7, #28]
    e2e0:	429a      	cmp	r2, r3
    e2e2:	d32b      	bcc.n	e33c <am_app_utils_ring_buffer_push+0xc0>
            {      
                psBuffer->ui32OverWriting = 1;
    e2e4:	68fb      	ldr	r3, [r7, #12]
    e2e6:	2201      	movs	r2, #1
    e2e8:	60da      	str	r2, [r3, #12]
                ui32CopyLen = psBuffer->ui32Capacity;
    e2ea:	68fb      	ldr	r3, [r7, #12]
    e2ec:	691b      	ldr	r3, [r3, #16]
    e2ee:	61fb      	str	r3, [r7, #28]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e2f0:	e024      	b.n	e33c <am_app_utils_ring_buffer_push+0xc0>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e2f2:	68fb      	ldr	r3, [r7, #12]
    e2f4:	689a      	ldr	r2, [r3, #8]
    e2f6:	68fb      	ldr	r3, [r7, #12]
    e2f8:	691b      	ldr	r3, [r3, #16]
    e2fa:	441a      	add	r2, r3
    e2fc:	68fb      	ldr	r3, [r7, #12]
    e2fe:	685b      	ldr	r3, [r3, #4]
    e300:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e302:	68fa      	ldr	r2, [r7, #12]
    e304:	6912      	ldr	r2, [r2, #16]
    e306:	fbb3 f1f2 	udiv	r1, r3, r2
    e30a:	fb02 f201 	mul.w	r2, r2, r1
    e30e:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e310:	69fa      	ldr	r2, [r7, #28]
    e312:	429a      	cmp	r2, r3
    e314:	d312      	bcc.n	e33c <am_app_utils_ring_buffer_push+0xc0>
            {    
                psBuffer->ui32OverWriting = 1;
    e316:	68fb      	ldr	r3, [r7, #12]
    e318:	2201      	movs	r2, #1
    e31a:	60da      	str	r2, [r3, #12]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e31c:	68fb      	ldr	r3, [r7, #12]
    e31e:	689a      	ldr	r2, [r3, #8]
    e320:	68fb      	ldr	r3, [r7, #12]
    e322:	691b      	ldr	r3, [r3, #16]
    e324:	441a      	add	r2, r3
    e326:	68fb      	ldr	r3, [r7, #12]
    e328:	685b      	ldr	r3, [r3, #4]
    e32a:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity);
    e32c:	68fa      	ldr	r2, [r7, #12]
    e32e:	6912      	ldr	r2, [r2, #16]
                ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e330:	fbb3 f1f2 	udiv	r1, r3, r2
    e334:	fb02 f201 	mul.w	r2, r2, r1
    e338:	1a9b      	subs	r3, r3, r2
    e33a:	61fb      	str	r3, [r7, #28]
            }
    
        }        
            
        ui32ReturnPushLen = ui32CopyLen;
    e33c:	69fb      	ldr	r3, [r7, #28]
    e33e:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e340:	e020      	b.n	e384 <am_app_utils_ring_buffer_push+0x108>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e342:	68fb      	ldr	r3, [r7, #12]
    e344:	691a      	ldr	r2, [r3, #16]
    e346:	68fb      	ldr	r3, [r7, #12]
    e348:	685b      	ldr	r3, [r3, #4]
    e34a:	1ad3      	subs	r3, r2, r3
    e34c:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e34e:	68fb      	ldr	r3, [r7, #12]
    e350:	681a      	ldr	r2, [r3, #0]
    e352:	68fb      	ldr	r3, [r7, #12]
    e354:	685b      	ldr	r3, [r3, #4]
    e356:	4413      	add	r3, r2
    e358:	69ba      	ldr	r2, [r7, #24]
    e35a:	6939      	ldr	r1, [r7, #16]
    e35c:	4618      	mov	r0, r3
    e35e:	f7fd fecf 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e362:	68fb      	ldr	r3, [r7, #12]
    e364:	685a      	ldr	r2, [r3, #4]
    e366:	69bb      	ldr	r3, [r7, #24]
    e368:	4413      	add	r3, r2
    e36a:	68fa      	ldr	r2, [r7, #12]
    e36c:	6912      	ldr	r2, [r2, #16]
    e36e:	fbb3 f1f2 	udiv	r1, r3, r2
    e372:	fb02 f201 	mul.w	r2, r2, r1
    e376:	1a9a      	subs	r2, r3, r2
    e378:	68fb      	ldr	r3, [r7, #12]
    e37a:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e37c:	69fa      	ldr	r2, [r7, #28]
    e37e:	69bb      	ldr	r3, [r7, #24]
    e380:	1ad3      	subs	r3, r2, r3
    e382:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e384:	68fb      	ldr	r3, [r7, #12]
    e386:	685a      	ldr	r2, [r3, #4]
    e388:	69fb      	ldr	r3, [r7, #28]
    e38a:	441a      	add	r2, r3
    e38c:	68fb      	ldr	r3, [r7, #12]
    e38e:	691b      	ldr	r3, [r3, #16]
    e390:	429a      	cmp	r2, r3
    e392:	d2d6      	bcs.n	e342 <am_app_utils_ring_buffer_push+0xc6>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e394:	68fb      	ldr	r3, [r7, #12]
    e396:	681a      	ldr	r2, [r3, #0]
    e398:	68fb      	ldr	r3, [r7, #12]
    e39a:	685b      	ldr	r3, [r3, #4]
    e39c:	18d0      	adds	r0, r2, r3
    e39e:	693a      	ldr	r2, [r7, #16]
    e3a0:	69bb      	ldr	r3, [r7, #24]
    e3a2:	4413      	add	r3, r2
    e3a4:	69fa      	ldr	r2, [r7, #28]
    e3a6:	4619      	mov	r1, r3
    e3a8:	f7fd feaa 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e3ac:	68fb      	ldr	r3, [r7, #12]
    e3ae:	685a      	ldr	r2, [r3, #4]
    e3b0:	69fb      	ldr	r3, [r7, #28]
    e3b2:	4413      	add	r3, r2
    e3b4:	68fa      	ldr	r2, [r7, #12]
    e3b6:	6912      	ldr	r2, [r2, #16]
    e3b8:	fbb3 f1f2 	udiv	r1, r3, r2
    e3bc:	fb02 f201 	mul.w	r2, r2, r1
    e3c0:	1a9a      	subs	r2, r3, r2
    e3c2:	68fb      	ldr	r3, [r7, #12]
    e3c4:	605a      	str	r2, [r3, #4]
        
        return ui32ReturnPushLen;
    e3c6:	697b      	ldr	r3, [r7, #20]
    e3c8:	e075      	b.n	e4b6 <am_app_utils_ring_buffer_push+0x23a>
    }
    else        // if no full check, the return bytes are always ui32Bytes.
    {
        // push data until the buffer is full
        if(am_app_utils_ring_buffer_empty(psBuffer))
    e3ca:	68fb      	ldr	r3, [r7, #12]
    e3cc:	685a      	ldr	r2, [r3, #4]
    e3ce:	68fb      	ldr	r3, [r7, #12]
    e3d0:	689b      	ldr	r3, [r3, #8]
    e3d2:	429a      	cmp	r2, r3
    e3d4:	d10c      	bne.n	e3f0 <am_app_utils_ring_buffer_push+0x174>
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	68db      	ldr	r3, [r3, #12]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d108      	bne.n	e3f0 <am_app_utils_ring_buffer_push+0x174>
        {
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3de:	68fb      	ldr	r3, [r7, #12]
    e3e0:	691b      	ldr	r3, [r3, #16]
    e3e2:	69fa      	ldr	r2, [r7, #28]
    e3e4:	429a      	cmp	r2, r3
    e3e6:	d318      	bcc.n	e41a <am_app_utils_ring_buffer_push+0x19e>
            {      
                psBuffer->ui32OverWriting = 1;
    e3e8:	68fb      	ldr	r3, [r7, #12]
    e3ea:	2201      	movs	r2, #1
    e3ec:	60da      	str	r2, [r3, #12]
            if(ui32CopyLen >= psBuffer->ui32Capacity)
    e3ee:	e014      	b.n	e41a <am_app_utils_ring_buffer_push+0x19e>
            }
        }
        else
        {
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e3f0:	68fb      	ldr	r3, [r7, #12]
    e3f2:	689a      	ldr	r2, [r3, #8]
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	691b      	ldr	r3, [r3, #16]
    e3f8:	441a      	add	r2, r3
    e3fa:	68fb      	ldr	r3, [r7, #12]
    e3fc:	685b      	ldr	r3, [r3, #4]
    e3fe:	1ad3      	subs	r3, r2, r3
                % psBuffer->ui32Capacity) <= ui32CopyLen)
    e400:	68fa      	ldr	r2, [r7, #12]
    e402:	6912      	ldr	r2, [r2, #16]
    e404:	fbb3 f1f2 	udiv	r1, r3, r2
    e408:	fb02 f201 	mul.w	r2, r2, r1
    e40c:	1a9b      	subs	r3, r3, r2
            if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e40e:	69fa      	ldr	r2, [r7, #28]
    e410:	429a      	cmp	r2, r3
    e412:	d302      	bcc.n	e41a <am_app_utils_ring_buffer_push+0x19e>
            {    
                psBuffer->ui32OverWriting = 1;
    e414:	68fb      	ldr	r3, [r7, #12]
    e416:	2201      	movs	r2, #1
    e418:	60da      	str	r2, [r3, #12]
            }
        }        

        ui32ReturnPushLen = ui32CopyLen;
    e41a:	69fb      	ldr	r3, [r7, #28]
    e41c:	617b      	str	r3, [r7, #20]
    
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e41e:	e020      	b.n	e462 <am_app_utils_ring_buffer_push+0x1e6>
        {
            ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e420:	68fb      	ldr	r3, [r7, #12]
    e422:	691a      	ldr	r2, [r3, #16]
    e424:	68fb      	ldr	r3, [r7, #12]
    e426:	685b      	ldr	r3, [r3, #4]
    e428:	1ad3      	subs	r3, r2, r3
    e42a:	61bb      	str	r3, [r7, #24]
            memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e42c:	68fb      	ldr	r3, [r7, #12]
    e42e:	681a      	ldr	r2, [r3, #0]
    e430:	68fb      	ldr	r3, [r7, #12]
    e432:	685b      	ldr	r3, [r3, #4]
    e434:	4413      	add	r3, r2
    e436:	69ba      	ldr	r2, [r7, #24]
    e438:	6939      	ldr	r1, [r7, #16]
    e43a:	4618      	mov	r0, r3
    e43c:	f7fd fe60 	bl	c100 <memcpy>
            psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e440:	68fb      	ldr	r3, [r7, #12]
    e442:	685a      	ldr	r2, [r3, #4]
    e444:	69bb      	ldr	r3, [r7, #24]
    e446:	4413      	add	r3, r2
    e448:	68fa      	ldr	r2, [r7, #12]
    e44a:	6912      	ldr	r2, [r2, #16]
    e44c:	fbb3 f1f2 	udiv	r1, r3, r2
    e450:	fb02 f201 	mul.w	r2, r2, r1
    e454:	1a9a      	subs	r2, r3, r2
    e456:	68fb      	ldr	r3, [r7, #12]
    e458:	605a      	str	r2, [r3, #4]
            ui32CopyLen -= ui32TempLen;
    e45a:	69fa      	ldr	r2, [r7, #28]
    e45c:	69bb      	ldr	r3, [r7, #24]
    e45e:	1ad3      	subs	r3, r2, r3
    e460:	61fb      	str	r3, [r7, #28]
        while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	685a      	ldr	r2, [r3, #4]
    e466:	69fb      	ldr	r3, [r7, #28]
    e468:	441a      	add	r2, r3
    e46a:	68fb      	ldr	r3, [r7, #12]
    e46c:	691b      	ldr	r3, [r3, #16]
    e46e:	429a      	cmp	r2, r3
    e470:	d2d6      	bcs.n	e420 <am_app_utils_ring_buffer_push+0x1a4>
        }
//        configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
        
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e472:	68fb      	ldr	r3, [r7, #12]
    e474:	681a      	ldr	r2, [r3, #0]
    e476:	68fb      	ldr	r3, [r7, #12]
    e478:	685b      	ldr	r3, [r3, #4]
    e47a:	18d0      	adds	r0, r2, r3
    e47c:	693a      	ldr	r2, [r7, #16]
    e47e:	69bb      	ldr	r3, [r7, #24]
    e480:	4413      	add	r3, r2
    e482:	69fa      	ldr	r2, [r7, #28]
    e484:	4619      	mov	r1, r3
    e486:	f7fd fe3b 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e48a:	68fb      	ldr	r3, [r7, #12]
    e48c:	685a      	ldr	r2, [r3, #4]
    e48e:	69fb      	ldr	r3, [r7, #28]
    e490:	4413      	add	r3, r2
    e492:	68fa      	ldr	r2, [r7, #12]
    e494:	6912      	ldr	r2, [r2, #16]
    e496:	fbb3 f1f2 	udiv	r1, r3, r2
    e49a:	fb02 f201 	mul.w	r2, r2, r1
    e49e:	1a9a      	subs	r2, r3, r2
    e4a0:	68fb      	ldr	r3, [r7, #12]
    e4a2:	605a      	str	r2, [r3, #4]
        
        //
        // Keep read and write at same position
        //
        if(psBuffer->ui32OverWriting == 1)
    e4a4:	68fb      	ldr	r3, [r7, #12]
    e4a6:	68db      	ldr	r3, [r3, #12]
    e4a8:	2b01      	cmp	r3, #1
    e4aa:	d103      	bne.n	e4b4 <am_app_utils_ring_buffer_push+0x238>
        {
            psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e4ac:	68fb      	ldr	r3, [r7, #12]
    e4ae:	685a      	ldr	r2, [r3, #4]
    e4b0:	68fb      	ldr	r3, [r7, #12]
    e4b2:	609a      	str	r2, [r3, #8]
        }
        
        return ui32ReturnPushLen;
    e4b4:	697b      	ldr	r3, [r7, #20]
    }
}
    e4b6:	4618      	mov	r0, r3
    e4b8:	3720      	adds	r7, #32
    e4ba:	46bd      	mov	sp, r7
    e4bc:	bd80      	pop	{r7, pc}

0000e4be <am_app_utils_ring_buffer_pop>:


uint32_t am_app_utils_ring_buffer_pop(am_app_utils_ring_buffer_t *psBuffer, void *pvDest,
                         uint32_t ui32Bytes)
{
    e4be:	b580      	push	{r7, lr}
    e4c0:	b08a      	sub	sp, #40	; 0x28
    e4c2:	af00      	add	r7, sp, #0
    e4c4:	60f8      	str	r0, [r7, #12]
    e4c6:	60b9      	str	r1, [r7, #8]
    e4c8:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e4ca:	2300      	movs	r3, #0
    e4cc:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint32_t ui32TempLen = 0;
    e4ce:	2300      	movs	r3, #0
    e4d0:	623b      	str	r3, [r7, #32]
    
    uint32_t ui32DataLen = 0;
    e4d2:	2300      	movs	r3, #0
    e4d4:	61fb      	str	r3, [r7, #28]

    uint32_t ui32ReturnPopLen = 0;
    e4d6:	2300      	movs	r3, #0
    e4d8:	61bb      	str	r3, [r7, #24]

    uint8_t *pui8Dest;

    pui8Dest = (uint8_t *) pvDest;
    e4da:	68bb      	ldr	r3, [r7, #8]
    e4dc:	617b      	str	r3, [r7, #20]
    ui32DataLen = am_app_utils_get_ring_buffer_status(psBuffer);
    e4de:	68f8      	ldr	r0, [r7, #12]
    e4e0:	f000 f862 	bl	e5a8 <am_app_utils_get_ring_buffer_status>
    e4e4:	61f8      	str	r0, [r7, #28]
   
    if(am_app_utils_ring_buffer_overwrite(psBuffer))
    e4e6:	68fb      	ldr	r3, [r7, #12]
    e4e8:	685a      	ldr	r2, [r3, #4]
    e4ea:	68fb      	ldr	r3, [r7, #12]
    e4ec:	689b      	ldr	r3, [r3, #8]
    e4ee:	429a      	cmp	r2, r3
    e4f0:	d007      	beq.n	e502 <am_app_utils_ring_buffer_pop+0x44>
    e4f2:	68fb      	ldr	r3, [r7, #12]
    e4f4:	68db      	ldr	r3, [r3, #12]
    e4f6:	2b01      	cmp	r3, #1
    e4f8:	d103      	bne.n	e502 <am_app_utils_ring_buffer_pop+0x44>
    {
        psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e4fa:	68fb      	ldr	r3, [r7, #12]
    e4fc:	685a      	ldr	r2, [r3, #4]
    e4fe:	68fb      	ldr	r3, [r7, #12]
    e500:	609a      	str	r2, [r3, #8]
       
    }

    // pop len can't exceed the length of buffer
    ui32CopyLen = ui32Bytes < ui32DataLen ? ui32Bytes : ui32DataLen;
    e502:	69fa      	ldr	r2, [r7, #28]
    e504:	687b      	ldr	r3, [r7, #4]
    e506:	4293      	cmp	r3, r2
    e508:	bf28      	it	cs
    e50a:	4613      	movcs	r3, r2
    e50c:	627b      	str	r3, [r7, #36]	; 0x24
    
    ui32ReturnPopLen = ui32CopyLen;
    e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e510:	61bb      	str	r3, [r7, #24]

    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e512:	e020      	b.n	e556 <am_app_utils_ring_buffer_pop+0x98>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read;
    e514:	68fb      	ldr	r3, [r7, #12]
    e516:	691a      	ldr	r2, [r3, #16]
    e518:	68fb      	ldr	r3, [r7, #12]
    e51a:	689b      	ldr	r3, [r3, #8]
    e51c:	1ad3      	subs	r3, r2, r3
    e51e:	623b      	str	r3, [r7, #32]
        memcpy(pui8Dest, (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32TempLen);
    e520:	68fb      	ldr	r3, [r7, #12]
    e522:	681a      	ldr	r2, [r3, #0]
    e524:	68fb      	ldr	r3, [r7, #12]
    e526:	689b      	ldr	r3, [r3, #8]
    e528:	4413      	add	r3, r2
    e52a:	6a3a      	ldr	r2, [r7, #32]
    e52c:	4619      	mov	r1, r3
    e52e:	6978      	ldr	r0, [r7, #20]
    e530:	f7fd fde6 	bl	c100 <memcpy>
        psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32TempLen) % psBuffer->ui32Capacity);
    e534:	68fb      	ldr	r3, [r7, #12]
    e536:	689a      	ldr	r2, [r3, #8]
    e538:	6a3b      	ldr	r3, [r7, #32]
    e53a:	4413      	add	r3, r2
    e53c:	68fa      	ldr	r2, [r7, #12]
    e53e:	6912      	ldr	r2, [r2, #16]
    e540:	fbb3 f1f2 	udiv	r1, r3, r2
    e544:	fb02 f201 	mul.w	r2, r2, r1
    e548:	1a9a      	subs	r2, r3, r2
    e54a:	68fb      	ldr	r3, [r7, #12]
    e54c:	609a      	str	r2, [r3, #8]
        ui32CopyLen -= ui32TempLen;
    e54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e550:	6a3b      	ldr	r3, [r7, #32]
    e552:	1ad3      	subs	r3, r2, r3
    e554:	627b      	str	r3, [r7, #36]	; 0x24
    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e556:	68fb      	ldr	r3, [r7, #12]
    e558:	689a      	ldr	r2, [r3, #8]
    e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e55c:	441a      	add	r2, r3
    e55e:	68fb      	ldr	r3, [r7, #12]
    e560:	691b      	ldr	r3, [r3, #16]
    e562:	429a      	cmp	r2, r3
    e564:	d2d6      	bcs.n	e514 <am_app_utils_ring_buffer_pop+0x56>
    }

//    configASSERT((psBuffer->ui32BufferHead_read + ui32CopyLen) < psBuffer->ui32Capacity);
    
    memcpy(&pui8Dest[ui32TempLen], (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32CopyLen);
    e566:	697a      	ldr	r2, [r7, #20]
    e568:	6a3b      	ldr	r3, [r7, #32]
    e56a:	18d0      	adds	r0, r2, r3
    e56c:	68fb      	ldr	r3, [r7, #12]
    e56e:	681a      	ldr	r2, [r3, #0]
    e570:	68fb      	ldr	r3, [r7, #12]
    e572:	689b      	ldr	r3, [r3, #8]
    e574:	4413      	add	r3, r2
    e576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e578:	4619      	mov	r1, r3
    e57a:	f7fd fdc1 	bl	c100 <memcpy>
    
    psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32CopyLen) % psBuffer->ui32Capacity);
    e57e:	68fb      	ldr	r3, [r7, #12]
    e580:	689a      	ldr	r2, [r3, #8]
    e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e584:	4413      	add	r3, r2
    e586:	68fa      	ldr	r2, [r7, #12]
    e588:	6912      	ldr	r2, [r2, #16]
    e58a:	fbb3 f1f2 	udiv	r1, r3, r2
    e58e:	fb02 f201 	mul.w	r2, r2, r1
    e592:	1a9a      	subs	r2, r3, r2
    e594:	68fb      	ldr	r3, [r7, #12]
    e596:	609a      	str	r2, [r3, #8]
      
    psBuffer->ui32OverWriting = 0;
    e598:	68fb      	ldr	r3, [r7, #12]
    e59a:	2200      	movs	r2, #0
    e59c:	60da      	str	r2, [r3, #12]

    return ui32ReturnPopLen;
    e59e:	69bb      	ldr	r3, [r7, #24]
}
    e5a0:	4618      	mov	r0, r3
    e5a2:	3728      	adds	r7, #40	; 0x28
    e5a4:	46bd      	mov	sp, r7
    e5a6:	bd80      	pop	{r7, pc}

0000e5a8 <am_app_utils_get_ring_buffer_status>:
//! @return The number of data left.
//
//*****************************************************************************
uint32_t
am_app_utils_get_ring_buffer_status(am_app_utils_ring_buffer_t *psBuffer)
{
    e5a8:	b480      	push	{r7}
    e5aa:	b085      	sub	sp, #20
    e5ac:	af00      	add	r7, sp, #0
    e5ae:	6078      	str	r0, [r7, #4]
    uint32_t ui32NewDataLen = 0;
    e5b0:	2300      	movs	r3, #0
    e5b2:	60fb      	str	r3, [r7, #12]
    
    if (am_app_utils_ring_buffer_overwrite(psBuffer) || am_app_utils_ring_buffer_full(psBuffer))
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	685a      	ldr	r2, [r3, #4]
    e5b8:	687b      	ldr	r3, [r7, #4]
    e5ba:	689b      	ldr	r3, [r3, #8]
    e5bc:	429a      	cmp	r2, r3
    e5be:	d003      	beq.n	e5c8 <am_app_utils_get_ring_buffer_status+0x20>
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	68db      	ldr	r3, [r3, #12]
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d009      	beq.n	e5dc <am_app_utils_get_ring_buffer_status+0x34>
    e5c8:	687b      	ldr	r3, [r7, #4]
    e5ca:	685a      	ldr	r2, [r3, #4]
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	689b      	ldr	r3, [r3, #8]
    e5d0:	429a      	cmp	r2, r3
    e5d2:	d108      	bne.n	e5e6 <am_app_utils_get_ring_buffer_status+0x3e>
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	68db      	ldr	r3, [r3, #12]
    e5d8:	2b01      	cmp	r3, #1
    e5da:	d104      	bne.n	e5e6 <am_app_utils_get_ring_buffer_status+0x3e>
    {
        ui32NewDataLen = psBuffer->ui32Capacity;
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	691b      	ldr	r3, [r3, #16]
    e5e0:	60fb      	str	r3, [r7, #12]
        return ui32NewDataLen;
    e5e2:	68fb      	ldr	r3, [r7, #12]
    e5e4:	e010      	b.n	e608 <am_app_utils_get_ring_buffer_status+0x60>
    }
    
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	685a      	ldr	r2, [r3, #4]
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	691b      	ldr	r3, [r3, #16]
    e5ee:	441a      	add	r2, r3
    e5f0:	687b      	ldr	r3, [r7, #4]
    e5f2:	689b      	ldr	r3, [r3, #8]
    e5f4:	1ad3      	subs	r3, r2, r3
        psBuffer->ui32Capacity);
    e5f6:	687a      	ldr	r2, [r7, #4]
    e5f8:	6912      	ldr	r2, [r2, #16]
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e5fa:	fbb3 f1f2 	udiv	r1, r3, r2
    e5fe:	fb02 f201 	mul.w	r2, r2, r1
    e602:	1a9b      	subs	r3, r3, r2
    e604:	60fb      	str	r3, [r7, #12]

    return ui32NewDataLen; 
    e606:	68fb      	ldr	r3, [r7, #12]

}
    e608:	4618      	mov	r0, r3
    e60a:	3714      	adds	r7, #20
    e60c:	46bd      	mov	sp, r7
    e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e612:	4770      	bx	lr

0000e614 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e614:	b580      	push	{r7, lr}
    e616:	b082      	sub	sp, #8
    e618:	af00      	add	r7, sp, #0
    e61a:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e61c:	687b      	ldr	r3, [r7, #4]
    e61e:	2b00      	cmp	r3, #0
    e620:	d03d      	beq.n	e69e <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e622:	687b      	ldr	r3, [r7, #4]
    e624:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e626:	2b31      	cmp	r3, #49	; 0x31
    e628:	d839      	bhi.n	e69e <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e62a:	687b      	ldr	r3, [r7, #4]
    e62c:	685b      	ldr	r3, [r3, #4]
    e62e:	f003 0302 	and.w	r3, r3, #2
    e632:	2b00      	cmp	r3, #0
    e634:	d019      	beq.n	e66a <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	681a      	ldr	r2, [r3, #0]
    e63a:	4b1b      	ldr	r3, [pc, #108]	; (e6a8 <am_devices_led_init+0x94>)
    e63c:	6819      	ldr	r1, [r3, #0]
    e63e:	4610      	mov	r0, r2
    e640:	f7fe fab8 	bl	cbb4 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e644:	687b      	ldr	r3, [r7, #4]
    e646:	681b      	ldr	r3, [r3, #0]
    e648:	2103      	movs	r1, #3
    e64a:	4618      	mov	r0, r3
    e64c:	f7fe fcf2 	bl	d034 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e658:	b2db      	uxtb	r3, r3
    e65a:	f003 0301 	and.w	r3, r3, #1
    e65e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e660:	4619      	mov	r1, r3
    e662:	4610      	mov	r0, r2
    e664:	f7fe fce6 	bl	d034 <am_hal_gpio_state_write>
    e668:	e01a      	b.n	e6a0 <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e66a:	687b      	ldr	r3, [r7, #4]
    e66c:	681a      	ldr	r2, [r3, #0]
    e66e:	4b0f      	ldr	r3, [pc, #60]	; (e6ac <am_devices_led_init+0x98>)
    e670:	6819      	ldr	r1, [r3, #0]
    e672:	4610      	mov	r0, r2
    e674:	f7fe fa9e 	bl	cbb4 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e678:	687b      	ldr	r3, [r7, #4]
    e67a:	681b      	ldr	r3, [r3, #0]
    e67c:	2103      	movs	r1, #3
    e67e:	4618      	mov	r0, r3
    e680:	f7fe fcd8 	bl	d034 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e688:	687b      	ldr	r3, [r7, #4]
    e68a:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e68c:	b2db      	uxtb	r3, r3
    e68e:	f003 0301 	and.w	r3, r3, #1
    e692:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e694:	4619      	mov	r1, r3
    e696:	4610      	mov	r0, r2
    e698:	f7fe fccc 	bl	d034 <am_hal_gpio_state_write>
    e69c:	e000      	b.n	e6a0 <am_devices_led_init+0x8c>
        return;
    e69e:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e6a0:	3708      	adds	r7, #8
    e6a2:	46bd      	mov	sp, r7
    e6a4:	bd80      	pop	{r7, pc}
    e6a6:	bf00      	nop
    e6a8:	00010c4c 	.word	0x00010c4c
    e6ac:	00010c50 	.word	0x00010c50

0000e6b0 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e6b0:	b580      	push	{r7, lr}
    e6b2:	b084      	sub	sp, #16
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	6078      	str	r0, [r7, #4]
    e6b8:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e6ba:	687b      	ldr	r3, [r7, #4]
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d014      	beq.n	e6ea <am_devices_led_array_init+0x3a>
    e6c0:	683b      	ldr	r3, [r7, #0]
    e6c2:	2b1f      	cmp	r3, #31
    e6c4:	d811      	bhi.n	e6ea <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6c6:	2300      	movs	r3, #0
    e6c8:	60fb      	str	r3, [r7, #12]
    e6ca:	e009      	b.n	e6e0 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e6cc:	68fb      	ldr	r3, [r7, #12]
    e6ce:	00db      	lsls	r3, r3, #3
    e6d0:	687a      	ldr	r2, [r7, #4]
    e6d2:	4413      	add	r3, r2
    e6d4:	4618      	mov	r0, r3
    e6d6:	f7ff ff9d 	bl	e614 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e6da:	68fb      	ldr	r3, [r7, #12]
    e6dc:	3301      	adds	r3, #1
    e6de:	60fb      	str	r3, [r7, #12]
    e6e0:	68fa      	ldr	r2, [r7, #12]
    e6e2:	683b      	ldr	r3, [r7, #0]
    e6e4:	429a      	cmp	r2, r3
    e6e6:	d3f1      	bcc.n	e6cc <am_devices_led_array_init+0x1c>
    e6e8:	e000      	b.n	e6ec <am_devices_led_array_init+0x3c>
        return;
    e6ea:	bf00      	nop
    }
}
    e6ec:	3710      	adds	r7, #16
    e6ee:	46bd      	mov	sp, r7
    e6f0:	bd80      	pop	{r7, pc}

0000e6f2 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e6f2:	b580      	push	{r7, lr}
    e6f4:	b082      	sub	sp, #8
    e6f6:	af00      	add	r7, sp, #0
    e6f8:	6078      	str	r0, [r7, #4]
    e6fa:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e6fc:	687b      	ldr	r3, [r7, #4]
    e6fe:	2b00      	cmp	r3, #0
    e700:	d02e      	beq.n	e760 <am_devices_led_on+0x6e>
    e702:	683b      	ldr	r3, [r7, #0]
    e704:	2b1e      	cmp	r3, #30
    e706:	d82b      	bhi.n	e760 <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e708:	683b      	ldr	r3, [r7, #0]
    e70a:	00db      	lsls	r3, r3, #3
    e70c:	687a      	ldr	r2, [r7, #4]
    e70e:	4413      	add	r3, r2
    e710:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e712:	2b31      	cmp	r3, #49	; 0x31
    e714:	d824      	bhi.n	e760 <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e716:	683b      	ldr	r3, [r7, #0]
    e718:	00db      	lsls	r3, r3, #3
    e71a:	687a      	ldr	r2, [r7, #4]
    e71c:	4413      	add	r3, r2
    e71e:	685b      	ldr	r3, [r3, #4]
    e720:	f003 0302 	and.w	r3, r3, #2
    e724:	2b00      	cmp	r3, #0
    e726:	d011      	beq.n	e74c <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e728:	683b      	ldr	r3, [r7, #0]
    e72a:	00db      	lsls	r3, r3, #3
    e72c:	687a      	ldr	r2, [r7, #4]
    e72e:	4413      	add	r3, r2
    e730:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e732:	683b      	ldr	r3, [r7, #0]
    e734:	00db      	lsls	r3, r3, #3
    e736:	687a      	ldr	r2, [r7, #4]
    e738:	4413      	add	r3, r2
    e73a:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e73c:	b2db      	uxtb	r3, r3
    e73e:	f003 0301 	and.w	r3, r3, #1
    e742:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e744:	4619      	mov	r1, r3
    e746:	f7fe fc75 	bl	d034 <am_hal_gpio_state_write>
    e74a:	e00a      	b.n	e762 <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e74c:	683b      	ldr	r3, [r7, #0]
    e74e:	00db      	lsls	r3, r3, #3
    e750:	687a      	ldr	r2, [r7, #4]
    e752:	4413      	add	r3, r2
    e754:	681b      	ldr	r3, [r3, #0]
    e756:	2104      	movs	r1, #4
    e758:	4618      	mov	r0, r3
    e75a:	f7fe fc6b 	bl	d034 <am_hal_gpio_state_write>
    e75e:	e000      	b.n	e762 <am_devices_led_on+0x70>
        return;
    e760:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e762:	3708      	adds	r7, #8
    e764:	46bd      	mov	sp, r7
    e766:	bd80      	pop	{r7, pc}

0000e768 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e768:	b580      	push	{r7, lr}
    e76a:	b082      	sub	sp, #8
    e76c:	af00      	add	r7, sp, #0
    e76e:	6078      	str	r0, [r7, #4]
    e770:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e772:	687b      	ldr	r3, [r7, #4]
    e774:	2b00      	cmp	r3, #0
    e776:	d031      	beq.n	e7dc <am_devices_led_off+0x74>
    e778:	683b      	ldr	r3, [r7, #0]
    e77a:	2b1e      	cmp	r3, #30
    e77c:	d82e      	bhi.n	e7dc <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e77e:	683b      	ldr	r3, [r7, #0]
    e780:	00db      	lsls	r3, r3, #3
    e782:	687a      	ldr	r2, [r7, #4]
    e784:	4413      	add	r3, r2
    e786:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e788:	2b31      	cmp	r3, #49	; 0x31
    e78a:	d827      	bhi.n	e7dc <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e78c:	683b      	ldr	r3, [r7, #0]
    e78e:	00db      	lsls	r3, r3, #3
    e790:	687a      	ldr	r2, [r7, #4]
    e792:	4413      	add	r3, r2
    e794:	685b      	ldr	r3, [r3, #4]
    e796:	f003 0302 	and.w	r3, r3, #2
    e79a:	2b00      	cmp	r3, #0
    e79c:	d014      	beq.n	e7c8 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e79e:	683b      	ldr	r3, [r7, #0]
    e7a0:	00db      	lsls	r3, r3, #3
    e7a2:	687a      	ldr	r2, [r7, #4]
    e7a4:	4413      	add	r3, r2
    e7a6:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e7a8:	683b      	ldr	r3, [r7, #0]
    e7aa:	00db      	lsls	r3, r3, #3
    e7ac:	687a      	ldr	r2, [r7, #4]
    e7ae:	4413      	add	r3, r2
    e7b0:	685b      	ldr	r3, [r3, #4]
    e7b2:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	bf0c      	ite	eq
    e7ba:	2301      	moveq	r3, #1
    e7bc:	2300      	movne	r3, #0
    e7be:	b2db      	uxtb	r3, r3
    e7c0:	4619      	mov	r1, r3
    e7c2:	f7fe fc37 	bl	d034 <am_hal_gpio_state_write>
    e7c6:	e00a      	b.n	e7de <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e7c8:	683b      	ldr	r3, [r7, #0]
    e7ca:	00db      	lsls	r3, r3, #3
    e7cc:	687a      	ldr	r2, [r7, #4]
    e7ce:	4413      	add	r3, r2
    e7d0:	681b      	ldr	r3, [r3, #0]
    e7d2:	2103      	movs	r1, #3
    e7d4:	4618      	mov	r0, r3
    e7d6:	f7fe fc2d 	bl	d034 <am_hal_gpio_state_write>
    e7da:	e000      	b.n	e7de <am_devices_led_off+0x76>
        return;
    e7dc:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e7de:	3708      	adds	r7, #8
    e7e0:	46bd      	mov	sp, r7
    e7e2:	bd80      	pop	{r7, pc}

0000e7e4 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e7e4:	b580      	push	{r7, lr}
    e7e6:	b084      	sub	sp, #16
    e7e8:	af00      	add	r7, sp, #0
    e7ea:	6078      	str	r0, [r7, #4]
    e7ec:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e7ee:	687b      	ldr	r3, [r7, #4]
    e7f0:	2b00      	cmp	r3, #0
    e7f2:	d042      	beq.n	e87a <am_devices_led_toggle+0x96>
    e7f4:	683b      	ldr	r3, [r7, #0]
    e7f6:	2b1e      	cmp	r3, #30
    e7f8:	d83f      	bhi.n	e87a <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e7fa:	683b      	ldr	r3, [r7, #0]
    e7fc:	00db      	lsls	r3, r3, #3
    e7fe:	687a      	ldr	r2, [r7, #4]
    e800:	4413      	add	r3, r2
    e802:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e804:	2b31      	cmp	r3, #49	; 0x31
    e806:	d838      	bhi.n	e87a <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e808:	683b      	ldr	r3, [r7, #0]
    e80a:	00db      	lsls	r3, r3, #3
    e80c:	687a      	ldr	r2, [r7, #4]
    e80e:	4413      	add	r3, r2
    e810:	685b      	ldr	r3, [r3, #4]
    e812:	f003 0302 	and.w	r3, r3, #2
    e816:	2b00      	cmp	r3, #0
    e818:	d009      	beq.n	e82e <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e81a:	683b      	ldr	r3, [r7, #0]
    e81c:	00db      	lsls	r3, r3, #3
    e81e:	687a      	ldr	r2, [r7, #4]
    e820:	4413      	add	r3, r2
    e822:	681b      	ldr	r3, [r3, #0]
    e824:	2102      	movs	r1, #2
    e826:	4618      	mov	r0, r3
    e828:	f7fe fc04 	bl	d034 <am_hal_gpio_state_write>
    e82c:	e026      	b.n	e87c <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e82e:	683b      	ldr	r3, [r7, #0]
    e830:	00db      	lsls	r3, r3, #3
    e832:	687a      	ldr	r2, [r7, #4]
    e834:	4413      	add	r3, r2
    e836:	681b      	ldr	r3, [r3, #0]
    e838:	f107 0208 	add.w	r2, r7, #8
    e83c:	2102      	movs	r1, #2
    e83e:	4618      	mov	r0, r3
    e840:	f7fe fb94 	bl	cf6c <am_hal_gpio_state_read>
    e844:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e846:	68fb      	ldr	r3, [r7, #12]
    e848:	2b00      	cmp	r3, #0
    e84a:	d117      	bne.n	e87c <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e84c:	68bb      	ldr	r3, [r7, #8]
    e84e:	2b00      	cmp	r3, #0
    e850:	d009      	beq.n	e866 <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e852:	683b      	ldr	r3, [r7, #0]
    e854:	00db      	lsls	r3, r3, #3
    e856:	687a      	ldr	r2, [r7, #4]
    e858:	4413      	add	r3, r2
    e85a:	681b      	ldr	r3, [r3, #0]
    e85c:	2103      	movs	r1, #3
    e85e:	4618      	mov	r0, r3
    e860:	f7fe fbe8 	bl	d034 <am_hal_gpio_state_write>
    e864:	e00a      	b.n	e87c <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e866:	683b      	ldr	r3, [r7, #0]
    e868:	00db      	lsls	r3, r3, #3
    e86a:	687a      	ldr	r2, [r7, #4]
    e86c:	4413      	add	r3, r2
    e86e:	681b      	ldr	r3, [r3, #0]
    e870:	2104      	movs	r1, #4
    e872:	4618      	mov	r0, r3
    e874:	f7fe fbde 	bl	d034 <am_hal_gpio_state_write>
    e878:	e000      	b.n	e87c <am_devices_led_toggle+0x98>
        return;
    e87a:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e87c:	3710      	adds	r7, #16
    e87e:	46bd      	mov	sp, r7
    e880:	bd80      	pop	{r7, pc}
	...

0000e884 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e884:	4811      	ldr	r0, [pc, #68]	; (e8cc <zero_loop+0x12>)
    e886:	4912      	ldr	r1, [pc, #72]	; (e8d0 <zero_loop+0x16>)
    e888:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e88a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e88e:	4811      	ldr	r0, [pc, #68]	; (e8d4 <zero_loop+0x1a>)
    e890:	6801      	ldr	r1, [r0, #0]
    e892:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e896:	6001      	str	r1, [r0, #0]
    e898:	f3bf 8f4f 	dsb	sy
    e89c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e8a0:	480d      	ldr	r0, [pc, #52]	; (e8d8 <zero_loop+0x1e>)
    e8a2:	490e      	ldr	r1, [pc, #56]	; (e8dc <zero_loop+0x22>)
    e8a4:	4a0e      	ldr	r2, [pc, #56]	; (e8e0 <zero_loop+0x26>)

0000e8a6 <copy_loop>:
    e8a6:	f850 3b04 	ldr.w	r3, [r0], #4
    e8aa:	f841 3b04 	str.w	r3, [r1], #4
    e8ae:	4291      	cmp	r1, r2
    e8b0:	dbf9      	blt.n	e8a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e8b2:	480c      	ldr	r0, [pc, #48]	; (e8e4 <zero_loop+0x2a>)
    e8b4:	490c      	ldr	r1, [pc, #48]	; (e8e8 <zero_loop+0x2e>)
    e8b6:	f04f 0200 	mov.w	r2, #0

0000e8ba <zero_loop>:
    e8ba:	4288      	cmp	r0, r1
    e8bc:	bfb8      	it	lt
    e8be:	f840 2b04 	strlt.w	r2, [r0], #4
    e8c2:	dbfa      	blt.n	e8ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e8c4:	f7fd fd06 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e8c8:	be00      	bkpt	0x0000
}
    e8ca:	bf00      	nop
    e8cc:	e000ed08 	.word	0xe000ed08
    e8d0:	0000c000 	.word	0x0000c000
    e8d4:	e000ed88 	.word	0xe000ed88
    e8d8:	00010f48 	.word	0x00010f48
    e8dc:	1000c000 	.word	0x1000c000
    e8e0:	1000c044 	.word	0x1000c044
    e8e4:	1000c044 	.word	0x1000c044
    e8e8:	1002c368 	.word	0x1002c368

0000e8ec <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e8ec:	b480      	push	{r7}
    e8ee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e8f0:	e7fe      	b.n	e8f0 <NMI_Handler+0x4>

0000e8f2 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e8f2:	b480      	push	{r7}
    e8f4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e8f6:	e7fe      	b.n	e8f6 <DebugMon_Handler+0x4>

0000e8f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e8f8:	b480      	push	{r7}
    e8fa:	b083      	sub	sp, #12
    e8fc:	af00      	add	r7, sp, #0
    e8fe:	4603      	mov	r3, r0
    e900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e902:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e906:	2b00      	cmp	r3, #0
    e908:	db0b      	blt.n	e922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e90a:	79fb      	ldrb	r3, [r7, #7]
    e90c:	f003 021f 	and.w	r2, r3, #31
    e910:	4907      	ldr	r1, [pc, #28]	; (e930 <__NVIC_EnableIRQ+0x38>)
    e912:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e916:	095b      	lsrs	r3, r3, #5
    e918:	2001      	movs	r0, #1
    e91a:	fa00 f202 	lsl.w	r2, r0, r2
    e91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e922:	bf00      	nop
    e924:	370c      	adds	r7, #12
    e926:	46bd      	mov	sp, r7
    e928:	f85d 7b04 	ldr.w	r7, [sp], #4
    e92c:	4770      	bx	lr
    e92e:	bf00      	nop
    e930:	e000e100 	.word	0xe000e100

0000e934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    e934:	b480      	push	{r7}
    e936:	b083      	sub	sp, #12
    e938:	af00      	add	r7, sp, #0
    e93a:	4603      	mov	r3, r0
    e93c:	6039      	str	r1, [r7, #0]
    e93e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e940:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e944:	2b00      	cmp	r3, #0
    e946:	db0a      	blt.n	e95e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e948:	683b      	ldr	r3, [r7, #0]
    e94a:	b2da      	uxtb	r2, r3
    e94c:	490c      	ldr	r1, [pc, #48]	; (e980 <__NVIC_SetPriority+0x4c>)
    e94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e952:	0152      	lsls	r2, r2, #5
    e954:	b2d2      	uxtb	r2, r2
    e956:	440b      	add	r3, r1
    e958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    e95c:	e00a      	b.n	e974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e95e:	683b      	ldr	r3, [r7, #0]
    e960:	b2da      	uxtb	r2, r3
    e962:	4908      	ldr	r1, [pc, #32]	; (e984 <__NVIC_SetPriority+0x50>)
    e964:	79fb      	ldrb	r3, [r7, #7]
    e966:	f003 030f 	and.w	r3, r3, #15
    e96a:	3b04      	subs	r3, #4
    e96c:	0152      	lsls	r2, r2, #5
    e96e:	b2d2      	uxtb	r2, r2
    e970:	440b      	add	r3, r1
    e972:	761a      	strb	r2, [r3, #24]
}
    e974:	bf00      	nop
    e976:	370c      	adds	r7, #12
    e978:	46bd      	mov	sp, r7
    e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e97e:	4770      	bx	lr
    e980:	e000e100 	.word	0xe000e100
    e984:	e000ed00 	.word	0xe000ed00

0000e988 <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    e988:	b580      	push	{r7, lr}
    e98a:	b082      	sub	sp, #8
    e98c:	af00      	add	r7, sp, #0
    e98e:	6078      	str	r0, [r7, #4]
    e990:	6879      	ldr	r1, [r7, #4]
    e992:	4803      	ldr	r0, [pc, #12]	; (e9a0 <DebugLog+0x18>)
    e994:	f7ff fbe8 	bl	e168 <am_util_stdio_printf>
    e998:	bf00      	nop
    e99a:	3708      	adds	r7, #8
    e99c:	46bd      	mov	sp, r7
    e99e:	bd80      	pop	{r7, pc}
    e9a0:	00010954 	.word	0x00010954

0000e9a4 <DebugLogUInt32>:
void DebugLogInt32(int32_t i) { am_util_stdio_printf("%d", i); }
void DebugLogUInt32(uint32_t i) { am_util_stdio_printf("%u", i); }
    e9a4:	b580      	push	{r7, lr}
    e9a6:	b082      	sub	sp, #8
    e9a8:	af00      	add	r7, sp, #0
    e9aa:	6078      	str	r0, [r7, #4]
    e9ac:	6879      	ldr	r1, [r7, #4]
    e9ae:	4803      	ldr	r0, [pc, #12]	; (e9bc <DebugLogUInt32+0x18>)
    e9b0:	f7ff fbda 	bl	e168 <am_util_stdio_printf>
    e9b4:	bf00      	nop
    e9b6:	3708      	adds	r7, #8
    e9b8:	46bd      	mov	sp, r7
    e9ba:	bd80      	pop	{r7, pc}
    e9bc:	0001095c 	.word	0x0001095c

0000e9c0 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    e9c0:	b580      	push	{r7, lr}
    e9c2:	b082      	sub	sp, #8
    e9c4:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    e9c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9ca:	2000      	movs	r0, #0
    e9cc:	f000 ff7e 	bl	f8cc <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    e9d0:	490a      	ldr	r1, [pc, #40]	; (e9fc <timerA0_init+0x3c>)
    e9d2:	2000      	movs	r0, #0
    e9d4:	f000 fee0 	bl	f798 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    e9d8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    e9dc:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    e9de:	687b      	ldr	r3, [r7, #4]
    e9e0:	085b      	lsrs	r3, r3, #1
    e9e2:	687a      	ldr	r2, [r7, #4]
    e9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9e8:	2000      	movs	r0, #0
    e9ea:	f000 ff83 	bl	f8f4 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e9ee:	2001      	movs	r0, #1
    e9f0:	f000 fffc 	bl	f9ec <am_hal_ctimer_int_clear>
}
    e9f4:	bf00      	nop
    e9f6:	3708      	adds	r7, #8
    e9f8:	46bd      	mov	sp, r7
    e9fa:	bd80      	pop	{r7, pc}
    e9fc:	1000c000 	.word	0x1000c000

0000ea00 <pdm_trigger_dma>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void pdm_trigger_dma(void)
{
    ea00:	b580      	push	{r7, lr}
    ea02:	b082      	sub	sp, #8
    ea04:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    ea06:	4b08      	ldr	r3, [pc, #32]	; (ea28 <pdm_trigger_dma+0x28>)
    ea08:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    ea0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    ea0e:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    ea10:	4b06      	ldr	r3, [pc, #24]	; (ea2c <pdm_trigger_dma+0x2c>)
    ea12:	681b      	ldr	r3, [r3, #0]
    ea14:	463a      	mov	r2, r7
    ea16:	4611      	mov	r1, r2
    ea18:	4618      	mov	r0, r3
    ea1a:	f7fd ff69 	bl	c8f0 <am_hal_pdm_dma_start>
}
    ea1e:	bf00      	nop
    ea20:	3708      	adds	r7, #8
    ea22:	46bd      	mov	sp, r7
    ea24:	bd80      	pop	{r7, pc}
    ea26:	bf00      	nop
    ea28:	1000c18c 	.word	0x1000c18c
    ea2c:	1000ce18 	.word	0x1000ce18

0000ea30 <am_app_mic_verif_pdm_init>:

void am_app_mic_verif_pdm_init(void) 
{
    ea30:	b580      	push	{r7, lr}
    ea32:	b08a      	sub	sp, #40	; 0x28
    ea34:	af00      	add	r7, sp, #0
    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ea36:	2300      	movs	r3, #0
    ea38:	627b      	str	r3, [r7, #36]	; 0x24

    // ARPIT 181019
    // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
    // am_hal_gpio_pinconfig(10, sPinCfg);
    sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    ea3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea3e:	2205      	movs	r2, #5
    ea40:	f362 0302 	bfi	r3, r2, #0, #3
    ea44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(12, sPinCfg);
    ea48:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea4a:	200c      	movs	r0, #12
    ea4c:	f7fe f8b2 	bl	cbb4 <am_hal_gpio_pinconfig>

    sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    ea50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ea54:	f043 0307 	orr.w	r3, r3, #7
    ea58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    am_hal_gpio_pinconfig(11, sPinCfg);
    ea5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea5e:	200b      	movs	r0, #11
    ea60:	f7fe f8a8 	bl	cbb4 <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    ea64:	1d3b      	adds	r3, r7, #4
    ea66:	2220      	movs	r2, #32
    ea68:	2100      	movs	r1, #0
    ea6a:	4618      	mov	r0, r3
    ea6c:	f001 fe08 	bl	10680 <memset>
    ea70:	230b      	movs	r3, #11
    ea72:	717b      	strb	r3, [r7, #5]
    ea74:	230b      	movs	r3, #11
    ea76:	71bb      	strb	r3, [r7, #6]
    ea78:	2318      	movs	r3, #24
    ea7a:	60bb      	str	r3, [r7, #8]
    ea7c:	2308      	movs	r3, #8
    ea7e:	613b      	str	r3, [r7, #16]
    ea80:	2305      	movs	r3, #5
    ea82:	753b      	strb	r3, [r7, #20]
    ea84:	2301      	movs	r3, #1
    ea86:	763b      	strb	r3, [r7, #24]
    ea88:	2303      	movs	r3, #3
    ea8a:	767b      	strb	r3, [r7, #25]
    };
    
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    ea8c:	491c      	ldr	r1, [pc, #112]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    ea8e:	2000      	movs	r0, #0
    ea90:	f7fd fd5a 	bl	c548 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    ea94:	4b1a      	ldr	r3, [pc, #104]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    ea96:	681b      	ldr	r3, [r3, #0]
    ea98:	2200      	movs	r2, #0
    ea9a:	2100      	movs	r1, #0
    ea9c:	4618      	mov	r0, r3
    ea9e:	f7fd fdb1 	bl	c604 <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    eaa2:	4b17      	ldr	r3, [pc, #92]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    eaa4:	681b      	ldr	r3, [r3, #0]
    eaa6:	1d3a      	adds	r2, r7, #4
    eaa8:	4611      	mov	r1, r2
    eaaa:	4618      	mov	r0, r3
    eaac:	f7fd fe12 	bl	c6d4 <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    eab0:	4b13      	ldr	r3, [pc, #76]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	4618      	mov	r0, r3
    eab6:	f7fd ff9f 	bl	c9f8 <am_hal_pdm_fifo_flush>

    am_util_stdio_printf("PDM Settings:\r\n");
    eaba:	4812      	ldr	r0, [pc, #72]	; (eb04 <am_app_mic_verif_pdm_init+0xd4>)
    eabc:	f7ff fb54 	bl	e168 <am_util_stdio_printf>
    am_util_stdio_printf("PDM Clock (Hz):         %12d\r\n", 750000);
    eac0:	4911      	ldr	r1, [pc, #68]	; (eb08 <am_app_mic_verif_pdm_init+0xd8>)
    eac2:	4812      	ldr	r0, [pc, #72]	; (eb0c <am_app_mic_verif_pdm_init+0xdc>)
    eac4:	f7ff fb50 	bl	e168 <am_util_stdio_printf>
    am_util_stdio_printf("Effective Sample Freq.: %12d\r\n\n", 16000);
    eac8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
    eacc:	4810      	ldr	r0, [pc, #64]	; (eb10 <am_app_mic_verif_pdm_init+0xe0>)
    eace:	f7ff fb4b 	bl	e168 <am_util_stdio_printf>

    am_hal_pdm_enable(PDMHandle);
    ead2:	4b0b      	ldr	r3, [pc, #44]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    ead4:	681b      	ldr	r3, [r3, #0]
    ead6:	4618      	mov	r0, r3
    ead8:	f7fd fed8 	bl	c88c <am_hal_pdm_enable>

    //
    // Configure and enable PDM interrupts (set up to trigger on DMA
    // completion).
    //
    am_hal_pdm_interrupt_enable(PDMHandle,
    eadc:	4b08      	ldr	r3, [pc, #32]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    eade:	681b      	ldr	r3, [r3, #0]
    eae0:	211e      	movs	r1, #30
    eae2:	4618      	mov	r0, r3
    eae4:	f7fd ffb2 	bl	ca4c <am_hal_pdm_interrupt_enable>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    eae8:	4b05      	ldr	r3, [pc, #20]	; (eb00 <am_app_mic_verif_pdm_init+0xd0>)
    eaea:	681b      	ldr	r3, [r3, #0]
    eaec:	4618      	mov	r0, r3
    eaee:	f7fd fecd 	bl	c88c <am_hal_pdm_enable>
    pdm_trigger_dma();
    eaf2:	f7ff ff85 	bl	ea00 <pdm_trigger_dma>

}
    eaf6:	bf00      	nop
    eaf8:	3728      	adds	r7, #40	; 0x28
    eafa:	46bd      	mov	sp, r7
    eafc:	bd80      	pop	{r7, pc}
    eafe:	bf00      	nop
    eb00:	1000ce18 	.word	0x1000ce18
    eb04:	0001096c 	.word	0x0001096c
    eb08:	000b71b0 	.word	0x000b71b0
    eb0c:	0001097c 	.word	0x0001097c
    eb10:	0001099c 	.word	0x0001099c

0000eb14 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    eb14:	b580      	push	{r7, lr}
    eb16:	b084      	sub	sp, #16
    eb18:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    eb1a:	2301      	movs	r3, #1
    eb1c:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    eb1e:	2301      	movs	r3, #1
    eb20:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    eb22:	2301      	movs	r3, #1
    eb24:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_COUNT;
    eb26:	23a0      	movs	r3, #160	; 0xa0
    eb28:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    eb2a:	4b0c      	ldr	r3, [pc, #48]	; (eb5c <adc_config_dma+0x48>)
    eb2c:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    eb2e:	4b0c      	ldr	r3, [pc, #48]	; (eb60 <adc_config_dma+0x4c>)
    eb30:	681b      	ldr	r3, [r3, #0]
    eb32:	1d3a      	adds	r2, r7, #4
    eb34:	4611      	mov	r1, r2
    eb36:	4618      	mov	r0, r3
    eb38:	f000 fbe6 	bl	f308 <am_hal_adc_configure_dma>
    eb3c:	4603      	mov	r3, r0
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d002      	beq.n	eb48 <adc_config_dma+0x34>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    eb42:	4808      	ldr	r0, [pc, #32]	; (eb64 <adc_config_dma+0x50>)
    eb44:	f7ff fb10 	bl	e168 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    eb48:	4b07      	ldr	r3, [pc, #28]	; (eb68 <adc_config_dma+0x54>)
    eb4a:	2200      	movs	r2, #0
    eb4c:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    eb4e:	4b07      	ldr	r3, [pc, #28]	; (eb6c <adc_config_dma+0x58>)
    eb50:	2200      	movs	r2, #0
    eb52:	701a      	strb	r2, [r3, #0]
}
    eb54:	bf00      	nop
    eb56:	3710      	adds	r7, #16
    eb58:	46bd      	mov	sp, r7
    eb5a:	bd80      	pop	{r7, pc}
    eb5c:	1000c690 	.word	0x1000c690
    eb60:	1000ce10 	.word	0x1000ce10
    eb64:	000109bc 	.word	0x000109bc
    eb68:	1000ce15 	.word	0x1000ce15
    eb6c:	1002c258 	.word	0x1002c258

0000eb70 <adc_config>:


void adc_config(void)
{
    eb70:	b580      	push	{r7, lr}
    eb72:	b084      	sub	sp, #16
    eb74:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    eb76:	4930      	ldr	r1, [pc, #192]	; (ec38 <adc_config+0xc8>)
    eb78:	2000      	movs	r0, #0
    eb7a:	f000 fb35 	bl	f1e8 <am_hal_adc_initialize>
    eb7e:	4603      	mov	r3, r0
    eb80:	2b00      	cmp	r3, #0
    eb82:	d002      	beq.n	eb8a <adc_config+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    eb84:	482d      	ldr	r0, [pc, #180]	; (ec3c <adc_config+0xcc>)
    eb86:	f7ff faef 	bl	e168 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    eb8a:	4b2b      	ldr	r3, [pc, #172]	; (ec38 <adc_config+0xc8>)
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	2200      	movs	r2, #0
    eb90:	2100      	movs	r1, #0
    eb92:	4618      	mov	r0, r3
    eb94:	f000 fc68 	bl	f468 <am_hal_adc_power_control>
    eb98:	4603      	mov	r3, r0
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	d002      	beq.n	eba4 <adc_config+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    eb9e:	4828      	ldr	r0, [pc, #160]	; (ec40 <adc_config+0xd0>)
    eba0:	f7ff fae2 	bl	e168 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    eba4:	2301      	movs	r3, #1
    eba6:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    eba8:	2300      	movs	r3, #0
    ebaa:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ebac:	2307      	movs	r3, #7
    ebae:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ebb0:	2300      	movs	r3, #0
    ebb2:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    ebb4:	2301      	movs	r3, #1
    ebb6:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ebb8:	2300      	movs	r3, #0
    ebba:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    ebbc:	2301      	movs	r3, #1
    ebbe:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    ebc0:	4b1d      	ldr	r3, [pc, #116]	; (ec38 <adc_config+0xc8>)
    ebc2:	681b      	ldr	r3, [r3, #0]
    ebc4:	f107 0208 	add.w	r2, r7, #8
    ebc8:	4611      	mov	r1, r2
    ebca:	4618      	mov	r0, r3
    ebcc:	f000 fb2e 	bl	f22c <am_hal_adc_configure>
    ebd0:	4603      	mov	r3, r0
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d002      	beq.n	ebdc <adc_config+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    ebd6:	481b      	ldr	r0, [pc, #108]	; (ec44 <adc_config+0xd4>)
    ebd8:	f7ff fac6 	bl	e168 <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    ebdc:	2300      	movs	r3, #0
    ebde:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    ebe0:	2300      	movs	r3, #0
    ebe2:	707b      	strb	r3, [r7, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE5;
    ebe4:	2305      	movs	r3, #5
    ebe6:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    ebe8:	2300      	movs	r3, #0
    ebea:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    ebec:	2301      	movs	r3, #1
    ebee:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    ebf0:	4b11      	ldr	r3, [pc, #68]	; (ec38 <adc_config+0xc8>)
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	463a      	mov	r2, r7
    ebf6:	2100      	movs	r1, #0
    ebf8:	4618      	mov	r0, r3
    ebfa:	f000 fb4f 	bl	f29c <am_hal_adc_configure_slot>
    ebfe:	4603      	mov	r3, r0
    ec00:	2b00      	cmp	r3, #0
    ec02:	d002      	beq.n	ec0a <adc_config+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    ec04:	4810      	ldr	r0, [pc, #64]	; (ec48 <adc_config+0xd8>)
    ec06:	f7ff faaf 	bl	e168 <am_util_stdio_printf>
    }
    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    ec0a:	f7ff ff83 	bl	eb14 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    ec0e:	4b0a      	ldr	r3, [pc, #40]	; (ec38 <adc_config+0xc8>)
    ec10:	681b      	ldr	r3, [r3, #0]
    ec12:	21c0      	movs	r1, #192	; 0xc0
    ec14:	4618      	mov	r0, r3
    ec16:	f000 fbcf 	bl	f3b8 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    ec1a:	4b07      	ldr	r3, [pc, #28]	; (ec38 <adc_config+0xc8>)
    ec1c:	681b      	ldr	r3, [r3, #0]
    ec1e:	4618      	mov	r0, r3
    ec20:	f000 fbaa 	bl	f378 <am_hal_adc_enable>
    ec24:	4603      	mov	r3, r0
    ec26:	2b00      	cmp	r3, #0
    ec28:	d002      	beq.n	ec30 <adc_config+0xc0>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    ec2a:	4808      	ldr	r0, [pc, #32]	; (ec4c <adc_config+0xdc>)
    ec2c:	f7ff fa9c 	bl	e168 <am_util_stdio_printf>
    }
}
    ec30:	bf00      	nop
    ec32:	3710      	adds	r7, #16
    ec34:	46bd      	mov	sp, r7
    ec36:	bd80      	pop	{r7, pc}
    ec38:	1000ce10 	.word	0x1000ce10
    ec3c:	000109e4 	.word	0x000109e4
    ec40:	00010a18 	.word	0x00010a18
    ec44:	00010a38 	.word	0x00010a38
    ec48:	00010a5c 	.word	0x00010a5c
    ec4c:	00010a84 	.word	0x00010a84

0000ec50 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    ec50:	b580      	push	{r7, lr}
    ec52:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (16000HZ sample rate).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    ec54:	2242      	movs	r2, #66	; 0x42
    ec56:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec5a:	2003      	movs	r0, #3
    ec5c:	f000 fdcc 	bl	f7f8 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     );

//    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 375);
    ec60:	f240 1377 	movw	r3, #375	; 0x177
    ec64:	f240 22ee 	movw	r2, #750	; 0x2ee
    ec68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec6c:	2003      	movs	r0, #3
    ec6e:	f000 fe41 	bl	f8f4 <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    ec72:	f000 fe95 	bl	f9a0 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    ec76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec7a:	2003      	movs	r0, #3
    ec7c:	f000 fdfc 	bl	f878 <am_hal_ctimer_start>
}
    ec80:	bf00      	nop
    ec82:	bd80      	pop	{r7, pc}

0000ec84 <am_app_mic_verif_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_mic_verif_sys_init(void)
{
    ec84:	b580      	push	{r7, lr}
    ec86:	b082      	sub	sp, #8
    ec88:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    ec8a:	2100      	movs	r1, #0
    ec8c:	2000      	movs	r0, #0
    ec8e:	f000 fcf9 	bl	f684 <am_hal_clkgen_control>
    ec92:	4603      	mov	r3, r0
    ec94:	2b00      	cmp	r3, #0
    ec96:	d002      	beq.n	ec9e <am_app_mic_verif_sys_init+0x1a>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    ec98:	4857      	ldr	r0, [pc, #348]	; (edf8 <am_app_mic_verif_sys_init+0x174>)
    ec9a:	f7ff fa65 	bl	e168 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    ec9e:	4857      	ldr	r0, [pc, #348]	; (edfc <am_app_mic_verif_sys_init+0x178>)
    eca0:	f000 fcbc 	bl	f61c <am_hal_cachectrl_config>
    eca4:	4603      	mov	r3, r0
    eca6:	2b00      	cmp	r3, #0
    eca8:	d002      	beq.n	ecb0 <am_app_mic_verif_sys_init+0x2c>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    ecaa:	4855      	ldr	r0, [pc, #340]	; (ee00 <am_app_mic_verif_sys_init+0x17c>)
    ecac:	f7ff fa5c 	bl	e168 <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    ecb0:	f000 fcde 	bl	f670 <am_hal_cachectrl_enable>
    ecb4:	4603      	mov	r3, r0
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d002      	beq.n	ecc0 <am_app_mic_verif_sys_init+0x3c>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    ecba:	4852      	ldr	r0, [pc, #328]	; (ee04 <am_app_mic_verif_sys_init+0x180>)
    ecbc:	f7ff fa54 	bl	e168 <am_util_stdio_printf>
    }

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    ecc0:	f000 fa32 	bl	f128 <am_bsp_low_power_init>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_switch_button0);
    ecc4:	4b50      	ldr	r3, [pc, #320]	; (ee08 <am_app_mic_verif_sys_init+0x184>)
    ecc6:	6819      	ldr	r1, [r3, #0]
    ecc8:	2010      	movs	r0, #16
    ecca:	f7fd ff73 	bl	cbb4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_switch_button1);
    ecce:	4b4f      	ldr	r3, [pc, #316]	; (ee0c <am_app_mic_verif_sys_init+0x188>)
    ecd0:	6819      	ldr	r1, [r3, #0]
    ecd2:	2012      	movs	r0, #18
    ecd4:	f7fd ff6e 	bl	cbb4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_switch_button2);
    ecd8:	4b4d      	ldr	r3, [pc, #308]	; (ee10 <am_app_mic_verif_sys_init+0x18c>)
    ecda:	6819      	ldr	r1, [r3, #0]
    ecdc:	2013      	movs	r0, #19
    ecde:	f7fd ff69 	bl	cbb4 <am_hal_gpio_pinconfig>
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ece2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ece6:	f04f 0100 	mov.w	r1, #0
    ecea:	f7fe fa65 	bl	d1b8 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ecee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ecf2:	f04f 0100 	mov.w	r1, #0
    ecf6:	f7fe fa5f 	bl	d1b8 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ecfa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ecfe:	f04f 0100 	mov.w	r1, #0
    ed02:	f7fe fa59 	bl	d1b8 <am_hal_gpio_interrupt_clear>
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ed06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ed0a:	f04f 0100 	mov.w	r1, #0
    ed0e:	f7fe fa15 	bl	d13c <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    ed12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    ed16:	f04f 0100 	mov.w	r1, #0
    ed1a:	f7fe fa0f 	bl	d13c <am_hal_gpio_interrupt_enable>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    ed1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    ed22:	f04f 0100 	mov.w	r1, #0
    ed26:	f7fe fa09 	bl	d13c <am_hal_gpio_interrupt_enable>
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ed2a:	2105      	movs	r1, #5
    ed2c:	4839      	ldr	r0, [pc, #228]	; (ee14 <am_app_mic_verif_sys_init+0x190>)
    ed2e:	f7ff fcbf 	bl	e6b0 <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed32:	2300      	movs	r3, #0
    ed34:	607b      	str	r3, [r7, #4]
    ed36:	e007      	b.n	ed48 <am_app_mic_verif_sys_init+0xc4>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ed38:	687b      	ldr	r3, [r7, #4]
    ed3a:	4619      	mov	r1, r3
    ed3c:	4835      	ldr	r0, [pc, #212]	; (ee14 <am_app_mic_verif_sys_init+0x190>)
    ed3e:	f7ff fd13 	bl	e768 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ed42:	687b      	ldr	r3, [r7, #4]
    ed44:	3301      	adds	r3, #1
    ed46:	607b      	str	r3, [r7, #4]
    ed48:	687b      	ldr	r3, [r7, #4]
    ed4a:	2b04      	cmp	r3, #4
    ed4c:	ddf4      	ble.n	ed38 <am_app_mic_verif_sys_init+0xb4>
#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    
    //
    // Initiate all ring buffers 
    //
    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    ed4e:	2202      	movs	r2, #2
    ed50:	4931      	ldr	r1, [pc, #196]	; (ee18 <am_app_mic_verif_sys_init+0x194>)
    ed52:	4832      	ldr	r0, [pc, #200]	; (ee1c <am_app_mic_verif_sys_init+0x198>)
    ed54:	f7ff fa70 	bl	e238 <am_app_utils_ring_buffer_init_all>
    
    //
    // Turn on PDM
    //
    am_app_mic_verif_pdm_init();
    ed58:	f7ff fe6a 	bl	ea30 <am_app_mic_verif_pdm_init>

#if AM_APP_ANALOG_MIC
    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(33, g_AM_PIN_33_ADCSE5);
    ed5c:	4b30      	ldr	r3, [pc, #192]	; (ee20 <am_app_mic_verif_sys_init+0x19c>)
    ed5e:	6819      	ldr	r1, [r3, #0]
    ed60:	2021      	movs	r0, #33	; 0x21
    ed62:	f7fd ff27 	bl	cbb4 <am_hal_gpio_pinconfig>
    //
    // Configure the ADC
    //
    adc_config();
    ed66:	f7ff ff03 	bl	eb70 <adc_config>
    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    ed6a:	f7ff ff71 	bl	ec50 <init_timerA3_for_ADC>
#endif // AM_APP_ANALOG_MIC
    //
    // TimerA0 init.
    //
    timerA0_init();
    ed6e:	f7ff fe27 	bl	e9c0 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    ed72:	2001      	movs	r0, #1
    ed74:	f000 fe26 	bl	f9c4 <am_hal_ctimer_int_enable>

    NVIC_SetPriority(PDM_IRQn, 4);
    ed78:	2104      	movs	r1, #4
    ed7a:	2013      	movs	r0, #19
    ed7c:	f7ff fdda 	bl	e934 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    ed80:	2013      	movs	r0, #19
    ed82:	f7ff fdb9 	bl	e8f8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPIO_IRQn);
    ed86:	200d      	movs	r0, #13
    ed88:	f7ff fdb6 	bl	e8f8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    ed8c:	200e      	movs	r0, #14
    ed8e:	f7ff fdb3 	bl	e8f8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(ADC_IRQn);
    ed92:	2012      	movs	r0, #18
    ed94:	f7ff fdb0 	bl	e8f8 <__NVIC_EnableIRQ>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    ed98:	f000 fe68 	bl	fa6c <am_hal_interrupt_master_enable>
   
    //
    // Initialize the printf interface for UART output
    //
#if configUSE_UART_PRINTF
    am_bsp_uart_printf_enable();
    ed9c:	f000 f9f6 	bl	f18c <am_bsp_uart_printf_enable>
    am_bsp_itm_printf_enable();
#endif // configUSE_UART_PRINTF
    //
    // Configure and enable burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    eda0:	4820      	ldr	r0, [pc, #128]	; (ee24 <am_app_mic_verif_sys_init+0x1a0>)
    eda2:	f000 fbc5 	bl	f530 <am_hal_burst_mode_initialize>
    eda6:	4603      	mov	r3, r0
    eda8:	2b00      	cmp	r3, #0
    edaa:	d110      	bne.n	edce <am_app_mic_verif_sys_init+0x14a>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    edac:	4b1d      	ldr	r3, [pc, #116]	; (ee24 <am_app_mic_verif_sys_init+0x1a0>)
    edae:	781b      	ldrb	r3, [r3, #0]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d10c      	bne.n	edce <am_app_mic_verif_sys_init+0x14a>
        {
            // Put the MCU into "Burst" mode.
            if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    edb4:	481c      	ldr	r0, [pc, #112]	; (ee28 <am_app_mic_verif_sys_init+0x1a4>)
    edb6:	f000 fc03 	bl	f5c0 <am_hal_burst_mode_enable>
    edba:	4603      	mov	r3, r0
    edbc:	2b00      	cmp	r3, #0
    edbe:	d106      	bne.n	edce <am_app_mic_verif_sys_init+0x14a>
            {
                if (AM_HAL_BURST_MODE == eBurstMode)
    edc0:	4b19      	ldr	r3, [pc, #100]	; (ee28 <am_app_mic_verif_sys_init+0x1a4>)
    edc2:	781b      	ldrb	r3, [r3, #0]
    edc4:	2b00      	cmp	r3, #0
    edc6:	d102      	bne.n	edce <am_app_mic_verif_sys_init+0x14a>
                {
                    am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n\n");
    edc8:	4818      	ldr	r0, [pc, #96]	; (ee2c <am_app_mic_verif_sys_init+0x1a8>)
    edca:	f7ff f9cd 	bl	e168 <am_util_stdio_printf>
            }

        }
    }

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    edce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    edd2:	2000      	movs	r0, #0
    edd4:	f000 fd50 	bl	f878 <am_hal_ctimer_start>

#if AM_APP_ANALOG_MIC
    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    edd8:	4b15      	ldr	r3, [pc, #84]	; (ee30 <am_app_mic_verif_sys_init+0x1ac>)
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	4618      	mov	r0, r3
    edde:	f000 fb31 	bl	f444 <am_hal_adc_sw_trigger>
    ede2:	4603      	mov	r3, r0
    ede4:	2b00      	cmp	r3, #0
    ede6:	d002      	beq.n	edee <am_app_mic_verif_sys_init+0x16a>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    ede8:	4812      	ldr	r0, [pc, #72]	; (ee34 <am_app_mic_verif_sys_init+0x1b0>)
    edea:	f7ff f9bd 	bl	e168 <am_util_stdio_printf>
    }
#endif // AM_APP_ANALOG_MIC

}
    edee:	bf00      	nop
    edf0:	3708      	adds	r7, #8
    edf2:	46bd      	mov	sp, r7
    edf4:	bd80      	pop	{r7, pc}
    edf6:	bf00      	nop
    edf8:	00010b20 	.word	0x00010b20
    edfc:	00010e10 	.word	0x00010e10
    ee00:	00010b50 	.word	0x00010b50
    ee04:	00010b80 	.word	0x00010b80
    ee08:	00010dd0 	.word	0x00010dd0
    ee0c:	00010dd4 	.word	0x00010dd4
    ee10:	00010dd8 	.word	0x00010dd8
    ee14:	1000c00c 	.word	0x1000c00c
    ee18:	00010db8 	.word	0x00010db8
    ee1c:	1002c21c 	.word	0x1002c21c
    ee20:	00010ddc 	.word	0x00010ddc
    ee24:	1000ce14 	.word	0x1000ce14
    ee28:	1000c68c 	.word	0x1000c68c
    ee2c:	00010bac 	.word	0x00010bac
    ee30:	1000ce10 	.word	0x1000ce10
    ee34:	00010bd8 	.word	0x00010bd8

0000ee38 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    ee38:	b580      	push	{r7, lr}
    ee3a:	b082      	sub	sp, #8
    ee3c:	af00      	add	r7, sp, #0
#endif
    uint32_t ui32Status;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    ee3e:	4b27      	ldr	r3, [pc, #156]	; (eedc <am_pdm0_isr+0xa4>)
    ee40:	681b      	ldr	r3, [r3, #0]
    ee42:	1d39      	adds	r1, r7, #4
    ee44:	2201      	movs	r2, #1
    ee46:	4618      	mov	r0, r3
    ee48:	f7fd fe5c 	bl	cb04 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ee4c:	4b23      	ldr	r3, [pc, #140]	; (eedc <am_pdm0_isr+0xa4>)
    ee4e:	681b      	ldr	r3, [r3, #0]
    ee50:	687a      	ldr	r2, [r7, #4]
    ee52:	4611      	mov	r1, r2
    ee54:	4618      	mov	r0, r3
    ee56:	f7fd fe29 	bl	caac <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ee5a:	687b      	ldr	r3, [r7, #4]
    ee5c:	f003 0308 	and.w	r3, r3, #8
    ee60:	2b00      	cmp	r3, #0
    ee62:	d02c      	beq.n	eebe <am_pdm0_isr+0x86>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    ee64:	4b1e      	ldr	r3, [pc, #120]	; (eee0 <am_pdm0_isr+0xa8>)
    ee66:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ee6a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
            }
        }
#endif // AM_AEP_MIKRO_CALIBRATION

#if AM_APP_ANALOG_MIC
        if((g_bPDMDataReady == false) && (g_bAMicEvalFlag == true))
    ee6e:	4b1d      	ldr	r3, [pc, #116]	; (eee4 <am_pdm0_isr+0xac>)
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	b2db      	uxtb	r3, r3
    ee74:	f083 0301 	eor.w	r3, r3, #1
    ee78:	b2db      	uxtb	r3, r3
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d029      	beq.n	eed2 <am_pdm0_isr+0x9a>
    ee7e:	4b1a      	ldr	r3, [pc, #104]	; (eee8 <am_pdm0_isr+0xb0>)
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	b2db      	uxtb	r3, r3
    ee84:	2b00      	cmp	r3, #0
    ee86:	d024      	beq.n	eed2 <am_pdm0_isr+0x9a>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], (void*)g_ui32PCMDataBuff, PCM_FRAME_SIZE*PCM_DATA_BYTES, true);
    ee88:	2301      	movs	r3, #1
    ee8a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ee8e:	4917      	ldr	r1, [pc, #92]	; (eeec <am_pdm0_isr+0xb4>)
    ee90:	4817      	ldr	r0, [pc, #92]	; (eef0 <am_pdm0_isr+0xb8>)
    ee92:	f7ff f9f3 	bl	e27c <am_app_utils_ring_buffer_push>
            g_ui32PCMDataSumBytes += PCM_FRAME_SIZE * PCM_DATA_BYTES;
    ee96:	4b17      	ldr	r3, [pc, #92]	; (eef4 <am_pdm0_isr+0xbc>)
    ee98:	681b      	ldr	r3, [r3, #0]
    ee9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    ee9e:	4a15      	ldr	r2, [pc, #84]	; (eef4 <am_pdm0_isr+0xbc>)
    eea0:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM]))
    eea2:	4b15      	ldr	r3, [pc, #84]	; (eef8 <am_pdm0_isr+0xc0>)
    eea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eea6:	4b14      	ldr	r3, [pc, #80]	; (eef8 <am_pdm0_isr+0xc0>)
    eea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    eeaa:	429a      	cmp	r2, r3
    eeac:	d111      	bne.n	eed2 <am_pdm0_isr+0x9a>
    eeae:	4b12      	ldr	r3, [pc, #72]	; (eef8 <am_pdm0_isr+0xc0>)
    eeb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eeb2:	2b01      	cmp	r3, #1
    eeb4:	d10d      	bne.n	eed2 <am_pdm0_isr+0x9a>
            {
                g_bPDMDataReady = true;
    eeb6:	4b0b      	ldr	r3, [pc, #44]	; (eee4 <am_pdm0_isr+0xac>)
    eeb8:	2201      	movs	r2, #1
    eeba:	701a      	strb	r2, [r3, #0]

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    eebc:	e009      	b.n	eed2 <am_pdm0_isr+0x9a>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	f003 0306 	and.w	r3, r3, #6
    eec4:	2b00      	cmp	r3, #0
    eec6:	d004      	beq.n	eed2 <am_pdm0_isr+0x9a>
        am_hal_pdm_fifo_flush(PDMHandle);
    eec8:	4b04      	ldr	r3, [pc, #16]	; (eedc <am_pdm0_isr+0xa4>)
    eeca:	681b      	ldr	r3, [r3, #0]
    eecc:	4618      	mov	r0, r3
    eece:	f7fd fd93 	bl	c9f8 <am_hal_pdm_fifo_flush>
}
    eed2:	bf00      	nop
    eed4:	3708      	adds	r7, #8
    eed6:	46bd      	mov	sp, r7
    eed8:	bd80      	pop	{r7, pc}
    eeda:	bf00      	nop
    eedc:	1000ce18 	.word	0x1000ce18
    eee0:	50011000 	.word	0x50011000
    eee4:	1000c15e 	.word	0x1000c15e
    eee8:	1000c169 	.word	0x1000c169
    eeec:	1000c18c 	.word	0x1000c18c
    eef0:	1002c244 	.word	0x1002c244
    eef4:	1000c160 	.word	0x1000c160
    eef8:	1002c21c 	.word	0x1002c21c

0000eefc <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    eefc:	b580      	push	{r7, lr}
    eefe:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    ef00:	4b0f      	ldr	r3, [pc, #60]	; (ef40 <am_ctimer_isr+0x44>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	3301      	adds	r3, #1
    ef06:	4a0e      	ldr	r2, [pc, #56]	; (ef40 <am_ctimer_isr+0x44>)
    ef08:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    ef0a:	4b0e      	ldr	r3, [pc, #56]	; (ef44 <am_ctimer_isr+0x48>)
    ef0c:	781b      	ldrb	r3, [r3, #0]
    ef0e:	b2db      	uxtb	r3, r3
    ef10:	2b01      	cmp	r3, #1
    ef12:	d10f      	bne.n	ef34 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    ef14:	4b0c      	ldr	r3, [pc, #48]	; (ef48 <am_ctimer_isr+0x4c>)
    ef16:	681b      	ldr	r3, [r3, #0]
    ef18:	3301      	adds	r3, #1
    ef1a:	4a0b      	ldr	r2, [pc, #44]	; (ef48 <am_ctimer_isr+0x4c>)
    ef1c:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    ef1e:	4b0a      	ldr	r3, [pc, #40]	; (ef48 <am_ctimer_isr+0x4c>)
    ef20:	681b      	ldr	r3, [r3, #0]
    ef22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ef26:	d905      	bls.n	ef34 <am_ctimer_isr+0x38>
        {
            g_ui8ButtonPushedFlag = 1;
    ef28:	4b08      	ldr	r3, [pc, #32]	; (ef4c <am_ctimer_isr+0x50>)
    ef2a:	2201      	movs	r2, #1
    ef2c:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    ef2e:	4b05      	ldr	r3, [pc, #20]	; (ef44 <am_ctimer_isr+0x48>)
    ef30:	2200      	movs	r2, #0
    ef32:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ef34:	2001      	movs	r0, #1
    ef36:	f000 fd59 	bl	f9ec <am_hal_ctimer_int_clear>
}
    ef3a:	bf00      	nop
    ef3c:	bd80      	pop	{r7, pc}
    ef3e:	bf00      	nop
    ef40:	1000c150 	.word	0x1000c150
    ef44:	1000c154 	.word	0x1000c154
    ef48:	1000c158 	.word	0x1000c158
    ef4c:	1000c15d 	.word	0x1000c15d

0000ef50 <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    ef50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    ef54:	b082      	sub	sp, #8
    ef56:	af00      	add	r7, sp, #0
    uint64_t ui64Status;
//
// Read and clear GPIO interrupt status
//
    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    ef58:	463b      	mov	r3, r7
    ef5a:	4619      	mov	r1, r3
    ef5c:	2000      	movs	r0, #0
    ef5e:	f7fe f961 	bl	d224 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    ef62:	e9d7 3400 	ldrd	r3, r4, [r7]
    ef66:	4618      	mov	r0, r3
    ef68:	4621      	mov	r1, r4
    ef6a:	f7fe f925 	bl	d1b8 <am_hal_gpio_interrupt_clear>
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    ef6e:	4b22      	ldr	r3, [pc, #136]	; (eff8 <am_gpio_isr+0xa8>)
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	b2db      	uxtb	r3, r3
    ef74:	2b00      	cmp	r3, #0
    ef76:	d134      	bne.n	efe2 <am_gpio_isr+0x92>
    {
        if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0))
    ef78:	e9d7 bc00 	ldrd	fp, ip, [r7]
    ef7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ef80:	f04f 0200 	mov.w	r2, #0
    ef84:	ea0b 0301 	and.w	r3, fp, r1
    ef88:	ea0c 0402 	and.w	r4, ip, r2
    ef8c:	4323      	orrs	r3, r4
    ef8e:	d003      	beq.n	ef98 <am_gpio_isr+0x48>
            g_sysKeyValue = AM_APP_KEY_0;
    ef90:	4b1a      	ldr	r3, [pc, #104]	; (effc <am_gpio_isr+0xac>)
    ef92:	2201      	movs	r2, #1
    ef94:	701a      	strb	r2, [r3, #0]
    ef96:	e01e      	b.n	efd6 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1))
    ef98:	e9d7 bc00 	ldrd	fp, ip, [r7]
    ef9c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    efa0:	f04f 0200 	mov.w	r2, #0
    efa4:	ea0b 0301 	and.w	r3, fp, r1
    efa8:	ea0c 0402 	and.w	r4, ip, r2
    efac:	4323      	orrs	r3, r4
    efae:	d003      	beq.n	efb8 <am_gpio_isr+0x68>
            g_sysKeyValue = AM_APP_KEY_1;
    efb0:	4b12      	ldr	r3, [pc, #72]	; (effc <am_gpio_isr+0xac>)
    efb2:	2202      	movs	r2, #2
    efb4:	701a      	strb	r2, [r3, #0]
    efb6:	e00e      	b.n	efd6 <am_gpio_isr+0x86>
        else if(ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2))
    efb8:	e9d7 bc00 	ldrd	fp, ip, [r7]
    efbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    efc0:	f04f 0200 	mov.w	r2, #0
    efc4:	ea0b 0301 	and.w	r3, fp, r1
    efc8:	ea0c 0402 	and.w	r4, ip, r2
    efcc:	4323      	orrs	r3, r4
    efce:	d002      	beq.n	efd6 <am_gpio_isr+0x86>
            g_sysKeyValue = AM_APP_KEY_2;
    efd0:	4b0a      	ldr	r3, [pc, #40]	; (effc <am_gpio_isr+0xac>)
    efd2:	2203      	movs	r2, #3
    efd4:	701a      	strb	r2, [r3, #0]

        g_ui8DebounceFlag = 1;
    efd6:	4b08      	ldr	r3, [pc, #32]	; (eff8 <am_gpio_isr+0xa8>)
    efd8:	2201      	movs	r2, #1
    efda:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    efdc:	4b08      	ldr	r3, [pc, #32]	; (f000 <am_gpio_isr+0xb0>)
    efde:	2200      	movs	r2, #0
    efe0:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    efe2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    efe6:	f04f 0100 	mov.w	r1, #0
    efea:	f7fe f8e5 	bl	d1b8 <am_hal_gpio_interrupt_clear>

}
    efee:	bf00      	nop
    eff0:	3708      	adds	r7, #8
    eff2:	46bd      	mov	sp, r7
    eff4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    eff8:	1000c154 	.word	0x1000c154
    effc:	1000c15c 	.word	0x1000c15c
    f000:	1000c158 	.word	0x1000c158

0000f004 <am_adc_isr>:
//
//*****************************************************************************
#if AM_APP_ANALOG_MIC
void
am_adc_isr(void)
{
    f004:	b580      	push	{r7, lr}
    f006:	b082      	sub	sp, #8
    f008:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    f00a:	4b2a      	ldr	r3, [pc, #168]	; (f0b4 <am_adc_isr+0xb0>)
    f00c:	681b      	ldr	r3, [r3, #0]
    f00e:	1d39      	adds	r1, r7, #4
    f010:	2200      	movs	r2, #0
    f012:	4618      	mov	r0, r3
    f014:	f000 f9e6 	bl	f3e4 <am_hal_adc_interrupt_status>
    f018:	4603      	mov	r3, r0
    f01a:	2b00      	cmp	r3, #0
    f01c:	d002      	beq.n	f024 <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    f01e:	4826      	ldr	r0, [pc, #152]	; (f0b8 <am_adc_isr+0xb4>)
    f020:	f7ff f8a2 	bl	e168 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    f024:	4b23      	ldr	r3, [pc, #140]	; (f0b4 <am_adc_isr+0xb0>)
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	687a      	ldr	r2, [r7, #4]
    f02a:	4611      	mov	r1, r2
    f02c:	4618      	mov	r0, r3
    f02e:	f000 f9f7 	bl	f420 <am_hal_adc_interrupt_clear>
    f032:	4603      	mov	r3, r0
    f034:	2b00      	cmp	r3, #0
    f036:	d002      	beq.n	f03e <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    f038:	4820      	ldr	r0, [pc, #128]	; (f0bc <am_adc_isr+0xb8>)
    f03a:	f7ff f895 	bl	e168 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    f03e:	687b      	ldr	r3, [r7, #4]
    f040:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f044:	2b00      	cmp	r3, #0
    f046:	d029      	beq.n	f09c <am_adc_isr+0x98>
    {
        g_bADCDMAComplete = true;
    f048:	4b1d      	ldr	r3, [pc, #116]	; (f0c0 <am_adc_isr+0xbc>)
    f04a:	2201      	movs	r2, #1
    f04c:	701a      	strb	r2, [r3, #0]
        if((g_bAMicDataReady == false) && (g_bAMicEvalFlag == true))
    f04e:	4b1d      	ldr	r3, [pc, #116]	; (f0c4 <am_adc_isr+0xc0>)
    f050:	781b      	ldrb	r3, [r3, #0]
    f052:	b2db      	uxtb	r3, r3
    f054:	f083 0301 	eor.w	r3, r3, #1
    f058:	b2db      	uxtb	r3, r3
    f05a:	2b00      	cmp	r3, #0
    f05c:	d01e      	beq.n	f09c <am_adc_isr+0x98>
    f05e:	4b1a      	ldr	r3, [pc, #104]	; (f0c8 <am_adc_isr+0xc4>)
    f060:	781b      	ldrb	r3, [r3, #0]
    f062:	b2db      	uxtb	r3, r3
    f064:	2b00      	cmp	r3, #0
    f066:	d019      	beq.n	f09c <am_adc_isr+0x98>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA], (void*)g_ui32ADCSampleBuffer, ADC_SAMPLE_COUNT*ANALOG_MIC_DATA_BYTES, true);
    f068:	2301      	movs	r3, #1
    f06a:	f44f 7220 	mov.w	r2, #640	; 0x280
    f06e:	4917      	ldr	r1, [pc, #92]	; (f0cc <am_adc_isr+0xc8>)
    f070:	4817      	ldr	r0, [pc, #92]	; (f0d0 <am_adc_isr+0xcc>)
    f072:	f7ff f903 	bl	e27c <am_app_utils_ring_buffer_push>
            g_ui32AMicDataSumBytes += ADC_SAMPLE_COUNT * ANALOG_MIC_DATA_BYTES;
    f076:	4b17      	ldr	r3, [pc, #92]	; (f0d4 <am_adc_isr+0xd0>)
    f078:	681b      	ldr	r3, [r3, #0]
    f07a:	f503 7320 	add.w	r3, r3, #640	; 0x280
    f07e:	4a15      	ldr	r2, [pc, #84]	; (f0d4 <am_adc_isr+0xd0>)
    f080:	6013      	str	r3, [r2, #0]
            if (am_app_utils_ring_buffer_full(&am_sys_ring_buffers[AM_APP_RINGBUFF_ANA]))
    f082:	4b15      	ldr	r3, [pc, #84]	; (f0d8 <am_adc_isr+0xd4>)
    f084:	699a      	ldr	r2, [r3, #24]
    f086:	4b14      	ldr	r3, [pc, #80]	; (f0d8 <am_adc_isr+0xd4>)
    f088:	69db      	ldr	r3, [r3, #28]
    f08a:	429a      	cmp	r2, r3
    f08c:	d106      	bne.n	f09c <am_adc_isr+0x98>
    f08e:	4b12      	ldr	r3, [pc, #72]	; (f0d8 <am_adc_isr+0xd4>)
    f090:	6a1b      	ldr	r3, [r3, #32]
    f092:	2b01      	cmp	r3, #1
    f094:	d102      	bne.n	f09c <am_adc_isr+0x98>
            {
                g_bAMicDataReady = true;
    f096:	4b0b      	ldr	r3, [pc, #44]	; (f0c4 <am_adc_isr+0xc0>)
    f098:	2201      	movs	r2, #1
    f09a:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	d002      	beq.n	f0ac <am_adc_isr+0xa8>
    {
        g_bADCDMAError = true;
    f0a6:	4b0d      	ldr	r3, [pc, #52]	; (f0dc <am_adc_isr+0xd8>)
    f0a8:	2201      	movs	r2, #1
    f0aa:	701a      	strb	r2, [r3, #0]
    }
}
    f0ac:	bf00      	nop
    f0ae:	3708      	adds	r7, #8
    f0b0:	46bd      	mov	sp, r7
    f0b2:	bd80      	pop	{r7, pc}
    f0b4:	1000ce10 	.word	0x1000ce10
    f0b8:	00010bfc 	.word	0x00010bfc
    f0bc:	00010c20 	.word	0x00010c20
    f0c0:	1000ce15 	.word	0x1000ce15
    f0c4:	1000c168 	.word	0x1000c168
    f0c8:	1000c169 	.word	0x1000c169
    f0cc:	1000c690 	.word	0x1000c690
    f0d0:	1002c230 	.word	0x1002c230
    f0d4:	1000c164 	.word	0x1000c164
    f0d8:	1002c21c 	.word	0x1002c21c
    f0dc:	1002c258 	.word	0x1002c258

0000f0e0 <am_bsp_uart_string_print>:
    f0e0:	b510      	push	{r4, lr}
    f0e2:	b086      	sub	sp, #24
    f0e4:	7803      	ldrb	r3, [r0, #0]
    f0e6:	2400      	movs	r4, #0
    f0e8:	9400      	str	r4, [sp, #0]
    f0ea:	b1bb      	cbz	r3, f11c <am_bsp_uart_string_print+0x3c>
    f0ec:	4603      	mov	r3, r0
    f0ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f0f2:	3401      	adds	r4, #1
    f0f4:	2a00      	cmp	r2, #0
    f0f6:	d1fa      	bne.n	f0ee <am_bsp_uart_string_print+0xe>
    f0f8:	4b0a      	ldr	r3, [pc, #40]	; (f124 <am_bsp_uart_string_print+0x44>)
    f0fa:	9002      	str	r0, [sp, #8]
    f0fc:	2200      	movs	r2, #0
    f0fe:	6818      	ldr	r0, [r3, #0]
    f100:	9403      	str	r4, [sp, #12]
    f102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f106:	a901      	add	r1, sp, #4
    f108:	9304      	str	r3, [sp, #16]
    f10a:	9201      	str	r2, [sp, #4]
    f10c:	f8cd d014 	str.w	sp, [sp, #20]
    f110:	f001 f800 	bl	10114 <am_hal_uart_transfer>
    f114:	9b00      	ldr	r3, [sp, #0]
    f116:	42a3      	cmp	r3, r4
    f118:	d002      	beq.n	f120 <am_bsp_uart_string_print+0x40>
    f11a:	e7fe      	b.n	f11a <am_bsp_uart_string_print+0x3a>
    f11c:	461c      	mov	r4, r3
    f11e:	e7eb      	b.n	f0f8 <am_bsp_uart_string_print+0x18>
    f120:	b006      	add	sp, #24
    f122:	bd10      	pop	{r4, pc}
    f124:	1000c170 	.word	0x1000c170

0000f128 <am_bsp_low_power_init>:
    f128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f12a:	f000 fcab 	bl	fa84 <am_hal_itm_disable>
    f12e:	2000      	movs	r0, #0
    f130:	f7fe f98a 	bl	d448 <am_util_stdio_printf_init>
    f134:	4b12      	ldr	r3, [pc, #72]	; (f180 <am_bsp_low_power_init+0x58>)
    f136:	4f13      	ldr	r7, [pc, #76]	; (f184 <am_bsp_low_power_init+0x5c>)
    f138:	6819      	ldr	r1, [r3, #0]
    f13a:	2029      	movs	r0, #41	; 0x29
    f13c:	f7fd fd3a 	bl	cbb4 <am_hal_gpio_pinconfig>
    f140:	f000 fde2 	bl	fd08 <am_hal_pwrctrl_low_power_init>
    f144:	2001      	movs	r0, #1
    f146:	f000 fe29 	bl	fd9c <am_hal_rtc_osc_select>
    f14a:	2100      	movs	r1, #0
    f14c:	2003      	movs	r0, #3
    f14e:	f000 fa99 	bl	f684 <am_hal_clkgen_control>
    f152:	f000 fe2f 	bl	fdb4 <am_hal_rtc_osc_disable>
    f156:	4b0c      	ldr	r3, [pc, #48]	; (f188 <am_bsp_low_power_init+0x60>)
    f158:	681e      	ldr	r6, [r3, #0]
    f15a:	2400      	movs	r4, #0
    f15c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f160:	4631      	mov	r1, r6
    f162:	4628      	mov	r0, r5
    f164:	f7fd fd26 	bl	cbb4 <am_hal_gpio_pinconfig>
    f168:	2103      	movs	r1, #3
    f16a:	4628      	mov	r0, r5
    f16c:	f7fd ff62 	bl	d034 <am_hal_gpio_state_write>
    f170:	3401      	adds	r4, #1
    f172:	4628      	mov	r0, r5
    f174:	2100      	movs	r1, #0
    f176:	f7fd ff5d 	bl	d034 <am_hal_gpio_state_write>
    f17a:	2c05      	cmp	r4, #5
    f17c:	d1ee      	bne.n	f15c <am_bsp_low_power_init+0x34>
    f17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f180:	00010c48 	.word	0x00010c48
    f184:	1000c00c 	.word	0x1000c00c
    f188:	00010c4c 	.word	0x00010c4c

0000f18c <am_bsp_uart_printf_enable>:
    f18c:	b510      	push	{r4, lr}
    f18e:	4c10      	ldr	r4, [pc, #64]	; (f1d0 <am_bsp_uart_printf_enable+0x44>)
    f190:	4b10      	ldr	r3, [pc, #64]	; (f1d4 <am_bsp_uart_printf_enable+0x48>)
    f192:	4621      	mov	r1, r4
    f194:	2202      	movs	r2, #2
    f196:	2000      	movs	r0, #0
    f198:	601a      	str	r2, [r3, #0]
    f19a:	f000 fe15 	bl	fdc8 <am_hal_uart_initialize>
    f19e:	2200      	movs	r2, #0
    f1a0:	4611      	mov	r1, r2
    f1a2:	6820      	ldr	r0, [r4, #0]
    f1a4:	f000 fe38 	bl	fe18 <am_hal_uart_power_control>
    f1a8:	6820      	ldr	r0, [r4, #0]
    f1aa:	490b      	ldr	r1, [pc, #44]	; (f1d8 <am_bsp_uart_printf_enable+0x4c>)
    f1ac:	f000 fea6 	bl	fefc <am_hal_uart_configure>
    f1b0:	4b0a      	ldr	r3, [pc, #40]	; (f1dc <am_bsp_uart_printf_enable+0x50>)
    f1b2:	2016      	movs	r0, #22
    f1b4:	6819      	ldr	r1, [r3, #0]
    f1b6:	f7fd fcfd 	bl	cbb4 <am_hal_gpio_pinconfig>
    f1ba:	4b09      	ldr	r3, [pc, #36]	; (f1e0 <am_bsp_uart_printf_enable+0x54>)
    f1bc:	2017      	movs	r0, #23
    f1be:	6819      	ldr	r1, [r3, #0]
    f1c0:	f7fd fcf8 	bl	cbb4 <am_hal_gpio_pinconfig>
    f1c4:	4807      	ldr	r0, [pc, #28]	; (f1e4 <am_bsp_uart_printf_enable+0x58>)
    f1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1ca:	f7fe b93d 	b.w	d448 <am_util_stdio_printf_init>
    f1ce:	bf00      	nop
    f1d0:	1000c170 	.word	0x1000c170
    f1d4:	1000c16c 	.word	0x1000c16c
    f1d8:	00010de0 	.word	0x00010de0
    f1dc:	00010e08 	.word	0x00010e08
    f1e0:	00010e0c 	.word	0x00010e0c
    f1e4:	0000f0e1 	.word	0x0000f0e1

0000f1e8 <am_hal_adc_initialize>:
    f1e8:	b108      	cbz	r0, f1ee <am_hal_adc_initialize+0x6>
    f1ea:	2005      	movs	r0, #5
    f1ec:	4770      	bx	lr
    f1ee:	b1a9      	cbz	r1, f21c <am_hal_adc_initialize+0x34>
    f1f0:	4a0b      	ldr	r2, [pc, #44]	; (f220 <am_hal_adc_initialize+0x38>)
    f1f2:	78d3      	ldrb	r3, [r2, #3]
    f1f4:	f013 0001 	ands.w	r0, r3, #1
    f1f8:	d001      	beq.n	f1fe <am_hal_adc_initialize+0x16>
    f1fa:	2007      	movs	r0, #7
    f1fc:	4770      	bx	lr
    f1fe:	b430      	push	{r4, r5}
    f200:	f043 0301 	orr.w	r3, r3, #1
    f204:	70d3      	strb	r3, [r2, #3]
    f206:	6813      	ldr	r3, [r2, #0]
    f208:	4d06      	ldr	r5, [pc, #24]	; (f224 <am_hal_adc_initialize+0x3c>)
    f20a:	4c07      	ldr	r4, [pc, #28]	; (f228 <am_hal_adc_initialize+0x40>)
    f20c:	6050      	str	r0, [r2, #4]
    f20e:	f365 0317 	bfi	r3, r5, #0, #24
    f212:	6013      	str	r3, [r2, #0]
    f214:	6020      	str	r0, [r4, #0]
    f216:	600a      	str	r2, [r1, #0]
    f218:	bc30      	pop	{r4, r5}
    f21a:	4770      	bx	lr
    f21c:	2006      	movs	r0, #6
    f21e:	4770      	bx	lr
    f220:	1002c260 	.word	0x1002c260
    f224:	00afafaf 	.word	0x00afafaf
    f228:	1002c25c 	.word	0x1002c25c

0000f22c <am_hal_adc_configure>:
    f22c:	b128      	cbz	r0, f23a <am_hal_adc_configure+0xe>
    f22e:	6803      	ldr	r3, [r0, #0]
    f230:	4a18      	ldr	r2, [pc, #96]	; (f294 <am_hal_adc_configure+0x68>)
    f232:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f236:	4293      	cmp	r3, r2
    f238:	d001      	beq.n	f23e <am_hal_adc_configure+0x12>
    f23a:	2002      	movs	r0, #2
    f23c:	4770      	bx	lr
    f23e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f240:	7808      	ldrb	r0, [r1, #0]
    f242:	784d      	ldrb	r5, [r1, #1]
    f244:	788c      	ldrb	r4, [r1, #2]
    f246:	f891 e003 	ldrb.w	lr, [r1, #3]
    f24a:	790f      	ldrb	r7, [r1, #4]
    f24c:	794a      	ldrb	r2, [r1, #5]
    f24e:	798b      	ldrb	r3, [r1, #6]
    f250:	4e11      	ldr	r6, [pc, #68]	; (f298 <am_hal_adc_configure+0x6c>)
    f252:	0600      	lsls	r0, r0, #24
    f254:	04ed      	lsls	r5, r5, #19
    f256:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    f25a:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    f25e:	4328      	orrs	r0, r5
    f260:	0424      	lsls	r4, r4, #16
    f262:	ea4f 210e 	mov.w	r1, lr, lsl #8
    f266:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    f26a:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    f26e:	4304      	orrs	r4, r0
    f270:	f401 7040 	and.w	r0, r1, #768	; 0x300
    f274:	0139      	lsls	r1, r7, #4
    f276:	4320      	orrs	r0, r4
    f278:	f001 0110 	and.w	r1, r1, #16
    f27c:	00d2      	lsls	r2, r2, #3
    f27e:	4301      	orrs	r1, r0
    f280:	f002 0208 	and.w	r2, r2, #8
    f284:	009b      	lsls	r3, r3, #2
    f286:	430a      	orrs	r2, r1
    f288:	f003 0304 	and.w	r3, r3, #4
    f28c:	4313      	orrs	r3, r2
    f28e:	6033      	str	r3, [r6, #0]
    f290:	2000      	movs	r0, #0
    f292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f294:	01afafaf 	.word	0x01afafaf
    f298:	50010000 	.word	0x50010000

0000f29c <am_hal_adc_configure_slot>:
    f29c:	b128      	cbz	r0, f2aa <am_hal_adc_configure_slot+0xe>
    f29e:	6803      	ldr	r3, [r0, #0]
    f2a0:	4816      	ldr	r0, [pc, #88]	; (f2fc <am_hal_adc_configure_slot+0x60>)
    f2a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2a6:	4283      	cmp	r3, r0
    f2a8:	d001      	beq.n	f2ae <am_hal_adc_configure_slot+0x12>
    f2aa:	2002      	movs	r0, #2
    f2ac:	4770      	bx	lr
    f2ae:	2907      	cmp	r1, #7
    f2b0:	d901      	bls.n	f2b6 <am_hal_adc_configure_slot+0x1a>
    f2b2:	2005      	movs	r0, #5
    f2b4:	4770      	bx	lr
    f2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2b8:	7813      	ldrb	r3, [r2, #0]
    f2ba:	7854      	ldrb	r4, [r2, #1]
    f2bc:	7890      	ldrb	r0, [r2, #2]
    f2be:	78d7      	ldrb	r7, [r2, #3]
    f2c0:	f892 e004 	ldrb.w	lr, [r2, #4]
    f2c4:	4d0e      	ldr	r5, [pc, #56]	; (f300 <am_hal_adc_configure_slot+0x64>)
    f2c6:	4e0f      	ldr	r6, [pc, #60]	; (f304 <am_hal_adc_configure_slot+0x68>)
    f2c8:	061b      	lsls	r3, r3, #24
    f2ca:	0424      	lsls	r4, r4, #16
    f2cc:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    f2d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    f2d4:	4323      	orrs	r3, r4
    f2d6:	0202      	lsls	r2, r0, #8
    f2d8:	ea43 0e0e 	orr.w	lr, r3, lr
    f2dc:	440d      	add	r5, r1
    f2de:	007b      	lsls	r3, r7, #1
    f2e0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    f2e4:	ea4e 0202 	orr.w	r2, lr, r2
    f2e8:	00ad      	lsls	r5, r5, #2
    f2ea:	f003 0302 	and.w	r3, r3, #2
    f2ee:	4313      	orrs	r3, r2
    f2f0:	602b      	str	r3, [r5, #0]
    f2f2:	6833      	ldr	r3, [r6, #0]
    f2f4:	3301      	adds	r3, #1
    f2f6:	6033      	str	r3, [r6, #0]
    f2f8:	2000      	movs	r0, #0
    f2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2fc:	01afafaf 	.word	0x01afafaf
    f300:	14004003 	.word	0x14004003
    f304:	1002c25c 	.word	0x1002c25c

0000f308 <am_hal_adc_configure_dma>:
    f308:	b128      	cbz	r0, f316 <am_hal_adc_configure_dma+0xe>
    f30a:	6803      	ldr	r3, [r0, #0]
    f30c:	4a17      	ldr	r2, [pc, #92]	; (f36c <am_hal_adc_configure_dma+0x64>)
    f30e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f312:	4293      	cmp	r3, r2
    f314:	d001      	beq.n	f31a <am_hal_adc_configure_dma+0x12>
    f316:	2002      	movs	r0, #2
    f318:	4770      	bx	lr
    f31a:	b410      	push	{r4}
    f31c:	7808      	ldrb	r0, [r1, #0]
    f31e:	784b      	ldrb	r3, [r1, #1]
    f320:	4c13      	ldr	r4, [pc, #76]	; (f370 <am_hal_adc_configure_dma+0x68>)
    f322:	4a14      	ldr	r2, [pc, #80]	; (f374 <am_hal_adc_configure_dma+0x6c>)
    f324:	6824      	ldr	r4, [r4, #0]
    f326:	0240      	lsls	r0, r0, #9
    f328:	021b      	lsls	r3, r3, #8
    f32a:	f400 7000 	and.w	r0, r0, #512	; 0x200
    f32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    f332:	4303      	orrs	r3, r0
    f334:	2c01      	cmp	r4, #1
    f336:	bf8c      	ite	hi
    f338:	2000      	movhi	r0, #0
    f33a:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    f33e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    f342:	4303      	orrs	r3, r0
    f344:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    f348:	8888      	ldrh	r0, [r1, #4]
    f34a:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    f34e:	f360 0391 	bfi	r3, r0, #2, #16
    f352:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    f356:	688b      	ldr	r3, [r1, #8]
    f358:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    f35c:	2301      	movs	r3, #1
    f35e:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    f362:	2000      	movs	r0, #0
    f364:	f85d 4b04 	ldr.w	r4, [sp], #4
    f368:	4770      	bx	lr
    f36a:	bf00      	nop
    f36c:	01afafaf 	.word	0x01afafaf
    f370:	1002c25c 	.word	0x1002c25c
    f374:	50010000 	.word	0x50010000

0000f378 <am_hal_adc_enable>:
    f378:	4603      	mov	r3, r0
    f37a:	b128      	cbz	r0, f388 <am_hal_adc_enable+0x10>
    f37c:	6802      	ldr	r2, [r0, #0]
    f37e:	490c      	ldr	r1, [pc, #48]	; (f3b0 <am_hal_adc_enable+0x38>)
    f380:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f384:	428a      	cmp	r2, r1
    f386:	d001      	beq.n	f38c <am_hal_adc_enable+0x14>
    f388:	2002      	movs	r0, #2
    f38a:	4770      	bx	lr
    f38c:	78c2      	ldrb	r2, [r0, #3]
    f38e:	f002 0202 	and.w	r2, r2, #2
    f392:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    f396:	b94a      	cbnz	r2, f3ac <am_hal_adc_enable+0x34>
    f398:	4906      	ldr	r1, [pc, #24]	; (f3b4 <am_hal_adc_enable+0x3c>)
    f39a:	680a      	ldr	r2, [r1, #0]
    f39c:	f042 0201 	orr.w	r2, r2, #1
    f3a0:	600a      	str	r2, [r1, #0]
    f3a2:	78da      	ldrb	r2, [r3, #3]
    f3a4:	f042 0202 	orr.w	r2, r2, #2
    f3a8:	70da      	strb	r2, [r3, #3]
    f3aa:	4770      	bx	lr
    f3ac:	2000      	movs	r0, #0
    f3ae:	4770      	bx	lr
    f3b0:	01afafaf 	.word	0x01afafaf
    f3b4:	50010000 	.word	0x50010000

0000f3b8 <am_hal_adc_interrupt_enable>:
    f3b8:	b128      	cbz	r0, f3c6 <am_hal_adc_interrupt_enable+0xe>
    f3ba:	6803      	ldr	r3, [r0, #0]
    f3bc:	4a07      	ldr	r2, [pc, #28]	; (f3dc <am_hal_adc_interrupt_enable+0x24>)
    f3be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3c2:	4293      	cmp	r3, r2
    f3c4:	d001      	beq.n	f3ca <am_hal_adc_interrupt_enable+0x12>
    f3c6:	2002      	movs	r0, #2
    f3c8:	4770      	bx	lr
    f3ca:	4b05      	ldr	r3, [pc, #20]	; (f3e0 <am_hal_adc_interrupt_enable+0x28>)
    f3cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f3d0:	4311      	orrs	r1, r2
    f3d2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    f3d6:	2000      	movs	r0, #0
    f3d8:	4770      	bx	lr
    f3da:	bf00      	nop
    f3dc:	01afafaf 	.word	0x01afafaf
    f3e0:	50010000 	.word	0x50010000

0000f3e4 <am_hal_adc_interrupt_status>:
    f3e4:	b128      	cbz	r0, f3f2 <am_hal_adc_interrupt_status+0xe>
    f3e6:	6803      	ldr	r3, [r0, #0]
    f3e8:	480b      	ldr	r0, [pc, #44]	; (f418 <am_hal_adc_interrupt_status+0x34>)
    f3ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f3ee:	4283      	cmp	r3, r0
    f3f0:	d001      	beq.n	f3f6 <am_hal_adc_interrupt_status+0x12>
    f3f2:	2002      	movs	r0, #2
    f3f4:	4770      	bx	lr
    f3f6:	b92a      	cbnz	r2, f404 <am_hal_adc_interrupt_status+0x20>
    f3f8:	4b08      	ldr	r3, [pc, #32]	; (f41c <am_hal_adc_interrupt_status+0x38>)
    f3fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f3fe:	600b      	str	r3, [r1, #0]
    f400:	4610      	mov	r0, r2
    f402:	4770      	bx	lr
    f404:	4a05      	ldr	r2, [pc, #20]	; (f41c <am_hal_adc_interrupt_status+0x38>)
    f406:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    f40a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f40e:	4003      	ands	r3, r0
    f410:	600b      	str	r3, [r1, #0]
    f412:	2000      	movs	r0, #0
    f414:	4770      	bx	lr
    f416:	bf00      	nop
    f418:	01afafaf 	.word	0x01afafaf
    f41c:	50010000 	.word	0x50010000

0000f420 <am_hal_adc_interrupt_clear>:
    f420:	b128      	cbz	r0, f42e <am_hal_adc_interrupt_clear+0xe>
    f422:	6803      	ldr	r3, [r0, #0]
    f424:	4a05      	ldr	r2, [pc, #20]	; (f43c <am_hal_adc_interrupt_clear+0x1c>)
    f426:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f42a:	4293      	cmp	r3, r2
    f42c:	d001      	beq.n	f432 <am_hal_adc_interrupt_clear+0x12>
    f42e:	2002      	movs	r0, #2
    f430:	4770      	bx	lr
    f432:	4b03      	ldr	r3, [pc, #12]	; (f440 <am_hal_adc_interrupt_clear+0x20>)
    f434:	2000      	movs	r0, #0
    f436:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    f43a:	4770      	bx	lr
    f43c:	01afafaf 	.word	0x01afafaf
    f440:	50010000 	.word	0x50010000

0000f444 <am_hal_adc_sw_trigger>:
    f444:	b128      	cbz	r0, f452 <am_hal_adc_sw_trigger+0xe>
    f446:	6803      	ldr	r3, [r0, #0]
    f448:	4a05      	ldr	r2, [pc, #20]	; (f460 <am_hal_adc_sw_trigger+0x1c>)
    f44a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f44e:	4293      	cmp	r3, r2
    f450:	d001      	beq.n	f456 <am_hal_adc_sw_trigger+0x12>
    f452:	2002      	movs	r0, #2
    f454:	4770      	bx	lr
    f456:	4b03      	ldr	r3, [pc, #12]	; (f464 <am_hal_adc_sw_trigger+0x20>)
    f458:	2237      	movs	r2, #55	; 0x37
    f45a:	609a      	str	r2, [r3, #8]
    f45c:	2000      	movs	r0, #0
    f45e:	4770      	bx	lr
    f460:	01afafaf 	.word	0x01afafaf
    f464:	50010000 	.word	0x50010000

0000f468 <am_hal_adc_power_control>:
    f468:	b140      	cbz	r0, f47c <am_hal_adc_power_control+0x14>
    f46a:	6803      	ldr	r3, [r0, #0]
    f46c:	b570      	push	{r4, r5, r6, lr}
    f46e:	4c2e      	ldr	r4, [pc, #184]	; (f528 <am_hal_adc_power_control+0xc0>)
    f470:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f474:	42a3      	cmp	r3, r4
    f476:	d003      	beq.n	f480 <am_hal_adc_power_control+0x18>
    f478:	2002      	movs	r0, #2
    f47a:	bd70      	pop	{r4, r5, r6, pc}
    f47c:	2002      	movs	r0, #2
    f47e:	4770      	bx	lr
    f480:	4604      	mov	r4, r0
    f482:	4615      	mov	r5, r2
    f484:	460e      	mov	r6, r1
    f486:	b329      	cbz	r1, f4d4 <am_hal_adc_power_control+0x6c>
    f488:	2902      	cmp	r1, #2
    f48a:	d821      	bhi.n	f4d0 <am_hal_adc_power_control+0x68>
    f48c:	b1da      	cbz	r2, f4c6 <am_hal_adc_power_control+0x5e>
    f48e:	4b27      	ldr	r3, [pc, #156]	; (f52c <am_hal_adc_power_control+0xc4>)
    f490:	68da      	ldr	r2, [r3, #12]
    f492:	6142      	str	r2, [r0, #20]
    f494:	691a      	ldr	r2, [r3, #16]
    f496:	6182      	str	r2, [r0, #24]
    f498:	695a      	ldr	r2, [r3, #20]
    f49a:	61c2      	str	r2, [r0, #28]
    f49c:	699a      	ldr	r2, [r3, #24]
    f49e:	6202      	str	r2, [r0, #32]
    f4a0:	69da      	ldr	r2, [r3, #28]
    f4a2:	6242      	str	r2, [r0, #36]	; 0x24
    f4a4:	6a1a      	ldr	r2, [r3, #32]
    f4a6:	6282      	str	r2, [r0, #40]	; 0x28
    f4a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f4aa:	62c2      	str	r2, [r0, #44]	; 0x2c
    f4ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f4ae:	6302      	str	r2, [r0, #48]	; 0x30
    f4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4b2:	6342      	str	r2, [r0, #52]	; 0x34
    f4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f4b6:	6382      	str	r2, [r0, #56]	; 0x38
    f4b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f4bc:	63c2      	str	r2, [r0, #60]	; 0x3c
    f4be:	681b      	ldr	r3, [r3, #0]
    f4c0:	6103      	str	r3, [r0, #16]
    f4c2:	2301      	movs	r3, #1
    f4c4:	7303      	strb	r3, [r0, #12]
    f4c6:	200a      	movs	r0, #10
    f4c8:	f000 fbf2 	bl	fcb0 <am_hal_pwrctrl_periph_disable>
    f4cc:	2000      	movs	r0, #0
    f4ce:	bd70      	pop	{r4, r5, r6, pc}
    f4d0:	2006      	movs	r0, #6
    f4d2:	bd70      	pop	{r4, r5, r6, pc}
    f4d4:	b11a      	cbz	r2, f4de <am_hal_adc_power_control+0x76>
    f4d6:	7b03      	ldrb	r3, [r0, #12]
    f4d8:	b933      	cbnz	r3, f4e8 <am_hal_adc_power_control+0x80>
    f4da:	2007      	movs	r0, #7
    f4dc:	bd70      	pop	{r4, r5, r6, pc}
    f4de:	200a      	movs	r0, #10
    f4e0:	f000 fbbc 	bl	fc5c <am_hal_pwrctrl_periph_enable>
    f4e4:	4628      	mov	r0, r5
    f4e6:	bd70      	pop	{r4, r5, r6, pc}
    f4e8:	200a      	movs	r0, #10
    f4ea:	f000 fbb7 	bl	fc5c <am_hal_pwrctrl_periph_enable>
    f4ee:	4b0f      	ldr	r3, [pc, #60]	; (f52c <am_hal_adc_power_control+0xc4>)
    f4f0:	6962      	ldr	r2, [r4, #20]
    f4f2:	60da      	str	r2, [r3, #12]
    f4f4:	69a2      	ldr	r2, [r4, #24]
    f4f6:	611a      	str	r2, [r3, #16]
    f4f8:	69e2      	ldr	r2, [r4, #28]
    f4fa:	615a      	str	r2, [r3, #20]
    f4fc:	6a22      	ldr	r2, [r4, #32]
    f4fe:	619a      	str	r2, [r3, #24]
    f500:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f502:	61da      	str	r2, [r3, #28]
    f504:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f506:	621a      	str	r2, [r3, #32]
    f508:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f50a:	625a      	str	r2, [r3, #36]	; 0x24
    f50c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f50e:	629a      	str	r2, [r3, #40]	; 0x28
    f510:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f512:	62da      	str	r2, [r3, #44]	; 0x2c
    f514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f516:	631a      	str	r2, [r3, #48]	; 0x30
    f518:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f51a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f51e:	6922      	ldr	r2, [r4, #16]
    f520:	601a      	str	r2, [r3, #0]
    f522:	4630      	mov	r0, r6
    f524:	7326      	strb	r6, [r4, #12]
    f526:	bd70      	pop	{r4, r5, r6, pc}
    f528:	01afafaf 	.word	0x01afafaf
    f52c:	50010000 	.word	0x50010000

0000f530 <am_hal_burst_mode_initialize>:
    f530:	b570      	push	{r4, r5, r6, lr}
    f532:	4b1e      	ldr	r3, [pc, #120]	; (f5ac <am_hal_burst_mode_initialize+0x7c>)
    f534:	695a      	ldr	r2, [r3, #20]
    f536:	07d5      	lsls	r5, r2, #31
    f538:	b082      	sub	sp, #8
    f53a:	4604      	mov	r4, r0
    f53c:	d407      	bmi.n	f54e <am_hal_burst_mode_initialize+0x1e>
    f53e:	4a1c      	ldr	r2, [pc, #112]	; (f5b0 <am_hal_burst_mode_initialize+0x80>)
    f540:	2100      	movs	r1, #0
    f542:	2301      	movs	r3, #1
    f544:	7011      	strb	r1, [r2, #0]
    f546:	2007      	movs	r0, #7
    f548:	7023      	strb	r3, [r4, #0]
    f54a:	b002      	add	sp, #8
    f54c:	bd70      	pop	{r4, r5, r6, pc}
    f54e:	4a19      	ldr	r2, [pc, #100]	; (f5b4 <am_hal_burst_mode_initialize+0x84>)
    f550:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f552:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f556:	6291      	str	r1, [r2, #40]	; 0x28
    f558:	6812      	ldr	r2, [r2, #0]
    f55a:	07d0      	lsls	r0, r2, #31
    f55c:	d507      	bpl.n	f56e <am_hal_burst_mode_initialize+0x3e>
    f55e:	68db      	ldr	r3, [r3, #12]
    f560:	b2db      	uxtb	r3, r3
    f562:	2b11      	cmp	r3, #17
    f564:	d903      	bls.n	f56e <am_hal_burst_mode_initialize+0x3e>
    f566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f56a:	4a13      	ldr	r2, [pc, #76]	; (f5b8 <am_hal_burst_mode_initialize+0x88>)
    f56c:	63da      	str	r2, [r3, #60]	; 0x3c
    f56e:	4d0f      	ldr	r5, [pc, #60]	; (f5ac <am_hal_burst_mode_initialize+0x7c>)
    f570:	4912      	ldr	r1, [pc, #72]	; (f5bc <am_hal_burst_mode_initialize+0x8c>)
    f572:	7e2a      	ldrb	r2, [r5, #24]
    f574:	2601      	movs	r6, #1
    f576:	f042 0210 	orr.w	r2, r2, #16
    f57a:	2320      	movs	r3, #32
    f57c:	762a      	strb	r2, [r5, #24]
    f57e:	f242 7010 	movw	r0, #10000	; 0x2710
    f582:	461a      	mov	r2, r3
    f584:	9600      	str	r6, [sp, #0]
    f586:	f000 fa45 	bl	fa14 <am_hal_flash_delay_status_check>
    f58a:	b948      	cbnz	r0, f5a0 <am_hal_burst_mode_initialize+0x70>
    f58c:	69aa      	ldr	r2, [r5, #24]
    f58e:	0651      	lsls	r1, r2, #25
    f590:	d5d5      	bpl.n	f53e <am_hal_burst_mode_initialize+0xe>
    f592:	69aa      	ldr	r2, [r5, #24]
    f594:	0692      	lsls	r2, r2, #26
    f596:	d5d2      	bpl.n	f53e <am_hal_burst_mode_initialize+0xe>
    f598:	4a05      	ldr	r2, [pc, #20]	; (f5b0 <am_hal_burst_mode_initialize+0x80>)
    f59a:	7016      	strb	r6, [r2, #0]
    f59c:	7020      	strb	r0, [r4, #0]
    f59e:	e7d4      	b.n	f54a <am_hal_burst_mode_initialize+0x1a>
    f5a0:	4a03      	ldr	r2, [pc, #12]	; (f5b0 <am_hal_burst_mode_initialize+0x80>)
    f5a2:	2100      	movs	r1, #0
    f5a4:	7011      	strb	r1, [r2, #0]
    f5a6:	7026      	strb	r6, [r4, #0]
    f5a8:	b002      	add	sp, #8
    f5aa:	bd70      	pop	{r4, r5, r6, pc}
    f5ac:	40020000 	.word	0x40020000
    f5b0:	1000c174 	.word	0x1000c174
    f5b4:	40021000 	.word	0x40021000
    f5b8:	0fc0400f 	.word	0x0fc0400f
    f5bc:	40020018 	.word	0x40020018

0000f5c0 <am_hal_burst_mode_enable>:
    f5c0:	4b14      	ldr	r3, [pc, #80]	; (f614 <am_hal_burst_mode_enable+0x54>)
    f5c2:	781b      	ldrb	r3, [r3, #0]
    f5c4:	b91b      	cbnz	r3, f5ce <am_hal_burst_mode_enable+0xe>
    f5c6:	2301      	movs	r3, #1
    f5c8:	7003      	strb	r3, [r0, #0]
    f5ca:	2007      	movs	r0, #7
    f5cc:	4770      	bx	lr
    f5ce:	b570      	push	{r4, r5, r6, lr}
    f5d0:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f5d4:	b082      	sub	sp, #8
    f5d6:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f5da:	490f      	ldr	r1, [pc, #60]	; (f618 <am_hal_burst_mode_enable+0x58>)
    f5dc:	2601      	movs	r6, #1
    f5de:	4332      	orrs	r2, r6
    f5e0:	2304      	movs	r3, #4
    f5e2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f5e6:	4604      	mov	r4, r0
    f5e8:	461a      	mov	r2, r3
    f5ea:	9600      	str	r6, [sp, #0]
    f5ec:	f242 7010 	movw	r0, #10000	; 0x2710
    f5f0:	f000 fa10 	bl	fa14 <am_hal_flash_delay_status_check>
    f5f4:	b938      	cbnz	r0, f606 <am_hal_burst_mode_enable+0x46>
    f5f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f5f8:	079a      	lsls	r2, r3, #30
    f5fa:	d507      	bpl.n	f60c <am_hal_burst_mode_enable+0x4c>
    f5fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f5fe:	075b      	lsls	r3, r3, #29
    f600:	d501      	bpl.n	f606 <am_hal_burst_mode_enable+0x46>
    f602:	7020      	strb	r0, [r4, #0]
    f604:	e000      	b.n	f608 <am_hal_burst_mode_enable+0x48>
    f606:	7026      	strb	r6, [r4, #0]
    f608:	b002      	add	sp, #8
    f60a:	bd70      	pop	{r4, r5, r6, pc}
    f60c:	7026      	strb	r6, [r4, #0]
    f60e:	4630      	mov	r0, r6
    f610:	e7fa      	b.n	f608 <am_hal_burst_mode_enable+0x48>
    f612:	bf00      	nop
    f614:	1000c174 	.word	0x1000c174
    f618:	40004034 	.word	0x40004034

0000f61c <am_hal_cachectrl_config>:
    f61c:	b530      	push	{r4, r5, lr}
    f61e:	b083      	sub	sp, #12
    f620:	4605      	mov	r5, r0
    f622:	f000 fa27 	bl	fa74 <am_hal_interrupt_master_disable>
    f626:	4c11      	ldr	r4, [pc, #68]	; (f66c <am_hal_cachectrl_config+0x50>)
    f628:	9001      	str	r0, [sp, #4]
    f62a:	6823      	ldr	r3, [r4, #0]
    f62c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f630:	6023      	str	r3, [r4, #0]
    f632:	9801      	ldr	r0, [sp, #4]
    f634:	f000 fa22 	bl	fa7c <am_hal_interrupt_master_set>
    f638:	78eb      	ldrb	r3, [r5, #3]
    f63a:	782a      	ldrb	r2, [r5, #0]
    f63c:	78a8      	ldrb	r0, [r5, #2]
    f63e:	7869      	ldrb	r1, [r5, #1]
    f640:	005b      	lsls	r3, r3, #1
    f642:	0112      	lsls	r2, r2, #4
    f644:	b2d2      	uxtb	r2, r2
    f646:	f003 0302 	and.w	r3, r3, #2
    f64a:	4313      	orrs	r3, r2
    f64c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f650:	0080      	lsls	r0, r0, #2
    f652:	f000 000c 	and.w	r0, r0, #12
    f656:	020a      	lsls	r2, r1, #8
    f658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f65c:	4303      	orrs	r3, r0
    f65e:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f662:	4313      	orrs	r3, r2
    f664:	2000      	movs	r0, #0
    f666:	6023      	str	r3, [r4, #0]
    f668:	b003      	add	sp, #12
    f66a:	bd30      	pop	{r4, r5, pc}
    f66c:	40018000 	.word	0x40018000

0000f670 <am_hal_cachectrl_enable>:
    f670:	4a03      	ldr	r2, [pc, #12]	; (f680 <am_hal_cachectrl_enable+0x10>)
    f672:	6813      	ldr	r3, [r2, #0]
    f674:	f043 0301 	orr.w	r3, r3, #1
    f678:	6013      	str	r3, [r2, #0]
    f67a:	2000      	movs	r0, #0
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	40018000 	.word	0x40018000

0000f684 <am_hal_clkgen_control>:
    f684:	4b32      	ldr	r3, [pc, #200]	; (f750 <am_hal_clkgen_control+0xcc>)
    f686:	681a      	ldr	r2, [r3, #0]
    f688:	b912      	cbnz	r2, f690 <am_hal_clkgen_control+0xc>
    f68a:	4a32      	ldr	r2, [pc, #200]	; (f754 <am_hal_clkgen_control+0xd0>)
    f68c:	6812      	ldr	r2, [r2, #0]
    f68e:	601a      	str	r2, [r3, #0]
    f690:	2809      	cmp	r0, #9
    f692:	d85a      	bhi.n	f74a <am_hal_clkgen_control+0xc6>
    f694:	e8df f000 	tbb	[pc, r0]
    f698:	261e160d 	.word	0x261e160d
    f69c:	4640362e 	.word	0x4640362e
    f6a0:	054e      	.short	0x054e
    f6a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f6a6:	2000      	movs	r0, #0
    f6a8:	6a1a      	ldr	r2, [r3, #32]
    f6aa:	f36f 0200 	bfc	r2, #0, #1
    f6ae:	621a      	str	r2, [r3, #32]
    f6b0:	4770      	bx	lr
    f6b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f6b6:	2200      	movs	r2, #0
    f6b8:	2147      	movs	r1, #71	; 0x47
    f6ba:	6159      	str	r1, [r3, #20]
    f6bc:	4610      	mov	r0, r2
    f6be:	619a      	str	r2, [r3, #24]
    f6c0:	615a      	str	r2, [r3, #20]
    f6c2:	4770      	bx	lr
    f6c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6c8:	2000      	movs	r0, #0
    f6ca:	68d3      	ldr	r3, [r2, #12]
    f6cc:	f023 0301 	bic.w	r3, r3, #1
    f6d0:	60d3      	str	r3, [r2, #12]
    f6d2:	4770      	bx	lr
    f6d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6d8:	2000      	movs	r0, #0
    f6da:	68d3      	ldr	r3, [r2, #12]
    f6dc:	f023 0302 	bic.w	r3, r3, #2
    f6e0:	60d3      	str	r3, [r2, #12]
    f6e2:	4770      	bx	lr
    f6e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6e8:	2000      	movs	r0, #0
    f6ea:	68d3      	ldr	r3, [r2, #12]
    f6ec:	f043 0301 	orr.w	r3, r3, #1
    f6f0:	60d3      	str	r3, [r2, #12]
    f6f2:	4770      	bx	lr
    f6f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6f8:	2000      	movs	r0, #0
    f6fa:	68d3      	ldr	r3, [r2, #12]
    f6fc:	f043 0302 	orr.w	r3, r3, #2
    f700:	60d3      	str	r3, [r2, #12]
    f702:	4770      	bx	lr
    f704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f708:	2200      	movs	r2, #0
    f70a:	2047      	movs	r0, #71	; 0x47
    f70c:	2101      	movs	r1, #1
    f70e:	6158      	str	r0, [r3, #20]
    f710:	6199      	str	r1, [r3, #24]
    f712:	4610      	mov	r0, r2
    f714:	615a      	str	r2, [r3, #20]
    f716:	4770      	bx	lr
    f718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f71c:	2000      	movs	r0, #0
    f71e:	68da      	ldr	r2, [r3, #12]
    f720:	60da      	str	r2, [r3, #12]
    f722:	4770      	bx	lr
    f724:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f728:	2000      	movs	r0, #0
    f72a:	68d3      	ldr	r3, [r2, #12]
    f72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f730:	60d3      	str	r3, [r2, #12]
    f732:	4770      	bx	lr
    f734:	b139      	cbz	r1, f746 <am_hal_clkgen_control+0xc2>
    f736:	680b      	ldr	r3, [r1, #0]
    f738:	f043 0301 	orr.w	r3, r3, #1
    f73c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f740:	2000      	movs	r0, #0
    f742:	6213      	str	r3, [r2, #32]
    f744:	4770      	bx	lr
    f746:	4b04      	ldr	r3, [pc, #16]	; (f758 <am_hal_clkgen_control+0xd4>)
    f748:	e7f8      	b.n	f73c <am_hal_clkgen_control+0xb8>
    f74a:	2006      	movs	r0, #6
    f74c:	4770      	bx	lr
    f74e:	bf00      	nop
    f750:	1000c178 	.word	0x1000c178
    f754:	4ffff000 	.word	0x4ffff000
    f758:	0025b801 	.word	0x0025b801

0000f75c <am_hal_clkgen_status_get>:
    f75c:	b1a8      	cbz	r0, f78a <am_hal_clkgen_status_get+0x2e>
    f75e:	b410      	push	{r4}
    f760:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f764:	490a      	ldr	r1, [pc, #40]	; (f790 <am_hal_clkgen_status_get+0x34>)
    f766:	6994      	ldr	r4, [r2, #24]
    f768:	4b0a      	ldr	r3, [pc, #40]	; (f794 <am_hal_clkgen_status_get+0x38>)
    f76a:	f014 0f01 	tst.w	r4, #1
    f76e:	bf08      	it	eq
    f770:	460b      	moveq	r3, r1
    f772:	6003      	str	r3, [r0, #0]
    f774:	69d3      	ldr	r3, [r2, #28]
    f776:	f85d 4b04 	ldr.w	r4, [sp], #4
    f77a:	f003 0201 	and.w	r2, r3, #1
    f77e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f782:	6042      	str	r2, [r0, #4]
    f784:	7203      	strb	r3, [r0, #8]
    f786:	2000      	movs	r0, #0
    f788:	4770      	bx	lr
    f78a:	2006      	movs	r0, #6
    f78c:	4770      	bx	lr
    f78e:	bf00      	nop
    f790:	02dc6c00 	.word	0x02dc6c00
    f794:	016e3600 	.word	0x016e3600

0000f798 <am_hal_ctimer_config>:
    f798:	b570      	push	{r4, r5, r6, lr}
    f79a:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    f79e:	2a00      	cmp	r2, #0
    f7a0:	b082      	sub	sp, #8
    f7a2:	bf18      	it	ne
    f7a4:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    f7a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    f7ac:	ea42 0403 	orr.w	r4, r2, r3
    f7b0:	460d      	mov	r5, r1
    f7b2:	4606      	mov	r6, r0
    f7b4:	f000 f95e 	bl	fa74 <am_hal_interrupt_master_disable>
    f7b8:	4b0d      	ldr	r3, [pc, #52]	; (f7f0 <am_hal_ctimer_config+0x58>)
    f7ba:	9001      	str	r0, [sp, #4]
    f7bc:	0172      	lsls	r2, r6, #5
    f7be:	50d4      	str	r4, [r2, r3]
    f7c0:	9801      	ldr	r0, [sp, #4]
    f7c2:	f000 f95b 	bl	fa7c <am_hal_interrupt_master_set>
    f7c6:	686b      	ldr	r3, [r5, #4]
    f7c8:	b90b      	cbnz	r3, f7ce <am_hal_ctimer_config+0x36>
    f7ca:	682a      	ldr	r2, [r5, #0]
    f7cc:	b142      	cbz	r2, f7e0 <am_hal_ctimer_config+0x48>
    f7ce:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f7d2:	2100      	movs	r1, #0
    f7d4:	4a07      	ldr	r2, [pc, #28]	; (f7f4 <am_hal_ctimer_config+0x5c>)
    f7d6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    f7da:	5473      	strb	r3, [r6, r1]
    f7dc:	b002      	add	sp, #8
    f7de:	bd70      	pop	{r4, r5, r6, pc}
    f7e0:	68ab      	ldr	r3, [r5, #8]
    f7e2:	2b00      	cmp	r3, #0
    f7e4:	d0fa      	beq.n	f7dc <am_hal_ctimer_config+0x44>
    f7e6:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f7ea:	2101      	movs	r1, #1
    f7ec:	e7f2      	b.n	f7d4 <am_hal_ctimer_config+0x3c>
    f7ee:	bf00      	nop
    f7f0:	4000800c 	.word	0x4000800c
    f7f4:	1000c034 	.word	0x1000c034

0000f7f8 <am_hal_ctimer_config_single>:
    f7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7fa:	b083      	sub	sp, #12
    f7fc:	460e      	mov	r6, r1
    f7fe:	4614      	mov	r4, r2
    f800:	0147      	lsls	r7, r0, #5
    f802:	4605      	mov	r5, r0
    f804:	f000 f936 	bl	fa74 <am_hal_interrupt_master_disable>
    f808:	4a19      	ldr	r2, [pc, #100]	; (f870 <am_hal_ctimer_config_single+0x78>)
    f80a:	9001      	str	r0, [sp, #4]
    f80c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    f810:	58bb      	ldr	r3, [r7, r2]
    f812:	d021      	beq.n	f858 <am_hal_ctimer_config_single+0x60>
    f814:	ea23 0306 	bic.w	r3, r3, r6
    f818:	1c71      	adds	r1, r6, #1
    f81a:	ea43 0304 	orr.w	r3, r3, r4
    f81e:	d00c      	beq.n	f83a <am_hal_ctimer_config_single+0x42>
    f820:	50bb      	str	r3, [r7, r2]
    f822:	9801      	ldr	r0, [sp, #4]
    f824:	f000 f92a 	bl	fa7c <am_hal_interrupt_master_set>
    f828:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f82c:	429e      	cmp	r6, r3
    f82e:	d01c      	beq.n	f86a <am_hal_ctimer_config_single+0x72>
    f830:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    f834:	d017      	beq.n	f866 <am_hal_ctimer_config_single+0x6e>
    f836:	b003      	add	sp, #12
    f838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f83a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f83e:	50bb      	str	r3, [r7, r2]
    f840:	9801      	ldr	r0, [sp, #4]
    f842:	f000 f91b 	bl	fa7c <am_hal_interrupt_master_set>
    f846:	2200      	movs	r2, #0
    f848:	4b0a      	ldr	r3, [pc, #40]	; (f874 <am_hal_ctimer_config_single+0x7c>)
    f84a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    f84e:	f3c4 0444 	ubfx	r4, r4, #1, #5
    f852:	54ac      	strb	r4, [r5, r2]
    f854:	b003      	add	sp, #12
    f856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f858:	0424      	lsls	r4, r4, #16
    f85a:	b29b      	uxth	r3, r3
    f85c:	4323      	orrs	r3, r4
    f85e:	50bb      	str	r3, [r7, r2]
    f860:	9801      	ldr	r0, [sp, #4]
    f862:	f000 f90b 	bl	fa7c <am_hal_interrupt_master_set>
    f866:	2201      	movs	r2, #1
    f868:	e7ee      	b.n	f848 <am_hal_ctimer_config_single+0x50>
    f86a:	2200      	movs	r2, #0
    f86c:	e7ec      	b.n	f848 <am_hal_ctimer_config_single+0x50>
    f86e:	bf00      	nop
    f870:	4000800c 	.word	0x4000800c
    f874:	1000c034 	.word	0x1000c034

0000f878 <am_hal_ctimer_start>:
    f878:	b570      	push	{r4, r5, r6, lr}
    f87a:	b082      	sub	sp, #8
    f87c:	460c      	mov	r4, r1
    f87e:	0146      	lsls	r6, r0, #5
    f880:	4605      	mov	r5, r0
    f882:	f000 f8f7 	bl	fa74 <am_hal_interrupt_master_disable>
    f886:	4a0f      	ldr	r2, [pc, #60]	; (f8c4 <am_hal_ctimer_start+0x4c>)
    f888:	9001      	str	r0, [sp, #4]
    f88a:	58b3      	ldr	r3, [r6, r2]
    f88c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f890:	ea23 0301 	bic.w	r3, r3, r1
    f894:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    f898:	430b      	orrs	r3, r1
    f89a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    f89e:	bf0c      	ite	eq
    f8a0:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    f8a4:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    f8a8:	50b3      	str	r3, [r6, r2]
    f8aa:	4b07      	ldr	r3, [pc, #28]	; (f8c8 <am_hal_ctimer_start+0x50>)
    f8ac:	9801      	ldr	r0, [sp, #4]
    f8ae:	bf0c      	ite	eq
    f8b0:	2101      	moveq	r1, #1
    f8b2:	2100      	movne	r1, #0
    f8b4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    f8b8:	545c      	strb	r4, [r3, r1]
    f8ba:	f000 f8df 	bl	fa7c <am_hal_interrupt_master_set>
    f8be:	b002      	add	sp, #8
    f8c0:	bd70      	pop	{r4, r5, r6, pc}
    f8c2:	bf00      	nop
    f8c4:	4000800c 	.word	0x4000800c
    f8c8:	1000c034 	.word	0x1000c034

0000f8cc <am_hal_ctimer_clear>:
    f8cc:	b570      	push	{r4, r5, r6, lr}
    f8ce:	b082      	sub	sp, #8
    f8d0:	0146      	lsls	r6, r0, #5
    f8d2:	460c      	mov	r4, r1
    f8d4:	f000 f8ce 	bl	fa74 <am_hal_interrupt_master_disable>
    f8d8:	4d05      	ldr	r5, [pc, #20]	; (f8f0 <am_hal_ctimer_clear+0x24>)
    f8da:	9001      	str	r0, [sp, #4]
    f8dc:	5973      	ldr	r3, [r6, r5]
    f8de:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f8e2:	4319      	orrs	r1, r3
    f8e4:	5171      	str	r1, [r6, r5]
    f8e6:	9801      	ldr	r0, [sp, #4]
    f8e8:	f000 f8c8 	bl	fa7c <am_hal_interrupt_master_set>
    f8ec:	b002      	add	sp, #8
    f8ee:	bd70      	pop	{r4, r5, r6, pc}
    f8f0:	4000800c 	.word	0x4000800c

0000f8f4 <am_hal_ctimer_period_set>:
    f8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8f8:	b082      	sub	sp, #8
    f8fa:	4689      	mov	r9, r1
    f8fc:	4698      	mov	r8, r3
    f8fe:	0147      	lsls	r7, r0, #5
    f900:	4614      	mov	r4, r2
    f902:	f000 f8b7 	bl	fa74 <am_hal_interrupt_master_disable>
    f906:	f8df a094 	ldr.w	sl, [pc, #148]	; f99c <am_hal_ctimer_period_set+0xa8>
    f90a:	9001      	str	r0, [sp, #4]
    f90c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f910:	4d20      	ldr	r5, [pc, #128]	; (f994 <am_hal_ctimer_period_set+0xa0>)
    f912:	4e21      	ldr	r6, [pc, #132]	; (f998 <am_hal_ctimer_period_set+0xa4>)
    f914:	f857 300a 	ldr.w	r3, [r7, sl]
    f918:	d01a      	beq.n	f950 <am_hal_ctimer_period_set+0x5c>
    f91a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f91e:	2b80      	cmp	r3, #128	; 0x80
    f920:	d01b      	beq.n	f95a <am_hal_ctimer_period_set+0x66>
    f922:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f926:	2000      	movs	r0, #0
    f928:	4591      	cmp	r9, r2
    f92a:	4603      	mov	r3, r0
    f92c:	d01e      	beq.n	f96c <am_hal_ctimer_period_set+0x78>
    f92e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f932:	d025      	beq.n	f980 <am_hal_ctimer_period_set+0x8c>
    f934:	0c1b      	lsrs	r3, r3, #16
    f936:	b2a2      	uxth	r2, r4
    f938:	041b      	lsls	r3, r3, #16
    f93a:	4310      	orrs	r0, r2
    f93c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    f940:	5178      	str	r0, [r7, r5]
    f942:	51bb      	str	r3, [r7, r6]
    f944:	9801      	ldr	r0, [sp, #4]
    f946:	f000 f899 	bl	fa7c <am_hal_interrupt_master_set>
    f94a:	b002      	add	sp, #8
    f94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f950:	0c1b      	lsrs	r3, r3, #16
    f952:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f956:	2b80      	cmp	r3, #128	; 0x80
    f958:	d111      	bne.n	f97e <am_hal_ctimer_period_set+0x8a>
    f95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f95e:	4591      	cmp	r9, r2
    f960:	ea4f 4004 	mov.w	r0, r4, lsl #16
    f964:	4623      	mov	r3, r4
    f966:	ebc8 0404 	rsb	r4, r8, r4
    f96a:	d1e0      	bne.n	f92e <am_hal_ctimer_period_set+0x3a>
    f96c:	b2a3      	uxth	r3, r4
    f96e:	4318      	orrs	r0, r3
    f970:	5178      	str	r0, [r7, r5]
    f972:	9801      	ldr	r0, [sp, #4]
    f974:	f000 f882 	bl	fa7c <am_hal_interrupt_master_set>
    f978:	b002      	add	sp, #8
    f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f97e:	2000      	movs	r0, #0
    f980:	b2a3      	uxth	r3, r4
    f982:	4318      	orrs	r0, r3
    f984:	51b8      	str	r0, [r7, r6]
    f986:	9801      	ldr	r0, [sp, #4]
    f988:	f000 f878 	bl	fa7c <am_hal_interrupt_master_set>
    f98c:	b002      	add	sp, #8
    f98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f992:	bf00      	nop
    f994:	40008004 	.word	0x40008004
    f998:	40008008 	.word	0x40008008
    f99c:	4000800c 	.word	0x4000800c

0000f9a0 <am_hal_ctimer_adc_trigger_enable>:
    f9a0:	b500      	push	{lr}
    f9a2:	b083      	sub	sp, #12
    f9a4:	f000 f866 	bl	fa74 <am_hal_interrupt_master_disable>
    f9a8:	4a05      	ldr	r2, [pc, #20]	; (f9c0 <am_hal_ctimer_adc_trigger_enable+0x20>)
    f9aa:	9001      	str	r0, [sp, #4]
    f9ac:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    f9ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    f9b2:	66d3      	str	r3, [r2, #108]	; 0x6c
    f9b4:	9801      	ldr	r0, [sp, #4]
    f9b6:	f000 f861 	bl	fa7c <am_hal_interrupt_master_set>
    f9ba:	b003      	add	sp, #12
    f9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c0:	40008000 	.word	0x40008000

0000f9c4 <am_hal_ctimer_int_enable>:
    f9c4:	b510      	push	{r4, lr}
    f9c6:	b082      	sub	sp, #8
    f9c8:	4604      	mov	r4, r0
    f9ca:	f000 f853 	bl	fa74 <am_hal_interrupt_master_disable>
    f9ce:	4b06      	ldr	r3, [pc, #24]	; (f9e8 <am_hal_ctimer_int_enable+0x24>)
    f9d0:	9001      	str	r0, [sp, #4]
    f9d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f9d6:	4314      	orrs	r4, r2
    f9d8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    f9dc:	9801      	ldr	r0, [sp, #4]
    f9de:	f000 f84d 	bl	fa7c <am_hal_interrupt_master_set>
    f9e2:	b002      	add	sp, #8
    f9e4:	bd10      	pop	{r4, pc}
    f9e6:	bf00      	nop
    f9e8:	40008000 	.word	0x40008000

0000f9ec <am_hal_ctimer_int_clear>:
    f9ec:	b510      	push	{r4, lr}
    f9ee:	b082      	sub	sp, #8
    f9f0:	4604      	mov	r4, r0
    f9f2:	f000 f83f 	bl	fa74 <am_hal_interrupt_master_disable>
    f9f6:	4b04      	ldr	r3, [pc, #16]	; (fa08 <am_hal_ctimer_int_clear+0x1c>)
    f9f8:	9001      	str	r0, [sp, #4]
    f9fa:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    f9fe:	9801      	ldr	r0, [sp, #4]
    fa00:	f000 f83c 	bl	fa7c <am_hal_interrupt_master_set>
    fa04:	b002      	add	sp, #8
    fa06:	bd10      	pop	{r4, pc}
    fa08:	40008000 	.word	0x40008000

0000fa0c <am_hal_flash_delay>:
    fa0c:	4b00      	ldr	r3, [pc, #0]	; (fa10 <am_hal_flash_delay+0x4>)
    fa0e:	4718      	bx	r3
    fa10:	0800009d 	.word	0x0800009d

0000fa14 <am_hal_flash_delay_status_check>:
    fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa18:	f89d 4018 	ldrb.w	r4, [sp, #24]
    fa1c:	460d      	mov	r5, r1
    fa1e:	4616      	mov	r6, r2
    fa20:	461f      	mov	r7, r3
    fa22:	b17c      	cbz	r4, fa44 <am_hal_flash_delay_status_check+0x30>
    fa24:	4604      	mov	r4, r0
    fa26:	f8df 8040 	ldr.w	r8, [pc, #64]	; fa68 <am_hal_flash_delay_status_check+0x54>
    fa2a:	e002      	b.n	fa32 <am_hal_flash_delay_status_check+0x1e>
    fa2c:	b1c4      	cbz	r4, fa60 <am_hal_flash_delay_status_check+0x4c>
    fa2e:	47c0      	blx	r8
    fa30:	3c01      	subs	r4, #1
    fa32:	682b      	ldr	r3, [r5, #0]
    fa34:	4033      	ands	r3, r6
    fa36:	429f      	cmp	r7, r3
    fa38:	f04f 0001 	mov.w	r0, #1
    fa3c:	d1f6      	bne.n	fa2c <am_hal_flash_delay_status_check+0x18>
    fa3e:	2000      	movs	r0, #0
    fa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa44:	f8df 8020 	ldr.w	r8, [pc, #32]	; fa68 <am_hal_flash_delay_status_check+0x54>
    fa48:	4604      	mov	r4, r0
    fa4a:	e002      	b.n	fa52 <am_hal_flash_delay_status_check+0x3e>
    fa4c:	b144      	cbz	r4, fa60 <am_hal_flash_delay_status_check+0x4c>
    fa4e:	47c0      	blx	r8
    fa50:	3c01      	subs	r4, #1
    fa52:	682b      	ldr	r3, [r5, #0]
    fa54:	4033      	ands	r3, r6
    fa56:	429f      	cmp	r7, r3
    fa58:	f04f 0001 	mov.w	r0, #1
    fa5c:	d0f6      	beq.n	fa4c <am_hal_flash_delay_status_check+0x38>
    fa5e:	e7ee      	b.n	fa3e <am_hal_flash_delay_status_check+0x2a>
    fa60:	2004      	movs	r0, #4
    fa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa66:	bf00      	nop
    fa68:	0800009d 	.word	0x0800009d

0000fa6c <am_hal_interrupt_master_enable>:
    fa6c:	f3ef 8010 	mrs	r0, PRIMASK
    fa70:	b662      	cpsie	i
    fa72:	4770      	bx	lr

0000fa74 <am_hal_interrupt_master_disable>:
    fa74:	f3ef 8010 	mrs	r0, PRIMASK
    fa78:	b672      	cpsid	i
    fa7a:	4770      	bx	lr

0000fa7c <am_hal_interrupt_master_set>:
    fa7c:	f380 8810 	msr	PRIMASK, r0
    fa80:	4770      	bx	lr
    fa82:	bf00      	nop

0000fa84 <am_hal_itm_disable>:
    fa84:	b510      	push	{r4, lr}
    fa86:	4b25      	ldr	r3, [pc, #148]	; (fb1c <am_hal_itm_disable+0x98>)
    fa88:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    fa8c:	b9b3      	cbnz	r3, fabc <am_hal_itm_disable+0x38>
    fa8e:	4b24      	ldr	r3, [pc, #144]	; (fb20 <am_hal_itm_disable+0x9c>)
    fa90:	68da      	ldr	r2, [r3, #12]
    fa92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    fa96:	60da      	str	r2, [r3, #12]
    fa98:	68da      	ldr	r2, [r3, #12]
    fa9a:	01d2      	lsls	r2, r2, #7
    fa9c:	d5fc      	bpl.n	fa98 <am_hal_itm_disable+0x14>
    fa9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    faa2:	4920      	ldr	r1, [pc, #128]	; (fb24 <am_hal_itm_disable+0xa0>)
    faa4:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    faa8:	4a1f      	ldr	r2, [pc, #124]	; (fb28 <am_hal_itm_disable+0xa4>)
    faaa:	200f      	movs	r0, #15
    faac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fab0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    fab4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    fab8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    fabc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    fac0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    fac4:	021b      	lsls	r3, r3, #8
    fac6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    faca:	d4f9      	bmi.n	fac0 <am_hal_itm_disable+0x3c>
    facc:	f240 20f7 	movw	r0, #759	; 0x2f7
    fad0:	f7ff ff9c 	bl	fa0c <am_hal_flash_delay>
    fad4:	4b13      	ldr	r3, [pc, #76]	; (fb24 <am_hal_itm_disable+0xa0>)
    fad6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    fada:	4621      	mov	r1, r4
    fadc:	2064      	movs	r0, #100	; 0x64
    fade:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    fae2:	f023 0301 	bic.w	r3, r3, #1
    fae6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    faea:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    faee:	4b0f      	ldr	r3, [pc, #60]	; (fb2c <am_hal_itm_disable+0xa8>)
    faf0:	4013      	ands	r3, r2
    faf2:	2b00      	cmp	r3, #0
    faf4:	d1f9      	bne.n	faea <am_hal_itm_disable+0x66>
    faf6:	3801      	subs	r0, #1
    faf8:	d1f1      	bne.n	fade <am_hal_itm_disable+0x5a>
    fafa:	4a09      	ldr	r2, [pc, #36]	; (fb20 <am_hal_itm_disable+0x9c>)
    fafc:	68d3      	ldr	r3, [r2, #12]
    fafe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    fb02:	60d3      	str	r3, [r2, #12]
    fb04:	68d3      	ldr	r3, [r2, #12]
    fb06:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    fb0a:	d1fb      	bne.n	fb04 <am_hal_itm_disable+0x80>
    fb0c:	4a03      	ldr	r2, [pc, #12]	; (fb1c <am_hal_itm_disable+0x98>)
    fb0e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    fb12:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    fb16:	2b00      	cmp	r3, #0
    fb18:	d1fb      	bne.n	fb12 <am_hal_itm_disable+0x8e>
    fb1a:	bd10      	pop	{r4, pc}
    fb1c:	40020000 	.word	0x40020000
    fb20:	e000edf0 	.word	0xe000edf0
    fb24:	c5acce55 	.word	0xc5acce55
    fb28:	00150511 	.word	0x00150511
    fb2c:	00800001 	.word	0x00800001

0000fb30 <am_hal_mcuctrl_info_get>:
    fb30:	b4f0      	push	{r4, r5, r6, r7}
    fb32:	b121      	cbz	r1, fb3e <am_hal_mcuctrl_info_get+0xe>
    fb34:	2801      	cmp	r0, #1
    fb36:	d038      	beq.n	fbaa <am_hal_mcuctrl_info_get+0x7a>
    fb38:	d320      	bcc.n	fb7c <am_hal_mcuctrl_info_get+0x4c>
    fb3a:	2802      	cmp	r0, #2
    fb3c:	d002      	beq.n	fb44 <am_hal_mcuctrl_info_get+0x14>
    fb3e:	2006      	movs	r0, #6
    fb40:	bcf0      	pop	{r4, r5, r6, r7}
    fb42:	4770      	bx	lr
    fb44:	4a41      	ldr	r2, [pc, #260]	; (fc4c <am_hal_mcuctrl_info_get+0x11c>)
    fb46:	684d      	ldr	r5, [r1, #4]
    fb48:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    fb4c:	694c      	ldr	r4, [r1, #20]
    fb4e:	f003 0601 	and.w	r6, r3, #1
    fb52:	f3c3 0040 	ubfx	r0, r3, #1, #1
    fb56:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fb5a:	700e      	strb	r6, [r1, #0]
    fb5c:	7208      	strb	r0, [r1, #8]
    fb5e:	740b      	strb	r3, [r1, #16]
    fb60:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    fb64:	60cb      	str	r3, [r1, #12]
    fb66:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    fb6a:	4328      	orrs	r0, r5
    fb6c:	6048      	str	r0, [r1, #4]
    fb6e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    fb72:	4323      	orrs	r3, r4
    fb74:	2000      	movs	r0, #0
    fb76:	614b      	str	r3, [r1, #20]
    fb78:	bcf0      	pop	{r4, r5, r6, r7}
    fb7a:	4770      	bx	lr
    fb7c:	4a33      	ldr	r2, [pc, #204]	; (fc4c <am_hal_mcuctrl_info_get+0x11c>)
    fb7e:	6993      	ldr	r3, [r2, #24]
    fb80:	f3c3 1080 	ubfx	r0, r3, #6, #1
    fb84:	f3c3 0380 	ubfx	r3, r3, #2, #1
    fb88:	7008      	strb	r0, [r1, #0]
    fb8a:	704b      	strb	r3, [r1, #1]
    fb8c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    fb90:	f3c3 6381 	ubfx	r3, r3, #26, #2
    fb94:	710b      	strb	r3, [r1, #4]
    fb96:	6953      	ldr	r3, [r2, #20]
    fb98:	f3c3 0240 	ubfx	r2, r3, #1, #1
    fb9c:	f003 0301 	and.w	r3, r3, #1
    fba0:	2000      	movs	r0, #0
    fba2:	708a      	strb	r2, [r1, #2]
    fba4:	70cb      	strb	r3, [r1, #3]
    fba6:	bcf0      	pop	{r4, r5, r6, r7}
    fba8:	4770      	bx	lr
    fbaa:	4b28      	ldr	r3, [pc, #160]	; (fc4c <am_hal_mcuctrl_info_get+0x11c>)
    fbac:	4c28      	ldr	r4, [pc, #160]	; (fc50 <am_hal_mcuctrl_info_get+0x120>)
    fbae:	681a      	ldr	r2, [r3, #0]
    fbb0:	600a      	str	r2, [r1, #0]
    fbb2:	6858      	ldr	r0, [r3, #4]
    fbb4:	6048      	str	r0, [r1, #4]
    fbb6:	6898      	ldr	r0, [r3, #8]
    fbb8:	6088      	str	r0, [r1, #8]
    fbba:	68d8      	ldr	r0, [r3, #12]
    fbbc:	60c8      	str	r0, [r1, #12]
    fbbe:	691d      	ldr	r5, [r3, #16]
    fbc0:	4824      	ldr	r0, [pc, #144]	; (fc54 <am_hal_mcuctrl_info_get+0x124>)
    fbc2:	610d      	str	r5, [r1, #16]
    fbc4:	f3c2 5703 	ubfx	r7, r2, #20, #4
    fbc8:	f3c2 4603 	ubfx	r6, r2, #16, #4
    fbcc:	695d      	ldr	r5, [r3, #20]
    fbce:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    fbd2:	4b21      	ldr	r3, [pc, #132]	; (fc58 <am_hal_mcuctrl_info_get+0x128>)
    fbd4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    fbd8:	6208      	str	r0, [r1, #32]
    fbda:	f002 0201 	and.w	r2, r2, #1
    fbde:	614d      	str	r5, [r1, #20]
    fbe0:	61cc      	str	r4, [r1, #28]
    fbe2:	618a      	str	r2, [r1, #24]
    fbe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    fbe8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    fbec:	b2d0      	uxtb	r0, r2
    fbee:	f004 020f 	and.w	r2, r4, #15
    fbf2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    fbf6:	624a      	str	r2, [r1, #36]	; 0x24
    fbf8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    fbfc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    fc00:	f3c2 1003 	ubfx	r0, r2, #4, #4
    fc04:	f004 020f 	and.w	r2, r4, #15
    fc08:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    fc0c:	628a      	str	r2, [r1, #40]	; 0x28
    fc0e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    fc12:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    fc16:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    fc1a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    fc1e:	4302      	orrs	r2, r0
    fc20:	62ca      	str	r2, [r1, #44]	; 0x2c
    fc22:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    fc26:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    fc2a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    fc2e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    fc32:	b2c0      	uxtb	r0, r0
    fc34:	0400      	lsls	r0, r0, #16
    fc36:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    fc3a:	b2d2      	uxtb	r2, r2
    fc3c:	431a      	orrs	r2, r3
    fc3e:	b2e3      	uxtb	r3, r4
    fc40:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fc44:	630b      	str	r3, [r1, #48]	; 0x30
    fc46:	2000      	movs	r0, #0
    fc48:	bcf0      	pop	{r4, r5, r6, r7}
    fc4a:	4770      	bx	lr
    fc4c:	40020000 	.word	0x40020000
    fc50:	00010e14 	.word	0x00010e14
    fc54:	00010e54 	.word	0x00010e54
    fc58:	f0000f00 	.word	0xf0000f00

0000fc5c <am_hal_pwrctrl_periph_enable>:
    fc5c:	b570      	push	{r4, r5, r6, lr}
    fc5e:	b082      	sub	sp, #8
    fc60:	4604      	mov	r4, r0
    fc62:	f7ff ff07 	bl	fa74 <am_hal_interrupt_master_disable>
    fc66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fc6a:	4d0f      	ldr	r5, [pc, #60]	; (fca8 <am_hal_pwrctrl_periph_enable+0x4c>)
    fc6c:	4e0f      	ldr	r6, [pc, #60]	; (fcac <am_hal_pwrctrl_periph_enable+0x50>)
    fc6e:	9001      	str	r0, [sp, #4]
    fc70:	00a4      	lsls	r4, r4, #2
    fc72:	68aa      	ldr	r2, [r5, #8]
    fc74:	5933      	ldr	r3, [r6, r4]
    fc76:	4313      	orrs	r3, r2
    fc78:	60ab      	str	r3, [r5, #8]
    fc7a:	9801      	ldr	r0, [sp, #4]
    fc7c:	4434      	add	r4, r6
    fc7e:	f7ff fefd 	bl	fa7c <am_hal_interrupt_master_set>
    fc82:	2077      	movs	r0, #119	; 0x77
    fc84:	f7ff fec2 	bl	fa0c <am_hal_flash_delay>
    fc88:	69ab      	ldr	r3, [r5, #24]
    fc8a:	6864      	ldr	r4, [r4, #4]
    fc8c:	4223      	tst	r3, r4
    fc8e:	d103      	bne.n	fc98 <am_hal_pwrctrl_periph_enable+0x3c>
    fc90:	2077      	movs	r0, #119	; 0x77
    fc92:	f7ff febb 	bl	fa0c <am_hal_flash_delay>
    fc96:	69ab      	ldr	r3, [r5, #24]
    fc98:	4b03      	ldr	r3, [pc, #12]	; (fca8 <am_hal_pwrctrl_periph_enable+0x4c>)
    fc9a:	699b      	ldr	r3, [r3, #24]
    fc9c:	4223      	tst	r3, r4
    fc9e:	bf0c      	ite	eq
    fca0:	2001      	moveq	r0, #1
    fca2:	2000      	movne	r0, #0
    fca4:	b002      	add	sp, #8
    fca6:	bd70      	pop	{r4, r5, r6, pc}
    fca8:	40021000 	.word	0x40021000
    fcac:	00010e94 	.word	0x00010e94

0000fcb0 <am_hal_pwrctrl_periph_disable>:
    fcb0:	b570      	push	{r4, r5, r6, lr}
    fcb2:	b082      	sub	sp, #8
    fcb4:	4604      	mov	r4, r0
    fcb6:	f7ff fedd 	bl	fa74 <am_hal_interrupt_master_disable>
    fcba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fcbe:	4d10      	ldr	r5, [pc, #64]	; (fd00 <am_hal_pwrctrl_periph_disable+0x50>)
    fcc0:	4e10      	ldr	r6, [pc, #64]	; (fd04 <am_hal_pwrctrl_periph_disable+0x54>)
    fcc2:	9001      	str	r0, [sp, #4]
    fcc4:	00a4      	lsls	r4, r4, #2
    fcc6:	68ab      	ldr	r3, [r5, #8]
    fcc8:	5932      	ldr	r2, [r6, r4]
    fcca:	ea23 0302 	bic.w	r3, r3, r2
    fcce:	60ab      	str	r3, [r5, #8]
    fcd0:	9801      	ldr	r0, [sp, #4]
    fcd2:	4434      	add	r4, r6
    fcd4:	f7ff fed2 	bl	fa7c <am_hal_interrupt_master_set>
    fcd8:	2077      	movs	r0, #119	; 0x77
    fcda:	f7ff fe97 	bl	fa0c <am_hal_flash_delay>
    fcde:	69ab      	ldr	r3, [r5, #24]
    fce0:	6864      	ldr	r4, [r4, #4]
    fce2:	4223      	tst	r3, r4
    fce4:	d003      	beq.n	fcee <am_hal_pwrctrl_periph_disable+0x3e>
    fce6:	2077      	movs	r0, #119	; 0x77
    fce8:	f7ff fe90 	bl	fa0c <am_hal_flash_delay>
    fcec:	69ab      	ldr	r3, [r5, #24]
    fcee:	4b04      	ldr	r3, [pc, #16]	; (fd00 <am_hal_pwrctrl_periph_disable+0x50>)
    fcf0:	699b      	ldr	r3, [r3, #24]
    fcf2:	4223      	tst	r3, r4
    fcf4:	bf14      	ite	ne
    fcf6:	2001      	movne	r0, #1
    fcf8:	2000      	moveq	r0, #0
    fcfa:	b002      	add	sp, #8
    fcfc:	bd70      	pop	{r4, r5, r6, pc}
    fcfe:	bf00      	nop
    fd00:	40021000 	.word	0x40021000
    fd04:	00010e94 	.word	0x00010e94

0000fd08 <am_hal_pwrctrl_low_power_init>:
    fd08:	b530      	push	{r4, r5, lr}
    fd0a:	4b1f      	ldr	r3, [pc, #124]	; (fd88 <am_hal_pwrctrl_low_power_init+0x80>)
    fd0c:	681a      	ldr	r2, [r3, #0]
    fd0e:	b083      	sub	sp, #12
    fd10:	b912      	cbnz	r2, fd18 <am_hal_pwrctrl_low_power_init+0x10>
    fd12:	4a1e      	ldr	r2, [pc, #120]	; (fd8c <am_hal_pwrctrl_low_power_init+0x84>)
    fd14:	6812      	ldr	r2, [r2, #0]
    fd16:	601a      	str	r2, [r3, #0]
    fd18:	4c1d      	ldr	r4, [pc, #116]	; (fd90 <am_hal_pwrctrl_low_power_init+0x88>)
    fd1a:	69a3      	ldr	r3, [r4, #24]
    fd1c:	05db      	lsls	r3, r3, #23
    fd1e:	d502      	bpl.n	fd26 <am_hal_pwrctrl_low_power_init+0x1e>
    fd20:	2000      	movs	r0, #0
    fd22:	b003      	add	sp, #12
    fd24:	bd30      	pop	{r4, r5, pc}
    fd26:	4d1b      	ldr	r5, [pc, #108]	; (fd94 <am_hal_pwrctrl_low_power_init+0x8c>)
    fd28:	491b      	ldr	r1, [pc, #108]	; (fd98 <am_hal_pwrctrl_low_power_init+0x90>)
    fd2a:	7e2a      	ldrb	r2, [r5, #24]
    fd2c:	2001      	movs	r0, #1
    fd2e:	4302      	orrs	r2, r0
    fd30:	2307      	movs	r3, #7
    fd32:	762a      	strb	r2, [r5, #24]
    fd34:	9000      	str	r0, [sp, #0]
    fd36:	461a      	mov	r2, r3
    fd38:	f242 7010 	movw	r0, #10000	; 0x2710
    fd3c:	f7ff fe6a 	bl	fa14 <am_hal_flash_delay_status_check>
    fd40:	b110      	cbz	r0, fd48 <am_hal_pwrctrl_low_power_init+0x40>
    fd42:	2004      	movs	r0, #4
    fd44:	b003      	add	sp, #12
    fd46:	bd30      	pop	{r4, r5, pc}
    fd48:	6823      	ldr	r3, [r4, #0]
    fd4a:	f043 0301 	orr.w	r3, r3, #1
    fd4e:	6023      	str	r3, [r4, #0]
    fd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd56:	6263      	str	r3, [r4, #36]	; 0x24
    fd58:	68eb      	ldr	r3, [r5, #12]
    fd5a:	b2db      	uxtb	r3, r3
    fd5c:	2b11      	cmp	r3, #17
    fd5e:	d1df      	bne.n	fd20 <am_hal_pwrctrl_low_power_init+0x18>
    fd60:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    fd64:	f360 5356 	bfi	r3, r0, #21, #2
    fd68:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    fd6c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fd70:	220f      	movs	r2, #15
    fd72:	f362 138b 	bfi	r3, r2, #6, #6
    fd76:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fd7a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fd7e:	f362 0305 	bfi	r3, r2, #0, #6
    fd82:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fd86:	e7cc      	b.n	fd22 <am_hal_pwrctrl_low_power_init+0x1a>
    fd88:	1000c178 	.word	0x1000c178
    fd8c:	4ffff000 	.word	0x4ffff000
    fd90:	40021000 	.word	0x40021000
    fd94:	40020000 	.word	0x40020000
    fd98:	40020018 	.word	0x40020018

0000fd9c <am_hal_rtc_osc_select>:
    fd9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fda0:	2801      	cmp	r0, #1
    fda2:	68d3      	ldr	r3, [r2, #12]
    fda4:	bf0c      	ite	eq
    fda6:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    fdaa:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    fdae:	60d3      	str	r3, [r2, #12]
    fdb0:	4770      	bx	lr
    fdb2:	bf00      	nop

0000fdb4 <am_hal_rtc_osc_disable>:
    fdb4:	4a03      	ldr	r2, [pc, #12]	; (fdc4 <am_hal_rtc_osc_disable+0x10>)
    fdb6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fdba:	f043 0310 	orr.w	r3, r3, #16
    fdbe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    fdc2:	4770      	bx	lr
    fdc4:	40004200 	.word	0x40004200

0000fdc8 <am_hal_uart_initialize>:
    fdc8:	2801      	cmp	r0, #1
    fdca:	d901      	bls.n	fdd0 <am_hal_uart_initialize+0x8>
    fdcc:	2005      	movs	r0, #5
    fdce:	4770      	bx	lr
    fdd0:	b169      	cbz	r1, fdee <am_hal_uart_initialize+0x26>
    fdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdd4:	2264      	movs	r2, #100	; 0x64
    fdd6:	4e0e      	ldr	r6, [pc, #56]	; (fe10 <am_hal_uart_initialize+0x48>)
    fdd8:	fb02 f200 	mul.w	r2, r2, r0
    fddc:	18b4      	adds	r4, r6, r2
    fdde:	4603      	mov	r3, r0
    fde0:	78e0      	ldrb	r0, [r4, #3]
    fde2:	f3c0 0700 	ubfx	r7, r0, #0, #1
    fde6:	b2fd      	uxtb	r5, r7
    fde8:	b11d      	cbz	r5, fdf2 <am_hal_uart_initialize+0x2a>
    fdea:	2007      	movs	r0, #7
    fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdee:	2006      	movs	r0, #6
    fdf0:	4770      	bx	lr
    fdf2:	f040 0001 	orr.w	r0, r0, #1
    fdf6:	70e0      	strb	r0, [r4, #3]
    fdf8:	58b0      	ldr	r0, [r6, r2]
    fdfa:	f8df e018 	ldr.w	lr, [pc, #24]	; fe14 <am_hal_uart_initialize+0x4c>
    fdfe:	f36e 0017 	bfi	r0, lr, #0, #24
    fe02:	50b0      	str	r0, [r6, r2]
    fe04:	6263      	str	r3, [r4, #36]	; 0x24
    fe06:	7127      	strb	r7, [r4, #4]
    fe08:	6625      	str	r5, [r4, #96]	; 0x60
    fe0a:	4628      	mov	r0, r5
    fe0c:	600c      	str	r4, [r1, #0]
    fe0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe10:	1002c2a0 	.word	0x1002c2a0
    fe14:	00ea9e06 	.word	0x00ea9e06

0000fe18 <am_hal_uart_power_control>:
    fe18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe1c:	6804      	ldr	r4, [r0, #0]
    fe1e:	4b36      	ldr	r3, [pc, #216]	; (fef8 <am_hal_uart_power_control+0xe0>)
    fe20:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    fe24:	429c      	cmp	r4, r3
    fe26:	b083      	sub	sp, #12
    fe28:	d003      	beq.n	fe32 <am_hal_uart_power_control+0x1a>
    fe2a:	2002      	movs	r0, #2
    fe2c:	b003      	add	sp, #12
    fe2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fe32:	6a47      	ldr	r7, [r0, #36]	; 0x24
    fe34:	4605      	mov	r5, r0
    fe36:	f107 0008 	add.w	r0, r7, #8
    fe3a:	4691      	mov	r9, r2
    fe3c:	460e      	mov	r6, r1
    fe3e:	fa5f f880 	uxtb.w	r8, r0
    fe42:	b181      	cbz	r1, fe66 <am_hal_uart_power_control+0x4e>
    fe44:	2902      	cmp	r1, #2
    fe46:	d80c      	bhi.n	fe62 <am_hal_uart_power_control+0x4a>
    fe48:	b992      	cbnz	r2, fe70 <am_hal_uart_power_control+0x58>
    fe4a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fe4e:	371c      	adds	r7, #28
    fe50:	033f      	lsls	r7, r7, #12
    fe52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe56:	647b      	str	r3, [r7, #68]	; 0x44
    fe58:	4640      	mov	r0, r8
    fe5a:	f7ff ff29 	bl	fcb0 <am_hal_pwrctrl_periph_disable>
    fe5e:	2000      	movs	r0, #0
    fe60:	e7e4      	b.n	fe2c <am_hal_uart_power_control+0x14>
    fe62:	2006      	movs	r0, #6
    fe64:	e7e2      	b.n	fe2c <am_hal_uart_power_control+0x14>
    fe66:	b322      	cbz	r2, feb2 <am_hal_uart_power_control+0x9a>
    fe68:	792b      	ldrb	r3, [r5, #4]
    fe6a:	bb3b      	cbnz	r3, febc <am_hal_uart_power_control+0xa4>
    fe6c:	2007      	movs	r0, #7
    fe6e:	e7dd      	b.n	fe2c <am_hal_uart_power_control+0x14>
    fe70:	f7ff fe00 	bl	fa74 <am_hal_interrupt_master_disable>
    fe74:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fe78:	331c      	adds	r3, #28
    fe7a:	031b      	lsls	r3, r3, #12
    fe7c:	9001      	str	r0, [sp, #4]
    fe7e:	6a1a      	ldr	r2, [r3, #32]
    fe80:	60aa      	str	r2, [r5, #8]
    fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fe84:	60ea      	str	r2, [r5, #12]
    fe86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fe88:	612a      	str	r2, [r5, #16]
    fe8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fe8c:	616a      	str	r2, [r5, #20]
    fe8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fe90:	61aa      	str	r2, [r5, #24]
    fe92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    fe94:	61ea      	str	r2, [r5, #28]
    fe96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fe98:	622b      	str	r3, [r5, #32]
    fe9a:	2301      	movs	r3, #1
    fe9c:	712b      	strb	r3, [r5, #4]
    fe9e:	9801      	ldr	r0, [sp, #4]
    fea0:	f7ff fdec 	bl	fa7c <am_hal_interrupt_master_set>
    fea4:	682b      	ldr	r3, [r5, #0]
    fea6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    feaa:	42a3      	cmp	r3, r4
    feac:	d1d4      	bne.n	fe58 <am_hal_uart_power_control+0x40>
    feae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    feb0:	e7cb      	b.n	fe4a <am_hal_uart_power_control+0x32>
    feb2:	4640      	mov	r0, r8
    feb4:	f7ff fed2 	bl	fc5c <am_hal_pwrctrl_periph_enable>
    feb8:	4648      	mov	r0, r9
    feba:	e7b7      	b.n	fe2c <am_hal_uart_power_control+0x14>
    febc:	4640      	mov	r0, r8
    febe:	f7ff fecd 	bl	fc5c <am_hal_pwrctrl_periph_enable>
    fec2:	f7ff fdd7 	bl	fa74 <am_hal_interrupt_master_disable>
    fec6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    feca:	331c      	adds	r3, #28
    fecc:	031b      	lsls	r3, r3, #12
    fece:	68aa      	ldr	r2, [r5, #8]
    fed0:	9000      	str	r0, [sp, #0]
    fed2:	621a      	str	r2, [r3, #32]
    fed4:	68ea      	ldr	r2, [r5, #12]
    fed6:	625a      	str	r2, [r3, #36]	; 0x24
    fed8:	692a      	ldr	r2, [r5, #16]
    feda:	629a      	str	r2, [r3, #40]	; 0x28
    fedc:	696a      	ldr	r2, [r5, #20]
    fede:	62da      	str	r2, [r3, #44]	; 0x2c
    fee0:	69aa      	ldr	r2, [r5, #24]
    fee2:	631a      	str	r2, [r3, #48]	; 0x30
    fee4:	69ea      	ldr	r2, [r5, #28]
    fee6:	635a      	str	r2, [r3, #52]	; 0x34
    fee8:	6a2a      	ldr	r2, [r5, #32]
    feea:	639a      	str	r2, [r3, #56]	; 0x38
    feec:	9800      	ldr	r0, [sp, #0]
    feee:	712e      	strb	r6, [r5, #4]
    fef0:	f7ff fdc4 	bl	fa7c <am_hal_interrupt_master_set>
    fef4:	4630      	mov	r0, r6
    fef6:	e799      	b.n	fe2c <am_hal_uart_power_control+0x14>
    fef8:	01ea9e06 	.word	0x01ea9e06

0000fefc <am_hal_uart_configure>:
    fefc:	6803      	ldr	r3, [r0, #0]
    fefe:	4a7a      	ldr	r2, [pc, #488]	; (100e8 <am_hal_uart_configure+0x1ec>)
    ff00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ff04:	4293      	cmp	r3, r2
    ff06:	d001      	beq.n	ff0c <am_hal_uart_configure+0x10>
    ff08:	2002      	movs	r0, #2
    ff0a:	4770      	bx	lr
    ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff10:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ff12:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ff16:	351c      	adds	r5, #28
    ff18:	032d      	lsls	r5, r5, #12
    ff1a:	2700      	movs	r7, #0
    ff1c:	b084      	sub	sp, #16
    ff1e:	632f      	str	r7, [r5, #48]	; 0x30
    ff20:	460e      	mov	r6, r1
    ff22:	4604      	mov	r4, r0
    ff24:	f7ff fda6 	bl	fa74 <am_hal_interrupt_master_disable>
    ff28:	9001      	str	r0, [sp, #4]
    ff2a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff2c:	f043 0308 	orr.w	r3, r3, #8
    ff30:	862b      	strh	r3, [r5, #48]	; 0x30
    ff32:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff34:	2201      	movs	r2, #1
    ff36:	f362 1306 	bfi	r3, r2, #4, #3
    ff3a:	862b      	strh	r3, [r5, #48]	; 0x30
    ff3c:	9801      	ldr	r0, [sp, #4]
    ff3e:	f7ff fd9d 	bl	fa7c <am_hal_interrupt_master_set>
    ff42:	f7ff fd97 	bl	fa74 <am_hal_interrupt_master_disable>
    ff46:	9002      	str	r0, [sp, #8]
    ff48:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff4a:	f367 0300 	bfi	r3, r7, #0, #1
    ff4e:	862b      	strh	r3, [r5, #48]	; 0x30
    ff50:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff52:	f367 2349 	bfi	r3, r7, #9, #1
    ff56:	862b      	strh	r3, [r5, #48]	; 0x30
    ff58:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff5a:	f367 2308 	bfi	r3, r7, #8, #1
    ff5e:	862b      	strh	r3, [r5, #48]	; 0x30
    ff60:	9802      	ldr	r0, [sp, #8]
    ff62:	f7ff fd8b 	bl	fa7c <am_hal_interrupt_master_set>
    ff66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    ff68:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ff6c:	3b01      	subs	r3, #1
    ff6e:	2b03      	cmp	r3, #3
    ff70:	d854      	bhi.n	1001c <am_hal_uart_configure+0x120>
    ff72:	e8df f003 	tbb	[pc, r3]
    ff76:	020e      	.short	0x020e
    ff78:	1114      	.short	0x1114
    ff7a:	495c      	ldr	r1, [pc, #368]	; (100ec <am_hal_uart_configure+0x1f0>)
    ff7c:	485c      	ldr	r0, [pc, #368]	; (100f0 <am_hal_uart_configure+0x1f4>)
    ff7e:	6832      	ldr	r2, [r6, #0]
    ff80:	0112      	lsls	r2, r2, #4
    ff82:	fbb0 f3f2 	udiv	r3, r0, r2
    ff86:	b96b      	cbnz	r3, ffa4 <am_hal_uart_configure+0xa8>
    ff88:	485a      	ldr	r0, [pc, #360]	; (100f4 <am_hal_uart_configure+0x1f8>)
    ff8a:	6623      	str	r3, [r4, #96]	; 0x60
    ff8c:	b004      	add	sp, #16
    ff8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff92:	4959      	ldr	r1, [pc, #356]	; (100f8 <am_hal_uart_configure+0x1fc>)
    ff94:	4859      	ldr	r0, [pc, #356]	; (100fc <am_hal_uart_configure+0x200>)
    ff96:	e7f2      	b.n	ff7e <am_hal_uart_configure+0x82>
    ff98:	4959      	ldr	r1, [pc, #356]	; (10100 <am_hal_uart_configure+0x204>)
    ff9a:	485a      	ldr	r0, [pc, #360]	; (10104 <am_hal_uart_configure+0x208>)
    ff9c:	e7ef      	b.n	ff7e <am_hal_uart_configure+0x82>
    ff9e:	495a      	ldr	r1, [pc, #360]	; (10108 <am_hal_uart_configure+0x20c>)
    ffa0:	485a      	ldr	r0, [pc, #360]	; (1010c <am_hal_uart_configure+0x210>)
    ffa2:	e7ec      	b.n	ff7e <am_hal_uart_configure+0x82>
    ffa4:	fbb1 f2f2 	udiv	r2, r1, r2
    ffa8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    ffac:	626b      	str	r3, [r5, #36]	; 0x24
    ffae:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    ffb2:	626b      	str	r3, [r5, #36]	; 0x24
    ffb4:	fbb0 f0f1 	udiv	r0, r0, r1
    ffb8:	62aa      	str	r2, [r5, #40]	; 0x28
    ffba:	6620      	str	r0, [r4, #96]	; 0x60
    ffbc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ffbe:	f36f 338e 	bfc	r3, #14, #1
    ffc2:	862b      	strh	r3, [r5, #48]	; 0x30
    ffc4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ffc6:	f36f 33cf 	bfc	r3, #15, #1
    ffca:	862b      	strh	r3, [r5, #48]	; 0x30
    ffcc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    ffce:	6933      	ldr	r3, [r6, #16]
    ffd0:	4313      	orrs	r3, r2
    ffd2:	632b      	str	r3, [r5, #48]	; 0x30
    ffd4:	6973      	ldr	r3, [r6, #20]
    ffd6:	636b      	str	r3, [r5, #52]	; 0x34
    ffd8:	6871      	ldr	r1, [r6, #4]
    ffda:	68b3      	ldr	r3, [r6, #8]
    ffdc:	68f2      	ldr	r2, [r6, #12]
    ffde:	430b      	orrs	r3, r1
    ffe0:	f043 0310 	orr.w	r3, r3, #16
    ffe4:	4313      	orrs	r3, r2
    ffe6:	62eb      	str	r3, [r5, #44]	; 0x2c
    ffe8:	f7ff fd44 	bl	fa74 <am_hal_interrupt_master_disable>
    ffec:	9003      	str	r0, [sp, #12]
    ffee:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fff0:	f043 0301 	orr.w	r3, r3, #1
    fff4:	862b      	strh	r3, [r5, #48]	; 0x30
    fff6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fffc:	862b      	strh	r3, [r5, #48]	; 0x30
    fffe:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10004:	862b      	strh	r3, [r5, #48]	; 0x30
   10006:	9803      	ldr	r0, [sp, #12]
   10008:	f7ff fd38 	bl	fa7c <am_hal_interrupt_master_set>
   1000c:	6825      	ldr	r5, [r4, #0]
   1000e:	4b36      	ldr	r3, [pc, #216]	; (100e8 <am_hal_uart_configure+0x1ec>)
   10010:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   10014:	429d      	cmp	r5, r3
   10016:	d005      	beq.n	10024 <am_hal_uart_configure+0x128>
   10018:	2000      	movs	r0, #0
   1001a:	e7b7      	b.n	ff8c <am_hal_uart_configure+0x90>
   1001c:	2300      	movs	r3, #0
   1001e:	6623      	str	r3, [r4, #96]	; 0x60
   10020:	483b      	ldr	r0, [pc, #236]	; (10110 <am_hal_uart_configure+0x214>)
   10022:	e7b3      	b.n	ff8c <am_hal_uart_configure+0x90>
   10024:	69b1      	ldr	r1, [r6, #24]
   10026:	6a37      	ldr	r7, [r6, #32]
   10028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1002c:	b109      	cbz	r1, 10032 <am_hal_uart_configure+0x136>
   1002e:	69f3      	ldr	r3, [r6, #28]
   10030:	bb3b      	cbnz	r3, 10082 <am_hal_uart_configure+0x186>
   10032:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10034:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10038:	f103 021c 	add.w	r2, r3, #28
   1003c:	0312      	lsls	r2, r2, #12
   1003e:	2100      	movs	r1, #0
   10040:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   10044:	6b91      	ldr	r1, [r2, #56]	; 0x38
   10046:	f021 0120 	bic.w	r1, r1, #32
   1004a:	6391      	str	r1, [r2, #56]	; 0x38
   1004c:	b1b7      	cbz	r7, 1007c <am_hal_uart_configure+0x180>
   1004e:	f1b8 0f00 	cmp.w	r8, #0
   10052:	d12e      	bne.n	100b2 <am_hal_uart_configure+0x1b6>
   10054:	6823      	ldr	r3, [r4, #0]
   10056:	4a24      	ldr	r2, [pc, #144]	; (100e8 <am_hal_uart_configure+0x1ec>)
   10058:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1005c:	2100      	movs	r1, #0
   1005e:	4293      	cmp	r3, r2
   10060:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
   10064:	d1d8      	bne.n	10018 <am_hal_uart_configure+0x11c>
   10066:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10068:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1006c:	331c      	adds	r3, #28
   1006e:	031b      	lsls	r3, r3, #12
   10070:	2000      	movs	r0, #0
   10072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10074:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   10078:	639a      	str	r2, [r3, #56]	; 0x38
   1007a:	e787      	b.n	ff8c <am_hal_uart_configure+0x90>
   1007c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
   10080:	e7f4      	b.n	1006c <am_hal_uart_configure+0x170>
   10082:	2201      	movs	r2, #1
   10084:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   10088:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1008c:	f000 fa7c 	bl	10588 <am_hal_queue_init>
   10090:	6823      	ldr	r3, [r4, #0]
   10092:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10096:	42ab      	cmp	r3, r5
   10098:	d1be      	bne.n	10018 <am_hal_uart_configure+0x11c>
   1009a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1009c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100a0:	331c      	adds	r3, #28
   100a2:	031b      	lsls	r3, r3, #12
   100a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   100a6:	f042 0220 	orr.w	r2, r2, #32
   100aa:	639a      	str	r2, [r3, #56]	; 0x38
   100ac:	2f00      	cmp	r7, #0
   100ae:	d1ce      	bne.n	1004e <am_hal_uart_configure+0x152>
   100b0:	e7d0      	b.n	10054 <am_hal_uart_configure+0x158>
   100b2:	2201      	movs	r2, #1
   100b4:	4643      	mov	r3, r8
   100b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   100ba:	4639      	mov	r1, r7
   100bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   100c0:	f000 fa62 	bl	10588 <am_hal_queue_init>
   100c4:	6823      	ldr	r3, [r4, #0]
   100c6:	4a08      	ldr	r2, [pc, #32]	; (100e8 <am_hal_uart_configure+0x1ec>)
   100c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   100cc:	4293      	cmp	r3, r2
   100ce:	d1a3      	bne.n	10018 <am_hal_uart_configure+0x11c>
   100d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   100d2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100d6:	331c      	adds	r3, #28
   100d8:	031b      	lsls	r3, r3, #12
   100da:	2000      	movs	r0, #0
   100dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   100de:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   100e2:	639a      	str	r2, [r3, #56]	; 0x38
   100e4:	e752      	b.n	ff8c <am_hal_uart_configure+0x90>
   100e6:	bf00      	nop
   100e8:	01ea9e06 	.word	0x01ea9e06
   100ec:	2dc6c000 	.word	0x2dc6c000
   100f0:	00b71b00 	.word	0x00b71b00
   100f4:	08000003 	.word	0x08000003
   100f8:	5b8d8000 	.word	0x5b8d8000
   100fc:	016e3600 	.word	0x016e3600
   10100:	0b71b000 	.word	0x0b71b000
   10104:	002dc6c0 	.word	0x002dc6c0
   10108:	16e36000 	.word	0x16e36000
   1010c:	005b8d80 	.word	0x005b8d80
   10110:	08000002 	.word	0x08000002

00010114 <am_hal_uart_transfer>:
   10114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10118:	680f      	ldr	r7, [r1, #0]
   1011a:	b091      	sub	sp, #68	; 0x44
   1011c:	4605      	mov	r5, r0
   1011e:	b13f      	cbz	r7, 10130 <am_hal_uart_transfer+0x1c>
   10120:	2f01      	cmp	r7, #1
   10122:	bf18      	it	ne
   10124:	2707      	movne	r7, #7
   10126:	d024      	beq.n	10172 <am_hal_uart_transfer+0x5e>
   10128:	4638      	mov	r0, r7
   1012a:	b011      	add	sp, #68	; 0x44
   1012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10130:	f8d1 900c 	ldr.w	r9, [r1, #12]
   10134:	690b      	ldr	r3, [r1, #16]
   10136:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1013a:	688e      	ldr	r6, [r1, #8]
   1013c:	9300      	str	r3, [sp, #0]
   1013e:	f1b9 0f00 	cmp.w	r9, #0
   10142:	d031      	beq.n	101a8 <am_hal_uart_transfer+0x94>
   10144:	2e00      	cmp	r6, #0
   10146:	f000 819c 	beq.w	10482 <am_hal_uart_transfer+0x36e>
   1014a:	2800      	cmp	r0, #0
   1014c:	f000 8097 	beq.w	1027e <am_hal_uart_transfer+0x16a>
   10150:	6803      	ldr	r3, [r0, #0]
   10152:	4aa9      	ldr	r2, [pc, #676]	; (103f8 <am_hal_uart_transfer+0x2e4>)
   10154:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10158:	4293      	cmp	r3, r2
   1015a:	f000 8092 	beq.w	10282 <am_hal_uart_transfer+0x16e>
   1015e:	46b8      	mov	r8, r7
   10160:	9b00      	ldr	r3, [sp, #0]
   10162:	b10b      	cbz	r3, 10168 <am_hal_uart_transfer+0x54>
   10164:	f8c3 8000 	str.w	r8, [r3]
   10168:	2702      	movs	r7, #2
   1016a:	4638      	mov	r0, r7
   1016c:	b011      	add	sp, #68	; 0x44
   1016e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10172:	1d0b      	adds	r3, r1, #4
   10174:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
   10178:	f1b9 0f00 	cmp.w	r9, #0
   1017c:	d043      	beq.n	10206 <am_hal_uart_transfer+0xf2>
   1017e:	2f00      	cmp	r7, #0
   10180:	f000 8185 	beq.w	1048e <am_hal_uart_transfer+0x37a>
   10184:	2800      	cmp	r0, #0
   10186:	f000 80eb 	beq.w	10360 <am_hal_uart_transfer+0x24c>
   1018a:	6802      	ldr	r2, [r0, #0]
   1018c:	499a      	ldr	r1, [pc, #616]	; (103f8 <am_hal_uart_transfer+0x2e4>)
   1018e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10192:	428a      	cmp	r2, r1
   10194:	f000 80e7 	beq.w	10366 <am_hal_uart_transfer+0x252>
   10198:	2600      	movs	r6, #0
   1019a:	2702      	movs	r7, #2
   1019c:	f1bb 0f00 	cmp.w	fp, #0
   101a0:	d0c2      	beq.n	10128 <am_hal_uart_transfer+0x14>
   101a2:	f8cb 6000 	str.w	r6, [fp]
   101a6:	e7bf      	b.n	10128 <am_hal_uart_transfer+0x14>
   101a8:	2800      	cmp	r0, #0
   101aa:	d0dd      	beq.n	10168 <am_hal_uart_transfer+0x54>
   101ac:	6803      	ldr	r3, [r0, #0]
   101ae:	4a92      	ldr	r2, [pc, #584]	; (103f8 <am_hal_uart_transfer+0x2e4>)
   101b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   101b4:	4293      	cmp	r3, r2
   101b6:	d1d7      	bne.n	10168 <am_hal_uart_transfer+0x54>
   101b8:	9b00      	ldr	r3, [sp, #0]
   101ba:	b10b      	cbz	r3, 101c0 <am_hal_uart_transfer+0xac>
   101bc:	f8c3 9000 	str.w	r9, [r3]
   101c0:	b1fe      	cbz	r6, 10202 <am_hal_uart_transfer+0xee>
   101c2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   101c6:	2b00      	cmp	r3, #0
   101c8:	f040 8165 	bne.w	10496 <am_hal_uart_transfer+0x382>
   101cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   101ce:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   101d2:	311c      	adds	r1, #28
   101d4:	0309      	lsls	r1, r1, #12
   101d6:	698a      	ldr	r2, [r1, #24]
   101d8:	f3c2 1240 	ubfx	r2, r2, #5, #1
   101dc:	2a00      	cmp	r2, #0
   101de:	f040 818d 	bne.w	104fc <am_hal_uart_transfer+0x3e8>
   101e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   101e6:	e003      	b.n	101f0 <am_hal_uart_transfer+0xdc>
   101e8:	6988      	ldr	r0, [r1, #24]
   101ea:	0680      	lsls	r0, r0, #26
   101ec:	f100 8151 	bmi.w	10492 <am_hal_uart_transfer+0x37e>
   101f0:	3201      	adds	r2, #1
   101f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   101f6:	6008      	str	r0, [r1, #0]
   101f8:	4296      	cmp	r6, r2
   101fa:	d1f5      	bne.n	101e8 <am_hal_uart_transfer+0xd4>
   101fc:	9b00      	ldr	r3, [sp, #0]
   101fe:	b103      	cbz	r3, 10202 <am_hal_uart_transfer+0xee>
   10200:	601e      	str	r6, [r3, #0]
   10202:	2700      	movs	r7, #0
   10204:	e790      	b.n	10128 <am_hal_uart_transfer+0x14>
   10206:	2800      	cmp	r0, #0
   10208:	d0ae      	beq.n	10168 <am_hal_uart_transfer+0x54>
   1020a:	6802      	ldr	r2, [r0, #0]
   1020c:	497a      	ldr	r1, [pc, #488]	; (103f8 <am_hal_uart_transfer+0x2e4>)
   1020e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10212:	428a      	cmp	r2, r1
   10214:	d1a8      	bne.n	10168 <am_hal_uart_transfer+0x54>
   10216:	f1bb 0f00 	cmp.w	fp, #0
   1021a:	d001      	beq.n	10220 <am_hal_uart_transfer+0x10c>
   1021c:	f8cb 9000 	str.w	r9, [fp]
   10220:	2f00      	cmp	r7, #0
   10222:	d0ee      	beq.n	10202 <am_hal_uart_transfer+0xee>
   10224:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   10228:	2c00      	cmp	r4, #0
   1022a:	f040 816c 	bne.w	10506 <am_hal_uart_transfer+0x3f2>
   1022e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10230:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10234:	321c      	adds	r2, #28
   10236:	0312      	lsls	r2, r2, #12
   10238:	6990      	ldr	r0, [r2, #24]
   1023a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1023e:	2800      	cmp	r0, #0
   10240:	f040 819d 	bne.w	1057e <am_hal_uart_transfer+0x46a>
   10244:	6811      	ldr	r1, [r2, #0]
   10246:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   1024a:	bf08      	it	eq
   1024c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   10250:	d008      	beq.n	10264 <am_hal_uart_transfer+0x150>
   10252:	e190      	b.n	10576 <am_hal_uart_transfer+0x462>
   10254:	6991      	ldr	r1, [r2, #24]
   10256:	06c8      	lsls	r0, r1, #27
   10258:	d409      	bmi.n	1026e <am_hal_uart_transfer+0x15a>
   1025a:	6811      	ldr	r1, [r2, #0]
   1025c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   10260:	f040 814e 	bne.w	10500 <am_hal_uart_transfer+0x3ec>
   10264:	3401      	adds	r4, #1
   10266:	42a7      	cmp	r7, r4
   10268:	f803 1f01 	strb.w	r1, [r3, #1]!
   1026c:	d1f2      	bne.n	10254 <am_hal_uart_transfer+0x140>
   1026e:	2700      	movs	r7, #0
   10270:	f1bb 0f00 	cmp.w	fp, #0
   10274:	f43f af58 	beq.w	10128 <am_hal_uart_transfer+0x14>
   10278:	f8cb 4000 	str.w	r4, [fp]
   1027c:	e754      	b.n	10128 <am_hal_uart_transfer+0x14>
   1027e:	4680      	mov	r8, r0
   10280:	e76e      	b.n	10160 <am_hal_uart_transfer+0x4c>
   10282:	9301      	str	r3, [sp, #4]
   10284:	4651      	mov	r1, sl
   10286:	46bb      	mov	fp, r7
   10288:	46b8      	mov	r8, r7
   1028a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1028e:	b9f2      	cbnz	r2, 102ce <am_hal_uart_transfer+0x1ba>
   10290:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10292:	b19e      	cbz	r6, 102bc <am_hal_uart_transfer+0x1a8>
   10294:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10298:	321c      	adds	r2, #28
   1029a:	0312      	lsls	r2, r2, #12
   1029c:	3901      	subs	r1, #1
   1029e:	6994      	ldr	r4, [r2, #24]
   102a0:	f3c4 1440 	ubfx	r4, r4, #5, #1
   102a4:	b11c      	cbz	r4, 102ae <am_hal_uart_transfer+0x19a>
   102a6:	e047      	b.n	10338 <am_hal_uart_transfer+0x224>
   102a8:	6993      	ldr	r3, [r2, #24]
   102aa:	069b      	lsls	r3, r3, #26
   102ac:	d441      	bmi.n	10332 <am_hal_uart_transfer+0x21e>
   102ae:	3401      	adds	r4, #1
   102b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   102b4:	6013      	str	r3, [r2, #0]
   102b6:	42b4      	cmp	r4, r6
   102b8:	d1f6      	bne.n	102a8 <am_hal_uart_transfer+0x194>
   102ba:	44a0      	add	r8, r4
   102bc:	9b00      	ldr	r3, [sp, #0]
   102be:	2b00      	cmp	r3, #0
   102c0:	d09f      	beq.n	10202 <am_hal_uart_transfer+0xee>
   102c2:	4638      	mov	r0, r7
   102c4:	f8c3 8000 	str.w	r8, [r3]
   102c8:	b011      	add	sp, #68	; 0x44
   102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
   102d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   102d2:	1b14      	subs	r4, r2, r4
   102d4:	42b4      	cmp	r4, r6
   102d6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   102da:	bf28      	it	cs
   102dc:	4634      	movcs	r4, r6
   102de:	4622      	mov	r2, r4
   102e0:	4618      	mov	r0, r3
   102e2:	9302      	str	r3, [sp, #8]
   102e4:	f000 f95c 	bl	105a0 <am_hal_queue_item_add>
   102e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   102ea:	9303      	str	r3, [sp, #12]
   102ec:	f7ff fbc2 	bl	fa74 <am_hal_interrupt_master_disable>
   102f0:	9b03      	ldr	r3, [sp, #12]
   102f2:	9008      	str	r0, [sp, #32]
   102f4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   102f8:	331c      	adds	r3, #28
   102fa:	031b      	lsls	r3, r3, #12
   102fc:	9303      	str	r3, [sp, #12]
   102fe:	e00d      	b.n	1031c <am_hal_uart_transfer+0x208>
   10300:	f000 f986 	bl	10610 <am_hal_queue_item_get>
   10304:	b190      	cbz	r0, 1032c <am_hal_uart_transfer+0x218>
   10306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10308:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1030c:	331c      	adds	r3, #28
   1030e:	031b      	lsls	r3, r3, #12
   10310:	699a      	ldr	r2, [r3, #24]
   10312:	0692      	lsls	r2, r2, #26
   10314:	bf5c      	itt	pl
   10316:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   1031a:	601a      	strpl	r2, [r3, #0]
   1031c:	9b03      	ldr	r3, [sp, #12]
   1031e:	9802      	ldr	r0, [sp, #8]
   10320:	699b      	ldr	r3, [r3, #24]
   10322:	069b      	lsls	r3, r3, #26
   10324:	f04f 0201 	mov.w	r2, #1
   10328:	a907      	add	r1, sp, #28
   1032a:	d5e9      	bpl.n	10300 <am_hal_uart_transfer+0x1ec>
   1032c:	9808      	ldr	r0, [sp, #32]
   1032e:	f7ff fba5 	bl	fa7c <am_hal_interrupt_master_set>
   10332:	1b36      	subs	r6, r6, r4
   10334:	44a0      	add	r8, r4
   10336:	d0c1      	beq.n	102bc <am_hal_uart_transfer+0x1a8>
   10338:	2001      	movs	r0, #1
   1033a:	f7ff fb67 	bl	fa0c <am_hal_flash_delay>
   1033e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10342:	d001      	beq.n	10348 <am_hal_uart_transfer+0x234>
   10344:	f10b 0b01 	add.w	fp, fp, #1
   10348:	45d9      	cmp	r9, fp
   1034a:	d9b7      	bls.n	102bc <am_hal_uart_transfer+0x1a8>
   1034c:	682a      	ldr	r2, [r5, #0]
   1034e:	9b01      	ldr	r3, [sp, #4]
   10350:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10354:	429a      	cmp	r2, r3
   10356:	eb0a 0108 	add.w	r1, sl, r8
   1035a:	f47f af01 	bne.w	10160 <am_hal_uart_transfer+0x4c>
   1035e:	e794      	b.n	1028a <am_hal_uart_transfer+0x176>
   10360:	4606      	mov	r6, r0
   10362:	2702      	movs	r7, #2
   10364:	e71a      	b.n	1019c <am_hal_uart_transfer+0x88>
   10366:	9200      	str	r2, [sp, #0]
   10368:	f100 0248 	add.w	r2, r0, #72	; 0x48
   1036c:	f04f 0a00 	mov.w	sl, #0
   10370:	9202      	str	r2, [sp, #8]
   10372:	465a      	mov	r2, fp
   10374:	4698      	mov	r8, r3
   10376:	469b      	mov	fp, r3
   10378:	4656      	mov	r6, sl
   1037a:	4613      	mov	r3, r2
   1037c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   10380:	2a00      	cmp	r2, #0
   10382:	d152      	bne.n	1042a <am_hal_uart_transfer+0x316>
   10384:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10386:	b3a7      	cbz	r7, 103f2 <am_hal_uart_transfer+0x2de>
   10388:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1038c:	311c      	adds	r1, #28
   1038e:	0309      	lsls	r1, r1, #12
   10390:	698a      	ldr	r2, [r1, #24]
   10392:	06d0      	lsls	r0, r2, #27
   10394:	d432      	bmi.n	103fc <am_hal_uart_transfer+0x2e8>
   10396:	680a      	ldr	r2, [r1, #0]
   10398:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   1039c:	f040 80aa 	bne.w	104f4 <am_hal_uart_transfer+0x3e0>
   103a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   103a4:	e006      	b.n	103b4 <am_hal_uart_transfer+0x2a0>
   103a6:	698a      	ldr	r2, [r1, #24]
   103a8:	06d2      	lsls	r2, r2, #27
   103aa:	d41f      	bmi.n	103ec <am_hal_uart_transfer+0x2d8>
   103ac:	680a      	ldr	r2, [r1, #0]
   103ae:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   103b2:	d161      	bne.n	10478 <am_hal_uart_transfer+0x364>
   103b4:	3401      	adds	r4, #1
   103b6:	42bc      	cmp	r4, r7
   103b8:	f808 2f01 	strb.w	r2, [r8, #1]!
   103bc:	d1f3      	bne.n	103a6 <am_hal_uart_transfer+0x292>
   103be:	469b      	mov	fp, r3
   103c0:	4426      	add	r6, r4
   103c2:	f1bb 0f00 	cmp.w	fp, #0
   103c6:	f43f af1c 	beq.w	10202 <am_hal_uart_transfer+0xee>
   103ca:	f8cb 6000 	str.w	r6, [fp]
   103ce:	2700      	movs	r7, #0
   103d0:	e6aa      	b.n	10128 <am_hal_uart_transfer+0x14>
   103d2:	9807      	ldr	r0, [sp, #28]
   103d4:	f7ff fb52 	bl	fa7c <am_hal_interrupt_master_set>
   103d8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   103da:	9802      	ldr	r0, [sp, #8]
   103dc:	42bc      	cmp	r4, r7
   103de:	bf28      	it	cs
   103e0:	463c      	movcs	r4, r7
   103e2:	4641      	mov	r1, r8
   103e4:	4622      	mov	r2, r4
   103e6:	f000 f913 	bl	10610 <am_hal_queue_item_get>
   103ea:	9b01      	ldr	r3, [sp, #4]
   103ec:	1b3f      	subs	r7, r7, r4
   103ee:	4426      	add	r6, r4
   103f0:	d104      	bne.n	103fc <am_hal_uart_transfer+0x2e8>
   103f2:	469b      	mov	fp, r3
   103f4:	e7e5      	b.n	103c2 <am_hal_uart_transfer+0x2ae>
   103f6:	bf00      	nop
   103f8:	01ea9e06 	.word	0x01ea9e06
   103fc:	2001      	movs	r0, #1
   103fe:	9301      	str	r3, [sp, #4]
   10400:	f7ff fb04 	bl	fa0c <am_hal_flash_delay>
   10404:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10408:	9b01      	ldr	r3, [sp, #4]
   1040a:	d001      	beq.n	10410 <am_hal_uart_transfer+0x2fc>
   1040c:	f10a 0a01 	add.w	sl, sl, #1
   10410:	45d1      	cmp	r9, sl
   10412:	d9ee      	bls.n	103f2 <am_hal_uart_transfer+0x2de>
   10414:	682a      	ldr	r2, [r5, #0]
   10416:	9900      	ldr	r1, [sp, #0]
   10418:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1041c:	428a      	cmp	r2, r1
   1041e:	eb0b 0806 	add.w	r8, fp, r6
   10422:	d0ab      	beq.n	1037c <am_hal_uart_transfer+0x268>
   10424:	469b      	mov	fp, r3
   10426:	2702      	movs	r7, #2
   10428:	e6b8      	b.n	1019c <am_hal_uart_transfer+0x88>
   1042a:	9301      	str	r3, [sp, #4]
   1042c:	f7ff fb22 	bl	fa74 <am_hal_interrupt_master_disable>
   10430:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10432:	9007      	str	r0, [sp, #28]
   10434:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   10438:	301c      	adds	r0, #28
   1043a:	9b01      	ldr	r3, [sp, #4]
   1043c:	0300      	lsls	r0, r0, #12
   1043e:	ac08      	add	r4, sp, #32
   10440:	2200      	movs	r2, #0
   10442:	6981      	ldr	r1, [r0, #24]
   10444:	06c9      	lsls	r1, r1, #27
   10446:	d409      	bmi.n	1045c <am_hal_uart_transfer+0x348>
   10448:	6801      	ldr	r1, [r0, #0]
   1044a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1044e:	f102 0201 	add.w	r2, r2, #1
   10452:	d118      	bne.n	10486 <am_hal_uart_transfer+0x372>
   10454:	2a20      	cmp	r2, #32
   10456:	f804 1b01 	strb.w	r1, [r4], #1
   1045a:	d1f2      	bne.n	10442 <am_hal_uart_transfer+0x32e>
   1045c:	a908      	add	r1, sp, #32
   1045e:	9802      	ldr	r0, [sp, #8]
   10460:	9301      	str	r3, [sp, #4]
   10462:	f000 f89d 	bl	105a0 <am_hal_queue_item_add>
   10466:	9b01      	ldr	r3, [sp, #4]
   10468:	2800      	cmp	r0, #0
   1046a:	d1b2      	bne.n	103d2 <am_hal_uart_transfer+0x2be>
   1046c:	4f45      	ldr	r7, [pc, #276]	; (10584 <am_hal_uart_transfer+0x470>)
   1046e:	469b      	mov	fp, r3
   10470:	9807      	ldr	r0, [sp, #28]
   10472:	f7ff fb03 	bl	fa7c <am_hal_interrupt_master_set>
   10476:	e691      	b.n	1019c <am_hal_uart_transfer+0x88>
   10478:	469b      	mov	fp, r3
   1047a:	4426      	add	r6, r4
   1047c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10480:	e68c      	b.n	1019c <am_hal_uart_transfer+0x88>
   10482:	46b8      	mov	r8, r7
   10484:	e71a      	b.n	102bc <am_hal_uart_transfer+0x1a8>
   10486:	469b      	mov	fp, r3
   10488:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1048c:	e7f0      	b.n	10470 <am_hal_uart_transfer+0x35c>
   1048e:	463e      	mov	r6, r7
   10490:	e797      	b.n	103c2 <am_hal_uart_transfer+0x2ae>
   10492:	4616      	mov	r6, r2
   10494:	e6b2      	b.n	101fc <am_hal_uart_transfer+0xe8>
   10496:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   10498:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1049a:	1a9b      	subs	r3, r3, r2
   1049c:	429e      	cmp	r6, r3
   1049e:	bf28      	it	cs
   104a0:	461e      	movcs	r6, r3
   104a2:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   104a6:	4651      	mov	r1, sl
   104a8:	4632      	mov	r2, r6
   104aa:	4620      	mov	r0, r4
   104ac:	f000 f878 	bl	105a0 <am_hal_queue_item_add>
   104b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   104b2:	f7ff fadf 	bl	fa74 <am_hal_interrupt_master_disable>
   104b6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   104ba:	371c      	adds	r7, #28
   104bc:	033f      	lsls	r7, r7, #12
   104be:	9005      	str	r0, [sp, #20]
   104c0:	e00d      	b.n	104de <am_hal_uart_transfer+0x3ca>
   104c2:	f000 f8a5 	bl	10610 <am_hal_queue_item_get>
   104c6:	b188      	cbz	r0, 104ec <am_hal_uart_transfer+0x3d8>
   104c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   104ca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   104ce:	331c      	adds	r3, #28
   104d0:	031b      	lsls	r3, r3, #12
   104d2:	699a      	ldr	r2, [r3, #24]
   104d4:	0692      	lsls	r2, r2, #26
   104d6:	bf5c      	itt	pl
   104d8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   104dc:	601a      	strpl	r2, [r3, #0]
   104de:	69bb      	ldr	r3, [r7, #24]
   104e0:	069b      	lsls	r3, r3, #26
   104e2:	f04f 0201 	mov.w	r2, #1
   104e6:	a908      	add	r1, sp, #32
   104e8:	4620      	mov	r0, r4
   104ea:	d5ea      	bpl.n	104c2 <am_hal_uart_transfer+0x3ae>
   104ec:	9805      	ldr	r0, [sp, #20]
   104ee:	f7ff fac5 	bl	fa7c <am_hal_interrupt_master_set>
   104f2:	e683      	b.n	101fc <am_hal_uart_transfer+0xe8>
   104f4:	469b      	mov	fp, r3
   104f6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   104fa:	e64f      	b.n	1019c <am_hal_uart_transfer+0x88>
   104fc:	461e      	mov	r6, r3
   104fe:	e67d      	b.n	101fc <am_hal_uart_transfer+0xe8>
   10500:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10504:	e6b4      	b.n	10270 <am_hal_uart_transfer+0x15c>
   10506:	9300      	str	r3, [sp, #0]
   10508:	f7ff fab4 	bl	fa74 <am_hal_interrupt_master_disable>
   1050c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1050e:	9006      	str	r0, [sp, #24]
   10510:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10514:	321c      	adds	r2, #28
   10516:	0311      	lsls	r1, r2, #12
   10518:	a808      	add	r0, sp, #32
   1051a:	2200      	movs	r2, #0
   1051c:	9b00      	ldr	r3, [sp, #0]
   1051e:	e009      	b.n	10534 <am_hal_uart_transfer+0x420>
   10520:	680c      	ldr	r4, [r1, #0]
   10522:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   10526:	f102 0201 	add.w	r2, r2, #1
   1052a:	d121      	bne.n	10570 <am_hal_uart_transfer+0x45c>
   1052c:	2a20      	cmp	r2, #32
   1052e:	f800 4b01 	strb.w	r4, [r0], #1
   10532:	d002      	beq.n	1053a <am_hal_uart_transfer+0x426>
   10534:	698c      	ldr	r4, [r1, #24]
   10536:	06e4      	lsls	r4, r4, #27
   10538:	d5f2      	bpl.n	10520 <am_hal_uart_transfer+0x40c>
   1053a:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1053e:	a908      	add	r1, sp, #32
   10540:	4630      	mov	r0, r6
   10542:	9300      	str	r3, [sp, #0]
   10544:	f000 f82c 	bl	105a0 <am_hal_queue_item_add>
   10548:	b920      	cbnz	r0, 10554 <am_hal_uart_transfer+0x440>
   1054a:	4f0e      	ldr	r7, [pc, #56]	; (10584 <am_hal_uart_transfer+0x470>)
   1054c:	9806      	ldr	r0, [sp, #24]
   1054e:	f7ff fa95 	bl	fa7c <am_hal_interrupt_master_set>
   10552:	e5e9      	b.n	10128 <am_hal_uart_transfer+0x14>
   10554:	9806      	ldr	r0, [sp, #24]
   10556:	f7ff fa91 	bl	fa7c <am_hal_interrupt_master_set>
   1055a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1055c:	9b00      	ldr	r3, [sp, #0]
   1055e:	42bc      	cmp	r4, r7
   10560:	bf28      	it	cs
   10562:	463c      	movcs	r4, r7
   10564:	4619      	mov	r1, r3
   10566:	4630      	mov	r0, r6
   10568:	4622      	mov	r2, r4
   1056a:	f000 f851 	bl	10610 <am_hal_queue_item_get>
   1056e:	e67e      	b.n	1026e <am_hal_uart_transfer+0x15a>
   10570:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10574:	e7ea      	b.n	1054c <am_hal_uart_transfer+0x438>
   10576:	4604      	mov	r4, r0
   10578:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1057c:	e678      	b.n	10270 <am_hal_uart_transfer+0x15c>
   1057e:	4627      	mov	r7, r4
   10580:	e676      	b.n	10270 <am_hal_uart_transfer+0x15c>
   10582:	bf00      	nop
   10584:	08000001 	.word	0x08000001

00010588 <am_hal_queue_init>:
   10588:	b410      	push	{r4}
   1058a:	2400      	movs	r4, #0
   1058c:	6004      	str	r4, [r0, #0]
   1058e:	6044      	str	r4, [r0, #4]
   10590:	6084      	str	r4, [r0, #8]
   10592:	60c3      	str	r3, [r0, #12]
   10594:	6102      	str	r2, [r0, #16]
   10596:	6141      	str	r1, [r0, #20]
   10598:	f85d 4b04 	ldr.w	r4, [sp], #4
   1059c:	4770      	bx	lr
   1059e:	bf00      	nop

000105a0 <am_hal_queue_item_add>:
   105a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   105a2:	4604      	mov	r4, r0
   105a4:	6906      	ldr	r6, [r0, #16]
   105a6:	b083      	sub	sp, #12
   105a8:	fb06 f602 	mul.w	r6, r6, r2
   105ac:	460d      	mov	r5, r1
   105ae:	f7ff fa61 	bl	fa74 <am_hal_interrupt_master_disable>
   105b2:	68e7      	ldr	r7, [r4, #12]
   105b4:	68a2      	ldr	r2, [r4, #8]
   105b6:	9001      	str	r0, [sp, #4]
   105b8:	1abb      	subs	r3, r7, r2
   105ba:	429e      	cmp	r6, r3
   105bc:	d826      	bhi.n	1060c <am_hal_queue_item_add+0x6c>
   105be:	b196      	cbz	r6, 105e6 <am_hal_queue_item_add+0x46>
   105c0:	6823      	ldr	r3, [r4, #0]
   105c2:	4629      	mov	r1, r5
   105c4:	b1c5      	cbz	r5, 105f8 <am_hal_queue_item_add+0x58>
   105c6:	19af      	adds	r7, r5, r6
   105c8:	6962      	ldr	r2, [r4, #20]
   105ca:	f811 0b01 	ldrb.w	r0, [r1], #1
   105ce:	54d0      	strb	r0, [r2, r3]
   105d0:	6823      	ldr	r3, [r4, #0]
   105d2:	68e5      	ldr	r5, [r4, #12]
   105d4:	3301      	adds	r3, #1
   105d6:	42b9      	cmp	r1, r7
   105d8:	fbb3 f0f5 	udiv	r0, r3, r5
   105dc:	fb05 3310 	mls	r3, r5, r0, r3
   105e0:	6023      	str	r3, [r4, #0]
   105e2:	d1f1      	bne.n	105c8 <am_hal_queue_item_add+0x28>
   105e4:	68a2      	ldr	r2, [r4, #8]
   105e6:	4432      	add	r2, r6
   105e8:	60a2      	str	r2, [r4, #8]
   105ea:	2401      	movs	r4, #1
   105ec:	9801      	ldr	r0, [sp, #4]
   105ee:	f7ff fa45 	bl	fa7c <am_hal_interrupt_master_set>
   105f2:	4620      	mov	r0, r4
   105f4:	b003      	add	sp, #12
   105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105f8:	3101      	adds	r1, #1
   105fa:	3301      	adds	r3, #1
   105fc:	428e      	cmp	r6, r1
   105fe:	fbb3 f0f7 	udiv	r0, r3, r7
   10602:	fb07 3310 	mls	r3, r7, r0, r3
   10606:	d1f7      	bne.n	105f8 <am_hal_queue_item_add+0x58>
   10608:	6023      	str	r3, [r4, #0]
   1060a:	e7ec      	b.n	105e6 <am_hal_queue_item_add+0x46>
   1060c:	2400      	movs	r4, #0
   1060e:	e7ed      	b.n	105ec <am_hal_queue_item_add+0x4c>

00010610 <am_hal_queue_item_get>:
   10610:	b5f0      	push	{r4, r5, r6, r7, lr}
   10612:	4604      	mov	r4, r0
   10614:	6906      	ldr	r6, [r0, #16]
   10616:	b083      	sub	sp, #12
   10618:	fb06 f602 	mul.w	r6, r6, r2
   1061c:	460d      	mov	r5, r1
   1061e:	f7ff fa29 	bl	fa74 <am_hal_interrupt_master_disable>
   10622:	68a2      	ldr	r2, [r4, #8]
   10624:	9001      	str	r0, [sp, #4]
   10626:	4296      	cmp	r6, r2
   10628:	d81c      	bhi.n	10664 <am_hal_queue_item_get+0x54>
   1062a:	b196      	cbz	r6, 10652 <am_hal_queue_item_get+0x42>
   1062c:	6863      	ldr	r3, [r4, #4]
   1062e:	b1dd      	cbz	r5, 10668 <am_hal_queue_item_get+0x58>
   10630:	4629      	mov	r1, r5
   10632:	19af      	adds	r7, r5, r6
   10634:	6962      	ldr	r2, [r4, #20]
   10636:	5cd3      	ldrb	r3, [r2, r3]
   10638:	f801 3b01 	strb.w	r3, [r1], #1
   1063c:	6863      	ldr	r3, [r4, #4]
   1063e:	68e5      	ldr	r5, [r4, #12]
   10640:	3301      	adds	r3, #1
   10642:	428f      	cmp	r7, r1
   10644:	fbb3 f0f5 	udiv	r0, r3, r5
   10648:	fb05 3310 	mls	r3, r5, r0, r3
   1064c:	6063      	str	r3, [r4, #4]
   1064e:	d1f1      	bne.n	10634 <am_hal_queue_item_get+0x24>
   10650:	68a2      	ldr	r2, [r4, #8]
   10652:	1b92      	subs	r2, r2, r6
   10654:	60a2      	str	r2, [r4, #8]
   10656:	2401      	movs	r4, #1
   10658:	9801      	ldr	r0, [sp, #4]
   1065a:	f7ff fa0f 	bl	fa7c <am_hal_interrupt_master_set>
   1065e:	4620      	mov	r0, r4
   10660:	b003      	add	sp, #12
   10662:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10664:	2400      	movs	r4, #0
   10666:	e7f7      	b.n	10658 <am_hal_queue_item_get+0x48>
   10668:	68e0      	ldr	r0, [r4, #12]
   1066a:	4629      	mov	r1, r5
   1066c:	3101      	adds	r1, #1
   1066e:	3301      	adds	r3, #1
   10670:	428e      	cmp	r6, r1
   10672:	fbb3 f5f0 	udiv	r5, r3, r0
   10676:	fb00 3315 	mls	r3, r0, r5, r3
   1067a:	d1f7      	bne.n	1066c <am_hal_queue_item_get+0x5c>
   1067c:	6063      	str	r3, [r4, #4]
   1067e:	e7e8      	b.n	10652 <am_hal_queue_item_get+0x42>

00010680 <memset>:
   10680:	b4f0      	push	{r4, r5, r6, r7}
   10682:	0786      	lsls	r6, r0, #30
   10684:	d043      	beq.n	1070e <memset+0x8e>
   10686:	1e54      	subs	r4, r2, #1
   10688:	2a00      	cmp	r2, #0
   1068a:	d03e      	beq.n	1070a <memset+0x8a>
   1068c:	b2ca      	uxtb	r2, r1
   1068e:	4603      	mov	r3, r0
   10690:	e002      	b.n	10698 <memset+0x18>
   10692:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   10696:	d338      	bcc.n	1070a <memset+0x8a>
   10698:	f803 2b01 	strb.w	r2, [r3], #1
   1069c:	079d      	lsls	r5, r3, #30
   1069e:	d1f8      	bne.n	10692 <memset+0x12>
   106a0:	2c03      	cmp	r4, #3
   106a2:	d92b      	bls.n	106fc <memset+0x7c>
   106a4:	b2cd      	uxtb	r5, r1
   106a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   106aa:	2c0f      	cmp	r4, #15
   106ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   106b0:	d916      	bls.n	106e0 <memset+0x60>
   106b2:	f1a4 0710 	sub.w	r7, r4, #16
   106b6:	093f      	lsrs	r7, r7, #4
   106b8:	f103 0620 	add.w	r6, r3, #32
   106bc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   106c0:	f103 0210 	add.w	r2, r3, #16
   106c4:	e942 5504 	strd	r5, r5, [r2, #-16]
   106c8:	e942 5502 	strd	r5, r5, [r2, #-8]
   106cc:	3210      	adds	r2, #16
   106ce:	42b2      	cmp	r2, r6
   106d0:	d1f8      	bne.n	106c4 <memset+0x44>
   106d2:	f004 040f 	and.w	r4, r4, #15
   106d6:	3701      	adds	r7, #1
   106d8:	2c03      	cmp	r4, #3
   106da:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   106de:	d90d      	bls.n	106fc <memset+0x7c>
   106e0:	461e      	mov	r6, r3
   106e2:	4622      	mov	r2, r4
   106e4:	3a04      	subs	r2, #4
   106e6:	2a03      	cmp	r2, #3
   106e8:	f846 5b04 	str.w	r5, [r6], #4
   106ec:	d8fa      	bhi.n	106e4 <memset+0x64>
   106ee:	1f22      	subs	r2, r4, #4
   106f0:	f022 0203 	bic.w	r2, r2, #3
   106f4:	3204      	adds	r2, #4
   106f6:	4413      	add	r3, r2
   106f8:	f004 0403 	and.w	r4, r4, #3
   106fc:	b12c      	cbz	r4, 1070a <memset+0x8a>
   106fe:	b2c9      	uxtb	r1, r1
   10700:	441c      	add	r4, r3
   10702:	f803 1b01 	strb.w	r1, [r3], #1
   10706:	429c      	cmp	r4, r3
   10708:	d1fb      	bne.n	10702 <memset+0x82>
   1070a:	bcf0      	pop	{r4, r5, r6, r7}
   1070c:	4770      	bx	lr
   1070e:	4614      	mov	r4, r2
   10710:	4603      	mov	r3, r0
   10712:	e7c5      	b.n	106a0 <memset+0x20>
   10714:	7263694d 	.word	0x7263694d
   10718:	6f68706f 	.word	0x6f68706f
   1071c:	7620656e 	.word	0x7620656e
   10720:	66697265 	.word	0x66697265
   10724:	74616369 	.word	0x74616369
   10728:	206e6f69 	.word	0x206e6f69
   1072c:	636f7270 	.word	0x636f7270
   10730:	72756465 	.word	0x72756465
   10734:	73692065 	.word	0x73692065
   10738:	61657220 	.word	0x61657220
   1073c:	0d217964 	.word	0x0d217964
   10740:	00000a0a 	.word	0x00000a0a
   10744:	20414d44 	.word	0x20414d44
   10748:	6f727245 	.word	0x6f727245
   1074c:	636f2072 	.word	0x636f2072
   10750:	65727563 	.word	0x65727563
   10754:	00000a64 	.word	0x00000a64
   10758:	6f727245 	.word	0x6f727245
   1075c:	202d2072 	.word	0x202d2072
   10760:	61656c63 	.word	0x61656c63
   10764:	676e6972 	.word	0x676e6972
   10768:	65687420 	.word	0x65687420
   1076c:	43444120 	.word	0x43444120
   10770:	746e6920 	.word	0x746e6920
   10774:	75727265 	.word	0x75727265
   10778:	20737470 	.word	0x20737470
   1077c:	6c696166 	.word	0x6c696166
   10780:	0a2e6465 	.word	0x0a2e6465
   10784:	00000000 	.word	0x00000000
   10788:	6f727245 	.word	0x6f727245
   1078c:	202d2072 	.word	0x202d2072
   10790:	67697274 	.word	0x67697274
   10794:	69726567 	.word	0x69726567
   10798:	7420676e 	.word	0x7420676e
   1079c:	41206568 	.word	0x41206568
   107a0:	66204344 	.word	0x66204344
   107a4:	656c6961 	.word	0x656c6961
   107a8:	000a2e64 	.word	0x000a2e64
   107ac:	20746547 	.word	0x20746547
   107b0:	6c616e41 	.word	0x6c616e41
   107b4:	4d20676f 	.word	0x4d20676f
   107b8:	64206369 	.word	0x64206369
   107bc:	20617461 	.word	0x20617461
   107c0:	62206425 	.word	0x62206425
   107c4:	73657479 	.word	0x73657479
   107c8:	000d0a21 	.word	0x000d0a21
   107cc:	20746547 	.word	0x20746547
   107d0:	204d4450 	.word	0x204d4450
   107d4:	69647561 	.word	0x69647561
   107d8:	6164206f 	.word	0x6164206f
   107dc:	25206174 	.word	0x25206174
   107e0:	79622064 	.word	0x79622064
   107e4:	21736574 	.word	0x21736574
   107e8:	00000d0a 	.word	0x00000d0a
   107ec:	69647541 	.word	0x69647541
   107f0:	6164206f 	.word	0x6164206f
   107f4:	63206174 	.word	0x63206174
   107f8:	656c6c6f 	.word	0x656c6c6f
   107fc:	6f697463 	.word	0x6f697463
   10800:	6e65206e 	.word	0x6e65206e
   10804:	2e646564 	.word	0x2e646564
   10808:	002e2e2e 	.word	0x002e2e2e
   1080c:	6c616e41 	.word	0x6c616e41
   10810:	4d20676f 	.word	0x4d20676f
   10814:	64206369 	.word	0x64206369
   10818:	20617461 	.word	0x20617461
   1081c:	66207361 	.word	0x66207361
   10820:	6f6c6c6f 	.word	0x6f6c6c6f
   10824:	676e6977 	.word	0x676e6977
   10828:	0d0a203a 	.word	0x0d0a203a
   1082c:	00000000 	.word	0x00000000
   10830:	63694d41 	.word	0x63694d41
   10834:	6e697220 	.word	0x6e697220
   10838:	75622067 	.word	0x75622067
   1083c:	72656666 	.word	0x72656666
   10840:	20736920 	.word	0x20736920
   10844:	65726c61 	.word	0x65726c61
   10848:	20796461 	.word	0x20796461
   1084c:	74706d65 	.word	0x74706d65
   10850:	2e2e2e79 	.word	0x2e2e2e79
   10854:	00000d0a 	.word	0x00000d0a
   10858:	72656854 	.word	0x72656854
   1085c:	65722765 	.word	0x65722765
   10860:	6d6f7320 	.word	0x6d6f7320
   10864:	69687465 	.word	0x69687465
   10868:	7720676e 	.word	0x7720676e
   1086c:	65726965 	.word	0x65726965
   10870:	2e2e2e64 	.word	0x2e2e2e64
   10874:	63694d41 	.word	0x63694d41
   10878:	6e697220 	.word	0x6e697220
   1087c:	75622067 	.word	0x75622067
   10880:	72656666 	.word	0x72656666
   10884:	746f6e20 	.word	0x746f6e20
   10888:	62203420 	.word	0x62203420
   1088c:	73657479 	.word	0x73657479
   10890:	696c6120 	.word	0x696c6120
   10894:	64656e67 	.word	0x64656e67
   10898:	0a2e2e2e 	.word	0x0a2e2e2e
   1089c:	0000000d 	.word	0x0000000d
   108a0:	00000020 	.word	0x00000020
   108a4:	00000d0a 	.word	0x00000d0a
   108a8:	646e6553 	.word	0x646e6553
   108ac:	74756f20 	.word	0x74756f20
   108b0:	4c4c4120 	.word	0x4c4c4120
   108b4:	694d4120 	.word	0x694d4120
   108b8:	61642063 	.word	0x61642063
   108bc:	20216174 	.word	0x20216174
   108c0:	72656854 	.word	0x72656854
   108c4:	65722765 	.word	0x65722765
   108c8:	746f7420 	.word	0x746f7420
   108cc:	796c6c61 	.word	0x796c6c61
   108d0:	20642520 	.word	0x20642520
   108d4:	706d6173 	.word	0x706d6173
   108d8:	0a73656c 	.word	0x0a73656c
   108dc:	00000d0a 	.word	0x00000d0a
   108e0:	206c6c41 	.word	0x206c6c41
   108e4:	61746164 	.word	0x61746164
   108e8:	72657720 	.word	0x72657720
   108ec:	65732065 	.word	0x65732065
   108f0:	6465646e 	.word	0x6465646e
   108f4:	74756f20 	.word	0x74756f20
   108f8:	0a2e2e2e 	.word	0x0a2e2e2e
   108fc:	000d0a0a 	.word	0x000d0a0a
   10900:	74696157 	.word	0x74696157
   10904:	20676e69 	.word	0x20676e69
   10908:	65732032 	.word	0x65732032
   1090c:	646e6f63 	.word	0x646e6f63
   10910:	6f742073 	.word	0x6f742073
   10914:	61766520 	.word	0x61766520
   10918:	7461756c 	.word	0x7461756c
   1091c:	4d412065 	.word	0x4d412065
   10920:	61206369 	.word	0x61206369
   10924:	4420646e 	.word	0x4420646e
   10928:	2e63694d 	.word	0x2e63694d
   1092c:	0a0d2e2e 	.word	0x0a0d2e2e
   10930:	00000000 	.word	0x00000000
   10934:	72617453 	.word	0x72617453
   10938:	6f742074 	.word	0x6f742074
   1093c:	74656720 	.word	0x74656720
   10940:	64756120 	.word	0x64756120
   10944:	64206f69 	.word	0x64206f69
   10948:	2e617461 	.word	0x2e617461
   1094c:	0a0d2e2e 	.word	0x0a0d2e2e
   10950:	00000000 	.word	0x00000000
   10954:	00007325 	.word	0x00007325
   10958:	00006425 	.word	0x00006425
   1095c:	00007525 	.word	0x00007525
   10960:	38257830 	.word	0x38257830
   10964:	00000078 	.word	0x00000078
   10968:	00006625 	.word	0x00006625
   1096c:	204d4450 	.word	0x204d4450
   10970:	74746553 	.word	0x74746553
   10974:	73676e69 	.word	0x73676e69
   10978:	000a0d3a 	.word	0x000a0d3a
   1097c:	204d4450 	.word	0x204d4450
   10980:	636f6c43 	.word	0x636f6c43
   10984:	4828206b 	.word	0x4828206b
   10988:	203a297a 	.word	0x203a297a
   1098c:	20202020 	.word	0x20202020
   10990:	20202020 	.word	0x20202020
   10994:	64323125 	.word	0x64323125
   10998:	00000a0d 	.word	0x00000a0d
   1099c:	65666645 	.word	0x65666645
   109a0:	76697463 	.word	0x76697463
   109a4:	61532065 	.word	0x61532065
   109a8:	656c706d 	.word	0x656c706d
   109ac:	65724620 	.word	0x65724620
   109b0:	203a2e71 	.word	0x203a2e71
   109b4:	64323125 	.word	0x64323125
   109b8:	000a0a0d 	.word	0x000a0a0d
   109bc:	6f727245 	.word	0x6f727245
   109c0:	202d2072 	.word	0x202d2072
   109c4:	666e6f63 	.word	0x666e6f63
   109c8:	72756769 	.word	0x72756769
   109cc:	20676e69 	.word	0x20676e69
   109d0:	20434441 	.word	0x20434441
   109d4:	20414d44 	.word	0x20414d44
   109d8:	6c696166 	.word	0x6c696166
   109dc:	0a2e6465 	.word	0x0a2e6465
   109e0:	00000000 	.word	0x00000000
   109e4:	6f727245 	.word	0x6f727245
   109e8:	202d2072 	.word	0x202d2072
   109ec:	65736572 	.word	0x65736572
   109f0:	74617672 	.word	0x74617672
   109f4:	206e6f69 	.word	0x206e6f69
   109f8:	7420666f 	.word	0x7420666f
   109fc:	41206568 	.word	0x41206568
   10a00:	69204344 	.word	0x69204344
   10a04:	6174736e 	.word	0x6174736e
   10a08:	2065636e 	.word	0x2065636e
   10a0c:	6c696166 	.word	0x6c696166
   10a10:	0a2e6465 	.word	0x0a2e6465
   10a14:	00000000 	.word	0x00000000
   10a18:	6f727245 	.word	0x6f727245
   10a1c:	202d2072 	.word	0x202d2072
   10a20:	20434441 	.word	0x20434441
   10a24:	65776f70 	.word	0x65776f70
   10a28:	6e6f2072 	.word	0x6e6f2072
   10a2c:	69616620 	.word	0x69616620
   10a30:	2e64656c 	.word	0x2e64656c
   10a34:	0000000a 	.word	0x0000000a
   10a38:	6f727245 	.word	0x6f727245
   10a3c:	202d2072 	.word	0x202d2072
   10a40:	666e6f63 	.word	0x666e6f63
   10a44:	72756769 	.word	0x72756769
   10a48:	20676e69 	.word	0x20676e69
   10a4c:	20434441 	.word	0x20434441
   10a50:	6c696166 	.word	0x6c696166
   10a54:	0a2e6465 	.word	0x0a2e6465
   10a58:	00000000 	.word	0x00000000
   10a5c:	6f727245 	.word	0x6f727245
   10a60:	202d2072 	.word	0x202d2072
   10a64:	666e6f63 	.word	0x666e6f63
   10a68:	72756769 	.word	0x72756769
   10a6c:	20676e69 	.word	0x20676e69
   10a70:	20434441 	.word	0x20434441
   10a74:	746f6c53 	.word	0x746f6c53
   10a78:	66203020 	.word	0x66203020
   10a7c:	656c6961 	.word	0x656c6961
   10a80:	000a2e64 	.word	0x000a2e64
   10a84:	6f727245 	.word	0x6f727245
   10a88:	202d2072 	.word	0x202d2072
   10a8c:	62616e65 	.word	0x62616e65
   10a90:	676e696c 	.word	0x676e696c
   10a94:	43444120 	.word	0x43444120
   10a98:	69616620 	.word	0x69616620
   10a9c:	2e64656c 	.word	0x2e64656c
   10aa0:	0000000a 	.word	0x0000000a
   10aa4:	6f727245 	.word	0x6f727245
   10aa8:	202d2072 	.word	0x202d2072
   10aac:	61736964 	.word	0x61736964
   10ab0:	20656c62 	.word	0x20656c62
   10ab4:	20434441 	.word	0x20434441
   10ab8:	6c696166 	.word	0x6c696166
   10abc:	0a2e6465 	.word	0x0a2e6465
   10ac0:	00000000 	.word	0x00000000
   10ac4:	6f727245 	.word	0x6f727245
   10ac8:	202d2072 	.word	0x202d2072
   10acc:	61736964 	.word	0x61736964
   10ad0:	6e696c62 	.word	0x6e696c62
   10ad4:	68742067 	.word	0x68742067
   10ad8:	44412065 	.word	0x44412065
   10adc:	6f702043 	.word	0x6f702043
   10ae0:	20726577 	.word	0x20726577
   10ae4:	616d6f64 	.word	0x616d6f64
   10ae8:	66206e69 	.word	0x66206e69
   10aec:	656c6961 	.word	0x656c6961
   10af0:	000a2e64 	.word	0x000a2e64
   10af4:	6f727245 	.word	0x6f727245
   10af8:	202d2072 	.word	0x202d2072
   10afc:	75746572 	.word	0x75746572
   10b00:	6f206e72 	.word	0x6f206e72
   10b04:	68742066 	.word	0x68742066
   10b08:	44412065 	.word	0x44412065
   10b0c:	6e692043 	.word	0x6e692043
   10b10:	6e617473 	.word	0x6e617473
   10b14:	66206563 	.word	0x66206563
   10b18:	656c6961 	.word	0x656c6961
   10b1c:	000a2e64 	.word	0x000a2e64
   10b20:	6f727245 	.word	0x6f727245
   10b24:	202d2072 	.word	0x202d2072
   10b28:	666e6f63 	.word	0x666e6f63
   10b2c:	72756769 	.word	0x72756769
   10b30:	20676e69 	.word	0x20676e69
   10b34:	20656874 	.word	0x20656874
   10b38:	74737973 	.word	0x74737973
   10b3c:	63206d65 	.word	0x63206d65
   10b40:	6b636f6c 	.word	0x6b636f6c
   10b44:	69616620 	.word	0x69616620
   10b48:	2e64656c 	.word	0x2e64656c
   10b4c:	0000000a 	.word	0x0000000a
   10b50:	6f727245 	.word	0x6f727245
   10b54:	202d2072 	.word	0x202d2072
   10b58:	666e6f63 	.word	0x666e6f63
   10b5c:	72756769 	.word	0x72756769
   10b60:	20676e69 	.word	0x20676e69
   10b64:	20656874 	.word	0x20656874
   10b68:	74737973 	.word	0x74737973
   10b6c:	63206d65 	.word	0x63206d65
   10b70:	65686361 	.word	0x65686361
   10b74:	69616620 	.word	0x69616620
   10b78:	2e64656c 	.word	0x2e64656c
   10b7c:	0000000a 	.word	0x0000000a
   10b80:	6f727245 	.word	0x6f727245
   10b84:	202d2072 	.word	0x202d2072
   10b88:	62616e65 	.word	0x62616e65
   10b8c:	676e696c 	.word	0x676e696c
   10b90:	65687420 	.word	0x65687420
   10b94:	73797320 	.word	0x73797320
   10b98:	206d6574 	.word	0x206d6574
   10b9c:	68636163 	.word	0x68636163
   10ba0:	61662065 	.word	0x61662065
   10ba4:	64656c69 	.word	0x64656c69
   10ba8:	00000a2e 	.word	0x00000a2e
   10bac:	6c6f7041 	.word	0x6c6f7041
   10bb0:	20336f6c 	.word	0x20336f6c
   10bb4:	7265706f 	.word	0x7265706f
   10bb8:	6e697461 	.word	0x6e697461
   10bbc:	6e692067 	.word	0x6e692067
   10bc0:	72754220 	.word	0x72754220
   10bc4:	4d207473 	.word	0x4d207473
   10bc8:	2065646f 	.word	0x2065646f
   10bcc:	4d363928 	.word	0x4d363928
   10bd0:	0d297a48 	.word	0x0d297a48
   10bd4:	00000a0a 	.word	0x00000a0a
   10bd8:	6f727245 	.word	0x6f727245
   10bdc:	202d2072 	.word	0x202d2072
   10be0:	67697274 	.word	0x67697274
   10be4:	69726567 	.word	0x69726567
   10be8:	7420676e 	.word	0x7420676e
   10bec:	41206568 	.word	0x41206568
   10bf0:	66204344 	.word	0x66204344
   10bf4:	656c6961 	.word	0x656c6961
   10bf8:	000a2e64 	.word	0x000a2e64
   10bfc:	6f727245 	.word	0x6f727245
   10c00:	65722072 	.word	0x65722072
   10c04:	6e696461 	.word	0x6e696461
   10c08:	44412067 	.word	0x44412067
   10c0c:	6e692043 	.word	0x6e692043
   10c10:	72726574 	.word	0x72726574
   10c14:	20747075 	.word	0x20747075
   10c18:	74617473 	.word	0x74617473
   10c1c:	000a7375 	.word	0x000a7375
   10c20:	6f727245 	.word	0x6f727245
   10c24:	6c632072 	.word	0x6c632072
   10c28:	69726165 	.word	0x69726165
   10c2c:	4120676e 	.word	0x4120676e
   10c30:	69204344 	.word	0x69204344
   10c34:	7265746e 	.word	0x7265746e
   10c38:	74707572 	.word	0x74707572
   10c3c:	61747320 	.word	0x61747320
   10c40:	0a737574 	.word	0x0a737574
   10c44:	00000000 	.word	0x00000000

00010c48 <g_AM_HAL_GPIO_DISABLE>:
   10c48:	00000003                                ....

00010c4c <g_AM_HAL_GPIO_OUTPUT>:
   10c4c:	00000403                                ....

00010c50 <g_AM_HAL_GPIO_TRISTATE>:
   10c50:	00000c03                                ....

00010c54 <g_ui8Inpen>:
   10c54:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   10c64:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   10c74:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   10c84:	00003130                                01..

00010c88 <g_ui8Bit76Capabilities>:
   10c88:	02800101 80010180 80800101 80808080     ................
   10c98:	80808080 80808008 01800180 80808080     ................
   10ca8:	80808080 01800402 01010401 80808080     ................
   10cb8:	00000101                                ....

00010cbc <g_ui8nCEpins>:
   10cbc:	02070707 00080802 01020202 01010101     ................
   10ccc:	01010101 01010101 01010101 01010101     ................
   10cdc:	01010101 08010101 01010008 01010101     ................
   10cec:	00000101                                ....

00010cf0 <g_ui8NCEtable>:
   10cf0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10d00:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10d10:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10d20:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10d30:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10d40:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10d50:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10d60:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10d70:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10d80:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10d90:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10da0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10db0:	32221202 43231303                       .."2..#C

00010db8 <g_SysRingBuffSetup>:
   10db8:	00000001 1000ce1c 0000fa00 00000002     ................
   10dc8:	1001c81c 0000fa00                       ........

00010dd0 <g_switch_button0>:
   10dd0:	00001003                                ....

00010dd4 <g_switch_button1>:
   10dd4:	00001003                                ....

00010dd8 <g_switch_button2>:
   10dd8:	00001003                                ....

00010ddc <g_AM_PIN_33_ADCSE5>:
   10ddc:	00000000                                ....

00010de0 <g_sBspUartConfig>:
   10de0:	0001c200 00000060 00000000 00000000     ....`...........
   10df0:	00000000 00000012 00000000 00000000     ................
	...

00010e08 <g_AM_BSP_GPIO_COM_UART_TX>:
   10e08:	00000000                                ....

00010e0c <g_AM_BSP_GPIO_COM_UART_RX>:
   10e0c:	00000000                                ....

00010e10 <am_hal_cachectrl_defaults>:
   10e10:	00000308                                ....

00010e14 <g_am_hal_mcuctrl_flash_size>:
   10e14:	00004000 00008000 00010000 00020000     .@..............
   10e24:	00040000 00080000 00100000 00200000     .............. .
	...

00010e54 <g_am_hal_mcuctrl_sram_size>:
   10e54:	00004000 00008000 00010000 00020000     .@..............
   10e64:	00040000 00080000 00100000 00060000     ................
	...

00010e94 <am_hal_pwrctrl_peripheral_control>:
	...
   10ea0:	00000001 00000004 00000004 00000002     ................
   10eb0:	00000008 00000008 00000004 00000008     ................
   10ec0:	00000008 00000008 00000008 00000008     ................
   10ed0:	00000010 00000010 00000010 00000020     ............ ...
   10ee0:	00000010 00000010 00000040 00000010     ........@.......
   10ef0:	00000010 00000080 00000004 00000004     ................
   10f00:	00000100 00000004 00000004 00000200     ................
   10f10:	00000020 00000020 00000400 00000004      ... ...........
   10f20:	00000004 00000800 00000040 00000040     ........@...@...
   10f30:	00001000 00000080 00000080 00002000     ............. ..
   10f40:	00000100 00000100                       ........
