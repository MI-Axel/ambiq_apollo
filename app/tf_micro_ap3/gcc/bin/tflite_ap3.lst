
bin/tflite_ap3.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 6d c3 00 00 65 c3 00 00 d5 c3 00 00     ....m...e.......
    c010:	d5 c3 00 00 d5 c3 00 00 d5 c3 00 00 00 00 00 00     ................
	...
    c02c:	69 c3 00 00 69 c3 00 00 00 00 00 00 69 c3 00 00     i...i.......i...
    c03c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c04c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c05c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c06c:	69 c3 00 00 69 c3 00 00 d9 d4 00 00 91 d4 00 00     i...i...........
    c07c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c08c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c09c:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c0ac:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
    c0bc:	69 c3 00 00                                         i...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <_ZN6tflite18MicroErrorReporterD0Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() {}
    c1a0:	4770      	bx	lr
    c1a2:	bf00      	nop

0000c1a4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
  }
  DebugLog("\n");
}
}  // namespace

int MicroErrorReporter::Report(const char* format, va_list args) {
    c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (*current != 0) {
    c1a8:	780b      	ldrb	r3, [r1, #0]
int MicroErrorReporter::Report(const char* format, va_list args) {
    c1aa:	b092      	sub	sp, #72	; 0x48
  while (*current != 0) {
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d03d      	beq.n	c22c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x88>
  int output_cache_index = 0;
    c1b0:	2400      	movs	r4, #0
    c1b2:	460d      	mov	r5, r1
    c1b4:	4616      	mov	r6, r2
      output_cache[output_cache_index] = 0;
    c1b6:	4627      	mov	r7, r4
    c1b8:	e011      	b.n	c1de <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x3a>
      output_cache[output_cache_index] = *current;
    c1ba:	aa12      	add	r2, sp, #72	; 0x48
    c1bc:	4422      	add	r2, r4
    c1be:	3401      	adds	r4, #1
    c1c0:	f802 3c44 	strb.w	r3, [r2, #-68]
    if (output_cache_index >= output_cache_size) {
    c1c4:	2c3f      	cmp	r4, #63	; 0x3f
    c1c6:	dd07      	ble.n	c1d8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x34>
      output_cache[output_cache_index] = 0;
    c1c8:	ab12      	add	r3, sp, #72	; 0x48
    c1ca:	441c      	add	r4, r3
      DebugLog(output_cache);
    c1cc:	a801      	add	r0, sp, #4
      output_cache[output_cache_index] = 0;
    c1ce:	f804 7c44 	strb.w	r7, [r4, #-68]
      DebugLog(output_cache);
    c1d2:	f000 f851 	bl	c278 <DebugLog>
      output_cache_index = 0;
    c1d6:	2400      	movs	r4, #0
  while (*current != 0) {
    c1d8:	786b      	ldrb	r3, [r5, #1]
    current += 1;
    c1da:	4645      	mov	r5, r8
  while (*current != 0) {
    c1dc:	b1f3      	cbz	r3, c21c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x78>
    if (*current == '%') {
    c1de:	2b25      	cmp	r3, #37	; 0x25
    c1e0:	f105 0801 	add.w	r8, r5, #1
    c1e4:	d1e9      	bne.n	c1ba <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x16>
      const char next = *(current + 1);
    c1e6:	786b      	ldrb	r3, [r5, #1]
      if ((next == 'd') || (next == 's')) {
    c1e8:	2b64      	cmp	r3, #100	; 0x64
    c1ea:	d026      	beq.n	c23a <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x96>
    c1ec:	2b73      	cmp	r3, #115	; 0x73
    c1ee:	d1e9      	bne.n	c1c4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x20>
    c1f0:	f105 0902 	add.w	r9, r5, #2
        if (output_cache_index > 0) {
    c1f4:	b134      	cbz	r4, c204 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x60>
          output_cache[output_cache_index] = 0;
    c1f6:	ab12      	add	r3, sp, #72	; 0x48
    c1f8:	441c      	add	r4, r3
          DebugLog(output_cache);
    c1fa:	a801      	add	r0, sp, #4
          output_cache[output_cache_index] = 0;
    c1fc:	f804 7c44 	strb.w	r7, [r4, #-68]
          DebugLog(output_cache);
    c200:	f000 f83a 	bl	c278 <DebugLog>
          DebugLog(va_arg(args, char*));
    c204:	4645      	mov	r5, r8
    c206:	6830      	ldr	r0, [r6, #0]
    c208:	f000 f836 	bl	c278 <DebugLog>
  while (*current != 0) {
    c20c:	786b      	ldrb	r3, [r5, #1]
          DebugLog(va_arg(args, char*));
    c20e:	1d34      	adds	r4, r6, #4
    c210:	46c8      	mov	r8, r9
    c212:	4626      	mov	r6, r4
    current += 1;
    c214:	4645      	mov	r5, r8
          DebugLog(va_arg(args, char*));
    c216:	2400      	movs	r4, #0
  while (*current != 0) {
    c218:	2b00      	cmp	r3, #0
    c21a:	d1e0      	bne.n	c1de <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x3a>
  if (output_cache_index > 0) {
    c21c:	b134      	cbz	r4, c22c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x88>
    output_cache[output_cache_index] = 0;
    c21e:	aa12      	add	r2, sp, #72	; 0x48
    c220:	4414      	add	r4, r2
    DebugLog(output_cache);
    c222:	a801      	add	r0, sp, #4
    output_cache[output_cache_index] = 0;
    c224:	f804 3c44 	strb.w	r3, [r4, #-68]
    DebugLog(output_cache);
    c228:	f000 f826 	bl	c278 <DebugLog>
  DebugLog("\n");
    c22c:	4811      	ldr	r0, [pc, #68]	; (c274 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xd0>)
    c22e:	f000 f823 	bl	c278 <DebugLog>
  DebugLogPrintf(format, args);
  return 0;
}
    c232:	2000      	movs	r0, #0
    c234:	b012      	add	sp, #72	; 0x48
    c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c23a:	f105 0902 	add.w	r9, r5, #2
        if (output_cache_index > 0) {
    c23e:	b944      	cbnz	r4, c252 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0xae>
          DebugLogInt32(va_arg(args, int));
    c240:	6830      	ldr	r0, [r6, #0]
    c242:	f106 0a04 	add.w	sl, r6, #4
    c246:	4645      	mov	r5, r8
    c248:	f000 f81c 	bl	c284 <DebugLogInt32>
    c24c:	46c8      	mov	r8, r9
    c24e:	4656      	mov	r6, sl
    c250:	e7c2      	b.n	c1d8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x34>
          output_cache[output_cache_index] = 0;
    c252:	ab12      	add	r3, sp, #72	; 0x48
    c254:	441c      	add	r4, r3
          DebugLog(output_cache);
    c256:	a801      	add	r0, sp, #4
          output_cache[output_cache_index] = 0;
    c258:	f804 7c44 	strb.w	r7, [r4, #-68]
          DebugLog(output_cache);
    c25c:	f000 f80c 	bl	c278 <DebugLog>
          DebugLogInt32(va_arg(args, int));
    c260:	1d34      	adds	r4, r6, #4
    c262:	6830      	ldr	r0, [r6, #0]
        current += 1;
    c264:	4645      	mov	r5, r8
          DebugLogInt32(va_arg(args, int));
    c266:	4626      	mov	r6, r4
    c268:	f000 f80c 	bl	c284 <DebugLogInt32>
    c26c:	46c8      	mov	r8, r9
          output_cache_index = 0;
    c26e:	2400      	movs	r4, #0
    c270:	e7b2      	b.n	c1d8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x34>
    c272:	bf00      	nop
    c274:	0000ee40 	.word	0x0000ee40

0000c278 <DebugLog>:
// These are headers from Ambiq's Apollo3 SDK.
#include "am_bsp.h"         // NOLINT
#include "am_util.h"        // NOLINT

extern "C" void DebugLog(const char* s) {
  am_util_stdio_printf("%s", s);
    c278:	4601      	mov	r1, r0
    c27a:	4801      	ldr	r0, [pc, #4]	; (c280 <DebugLog+0x8>)
    c27c:	f000 bff4 	b.w	d268 <am_util_stdio_printf>
    c280:	0000ed08 	.word	0x0000ed08

0000c284 <DebugLogInt32>:
  return current;
}

}  // namespace

extern "C" void DebugLogInt32(int32_t i) {
    c284:	b570      	push	{r4, r5, r6, lr}
  if (i < 0) {
    c286:	1e03      	subs	r3, r0, #0
extern "C" void DebugLogInt32(int32_t i) {
    c288:	b08c      	sub	sp, #48	; 0x30
  if (i < 0) {
    c28a:	db22      	blt.n	c2d2 <DebugLogInt32+0x4e>
    c28c:	4668      	mov	r0, sp
    c28e:	4604      	mov	r4, r0
    *buffer++ = '-';
    c290:	4621      	mov	r1, r4
    int32_t digit = i % base;
    c292:	4e14      	ldr	r6, [pc, #80]	; (c2e4 <DebugLogInt32+0x60>)
    c294:	e000      	b.n	c298 <DebugLogInt32+0x14>
    *buffer++ = character;
    c296:	4629      	mov	r1, r5
    int32_t digit = i % base;
    c298:	fba6 5203 	umull	r5, r2, r6, r3
    c29c:	08d2      	lsrs	r2, r2, #3
    c29e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    c2a2:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
    *buffer++ = character;
    c2a6:	460d      	mov	r5, r1
      character = '0' + digit;
    c2a8:	3330      	adds	r3, #48	; 0x30
    *buffer++ = character;
    c2aa:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
    c2ae:	4613      	mov	r3, r2
    c2b0:	2a00      	cmp	r2, #0
    c2b2:	d1f0      	bne.n	c296 <DebugLogInt32+0x12>
  while (p1 < p2) {
    c2b4:	42a1      	cmp	r1, r4
  *buffer = 0;
    c2b6:	704a      	strb	r2, [r1, #1]
  while (p1 < p2) {
    c2b8:	d907      	bls.n	c2ca <DebugLogInt32+0x46>
    char tmp = *p1;
    c2ba:	7823      	ldrb	r3, [r4, #0]
    *p1++ = *p2;
    c2bc:	780a      	ldrb	r2, [r1, #0]
    c2be:	f804 2b01 	strb.w	r2, [r4], #1
    *p2-- = tmp;
    c2c2:	f801 3901 	strb.w	r3, [r1], #-1
  while (p1 < p2) {
    c2c6:	428c      	cmp	r4, r1
    c2c8:	d3f7      	bcc.n	c2ba <DebugLogInt32+0x36>
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(i, number_string);
  DebugLog(number_string);
    c2ca:	f7ff ffd5 	bl	c278 <DebugLog>
}
    c2ce:	b00c      	add	sp, #48	; 0x30
    c2d0:	bd70      	pop	{r4, r5, r6, pc}
    *buffer++ = '-';
    c2d2:	222d      	movs	r2, #45	; 0x2d
    u = -u;
    c2d4:	425b      	negs	r3, r3
    *buffer++ = '-';
    c2d6:	f88d 2000 	strb.w	r2, [sp]
    c2da:	f10d 0401 	add.w	r4, sp, #1
    c2de:	4668      	mov	r0, sp
    c2e0:	e7d6      	b.n	c290 <DebugLogInt32+0xc>
    c2e2:	bf00      	nop
    c2e4:	cccccccd 	.word	0xcccccccd

0000c2e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    c2e8:	b40e      	push	{r1, r2, r3}
    c2ea:	b500      	push	{lr}
    c2ec:	b082      	sub	sp, #8
    c2ee:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
    c2f0:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
    c2f2:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(args, format);
    c2f6:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    c2f8:	689b      	ldr	r3, [r3, #8]
    c2fa:	4798      	blx	r3
  va_end(args);
  return code;
}
    c2fc:	b002      	add	sp, #8
    c2fe:	f85d eb04 	ldr.w	lr, [sp], #4
    c302:	b003      	add	sp, #12
    c304:	4770      	bx	lr
    c306:	bf00      	nop

0000c308 <main>:
limitations under the License.
==============================================================================*/
#include "am_board_setup.h"
#include "tensorflow/lite/experimental/micro/micro_error_reporter.h"

int main(int argc, char** argv) {
    c308:	b510      	push	{r4, lr}
    c30a:	b082      	sub	sp, #8
    
    am_board_init();
    
    tflite::MicroErrorReporter micro_error_reporter;
    c30c:	ac02      	add	r4, sp, #8
    am_board_init();
    c30e:	f001 f813 	bl	d338 <am_board_init>
    tflite::MicroErrorReporter micro_error_reporter;
    c312:	4b0d      	ldr	r3, [pc, #52]	; (c348 <main+0x40>)
    c314:	f844 3d04 	str.w	r3, [r4, #-4]!
    tflite::ErrorReporter* error_reporter = &micro_error_reporter;

    am_util_stdio_printf("Finish instance init...\r\n");
    c318:	480c      	ldr	r0, [pc, #48]	; (c34c <main+0x44>)
    c31a:	f000 ffa5 	bl	d268 <am_util_stdio_printf>
    error_reporter->Report("Number: %d", 42);
    c31e:	222a      	movs	r2, #42	; 0x2a
    c320:	4620      	mov	r0, r4
    c322:	490b      	ldr	r1, [pc, #44]	; (c350 <main+0x48>)
    c324:	f7ff ffe0 	bl	c2e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    error_reporter->Report("Badly-formed format string %");
    c328:	4620      	mov	r0, r4
    c32a:	490a      	ldr	r1, [pc, #40]	; (c354 <main+0x4c>)
    c32c:	f7ff ffdc 	bl	c2e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    error_reporter->Report("Another % badly-formed %% format string");
    c330:	4620      	mov	r0, r4
    c332:	4909      	ldr	r1, [pc, #36]	; (c358 <main+0x50>)
    c334:	f7ff ffd8 	bl	c2e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    error_reporter->Report("~~~%s~~~", "ALL TESTS PASSED");
    c338:	4620      	mov	r0, r4
    c33a:	4a08      	ldr	r2, [pc, #32]	; (c35c <main+0x54>)
    c33c:	4908      	ldr	r1, [pc, #32]	; (c360 <main+0x58>)
    c33e:	f7ff ffd3 	bl	c2e8 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    c342:	2000      	movs	r0, #0
    c344:	b002      	add	sp, #8
    c346:	bd10      	pop	{r4, pc}
    c348:	0000ecfc 	.word	0x0000ecfc
    c34c:	0000ed0c 	.word	0x0000ed0c
    c350:	0000ed28 	.word	0x0000ed28
    c354:	0000ed34 	.word	0x0000ed34
    c358:	0000ed54 	.word	0x0000ed54
    c35c:	0000ed7c 	.word	0x0000ed7c
    c360:	0000ed90 	.word	0x0000ed90

0000c364 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    c364:	e7fe      	b.n	c364 <NMI_Handler>
    c366:	bf00      	nop

0000c368 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c368:	e7fe      	b.n	c368 <DebugMon_Handler>
    c36a:	bf00      	nop

0000c36c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    c36c:	4811      	ldr	r0, [pc, #68]	; (c3b4 <zero_loop+0x12>)
    c36e:	4912      	ldr	r1, [pc, #72]	; (c3b8 <zero_loop+0x16>)
    c370:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    c372:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    c376:	4811      	ldr	r0, [pc, #68]	; (c3bc <zero_loop+0x1a>)
    c378:	6801      	ldr	r1, [r0, #0]
    c37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c37e:	6001      	str	r1, [r0, #0]
    c380:	f3bf 8f4f 	dsb	sy
    c384:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    c388:	480d      	ldr	r0, [pc, #52]	; (c3c0 <zero_loop+0x1e>)
    c38a:	490e      	ldr	r1, [pc, #56]	; (c3c4 <zero_loop+0x22>)
    c38c:	4a0e      	ldr	r2, [pc, #56]	; (c3c8 <zero_loop+0x26>)

0000c38e <copy_loop>:
    c38e:	f850 3b04 	ldr.w	r3, [r0], #4
    c392:	f841 3b04 	str.w	r3, [r1], #4
    c396:	4291      	cmp	r1, r2
    c398:	dbf9      	blt.n	c38e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    c39a:	480c      	ldr	r0, [pc, #48]	; (c3cc <zero_loop+0x2a>)
    c39c:	490c      	ldr	r1, [pc, #48]	; (c3d0 <zero_loop+0x2e>)
    c39e:	f04f 0200 	mov.w	r2, #0

0000c3a2 <zero_loop>:
    c3a2:	4288      	cmp	r0, r1
    c3a4:	bfb8      	it	lt
    c3a6:	f840 2b04 	strlt.w	r2, [r0], #4
    c3aa:	dbfa      	blt.n	c3a2 <zero_loop>
    main();
    c3ac:	f7ff ffac 	bl	c308 <main>
    __asm("    bkpt     ");
    c3b0:	be00      	bkpt	0x0000
    c3b2:	0000      	.short	0x0000
    c3b4:	e000ed08 	.word	0xe000ed08
    c3b8:	0000c000 	.word	0x0000c000
    c3bc:	e000ed88 	.word	0xe000ed88
    c3c0:	0000f148 	.word	0x0000f148
    c3c4:	1000c000 	.word	0x1000c000
    c3c8:	1000c050 	.word	0x1000c050
    c3cc:	1000c050 	.word	0x1000c050
    c3d0:	1000c244 	.word	0x1000c244

0000c3d4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c3d4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c3d6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c3da:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c3dc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c3e0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c3e4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c3e8:	f000 f806 	bl	c3f8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c3ec:	bd01      	pop	{r0, pc}
    c3ee:	bf00      	nop

0000c3f0 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c3f0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c3f2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c3f4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c3f6:	4770      	bx	lr

0000c3f8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c3f8:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c3fa:	2300      	movs	r3, #0
{
    c3fc:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c3fe:	e9cd 3300 	strd	r3, r3, [sp]
    c402:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c406:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c40a:	4a27      	ldr	r2, [pc, #156]	; (c4a8 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c40c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c40e:	6813      	ldr	r3, [r2, #0]
    c410:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c412:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c414:	b2db      	uxtb	r3, r3
    c416:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c41c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c420:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c424:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c426:	0c1b      	lsrs	r3, r3, #16
    c428:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c42c:	6913      	ldr	r3, [r2, #16]
    c42e:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c430:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c434:	0792      	lsls	r2, r2, #30
{
    c436:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c438:	d430      	bmi.n	c49c <am_util_faultisr_collect_data+0xa4>
    c43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c43e:	4619      	mov	r1, r3
    c440:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c442:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c444:	f7ff ffd4 	bl	c3f0 <getStackedReg>
    c448:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c44a:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c44c:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c44e:	f7ff ffcf 	bl	c3f0 <getStackedReg>
    c452:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c454:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c456:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c458:	f7ff ffca 	bl	c3f0 <getStackedReg>
    c45c:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c45e:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c460:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c462:	f7ff ffc5 	bl	c3f0 <getStackedReg>
    c466:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c468:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c46a:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c46c:	f7ff ffc0 	bl	c3f0 <getStackedReg>
    c470:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c472:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c474:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c476:	f7ff ffbb 	bl	c3f0 <getStackedReg>
    c47a:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c47c:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c47e:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c480:	f7ff ffb6 	bl	c3f0 <getStackedReg>
    c484:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c486:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c488:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c48a:	f7ff ffb1 	bl	c3f0 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c48e:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c490:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c492:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c494:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c496:	f001 fe51 	bl	e13c <am_hal_mcuctrl_info_get>
    c49a:	e7fe      	b.n	c49a <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c49c:	4601      	mov	r1, r0
    c49e:	2006      	movs	r0, #6
    c4a0:	f7ff ffa6 	bl	c3f0 <getStackedReg>
    c4a4:	4602      	mov	r2, r0
    c4a6:	e7ca      	b.n	c43e <am_util_faultisr_collect_data+0x46>
    c4a8:	e000ed28 	.word	0xe000ed28

0000c4ac <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4b0:	b097      	sub	sp, #92	; 0x5c
    c4b2:	4682      	mov	sl, r0
    c4b4:	468b      	mov	fp, r1
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c4b6:	2300      	movs	r3, #0
{
    c4b8:	920d      	str	r2, [sp, #52]	; 0x34
    c4ba:	469c      	mov	ip, r3
    c4bc:	e9cd ab00 	strd	sl, fp, [sp]
    c4c0:	4606      	mov	r6, r0
    c4c2:	460f      	mov	r7, r1
    c4c4:	e00b      	b.n	c4de <uint64_to_str+0x32>
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c4c6:	f80b 2c01 	strb.w	r2, [fp, #-1]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4ca:	4619      	mov	r1, r3
    c4cc:	2200      	movs	r2, #0
    c4ce:	e9cd 1200 	strd	r1, r2, [sp]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c4d2:	2b00      	cmp	r3, #0
    c4d4:	f000 80a5 	beq.w	c622 <uint64_to_str+0x176>
    c4d8:	e9dd 6700 	ldrd	r6, r7, [sp]
{
    c4dc:	46f4      	mov	ip, lr
        q64 += (q64 >> 4);
    c4de:	2300      	movs	r3, #0
    c4e0:	2400      	movs	r4, #0
    c4e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
        q64 += (q64 >> 8);
    c4e6:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 16);
    c4ea:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 32);
    c4ee:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 >>= 3;
    c4f2:	4698      	mov	r8, r3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4f4:	08b3      	lsrs	r3, r6, #2
    c4f6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
        q32 += (q32 >> 4);
    c4fa:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c4fe:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q64 >>= 3;
    c502:	46a1      	mov	r9, r4
        q32 += (q32 >> 16);
    c504:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c508:	08da      	lsrs	r2, r3, #3
        return q64 + ((r64 + 6) >> 4);
    c50a:	4644      	mov	r4, r8
    c50c:	464d      	mov	r5, r9
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c50e:	4633      	mov	r3, r6
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c510:	08b0      	lsrs	r0, r6, #2
        return q64 + ((r64 + 6) >> 4);
    c512:	e9cd 4508 	strd	r4, r5, [sp, #32]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c516:	3306      	adds	r3, #6
        r32 = ui32Val - q32*10;
    c518:	eb02 0482 	add.w	r4, r2, r2, lsl #2
    c51c:	f10c 0e01 	add.w	lr, ip, #1
        tbuf[ix++] = uMod + '0';
    c520:	ae0f      	add	r6, sp, #60	; 0x3c
    c522:	4476      	add	r6, lr
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c524:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c528:	ea40 7087 	orr.w	r0, r0, r7, lsl #30
    if ( ui64Val >> 32 )
    c52c:	463c      	mov	r4, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c52e:	08b9      	lsrs	r1, r7, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c530:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        tbuf[ix++] = uMod + '0';
    c534:	46b3      	mov	fp, r6
    c536:	4637      	mov	r7, r6
    c538:	9e00      	ldr	r6, [sp, #0]
        uMod = ui64Val - (u64Tmp * 10);
    c53a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c53e:	2500      	movs	r5, #0
        uMod = ui64Val - (u64Tmp * 10);
    c540:	eba6 0242 	sub.w	r2, r6, r2, lsl #1
    if ( ui64Val >> 32 )
    c544:	ea54 0a05 	orrs.w	sl, r4, r5
        tbuf[ix++] = uMod + '0';
    c548:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c54c:	d0bb      	beq.n	c4c6 <uint64_to_str+0x1a>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c54e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c552:	085b      	lsrs	r3, r3, #1
    c554:	ea4f 0232 	mov.w	r2, r2, rrx
    c558:	eb12 0a00 	adds.w	sl, r2, r0
    c55c:	eb43 0b01 	adc.w	fp, r3, r1
        q64 += (q64 >> 4);
    c560:	ea4f 131a 	mov.w	r3, sl, lsr #4
    c564:	ea43 730b 	orr.w	r3, r3, fp, lsl #28
    c568:	9302      	str	r3, [sp, #8]
    c56a:	ea4f 131b 	mov.w	r3, fp, lsr #4
    c56e:	9303      	str	r3, [sp, #12]
    c570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c574:	eb12 020a 	adds.w	r2, r2, sl
    c578:	eb43 030b 	adc.w	r3, r3, fp
        q64 += (q64 >> 8);
    c57c:	0a11      	lsrs	r1, r2, #8
    c57e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c582:	9104      	str	r1, [sp, #16]
    c584:	0a19      	lsrs	r1, r3, #8
    c586:	9105      	str	r1, [sp, #20]
    c588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c58c:	1880      	adds	r0, r0, r2
    c58e:	4159      	adcs	r1, r3
    c590:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c592:	0c01      	lsrs	r1, r0, #16
    c594:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c598:	9106      	str	r1, [sp, #24]
    c59a:	0c19      	lsrs	r1, r3, #16
    c59c:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 8);
    c59e:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c5a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c5a4:	1880      	adds	r0, r0, r2
    c5a6:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c5a8:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    c5ac:	4602      	mov	r2, r0
    c5ae:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c5b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c5b4:	1880      	adds	r0, r0, r2
    c5b6:	4159      	adcs	r1, r3
        q64 >>= 3;
    c5b8:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c5bc:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c5c0:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    c5c4:	e9dd ab00 	ldrd	sl, fp, [sp]
        r64 = ui64Val - q64*10;
    c5c8:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c5cc:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c5d0:	eb12 0008 	adds.w	r0, r2, r8
    c5d4:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c5d8:	eb43 0109 	adc.w	r1, r3, r9
        return q64 + ((r64 + 6) >> 4);
    c5dc:	f11a 0a06 	adds.w	sl, sl, #6
    c5e0:	f14b 0b00 	adc.w	fp, fp, #0
        r64 = ui64Val - q64*10;
    c5e4:	1802      	adds	r2, r0, r0
    c5e6:	eb41 0301 	adc.w	r3, r1, r1
        return q64 + ((r64 + 6) >> 4);
    c5ea:	ebba 0002 	subs.w	r0, sl, r2
    c5ee:	eb6b 0103 	sbc.w	r1, fp, r3
    c5f2:	0903      	lsrs	r3, r0, #4
    c5f4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    c5f8:	9308      	str	r3, [sp, #32]
    c5fa:	090b      	lsrs	r3, r1, #4
    c5fc:	9309      	str	r3, [sp, #36]	; 0x24
    c5fe:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
    c602:	eb1a 0a08 	adds.w	sl, sl, r8
    c606:	eb4b 0b09 	adc.w	fp, fp, r9
    c60a:	4653      	mov	r3, sl
    c60c:	465c      	mov	r4, fp
    c60e:	e9cd 3400 	strd	r3, r4, [sp]
        uMod = ui64Val - (u64Tmp * 10);
    c612:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    c616:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c61a:	3630      	adds	r6, #48	; 0x30
    c61c:	f807 6c01 	strb.w	r6, [r7, #-1]
    c620:	e75a      	b.n	c4d8 <uint64_to_str+0x2c>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c624:	4660      	mov	r0, ip
    c626:	b16a      	cbz	r2, c644 <uint64_to_str+0x198>
    c628:	465b      	mov	r3, fp
    c62a:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c62c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c630:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c634:	a90f      	add	r1, sp, #60	; 0x3c
    c636:	4299      	cmp	r1, r3
    c638:	d1f8      	bne.n	c62c <uint64_to_str+0x180>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c63c:	4403      	add	r3, r0
    c63e:	461a      	mov	r2, r3
    c640:	2300      	movs	r3, #0
    c642:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c644:	4670      	mov	r0, lr
    c646:	b017      	add	sp, #92	; 0x5c
    c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c64c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c64c:	4b01      	ldr	r3, [pc, #4]	; (c654 <am_util_stdio_printf_init+0x8>)
    c64e:	6018      	str	r0, [r3, #0]
}
    c650:	4770      	bx	lr
    c652:	bf00      	nop
    c654:	1000c174 	.word	0x1000c174

0000c658 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c65c:	b09b      	sub	sp, #108	; 0x6c
    c65e:	4682      	mov	sl, r0
    c660:	4689      	mov	r9, r1
    c662:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c664:	f04f 0b00 	mov.w	fp, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c668:	f899 3000 	ldrb.w	r3, [r9]
    c66c:	b1bb      	cbz	r3, c69e <am_util_stdio_vsprintf+0x46>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c66e:	2b25      	cmp	r3, #37	; 0x25
    c670:	f109 0501 	add.w	r5, r9, #1
    c674:	d01c      	beq.n	c6b0 <am_util_stdio_vsprintf+0x58>
    c676:	f10b 0201 	add.w	r2, fp, #1
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c67a:	f1ba 0f00 	cmp.w	sl, #0
    c67e:	f000 8091 	beq.w	c7a4 <am_util_stdio_vsprintf+0x14c>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c682:	2b0a      	cmp	r3, #10
    c684:	f10a 0101 	add.w	r1, sl, #1
    c688:	f000 808f 	beq.w	c7aa <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c68c:	f88a 3000 	strb.w	r3, [sl]
    c690:	4693      	mov	fp, r2
    c692:	468a      	mov	sl, r1
            }

            ++pcFmt;
    c694:	46a9      	mov	r9, r5
    while ( *pcFmt != 0x0 )
    c696:	f899 3000 	ldrb.w	r3, [r9]
    c69a:	2b00      	cmp	r3, #0
    c69c:	d1e7      	bne.n	c66e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c69e:	f1ba 0f00 	cmp.w	sl, #0
    c6a2:	d001      	beq.n	c6a8 <am_util_stdio_vsprintf+0x50>
    {
        *pcBuf = 0x0;
    c6a4:	f88a 3000 	strb.w	r3, [sl]
    }

    return (ui32CharCnt);
}
    c6a8:	4658      	mov	r0, fp
    c6aa:	b01b      	add	sp, #108	; 0x6c
    c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c6b0:	f899 3001 	ldrb.w	r3, [r9, #1]
    c6b4:	2b30      	cmp	r3, #48	; 0x30
    c6b6:	bf03      	ittte	eq
    c6b8:	f899 3002 	ldrbeq.w	r3, [r9, #2]
            ++pcFmt;
    c6bc:	f109 0502 	addeq.w	r5, r9, #2
            ui8PadChar = '0';
    c6c0:	f04f 0830 	moveq.w	r8, #48	; 0x30
        ui8PadChar = ' ';
    c6c4:	f04f 0820 	movne.w	r8, #32
    if ( *pcStr == '-')
    c6c8:	2b2d      	cmp	r3, #45	; 0x2d
    c6ca:	d07e      	beq.n	c7ca <am_util_stdio_vsprintf+0x172>
    uint32_t ui32Val = 0, uCnt = 0;
    c6cc:	2100      	movs	r1, #0
    bool bNeg = false;
    c6ce:	460e      	mov	r6, r1
    if ( *pcStr == '-')
    c6d0:	462a      	mov	r2, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c6d6:	2809      	cmp	r0, #9
    c6d8:	f04f 0400 	mov.w	r4, #0
    c6dc:	d80f      	bhi.n	c6fe <am_util_stdio_vsprintf+0xa6>
        ui32Val *= 10;
    c6de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        ui32Val += (*pcStr - '0');
    c6e2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c6ea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c6ee:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c6f0:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
        ++uCnt;
    c6f4:	f101 0101 	add.w	r1, r1, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6f8:	d9f1      	bls.n	c6de <am_util_stdio_vsprintf+0x86>
    c6fa:	5c6b      	ldrb	r3, [r5, r1]
    c6fc:	186a      	adds	r2, r5, r1
    return bNeg ? -ui32Val : ui32Val;
    c6fe:	b106      	cbz	r6, c702 <am_util_stdio_vsprintf+0xaa>
    c700:	4264      	negs	r4, r4
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c702:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c704:	4621      	mov	r1, r4
    c706:	f102 0901 	add.w	r9, r2, #1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c70a:	f000 8167 	beq.w	c9dc <am_util_stdio_vsprintf+0x384>
    c70e:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
    c712:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
        if (*pcFmt == '.')
    c716:	2b2e      	cmp	r3, #46	; 0x2e
    c718:	910e      	str	r1, [sp, #56]	; 0x38
    c71a:	f000 813b 	beq.w	c994 <am_util_stdio_vsprintf+0x33c>
        iPrecision = 6;             // printf() default precision for %f is 6
    c71e:	2506      	movs	r5, #6
        if ( *pcFmt == 'l' )
    c720:	2b6c      	cmp	r3, #108	; 0x6c
    c722:	d157      	bne.n	c7d4 <am_util_stdio_vsprintf+0x17c>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c724:	7853      	ldrb	r3, [r2, #1]
    c726:	2b6c      	cmp	r3, #108	; 0x6c
    c728:	f000 808e 	beq.w	c848 <am_util_stdio_vsprintf+0x1f0>
        switch ( *pcFmt )
    c72c:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c730:	f109 0901 	add.w	r9, r9, #1
    c734:	2a32      	cmp	r2, #50	; 0x32
    c736:	f200 8123 	bhi.w	c980 <am_util_stdio_vsprintf+0x328>
    c73a:	e8df f012 	tbh	[pc, r2, lsl #1]
    c73e:	00c2      	.short	0x00c2
    c740:	01210121 	.word	0x01210121
    c744:	01210121 	.word	0x01210121
    c748:	01210121 	.word	0x01210121
    c74c:	01210121 	.word	0x01210121
    c750:	01210121 	.word	0x01210121
    c754:	01210121 	.word	0x01210121
    c758:	01210121 	.word	0x01210121
    c75c:	01210121 	.word	0x01210121
    c760:	01990121 	.word	0x01990121
    c764:	01210121 	.word	0x01210121
    c768:	01210121 	.word	0x01210121
    c76c:	01210121 	.word	0x01210121
    c770:	01210121 	.word	0x01210121
    c774:	01210121 	.word	0x01210121
    c778:	01b60113 	.word	0x01b60113
    c77c:	00c20121 	.word	0x00c20121
    c780:	01210121 	.word	0x01210121
    c784:	012101b6 	.word	0x012101b6
    c788:	01210121 	.word	0x01210121
    c78c:	01210121 	.word	0x01210121
    c790:	01210121 	.word	0x01210121
    c794:	01210121 	.word	0x01210121
    c798:	0121014e 	.word	0x0121014e
    c79c:	01210235 	.word	0x01210235
    c7a0:	024e0121 	.word	0x024e0121
    c7a4:	4693      	mov	fp, r2
            ++pcFmt;
    c7a6:	46a9      	mov	r9, r5
    c7a8:	e775      	b.n	c696 <am_util_stdio_vsprintf+0x3e>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c7aa:	48a6      	ldr	r0, [pc, #664]	; (ca44 <am_util_stdio_vsprintf+0x3ec>)
    c7ac:	7800      	ldrb	r0, [r0, #0]
    c7ae:	2800      	cmp	r0, #0
    c7b0:	f43f af6c 	beq.w	c68c <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c7b4:	4650      	mov	r0, sl
    c7b6:	230d      	movs	r3, #13
    c7b8:	f800 3b02 	strb.w	r3, [r0], #2
    c7bc:	468a      	mov	sl, r1
    c7be:	f899 3000 	ldrb.w	r3, [r9]
    c7c2:	f10b 0202 	add.w	r2, fp, #2
    c7c6:	4601      	mov	r1, r0
    c7c8:	e760      	b.n	c68c <am_util_stdio_vsprintf+0x34>
        uCnt++;
    c7ca:	2101      	movs	r1, #1
        bNeg = true;
    c7cc:	460e      	mov	r6, r1
        pcStr++;
    c7ce:	186a      	adds	r2, r5, r1
    c7d0:	786b      	ldrb	r3, [r5, #1]
    c7d2:	e77e      	b.n	c6d2 <am_util_stdio_vsprintf+0x7a>
        switch ( *pcFmt )
    c7d4:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    c7d8:	2a32      	cmp	r2, #50	; 0x32
    c7da:	f200 80d1 	bhi.w	c980 <am_util_stdio_vsprintf+0x328>
    c7de:	e8df f012 	tbh	[pc, r2, lsl #1]
    c7e2:	0070      	.short	0x0070
    c7e4:	00cf00cf 	.word	0x00cf00cf
    c7e8:	00cf00cf 	.word	0x00cf00cf
    c7ec:	00cf00cf 	.word	0x00cf00cf
    c7f0:	00cf00cf 	.word	0x00cf00cf
    c7f4:	00cf00cf 	.word	0x00cf00cf
    c7f8:	00cf00cf 	.word	0x00cf00cf
    c7fc:	00cf00cf 	.word	0x00cf00cf
    c800:	00cf00cf 	.word	0x00cf00cf
    c804:	014700cf 	.word	0x014700cf
    c808:	00cf00cf 	.word	0x00cf00cf
    c80c:	00cf00cf 	.word	0x00cf00cf
    c810:	00cf00cf 	.word	0x00cf00cf
    c814:	00cf00cf 	.word	0x00cf00cf
    c818:	00cf00cf 	.word	0x00cf00cf
    c81c:	016400c1 	.word	0x016400c1
    c820:	007000cf 	.word	0x007000cf
    c824:	00cf00cf 	.word	0x00cf00cf
    c828:	00cf0164 	.word	0x00cf0164
    c82c:	00cf00cf 	.word	0x00cf00cf
    c830:	00cf00cf 	.word	0x00cf00cf
    c834:	00cf00cf 	.word	0x00cf00cf
    c838:	00cf00cf 	.word	0x00cf00cf
    c83c:	00cf00fc 	.word	0x00cf00fc
    c840:	00cf01e3 	.word	0x00cf01e3
    c844:	01fa00cf 	.word	0x01fa00cf
    c848:	7893      	ldrb	r3, [r2, #2]
    c84a:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
    c84e:	f102 0903 	add.w	r9, r2, #3
    c852:	2932      	cmp	r1, #50	; 0x32
    c854:	f200 8094 	bhi.w	c980 <am_util_stdio_vsprintf+0x328>
    c858:	e8df f011 	tbh	[pc, r1, lsl #1]
    c85c:	00920033 	.word	0x00920033
    c860:	00920092 	.word	0x00920092
    c864:	00920092 	.word	0x00920092
    c868:	00920092 	.word	0x00920092
    c86c:	00920092 	.word	0x00920092
    c870:	00920092 	.word	0x00920092
    c874:	00920092 	.word	0x00920092
    c878:	00920092 	.word	0x00920092
    c87c:	00920092 	.word	0x00920092
    c880:	00920414 	.word	0x00920414
    c884:	00920092 	.word	0x00920092
    c888:	00920092 	.word	0x00920092
    c88c:	00920092 	.word	0x00920092
    c890:	00920092 	.word	0x00920092
    c894:	00840092 	.word	0x00840092
    c898:	00920222 	.word	0x00920222
    c89c:	00920033 	.word	0x00920033
    c8a0:	02220092 	.word	0x02220092
    c8a4:	00920092 	.word	0x00920092
    c8a8:	00920092 	.word	0x00920092
    c8ac:	00920092 	.word	0x00920092
    c8b0:	00920092 	.word	0x00920092
    c8b4:	00bf0092 	.word	0x00bf0092
    c8b8:	02160092 	.word	0x02160092
    c8bc:	00920092 	.word	0x00920092
    c8c0:	0412      	.short	0x0412
                if ( pcBuf )
    c8c2:	f1ba 0f00 	cmp.w	sl, #0
    c8c6:	f43f aecf 	beq.w	c668 <am_util_stdio_vsprintf+0x10>
                    float fValue = va_arg(pArgs, double);
    c8ca:	9b01      	ldr	r3, [sp, #4]
    c8cc:	3307      	adds	r3, #7
    c8ce:	f023 0307 	bic.w	r3, r3, #7
    c8d2:	e9d3 0100 	ldrd	r0, r1, [r3]
    c8d6:	3308      	adds	r3, #8
    c8d8:	9301      	str	r3, [sp, #4]
    c8da:	f7ff fc11 	bl	c100 <__aeabi_d2f>
    c8de:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c8e2:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c8e6:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c8ec:	f8ca 3000 	str.w	r3, [sl]
    if (fValue == 0.0f)
    c8f0:	f000 843f 	beq.w	d172 <am_util_stdio_vsprintf+0xb1a>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c8f4:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c8f8:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    c8fc:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c8fe:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c900:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c908:	f300 844b 	bgt.w	d1a2 <am_util_stdio_vsprintf+0xb4a>
    else if (iExp2 < -23)
    c90c:	f112 0f17 	cmn.w	r2, #23
    c910:	f2c0 847a 	blt.w	d208 <am_util_stdio_vsprintf+0xbb0>
    else if (iExp2 >= 23)
    c914:	2a16      	cmp	r2, #22
    c916:	f10a 0701 	add.w	r7, sl, #1
    c91a:	f340 836f 	ble.w	cffc <am_util_stdio_vsprintf+0x9a4>
        i32IntPart = i32Significand << (iExp2 - 23);
    c91e:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c920:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c922:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c926:	f2c0 8454 	blt.w	d1d2 <am_util_stdio_vsprintf+0xb7a>
    c92a:	4656      	mov	r6, sl
    i32FracPart = 0;
    c92c:	2400      	movs	r4, #0
    if (i32IntPart == 0)
    c92e:	2800      	cmp	r0, #0
    c930:	f040 843d 	bne.w	d1ae <am_util_stdio_vsprintf+0xb56>
    c934:	1c7a      	adds	r2, r7, #1
        *pcBuf++ = '0';
    c936:	f04f 0330 	mov.w	r3, #48	; 0x30
    c93a:	7033      	strb	r3, [r6, #0]
    *pcBuf++ = '.';
    c93c:	232e      	movs	r3, #46	; 0x2e
    c93e:	703b      	strb	r3, [r7, #0]
    if (i32FracPart == 0)
    c940:	2c00      	cmp	r4, #0
    c942:	f040 83d9 	bne.w	d0f8 <am_util_stdio_vsprintf+0xaa0>
        *pcBuf++ = '0';
    c946:	1cba      	adds	r2, r7, #2
    c948:	f04f 0330 	mov.w	r3, #48	; 0x30
    c94c:	707b      	strb	r3, [r7, #1]
    c94e:	eba2 010a 	sub.w	r1, r2, sl
    *pcBuf = 0x00;
    c952:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c954:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    c956:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    c958:	f2c0 841f 	blt.w	d19a <am_util_stdio_vsprintf+0xb42>
    c95c:	460b      	mov	r3, r1
                    ui32CharCnt += iVal;
    c95e:	449b      	add	fp, r3
                    pcBuf += iVal;
    c960:	449a      	add	sl, r3
    c962:	e681      	b.n	c668 <am_util_stdio_vsprintf+0x10>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c964:	9a01      	ldr	r2, [sp, #4]
    c966:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c968:	f1ba 0f00 	cmp.w	sl, #0
    c96c:	d004      	beq.n	c978 <am_util_stdio_vsprintf+0x320>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c96e:	6812      	ldr	r2, [r2, #0]
    c970:	f88a 2000 	strb.w	r2, [sl]
                    *pcBuf++ = ui8CharSpecifier;
    c974:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c978:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c97c:	9301      	str	r3, [sp, #4]
                break;
    c97e:	e673      	b.n	c668 <am_util_stdio_vsprintf+0x10>
                if ( pcBuf )
    c980:	f1ba 0f00 	cmp.w	sl, #0
    c984:	d003      	beq.n	c98e <am_util_stdio_vsprintf+0x336>
                    *pcBuf++ = *pcFmt;
    c986:	f88a 3000 	strb.w	r3, [sl]
    c98a:	f10a 0a01 	add.w	sl, sl, #1
                ++ui32CharCnt;
    c98e:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c992:	e669      	b.n	c668 <am_util_stdio_vsprintf+0x10>
    if ( *pcStr == '-')
    c994:	7851      	ldrb	r1, [r2, #1]
    c996:	292d      	cmp	r1, #45	; 0x2d
    c998:	f000 821a 	beq.w	cdd0 <am_util_stdio_vsprintf+0x778>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c99c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c9a0:	2b09      	cmp	r3, #9
    c9a2:	f200 8305 	bhi.w	cfb0 <am_util_stdio_vsprintf+0x958>
    bool bNeg = false;
    c9a6:	2600      	movs	r6, #0
    uint32_t ui32Val = 0, uCnt = 0;
    c9a8:	4632      	mov	r2, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9aa:	4648      	mov	r0, r9
        uCnt++;
    c9ac:	2300      	movs	r3, #0
        ui32Val *= 10;
    c9ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    c9b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9b6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    c9ba:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
    c9be:	2d09      	cmp	r5, #9
        ui32Val += (*pcStr - '0');
    c9c0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        ++uCnt;
    c9c4:	f102 0201 	add.w	r2, r2, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9c8:	d9f1      	bls.n	c9ae <am_util_stdio_vsprintf+0x356>
    return bNeg ? -ui32Val : ui32Val;
    c9ca:	b106      	cbz	r6, c9ce <am_util_stdio_vsprintf+0x376>
    c9cc:	425b      	negs	r3, r3
            pcFmt += ui32NumChars;
    c9ce:	444a      	add	r2, r9
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    c9d0:	461d      	mov	r5, r3
    c9d2:	f102 0901 	add.w	r9, r2, #1
    c9d6:	7813      	ldrb	r3, [r2, #0]
    c9d8:	e6a2      	b.n	c720 <am_util_stdio_vsprintf+0xc8>
        switch ( *pcFmt )
    c9da:	990e      	ldr	r1, [sp, #56]	; 0x38
                pcStr = va_arg(pArgs, char *);
    c9dc:	9b01      	ldr	r3, [sp, #4]
    c9de:	681f      	ldr	r7, [r3, #0]
    c9e0:	1d1a      	adds	r2, r3, #4
    if ( !pcBuf )
    c9e2:	b38f      	cbz	r7, ca48 <am_util_stdio_vsprintf+0x3f0>
    while ( *pcBuf++ )
    c9e4:	7838      	ldrb	r0, [r7, #0]
    c9e6:	1c7b      	adds	r3, r7, #1
    c9e8:	461c      	mov	r4, r3
    c9ea:	2800      	cmp	r0, #0
    c9ec:	f000 835d 	beq.w	d0aa <am_util_stdio_vsprintf+0xa52>
    c9f0:	1be6      	subs	r6, r4, r7
    c9f2:	f814 5b01 	ldrb.w	r5, [r4], #1
    c9f6:	2d00      	cmp	r5, #0
    c9f8:	d1fa      	bne.n	c9f0 <am_util_stdio_vsprintf+0x398>
                if ( iWidth > 0 )
    c9fa:	2900      	cmp	r1, #0
    c9fc:	dd02      	ble.n	ca04 <am_util_stdio_vsprintf+0x3ac>
                    if ( ui32strlen < iWidth )
    c9fe:	428e      	cmp	r6, r1
    ca00:	f0c0 8357 	bcc.w	d0b2 <am_util_stdio_vsprintf+0xa5a>
    ca04:	465c      	mov	r4, fp
    ca06:	1be4      	subs	r4, r4, r7
    ca08:	4657      	mov	r7, sl
                        *pcBuf++ = *pcStr;
    ca0a:	4655      	mov	r5, sl
    ca0c:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    ca10:	b15f      	cbz	r7, ca2a <am_util_stdio_vsprintf+0x3d2>
                        *pcBuf++ = *pcStr;
    ca12:	7028      	strb	r0, [r5, #0]
                while (*pcStr != 0x0)
    ca14:	f813 0b01 	ldrb.w	r0, [r3], #1
                        *pcBuf++ = *pcStr;
    ca18:	3701      	adds	r7, #1
                while (*pcStr != 0x0)
    ca1a:	2800      	cmp	r0, #0
    ca1c:	f000 81c5 	beq.w	cdaa <am_util_stdio_vsprintf+0x752>
                        *pcBuf++ = *pcStr;
    ca20:	463d      	mov	r5, r7
    ca22:	eb04 0b03 	add.w	fp, r4, r3
                    if ( pcBuf )
    ca26:	2f00      	cmp	r7, #0
    ca28:	d1f3      	bne.n	ca12 <am_util_stdio_vsprintf+0x3ba>
    ca2a:	46ba      	mov	sl, r7
    ca2c:	eb04 0b03 	add.w	fp, r4, r3
                while (*pcStr != 0x0)
    ca30:	f813 0b01 	ldrb.w	r0, [r3], #1
    ca34:	2800      	cmp	r0, #0
    ca36:	d1f9      	bne.n	ca2c <am_util_stdio_vsprintf+0x3d4>
                if ( iWidth )
    ca38:	2900      	cmp	r1, #0
    ca3a:	f040 81ba 	bne.w	cdb2 <am_util_stdio_vsprintf+0x75a>
                pcStr = va_arg(pArgs, char *);
    ca3e:	9201      	str	r2, [sp, #4]
    ca40:	e612      	b.n	c668 <am_util_stdio_vsprintf+0x10>
    ca42:	bf00      	nop
    ca44:	1000c050 	.word	0x1000c050
                if ( iWidth > 0 )
    ca48:	2900      	cmp	r1, #0
    ca4a:	f340 838b 	ble.w	d164 <am_util_stdio_vsprintf+0xb0c>
        return ui32RetVal;
    ca4e:	463e      	mov	r6, r7
    if ( i32NumChars <= 0 )
    ca50:	2900      	cmp	r1, #0
    ca52:	f300 8303 	bgt.w	d05c <am_util_stdio_vsprintf+0xa04>
    ca56:	465c      	mov	r4, fp
    ca58:	2300      	movs	r3, #0
                        pcBuf += pcBuf ? iWidth : 0;
    ca5a:	f1ba 0f00 	cmp.w	sl, #0
    ca5e:	d000      	beq.n	ca62 <am_util_stdio_vsprintf+0x40a>
    ca60:	449a      	add	sl, r3
                while (*pcStr != 0x0)
    ca62:	7838      	ldrb	r0, [r7, #0]
    ca64:	2800      	cmp	r0, #0
    ca66:	f000 83f0 	beq.w	d24a <am_util_stdio_vsprintf+0xbf2>
                        iWidth = 0;
    ca6a:	2100      	movs	r1, #0
    ca6c:	1c7b      	adds	r3, r7, #1
    ca6e:	e7ca      	b.n	ca06 <am_util_stdio_vsprintf+0x3ae>
        bLower = bLongLong = false;
    ca70:	2500      	movs	r5, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca72:	9b01      	ldr	r3, [sp, #4]
    ca74:	681a      	ldr	r2, [r3, #0]
                                      va_arg(pArgs, uint32_t);
    ca76:	3304      	adds	r3, #4
    ca78:	9301      	str	r3, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca7a:	2300      	movs	r3, #0
                if ( iWidth )
    ca7c:	2c00      	cmp	r4, #0
    ca7e:	f040 80bd 	bne.w	cbfc <am_util_stdio_vsprintf+0x5a4>
    if ( ui64Val == 0 )
    ca82:	ea52 0103 	orrs.w	r1, r2, r3
    ca86:	f040 80dd 	bne.w	cc44 <am_util_stdio_vsprintf+0x5ec>
    if (pcBuf)
    ca8a:	f1ba 0f00 	cmp.w	sl, #0
    ca8e:	f000 828d 	beq.w	cfac <am_util_stdio_vsprintf+0x954>
            *pcBuf++ = tbuf[ix];
    ca92:	f10a 0501 	add.w	r5, sl, #1
    ca96:	f04f 0330 	mov.w	r3, #48	; 0x30
    ca9a:	f88a 3000 	strb.w	r3, [sl]
    ca9e:	2001      	movs	r0, #1
    caa0:	46aa      	mov	sl, r5
        *pcBuf = 0;
    caa2:	2300      	movs	r3, #0
    caa4:	702b      	strb	r3, [r5, #0]
                ui32CharCnt += iVal;
    caa6:	4483      	add	fp, r0
                break;
    caa8:	e5de      	b.n	c668 <am_util_stdio_vsprintf+0x10>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    caaa:	9b01      	ldr	r3, [sp, #4]
    caac:	6818      	ldr	r0, [r3, #0]
                                     va_arg(pArgs, int32_t);
    caae:	3304      	adds	r3, #4
    cab0:	9301      	str	r3, [sp, #4]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cab2:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    cab4:	2800      	cmp	r0, #0
    cab6:	f171 0300 	sbcs.w	r3, r1, #0
    caba:	f2c0 8194 	blt.w	cde6 <am_util_stdio_vsprintf+0x78e>
                    ui64Val = i64Val;
    cabe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cac2:	2c00      	cmp	r4, #0
    cac4:	d065      	beq.n	cb92 <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    cac6:	4603      	mov	r3, r0
    cac8:	430b      	orrs	r3, r1
    return ndigits_in_u64((uint64_t) i64Val);
    caca:	460c      	mov	r4, r1
    cacc:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    cace:	bf0c      	ite	eq
    cad0:	f04f 0e01 	moveq.w	lr, #1
    cad4:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cad8:	4323      	orrs	r3, r4
    cada:	f000 8397 	beq.w	d20c <am_util_stdio_vsprintf+0xbb4>
                    bNeg = false;
    cade:	2300      	movs	r3, #0
    cae0:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
    cae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cae8:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
    caec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 = (ui64Val>>1) + (ui64Val>>2);
    caf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        q64 += (q64 >> 4);
    caf4:	2300      	movs	r3, #0
    caf6:	2400      	movs	r4, #0
    caf8:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    cafc:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    cb00:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    cb04:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb08:	0843      	lsrs	r3, r0, #1
    cb0a:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q32 += (q32 >> 4);
    cb0e:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    cb12:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    cb16:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    cb1a:	08db      	lsrs	r3, r3, #3
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb1c:	4602      	mov	r2, r0
        r32 = ui32Val - q32*10;
    cb1e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb22:	0886      	lsrs	r6, r0, #2
    if ( ui64Val >> 32 )
    cb24:	460c      	mov	r4, r1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb26:	3206      	adds	r2, #6
    if ( ui64Val >> 32 )
    cb28:	2500      	movs	r5, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb2a:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
    cb2e:	088f      	lsrs	r7, r1, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb30:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
    if ( ui64Val >> 32 )
    cb34:	ea54 0105 	orrs.w	r1, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb38:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    cb3c:	f040 80ba 	bne.w	ccb4 <am_util_stdio_vsprintf+0x65c>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb40:	4619      	mov	r1, r3
    cb42:	2200      	movs	r2, #0
        ++iNDigits;
    cb44:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb48:	e9cd 1202 	strd	r1, r2, [sp, #8]
    while ( ui64Val )
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d1cf      	bne.n	caf0 <am_util_stdio_vsprintf+0x498>
                    iWidth -= ndigits_in_i64(ui64Val);
    cb50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb52:	eba3 0e0e 	sub.w	lr, r3, lr
                    if ( bNeg )
    cb56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb58:	e9dd 8b10 	ldrd	r8, fp, [sp, #64]	; 0x40
    cb5c:	e9dd a912 	ldrd	sl, r9, [sp, #72]	; 0x48
    cb60:	b13b      	cbz	r3, cb72 <am_util_stdio_vsprintf+0x51a>
                        if ( ui8PadChar == '0' )
    cb62:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cb66:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
    cb6a:	f000 82a4 	beq.w	d0b6 <am_util_stdio_vsprintf+0xa5e>
    cb6e:	2301      	movs	r3, #1
    cb70:	930f      	str	r3, [sp, #60]	; 0x3c
    if ( i32NumChars <= 0 )
    cb72:	f1be 0f00 	cmp.w	lr, #0
    cb76:	f300 821e 	bgt.w	cfb6 <am_util_stdio_vsprintf+0x95e>
    cb7a:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cb7c:	f1ba 0f00 	cmp.w	sl, #0
    cb80:	f000 82fd 	beq.w	d17e <am_util_stdio_vsprintf+0xb26>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cb84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    pcBuf += pcBuf ? iWidth : 0;
    cb86:	4492      	add	sl, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cb88:	b11b      	cbz	r3, cb92 <am_util_stdio_vsprintf+0x53a>
    cb8a:	f1b8 0f20 	cmp.w	r8, #32
    cb8e:	f000 8132 	beq.w	cdf6 <am_util_stdio_vsprintf+0x79e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cb92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cb96:	4652      	mov	r2, sl
    cb98:	f7ff fc88 	bl	c4ac <uint64_to_str>
                if ( pcBuf )
    cb9c:	f1ba 0f00 	cmp.w	sl, #0
    cba0:	d081      	beq.n	caa6 <am_util_stdio_vsprintf+0x44e>
                    pcBuf += iVal;
    cba2:	4482      	add	sl, r0
                ui32CharCnt += iVal;
    cba4:	4483      	add	fp, r0
    cba6:	e55f      	b.n	c668 <am_util_stdio_vsprintf+0x10>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cba8:	9a01      	ldr	r2, [sp, #4]
    cbaa:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    cbac:	3204      	adds	r2, #4
    cbae:	9201      	str	r2, [sp, #4]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbb0:	4619      	mov	r1, r3
    cbb2:	2200      	movs	r2, #0
    cbb4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
                if ( iWidth )
    cbb8:	2c00      	cmp	r4, #0
    cbba:	f040 8127 	bne.w	ce0c <am_util_stdio_vsprintf+0x7b4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    cbc2:	4652      	mov	r2, sl
    cbc4:	f7ff fc72 	bl	c4ac <uint64_to_str>
                if ( pcBuf )
    cbc8:	f1ba 0f00 	cmp.w	sl, #0
    cbcc:	d1e9      	bne.n	cba2 <am_util_stdio_vsprintf+0x54a>
    cbce:	f04f 0a00 	mov.w	sl, #0
                ui32CharCnt += iVal;
    cbd2:	4483      	add	fp, r0
    cbd4:	e548      	b.n	c668 <am_util_stdio_vsprintf+0x10>
                bLower = true;
    cbd6:	2501      	movs	r5, #1
    cbd8:	e74b      	b.n	ca72 <am_util_stdio_vsprintf+0x41a>
        bLower = bLongLong = false;
    cbda:	2300      	movs	r3, #0
                bLower = true;
    cbdc:	2501      	movs	r5, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbde:	2b00      	cmp	r3, #0
    cbe0:	f43f af47 	beq.w	ca72 <am_util_stdio_vsprintf+0x41a>
    cbe4:	9b01      	ldr	r3, [sp, #4]
    cbe6:	3307      	adds	r3, #7
    cbe8:	f023 0307 	bic.w	r3, r3, #7
    cbec:	f103 0208 	add.w	r2, r3, #8
    cbf0:	9201      	str	r2, [sp, #4]
    cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
                if ( iWidth )
    cbf6:	2c00      	cmp	r4, #0
    cbf8:	f43f af43 	beq.w	ca82 <am_util_stdio_vsprintf+0x42a>
    int iDigits = ui64Val ? 0 : 1;
    cbfc:	ea52 0103 	orrs.w	r1, r2, r3
    cc00:	bf0c      	ite	eq
    cc02:	2401      	moveq	r4, #1
    cc04:	2400      	movne	r4, #0
    while ( ui64Val )
    cc06:	ea52 0103 	orrs.w	r1, r2, r3
    cc0a:	d00c      	beq.n	cc26 <am_util_stdio_vsprintf+0x5ce>
    cc0c:	4610      	mov	r0, r2
    cc0e:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cc10:	0906      	lsrs	r6, r0, #4
    cc12:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    cc16:	090f      	lsrs	r7, r1, #4
    cc18:	4630      	mov	r0, r6
    cc1a:	4639      	mov	r1, r7
    while ( ui64Val )
    cc1c:	ea50 0601 	orrs.w	r6, r0, r1
        ++iDigits;
    cc20:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cc24:	d1f4      	bne.n	cc10 <am_util_stdio_vsprintf+0x5b8>
                    iWidth -= ndigits_in_hex(ui64Val);
    cc26:	990e      	ldr	r1, [sp, #56]	; 0x38
    cc28:	1b09      	subs	r1, r1, r4
    if ( i32NumChars <= 0 )
    cc2a:	2900      	cmp	r1, #0
    cc2c:	f300 81a1 	bgt.w	cf72 <am_util_stdio_vsprintf+0x91a>
    cc30:	2000      	movs	r0, #0
                    pcBuf += pcBuf ? iWidth : 0;
    cc32:	f1ba 0f00 	cmp.w	sl, #0
    cc36:	f000 81b5 	beq.w	cfa4 <am_util_stdio_vsprintf+0x94c>
    if ( ui64Val == 0 )
    cc3a:	ea52 0103 	orrs.w	r1, r2, r3
    cc3e:	4482      	add	sl, r0
    cc40:	f43f af23 	beq.w	ca8a <am_util_stdio_vsprintf+0x432>
    cc44:	2d00      	cmp	r5, #0
    cc46:	bf14      	ite	ne
    cc48:	2527      	movne	r5, #39	; 0x27
    cc4a:	2507      	moveq	r5, #7
    if ( i32NumChars <= 0 )
    cc4c:	af15      	add	r7, sp, #84	; 0x54
    int iNumDig, ix = 0;
    cc4e:	2600      	movs	r6, #0
    cc50:	f8cd 9008 	str.w	r9, [sp, #8]
        ui64Val >>= 4;
    cc54:	0914      	lsrs	r4, r2, #4
        cCh = ui64Val & 0xf;
    cc56:	f002 020f 	and.w	r2, r2, #15
        ui64Val >>= 4;
    cc5a:	ea4f 1813 	mov.w	r8, r3, lsr #4
            cCh += bLower ? 0x27 : 0x7;
    cc5e:	18a8      	adds	r0, r5, r2
        if ( cCh > 9 )
    cc60:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    cc62:	46c6      	mov	lr, r8
    cc64:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    cc68:	f100 0030 	add.w	r0, r0, #48	; 0x30
    cc6c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    cc70:	f106 0901 	add.w	r9, r6, #1
        if ( cCh > 9 )
    cc74:	d978      	bls.n	cd68 <am_util_stdio_vsprintf+0x710>
        ui64Val >>= 4;
    cc76:	4622      	mov	r2, r4
    cc78:	4643      	mov	r3, r8
    while ( ui64Val )
    cc7a:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cc7e:	f807 0b01 	strb.w	r0, [r7], #1
    while ( ui64Val )
    cc82:	d07a      	beq.n	cd7a <am_util_stdio_vsprintf+0x722>
    if ( i32NumChars <= 0 )
    cc84:	464e      	mov	r6, r9
    cc86:	e7e5      	b.n	cc54 <am_util_stdio_vsprintf+0x5fc>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc88:	9b01      	ldr	r3, [sp, #4]
    cc8a:	3307      	adds	r3, #7
    cc8c:	f023 0307 	bic.w	r3, r3, #7
    cc90:	f103 0208 	add.w	r2, r3, #8
    cc94:	9201      	str	r2, [sp, #4]
    cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    cc9e:	e78b      	b.n	cbb8 <am_util_stdio_vsprintf+0x560>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cca0:	9b01      	ldr	r3, [sp, #4]
    cca2:	3307      	adds	r3, #7
    cca4:	f023 0307 	bic.w	r3, r3, #7
    cca8:	f103 0208 	add.w	r2, r3, #8
    ccac:	9201      	str	r2, [sp, #4]
    ccae:	e9d3 0100 	ldrd	r0, r1, [r3]
    ccb2:	e6ff      	b.n	cab4 <am_util_stdio_vsprintf+0x45c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ccb8:	085b      	lsrs	r3, r3, #1
    ccba:	ea4f 0232 	mov.w	r2, r2, rrx
    ccbe:	1990      	adds	r0, r2, r6
    ccc0:	eb43 0107 	adc.w	r1, r3, r7
        q64 += (q64 >> 4);
    ccc4:	0903      	lsrs	r3, r0, #4
    ccc6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    ccca:	9308      	str	r3, [sp, #32]
    cccc:	090b      	lsrs	r3, r1, #4
    ccce:	9309      	str	r3, [sp, #36]	; 0x24
    ccd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ccd4:	1812      	adds	r2, r2, r0
    ccd6:	414b      	adcs	r3, r1
        q64 += (q64 >> 8);
    ccd8:	0a11      	lsrs	r1, r2, #8
    ccda:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    ccde:	9106      	str	r1, [sp, #24]
    cce0:	0a19      	lsrs	r1, r3, #8
    cce2:	9107      	str	r1, [sp, #28]
    cce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cce8:	1880      	adds	r0, r0, r2
    ccea:	4159      	adcs	r1, r3
    ccec:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    ccee:	0c01      	lsrs	r1, r0, #16
    ccf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ccf4:	9104      	str	r1, [sp, #16]
    ccf6:	0c19      	lsrs	r1, r3, #16
    ccf8:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    ccfa:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    ccfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cd00:	1880      	adds	r0, r0, r2
    cd02:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cd04:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cd08:	4602      	mov	r2, r0
    cd0a:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cd0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cd10:	1880      	adds	r0, r0, r2
    cd12:	4159      	adcs	r1, r3
        q64 >>= 3;
    cd14:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cd18:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cd1c:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cd20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cd24:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cd28:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cd2c:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cd30:	eb12 0408 	adds.w	r4, r2, r8
    cd34:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cd38:	3006      	adds	r0, #6
    cd3a:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cd3e:	1922      	adds	r2, r4, r4
    cd40:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cd44:	1a80      	subs	r0, r0, r2
    cd46:	eb61 0103 	sbc.w	r1, r1, r3
    cd4a:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cd4e:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cd52:	eb1a 0308 	adds.w	r3, sl, r8
    cd56:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cd5a:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cd5e:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cd62:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cd66:	e6c3      	b.n	caf0 <am_util_stdio_vsprintf+0x498>
        ui64Val >>= 4;
    cd68:	4622      	mov	r2, r4
    cd6a:	4643      	mov	r3, r8
    while ( ui64Val )
    cd6c:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cd70:	f106 0901 	add.w	r9, r6, #1
    cd74:	f807 cb01 	strb.w	ip, [r7], #1
    while ( ui64Val )
    cd78:	d184      	bne.n	cc84 <am_util_stdio_vsprintf+0x62c>
    cd7a:	464d      	mov	r5, r9
    cd7c:	4628      	mov	r0, r5
    cd7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    if (pcBuf)
    cd82:	f1ba 0f00 	cmp.w	sl, #0
    cd86:	f43f af22 	beq.w	cbce <am_util_stdio_vsprintf+0x576>
    cd8a:	ab15      	add	r3, sp, #84	; 0x54
    cd8c:	eb0a 0405 	add.w	r4, sl, r5
    cd90:	442b      	add	r3, r5
    cd92:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
            *pcBuf++ = tbuf[ix];
    cd96:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cd9a:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cd9e:	a915      	add	r1, sp, #84	; 0x54
    cda0:	4299      	cmp	r1, r3
    cda2:	d1f8      	bne.n	cd96 <am_util_stdio_vsprintf+0x73e>
    cda4:	4455      	add	r5, sl
    cda6:	46a2      	mov	sl, r4
    cda8:	e67b      	b.n	caa2 <am_util_stdio_vsprintf+0x44a>
    cdaa:	46ba      	mov	sl, r7
                if ( iWidth )
    cdac:	2900      	cmp	r1, #0
    cdae:	f43f ae46 	beq.w	ca3e <am_util_stdio_vsprintf+0x3e6>
                    iWidth = -iWidth;
    cdb2:	4249      	negs	r1, r1
                    if ( ui32strlen < iWidth )
    cdb4:	42b1      	cmp	r1, r6
    cdb6:	f67f ae42 	bls.w	ca3e <am_util_stdio_vsprintf+0x3e6>
                        iWidth -= ui32strlen;
    cdba:	1b89      	subs	r1, r1, r6
    if ( i32NumChars <= 0 )
    cdbc:	2900      	cmp	r1, #0
    cdbe:	f300 8163 	bgt.w	d088 <am_util_stdio_vsprintf+0xa30>
    cdc2:	2100      	movs	r1, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cdc4:	f1ba 0f00 	cmp.w	sl, #0
    cdc8:	f43f ae39 	beq.w	ca3e <am_util_stdio_vsprintf+0x3e6>
    cdcc:	448a      	add	sl, r1
    cdce:	e636      	b.n	ca3e <am_util_stdio_vsprintf+0x3e6>
    cdd0:	7891      	ldrb	r1, [r2, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdd2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cdd6:	2b09      	cmp	r3, #9
        pcStr++;
    cdd8:	f102 0002 	add.w	r0, r2, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cddc:	f200 8239 	bhi.w	d252 <am_util_stdio_vsprintf+0xbfa>
        bNeg = true;
    cde0:	2601      	movs	r6, #1
        uCnt++;
    cde2:	4632      	mov	r2, r6
    cde4:	e5e2      	b.n	c9ac <am_util_stdio_vsprintf+0x354>
                    ui64Val = -i64Val;          // Get absolute value
    cde6:	4240      	negs	r0, r0
    cde8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                if ( iWidth )
    cdf0:	2c00      	cmp	r4, #0
    cdf2:	f040 80fa 	bne.w	cfea <am_util_stdio_vsprintf+0x992>
                        if ( pcBuf )
    cdf6:	f1ba 0f00 	cmp.w	sl, #0
    cdfa:	d004      	beq.n	ce06 <am_util_stdio_vsprintf+0x7ae>
                            *pcBuf++ = '-';
    cdfc:	232d      	movs	r3, #45	; 0x2d
    cdfe:	f88a 3000 	strb.w	r3, [sl]
    ce02:	f10a 0a01 	add.w	sl, sl, #1
                        ++ui32CharCnt;
    ce06:	f10b 0b01 	add.w	fp, fp, #1
    ce0a:	e6c2      	b.n	cb92 <am_util_stdio_vsprintf+0x53a>
    int iNDigits = ui64Val ? 0 : 1;
    ce0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ce10:	4603      	mov	r3, r0
    ce12:	430b      	orrs	r3, r1
    while ( ui64Val )
    ce14:	460c      	mov	r4, r1
    ce16:	4603      	mov	r3, r0
    int iNDigits = ui64Val ? 0 : 1;
    ce18:	bf0c      	ite	eq
    ce1a:	f04f 0e01 	moveq.w	lr, #1
    ce1e:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    ce22:	4323      	orrs	r3, r4
    ce24:	d03c      	beq.n	cea0 <am_util_stdio_vsprintf+0x848>
    ce26:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ce2a:	e9cd ba10 	strd	fp, sl, [sp, #64]	; 0x40
    ce2e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    ce32:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce36:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
        q64 += (q64 >> 4);
    ce3a:	2300      	movs	r3, #0
    ce3c:	2400      	movs	r4, #0
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce3e:	08a8      	lsrs	r0, r5, #2
        q64 += (q64 >> 4);
    ce40:	e9cd 3408 	strd	r3, r4, [sp, #32]
        q64 += (q64 >> 8);
    ce44:	e9cd 3406 	strd	r3, r4, [sp, #24]
        q64 += (q64 >> 16);
    ce48:	e9cd 3404 	strd	r3, r4, [sp, #16]
        q64 += (q64 >> 32);
    ce4c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce50:	ea40 7086 	orr.w	r0, r0, r6, lsl #30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ce54:	462c      	mov	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce56:	08b1      	lsrs	r1, r6, #2
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ce58:	086e      	lsrs	r6, r5, #1
    ce5a:	eb06 0694 	add.w	r6, r6, r4, lsr #2
        q32 += (q32 >> 4);
    ce5e:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    if ( ui64Val >> 32 )
    ce62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        q32 += (q32 >> 8);
    ce66:	eb06 2616 	add.w	r6, r6, r6, lsr #8
        q32 += (q32 >> 16);
    ce6a:	eb06 4616 	add.w	r6, r6, r6, lsr #16
        q32 >>= 3;
    ce6e:	08f6      	lsrs	r6, r6, #3
        r32 = ui32Val - q32*10;
    ce70:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
    if ( ui64Val >> 32 )
    ce74:	461c      	mov	r4, r3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce76:	1d97      	adds	r7, r2, #6
    if ( ui64Val >> 32 )
    ce78:	2500      	movs	r5, #0
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce7a:	eba7 074c 	sub.w	r7, r7, ip, lsl #1
    if ( ui64Val >> 32 )
    ce7e:	ea54 0305 	orrs.w	r3, r4, r5
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce82:	eb06 1617 	add.w	r6, r6, r7, lsr #4
    if ( ui64Val >> 32 )
    ce86:	d118      	bne.n	ceba <am_util_stdio_vsprintf+0x862>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce88:	4633      	mov	r3, r6
    ce8a:	2400      	movs	r4, #0
        ++iNDigits;
    ce8c:	f10e 0e01 	add.w	lr, lr, #1
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce90:	e9cd 3402 	strd	r3, r4, [sp, #8]
    while ( ui64Val )
    ce94:	2e00      	cmp	r6, #0
    ce96:	d1ce      	bne.n	ce36 <am_util_stdio_vsprintf+0x7de>
    ce98:	e9dd 8b0f 	ldrd	r8, fp, [sp, #60]	; 0x3c
    ce9c:	e9dd a911 	ldrd	sl, r9, [sp, #68]	; 0x44
                    iWidth -= ndigits_in_u64(ui64Val);
    cea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cea2:	eba3 030e 	sub.w	r3, r3, lr
    if ( i32NumChars <= 0 )
    cea6:	2b00      	cmp	r3, #0
    cea8:	f300 80c7 	bgt.w	d03a <am_util_stdio_vsprintf+0x9e2>
    ceac:	2200      	movs	r2, #0
                    pcBuf += pcBuf ? iWidth : 0;
    ceae:	f1ba 0f00 	cmp.w	sl, #0
    ceb2:	f000 8188 	beq.w	d1c6 <am_util_stdio_vsprintf+0xb6e>
    ceb6:	4492      	add	sl, r2
    ceb8:	e681      	b.n	cbbe <am_util_stdio_vsprintf+0x566>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ceba:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cebe:	087f      	lsrs	r7, r7, #1
    cec0:	ea4f 0636 	mov.w	r6, r6, rrx
    cec4:	1982      	adds	r2, r0, r6
    cec6:	eb41 0307 	adc.w	r3, r1, r7
        q64 += (q64 >> 4);
    ceca:	0911      	lsrs	r1, r2, #4
    cecc:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    ced0:	9108      	str	r1, [sp, #32]
    ced2:	0919      	lsrs	r1, r3, #4
    ced4:	9109      	str	r1, [sp, #36]	; 0x24
    ced6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    ceda:	1880      	adds	r0, r0, r2
    cedc:	4159      	adcs	r1, r3
    cede:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    cee0:	0a01      	lsrs	r1, r0, #8
    cee2:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cee6:	9106      	str	r1, [sp, #24]
    cee8:	0a19      	lsrs	r1, r3, #8
    ceea:	9107      	str	r1, [sp, #28]
        q64 += (q64 >> 4);
    ceec:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    ceee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    cef2:	1880      	adds	r0, r0, r2
    cef4:	4159      	adcs	r1, r3
    cef6:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    cef8:	0c01      	lsrs	r1, r0, #16
    cefa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cefe:	9104      	str	r1, [sp, #16]
    cf00:	0c19      	lsrs	r1, r3, #16
    cf02:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    cf04:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    cf06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    cf0a:	1880      	adds	r0, r0, r2
    cf0c:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    cf0e:	e9cd 150a 	strd	r1, r5, [sp, #40]	; 0x28
        q64 += (q64 >> 16);
    cf12:	4602      	mov	r2, r0
    cf14:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    cf16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cf1a:	1880      	adds	r0, r0, r2
    cf1c:	4159      	adcs	r1, r3
        q64 >>= 3;
    cf1e:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    cf22:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    cf26:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        return q64 + ((r64 + 6) >> 4);
    cf2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        r64 = ui64Val - q64*10;
    cf2e:	ea4f 0489 	mov.w	r4, r9, lsl #2
    cf32:	ea4f 0288 	mov.w	r2, r8, lsl #2
    cf36:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
    cf3a:	eb12 0408 	adds.w	r4, r2, r8
    cf3e:	eb43 0509 	adc.w	r5, r3, r9
        return q64 + ((r64 + 6) >> 4);
    cf42:	3006      	adds	r0, #6
    cf44:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    cf48:	1922      	adds	r2, r4, r4
    cf4a:	eb45 0305 	adc.w	r3, r5, r5
        return q64 + ((r64 + 6) >> 4);
    cf4e:	1a80      	subs	r0, r0, r2
    cf50:	eb61 0103 	sbc.w	r1, r1, r3
    cf54:	ea4f 1a10 	mov.w	sl, r0, lsr #4
    cf58:	ea4a 7a01 	orr.w	sl, sl, r1, lsl #28
    cf5c:	eb1a 0308 	adds.w	r3, sl, r8
    cf60:	ea4f 1b11 	mov.w	fp, r1, lsr #4
    cf64:	eb4b 0409 	adc.w	r4, fp, r9
        ++iNDigits;
    cf68:	f10e 0e01 	add.w	lr, lr, #1
        return q64 + ((r64 + 6) >> 4);
    cf6c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    cf70:	e761      	b.n	ce36 <am_util_stdio_vsprintf+0x7de>
    while ( i32NumChars-- )
    cf72:	3901      	subs	r1, #1
    cf74:	4656      	mov	r6, sl
    int32_t i32Cnt = 0;
    cf76:	2000      	movs	r0, #0
    cf78:	1c44      	adds	r4, r0, #1
    cf7a:	1e4f      	subs	r7, r1, #1
        if ( pcBuf )
    cf7c:	b156      	cbz	r6, cf94 <am_util_stdio_vsprintf+0x93c>
            *pcBuf++ = cPadChar;
    cf7e:	46bc      	mov	ip, r7
    cf80:	460f      	mov	r7, r1
    cf82:	f886 8000 	strb.w	r8, [r6]
    cf86:	4620      	mov	r0, r4
    cf88:	4661      	mov	r1, ip
    cf8a:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cf8c:	2f00      	cmp	r7, #0
    cf8e:	d1f3      	bne.n	cf78 <am_util_stdio_vsprintf+0x920>
    cf90:	4483      	add	fp, r0
    cf92:	e64e      	b.n	cc32 <am_util_stdio_vsprintf+0x5da>
    cf94:	2900      	cmp	r1, #0
    cf96:	f000 8127 	beq.w	d1e8 <am_util_stdio_vsprintf+0xb90>
    cf9a:	3902      	subs	r1, #2
    cf9c:	3002      	adds	r0, #2
    cf9e:	2f00      	cmp	r7, #0
    cfa0:	d1ea      	bne.n	cf78 <am_util_stdio_vsprintf+0x920>
    cfa2:	e7f5      	b.n	cf90 <am_util_stdio_vsprintf+0x938>
    if ( ui64Val == 0 )
    cfa4:	ea52 0103 	orrs.w	r1, r2, r3
    cfa8:	f47f ae4c 	bne.w	cc44 <am_util_stdio_vsprintf+0x5ec>
    cfac:	2001      	movs	r0, #1
    cfae:	e60e      	b.n	cbce <am_util_stdio_vsprintf+0x576>
    uint32_t ui32Val = 0, uCnt = 0;
    cfb0:	2200      	movs	r2, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfb2:	4613      	mov	r3, r2
    cfb4:	e50b      	b.n	c9ce <am_util_stdio_vsprintf+0x376>
    while ( i32NumChars-- )
    cfb6:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    cfba:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    cfbc:	2200      	movs	r2, #0
    cfbe:	1e5c      	subs	r4, r3, #1
    cfc0:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    cfc2:	b150      	cbz	r0, cfda <am_util_stdio_vsprintf+0x982>
            *pcBuf++ = cPadChar;
    cfc4:	4625      	mov	r5, r4
    cfc6:	461c      	mov	r4, r3
    cfc8:	f880 8000 	strb.w	r8, [r0]
    cfcc:	460a      	mov	r2, r1
    cfce:	462b      	mov	r3, r5
    cfd0:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cfd2:	2c00      	cmp	r4, #0
    cfd4:	d1f3      	bne.n	cfbe <am_util_stdio_vsprintf+0x966>
    cfd6:	4493      	add	fp, r2
    cfd8:	e5d0      	b.n	cb7c <am_util_stdio_vsprintf+0x524>
    cfda:	2b00      	cmp	r3, #0
    cfdc:	f000 8111 	beq.w	d202 <am_util_stdio_vsprintf+0xbaa>
    cfe0:	3b02      	subs	r3, #2
    cfe2:	3202      	adds	r2, #2
    cfe4:	2c00      	cmp	r4, #0
    cfe6:	d1ea      	bne.n	cfbe <am_util_stdio_vsprintf+0x966>
    cfe8:	e7f5      	b.n	cfd6 <am_util_stdio_vsprintf+0x97e>
    int iNDigits = ui64Val ? 0 : 1;
    cfea:	4603      	mov	r3, r0
    cfec:	430b      	orrs	r3, r1
    cfee:	bf0c      	ite	eq
    cff0:	f04f 0e01 	moveq.w	lr, #1
    cff4:	f04f 0e00 	movne.w	lr, #0
                    bNeg = true;
    cff8:	2301      	movs	r3, #1
    cffa:	e571      	b.n	cae0 <am_util_stdio_vsprintf+0x488>
    else if (iExp2 >= 0)
    cffc:	2a00      	cmp	r2, #0
    cffe:	f2c0 80f6 	blt.w	d1ee <am_util_stdio_vsprintf+0xb96>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d002:	f1a1 047e 	sub.w	r4, r1, #126	; 0x7e
    d006:	fa00 f404 	lsl.w	r4, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d00a:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d00e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d010:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d014:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d018:	f2c0 80dc 	blt.w	d1d4 <am_util_stdio_vsprintf+0xb7c>
    d01c:	4656      	mov	r6, sl
            uint64_to_str(i32IntPart, pcBuf);
    d01e:	4632      	mov	r2, r6
    d020:	17c1      	asrs	r1, r0, #31
    d022:	f7ff fa43 	bl	c4ac <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d026:	7833      	ldrb	r3, [r6, #0]
    d028:	b90b      	cbnz	r3, d02e <am_util_stdio_vsprintf+0x9d6>
    d02a:	e101      	b.n	d230 <am_util_stdio_vsprintf+0xbd8>
            pcBuf++;
    d02c:	463e      	mov	r6, r7
        while (*pcBuf)    // Get to end of new string
    d02e:	7873      	ldrb	r3, [r6, #1]
            pcBuf++;
    d030:	1c77      	adds	r7, r6, #1
        while (*pcBuf)    // Get to end of new string
    d032:	2b00      	cmp	r3, #0
    d034:	d1fa      	bne.n	d02c <am_util_stdio_vsprintf+0x9d4>
    d036:	1cb2      	adds	r2, r6, #2
    d038:	e480      	b.n	c93c <am_util_stdio_vsprintf+0x2e4>
    while ( i32NumChars-- )
    d03a:	3b01      	subs	r3, #1
    d03c:	4650      	mov	r0, sl
    int32_t i32Cnt = 0;
    d03e:	2200      	movs	r2, #0
    d040:	1c51      	adds	r1, r2, #1
    d042:	1e5c      	subs	r4, r3, #1
        if ( pcBuf )
    d044:	2800      	cmp	r0, #0
    d046:	d043      	beq.n	d0d0 <am_util_stdio_vsprintf+0xa78>
            *pcBuf++ = cPadChar;
    d048:	f880 8000 	strb.w	r8, [r0]
    d04c:	460a      	mov	r2, r1
    d04e:	3001      	adds	r0, #1
    d050:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    d052:	4623      	mov	r3, r4
    d054:	2900      	cmp	r1, #0
    d056:	d1f3      	bne.n	d040 <am_util_stdio_vsprintf+0x9e8>
    d058:	4493      	add	fp, r2
    d05a:	e728      	b.n	ceae <am_util_stdio_vsprintf+0x856>
    d05c:	1e48      	subs	r0, r1, #1
    d05e:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d060:	2300      	movs	r3, #0
    d062:	1c59      	adds	r1, r3, #1
    d064:	1e45      	subs	r5, r0, #1
        if ( pcBuf )
    d066:	2c00      	cmp	r4, #0
    d068:	d039      	beq.n	d0de <am_util_stdio_vsprintf+0xa86>
            *pcBuf++ = cPadChar;
    d06a:	f884 8000 	strb.w	r8, [r4]
    d06e:	460b      	mov	r3, r1
    d070:	3401      	adds	r4, #1
    d072:	4601      	mov	r1, r0
    while ( i32NumChars-- )
    d074:	4628      	mov	r0, r5
    d076:	2900      	cmp	r1, #0
    d078:	d1f3      	bne.n	d062 <am_util_stdio_vsprintf+0xa0a>
    d07a:	eb0b 0403 	add.w	r4, fp, r3
    d07e:	e4ec      	b.n	ca5a <am_util_stdio_vsprintf+0x402>
                bLongLong = true;
    d080:	2301      	movs	r3, #1
    d082:	e5ab      	b.n	cbdc <am_util_stdio_vsprintf+0x584>
        bLower = bLongLong = false;
    d084:	2500      	movs	r5, #0
    d086:	e5ad      	b.n	cbe4 <am_util_stdio_vsprintf+0x58c>
    while ( i32NumChars-- )
    d088:	1e4b      	subs	r3, r1, #1
    d08a:	4654      	mov	r4, sl
    int32_t i32Cnt = 0;
    d08c:	2100      	movs	r1, #0
    d08e:	1c48      	adds	r0, r1, #1
    d090:	1e5d      	subs	r5, r3, #1
        if ( pcBuf )
    d092:	b35c      	cbz	r4, d0ec <am_util_stdio_vsprintf+0xa94>
            *pcBuf++ = cPadChar;
    d094:	462e      	mov	r6, r5
    d096:	f884 8000 	strb.w	r8, [r4]
    d09a:	461d      	mov	r5, r3
    d09c:	4601      	mov	r1, r0
    d09e:	4633      	mov	r3, r6
    d0a0:	3401      	adds	r4, #1
    while ( i32NumChars-- )
    d0a2:	2d00      	cmp	r5, #0
    d0a4:	d1f3      	bne.n	d08e <am_util_stdio_vsprintf+0xa36>
    d0a6:	448b      	add	fp, r1
    d0a8:	e68c      	b.n	cdc4 <am_util_stdio_vsprintf+0x76c>
                if ( iWidth > 0 )
    d0aa:	2900      	cmp	r1, #0
    d0ac:	f340 809a 	ble.w	d1e4 <am_util_stdio_vsprintf+0xb8c>
                    if ( ui32strlen < iWidth )
    d0b0:	4606      	mov	r6, r0
    d0b2:	1b89      	subs	r1, r1, r6
    d0b4:	e4cc      	b.n	ca50 <am_util_stdio_vsprintf+0x3f8>
                            if ( pcBuf )
    d0b6:	f1ba 0f00 	cmp.w	sl, #0
    d0ba:	d004      	beq.n	d0c6 <am_util_stdio_vsprintf+0xa6e>
                                *pcBuf++ = '-';
    d0bc:	232d      	movs	r3, #45	; 0x2d
    d0be:	f88a 3000 	strb.w	r3, [sl]
    d0c2:	f10a 0a01 	add.w	sl, sl, #1
                            ++ui32CharCnt;
    d0c6:	2301      	movs	r3, #1
    d0c8:	f10b 0b01 	add.w	fp, fp, #1
    d0cc:	930f      	str	r3, [sp, #60]	; 0x3c
    d0ce:	e550      	b.n	cb72 <am_util_stdio_vsprintf+0x51a>
    while ( i32NumChars-- )
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	f000 80a1 	beq.w	d218 <am_util_stdio_vsprintf+0xbc0>
    d0d6:	4621      	mov	r1, r4
    d0d8:	3202      	adds	r2, #2
    d0da:	1e9c      	subs	r4, r3, #2
    d0dc:	e7b9      	b.n	d052 <am_util_stdio_vsprintf+0x9fa>
    d0de:	2800      	cmp	r0, #0
    d0e0:	f000 809d 	beq.w	d21e <am_util_stdio_vsprintf+0xbc6>
    d0e4:	4629      	mov	r1, r5
    d0e6:	3302      	adds	r3, #2
    d0e8:	1e85      	subs	r5, r0, #2
    d0ea:	e7c3      	b.n	d074 <am_util_stdio_vsprintf+0xa1c>
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	f000 809c 	beq.w	d22a <am_util_stdio_vsprintf+0xbd2>
    d0f2:	3b02      	subs	r3, #2
    d0f4:	3102      	adds	r1, #2
    d0f6:	e7d4      	b.n	d0a2 <am_util_stdio_vsprintf+0xa4a>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d0f8:	eba2 010a 	sub.w	r1, r2, sl
    d0fc:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d100:	42ab      	cmp	r3, r5
    d102:	bfa8      	it	ge
    d104:	462b      	movge	r3, r5
        for (jx = 0; jx < iMax; jx++)
    d106:	2b00      	cmp	r3, #0
    d108:	dd0d      	ble.n	d126 <am_util_stdio_vsprintf+0xace>
    d10a:	18d1      	adds	r1, r2, r3
            i32FracPart *= 10;
    d10c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d110:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d112:	1623      	asrs	r3, r4, #24
    d114:	3330      	adds	r3, #48	; 0x30
    d116:	f802 3b01 	strb.w	r3, [r2], #1
        for (jx = 0; jx < iMax; jx++)
    d11a:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
    d11c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d120:	d1f4      	bne.n	d10c <am_util_stdio_vsprintf+0xab4>
    d122:	eba2 010a 	sub.w	r1, r2, sl
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d126:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d12a:	f344 53c7 	sbfx	r3, r4, #23, #8
    d12e:	2b04      	cmp	r3, #4
    d130:	f77f ac0f 	ble.w	c952 <am_util_stdio_vsprintf+0x2fa>
            pcBuftmp = pcBuf - 1;
    d134:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d136:	459a      	cmp	sl, r3
    d138:	f63f ac0b 	bhi.w	c952 <am_util_stdio_vsprintf+0x2fa>
    d13c:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
    d140:	e005      	b.n	d14e <am_util_stdio_vsprintf+0xaf6>
                    *pcBuftmp = '0';
    d142:	f04f 0030 	mov.w	r0, #48	; 0x30
    d146:	7058      	strb	r0, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d148:	429d      	cmp	r5, r3
    d14a:	f43f ac02 	beq.w	c952 <am_util_stdio_vsprintf+0x2fa>
    d14e:	461c      	mov	r4, r3
                if ( *pcBuftmp == '.' )
    d150:	f813 0901 	ldrb.w	r0, [r3], #-1
    d154:	282e      	cmp	r0, #46	; 0x2e
    d156:	d0f7      	beq.n	d148 <am_util_stdio_vsprintf+0xaf0>
                else if ( *pcBuftmp == '9' )
    d158:	2839      	cmp	r0, #57	; 0x39
    d15a:	d0f2      	beq.n	d142 <am_util_stdio_vsprintf+0xaea>
                    *pcBuftmp += 1;
    d15c:	3001      	adds	r0, #1
    d15e:	7020      	strb	r0, [r4, #0]
    d160:	f7ff bbf7 	b.w	c952 <am_util_stdio_vsprintf+0x2fa>
                while (*pcStr != 0x0)
    d164:	7838      	ldrb	r0, [r7, #0]
    d166:	2800      	cmp	r0, #0
    d168:	d03c      	beq.n	d1e4 <am_util_stdio_vsprintf+0xb8c>
    d16a:	465c      	mov	r4, fp
        return ui32RetVal;
    d16c:	463e      	mov	r6, r7
    d16e:	2301      	movs	r3, #1
    d170:	e449      	b.n	ca06 <am_util_stdio_vsprintf+0x3ae>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d172:	4b3a      	ldr	r3, [pc, #232]	; (d25c <am_util_stdio_vsprintf+0xc04>)
    d174:	f8ca 3000 	str.w	r3, [sl]
    d178:	2303      	movs	r3, #3
    d17a:	f7ff bbf0 	b.w	c95e <am_util_stdio_vsprintf+0x306>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d180:	b11b      	cbz	r3, d18a <am_util_stdio_vsprintf+0xb32>
    d182:	f1b8 0f20 	cmp.w	r8, #32
    d186:	f43f ae3e 	beq.w	ce06 <am_util_stdio_vsprintf+0x7ae>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d18a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d18e:	4652      	mov	r2, sl
    d190:	f7ff f98c 	bl	c4ac <uint64_to_str>
                ui32CharCnt += iVal;
    d194:	4483      	add	fp, r0
    d196:	f7ff ba67 	b.w	c668 <am_util_stdio_vsprintf+0x10>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d19a:	1c4b      	adds	r3, r1, #1
    d19c:	d034      	beq.n	d208 <am_util_stdio_vsprintf+0xbb0>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d19e:	3102      	adds	r1, #2
    d1a0:	d141      	bne.n	d226 <am_util_stdio_vsprintf+0xbce>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d1a2:	4b2f      	ldr	r3, [pc, #188]	; (d260 <am_util_stdio_vsprintf+0xc08>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1a4:	f8ca 3000 	str.w	r3, [sl]
    d1a8:	2303      	movs	r3, #3
    d1aa:	f7ff bbd8 	b.w	c95e <am_util_stdio_vsprintf+0x306>
        if (i32IntPart > 0)
    d1ae:	f73f af36 	bgt.w	d01e <am_util_stdio_vsprintf+0x9c6>
            uint64_to_str(-i32IntPart, pcBuf);
    d1b2:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    d1b4:	232d      	movs	r3, #45	; 0x2d
    d1b6:	7033      	strb	r3, [r6, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d1b8:	463a      	mov	r2, r7
    d1ba:	17c1      	asrs	r1, r0, #31
    d1bc:	463e      	mov	r6, r7
    d1be:	f7ff f975 	bl	c4ac <uint64_to_str>
    d1c2:	3701      	adds	r7, #1
    d1c4:	e72f      	b.n	d026 <am_util_stdio_vsprintf+0x9ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d1c6:	4652      	mov	r2, sl
    d1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    d1cc:	f7ff f96e 	bl	c4ac <uint64_to_str>
    d1d0:	e4fd      	b.n	cbce <am_util_stdio_vsprintf+0x576>
    i32FracPart = 0;
    d1d2:	2400      	movs	r4, #0
        *pcBuf++ = '-';
    d1d4:	4653      	mov	r3, sl
    d1d6:	222d      	movs	r2, #45	; 0x2d
    d1d8:	f803 2b02 	strb.w	r2, [r3], #2
    d1dc:	463e      	mov	r6, r7
    d1de:	461f      	mov	r7, r3
    d1e0:	f7ff bba5 	b.w	c92e <am_util_stdio_vsprintf+0x2d6>
        return ui32RetVal;
    d1e4:	4606      	mov	r6, r0
    d1e6:	e427      	b.n	ca38 <am_util_stdio_vsprintf+0x3e0>
    d1e8:	4620      	mov	r0, r4
    d1ea:	44a3      	add	fp, r4
    d1ec:	e521      	b.n	cc32 <am_util_stdio_vsprintf+0x5da>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d1ee:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d1f0:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d1f2:	fa40 f402 	asr.w	r4, r0, r2
    d1f6:	f10a 0202 	add.w	r2, sl, #2
    if (unFloatValue.I32 < 0)
    d1fa:	db1d      	blt.n	d238 <am_util_stdio_vsprintf+0xbe0>
    d1fc:	4656      	mov	r6, sl
    d1fe:	f7ff bb9a 	b.w	c936 <am_util_stdio_vsprintf+0x2de>
    d202:	460a      	mov	r2, r1
    d204:	448b      	add	fp, r1
    d206:	e4b9      	b.n	cb7c <am_util_stdio_vsprintf+0x524>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d208:	4b14      	ldr	r3, [pc, #80]	; (d25c <am_util_stdio_vsprintf+0xc04>)
    d20a:	e7cb      	b.n	d1a4 <am_util_stdio_vsprintf+0xb4c>
                    iWidth -= ndigits_in_i64(ui64Val);
    d20c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d20e:	eba3 0e0e 	sub.w	lr, r3, lr
                    bNeg = false;
    d212:	2300      	movs	r3, #0
    d214:	930f      	str	r3, [sp, #60]	; 0x3c
    d216:	e4ac      	b.n	cb72 <am_util_stdio_vsprintf+0x51a>
    d218:	460a      	mov	r2, r1
    d21a:	448b      	add	fp, r1
    d21c:	e647      	b.n	ceae <am_util_stdio_vsprintf+0x856>
    d21e:	460b      	mov	r3, r1
    d220:	eb0b 0401 	add.w	r4, fp, r1
    d224:	e419      	b.n	ca5a <am_util_stdio_vsprintf+0x402>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d226:	4b0f      	ldr	r3, [pc, #60]	; (d264 <am_util_stdio_vsprintf+0xc0c>)
    d228:	e7bc      	b.n	d1a4 <am_util_stdio_vsprintf+0xb4c>
    d22a:	4601      	mov	r1, r0
    d22c:	4483      	add	fp, r0
    d22e:	e5c9      	b.n	cdc4 <am_util_stdio_vsprintf+0x76c>
        while (*pcBuf)    // Get to end of new string
    d230:	463a      	mov	r2, r7
    d232:	4637      	mov	r7, r6
    d234:	f7ff bb82 	b.w	c93c <am_util_stdio_vsprintf+0x2e4>
        *pcBuf++ = '-';
    d238:	4653      	mov	r3, sl
    d23a:	212d      	movs	r1, #45	; 0x2d
    d23c:	f803 1b03 	strb.w	r1, [r3], #3
    d240:	463e      	mov	r6, r7
    d242:	4617      	mov	r7, r2
    d244:	461a      	mov	r2, r3
    d246:	f7ff bb76 	b.w	c936 <am_util_stdio_vsprintf+0x2de>
                pcStr = va_arg(pArgs, char *);
    d24a:	9201      	str	r2, [sp, #4]
                        ui32CharCnt += iWidth;
    d24c:	46a3      	mov	fp, r4
    d24e:	f7ff ba0b 	b.w	c668 <am_util_stdio_vsprintf+0x10>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d252:	2300      	movs	r3, #0
        uCnt++;
    d254:	2201      	movs	r2, #1
    d256:	f7ff bbb9 	b.w	c9cc <am_util_stdio_vsprintf+0x374>
    d25a:	bf00      	nop
    d25c:	00302e30 	.word	0x00302e30
    d260:	00232e23 	.word	0x00232e23
    d264:	003f2e3f 	.word	0x003f2e3f

0000d268 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d268:	b40f      	push	{r0, r1, r2, r3}
    d26a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d26c:	4d0a      	ldr	r5, [pc, #40]	; (d298 <am_util_stdio_printf+0x30>)
    d26e:	682c      	ldr	r4, [r5, #0]
{
    d270:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d272:	b154      	cbz	r4, d28a <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d274:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d276:	461a      	mov	r2, r3
    d278:	9906      	ldr	r1, [sp, #24]
    d27a:	4808      	ldr	r0, [pc, #32]	; (d29c <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d27c:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d27e:	f7ff f9eb 	bl	c658 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d282:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d284:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d286:	4805      	ldr	r0, [pc, #20]	; (d29c <am_util_stdio_printf+0x34>)
    d288:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d28a:	4620      	mov	r0, r4
    d28c:	b003      	add	sp, #12
    d28e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d292:	b004      	add	sp, #16
    d294:	4770      	bx	lr
    d296:	bf00      	nop
    d298:	1000c174 	.word	0x1000c174
    d29c:	1000c054 	.word	0x1000c054

0000d2a0 <am_devices_led_array_init>:
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    d2a0:	b360      	cbz	r0, d2fc <am_devices_led_array_init+0x5c>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    d2a2:	1e4b      	subs	r3, r1, #1
    d2a4:	2b1e      	cmp	r3, #30
    d2a6:	d829      	bhi.n	d2fc <am_devices_led_array_init+0x5c>
{
    d2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d2ac:	4f14      	ldr	r7, [pc, #80]	; (d300 <am_devices_led_array_init+0x60>)
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d2ae:	f8df 8054 	ldr.w	r8, [pc, #84]	; d304 <am_devices_led_array_init+0x64>
    d2b2:	4604      	mov	r4, r0
    d2b4:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
    d2b8:	1d05      	adds	r5, r0, #4
    if ( (psLED == NULL)    ||
    d2ba:	b1c4      	cbz	r4, d2ee <am_devices_led_array_init+0x4e>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d2bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
    if ( (psLED == NULL)    ||
    d2c0:	2b31      	cmp	r3, #49	; 0x31
    d2c2:	d814      	bhi.n	d2ee <am_devices_led_array_init+0x4e>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    d2c4:	6862      	ldr	r2, [r4, #4]
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d2c6:	4618      	mov	r0, r3
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    d2c8:	0793      	lsls	r3, r2, #30
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d2ca:	bf4c      	ite	mi
    d2cc:	f8d8 1000 	ldrmi.w	r1, [r8]
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d2d0:	6839      	ldrpl	r1, [r7, #0]
    d2d2:	f000 fd65 	bl	dda0 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d2d6:	2103      	movs	r1, #3
    d2d8:	f855 0c04 	ldr.w	r0, [r5, #-4]
    d2dc:	f000 fe9c 	bl	e018 <am_hal_gpio_state_write>
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d2e0:	6861      	ldr	r1, [r4, #4]
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d2e2:	f855 0c04 	ldr.w	r0, [r5, #-4]
    d2e6:	f001 0101 	and.w	r1, r1, #1
    d2ea:	f000 fe95 	bl	e018 <am_hal_gpio_state_write>
    d2ee:	3408      	adds	r4, #8
    for ( i = 0; i < ui32NumLEDs; i++ )
    d2f0:	42b4      	cmp	r4, r6
    d2f2:	f105 0508 	add.w	r5, r5, #8
    d2f6:	d1e0      	bne.n	d2ba <am_devices_led_array_init+0x1a>
    {
        am_devices_led_init(psLEDs + i);
    }
}
    d2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2fc:	4770      	bx	lr
    d2fe:	bf00      	nop
    d300:	0000eea4 	.word	0x0000eea4
    d304:	0000efdc 	.word	0x0000efdc

0000d308 <am_devices_led_off>:
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
    d308:	b170      	cbz	r0, d328 <am_devices_led_off+0x20>
    d30a:	291e      	cmp	r1, #30
    d30c:	d80c      	bhi.n	d328 <am_devices_led_off+0x20>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d30e:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
         (ui32LEDNum >= MAX_LEDS)               ||
    d312:	2b31      	cmp	r3, #49	; 0x31
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d314:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
         (ui32LEDNum >= MAX_LEDS)               ||
    d318:	d806      	bhi.n	d328 <am_devices_led_off+0x20>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d31a:	6849      	ldr	r1, [r1, #4]
    d31c:	078a      	lsls	r2, r1, #30
    d31e:	d404      	bmi.n	d32a <am_devices_led_off+0x22>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d320:	4618      	mov	r0, r3
    d322:	2103      	movs	r1, #3
    d324:	f000 be78 	b.w	e018 <am_hal_gpio_state_write>
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    d328:	4770      	bx	lr
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d32a:	43c9      	mvns	r1, r1
    d32c:	f001 0101 	and.w	r1, r1, #1
    d330:	4618      	mov	r0, r3
    d332:	f000 be71 	b.w	e018 <am_hal_gpio_state_write>
    d336:	bf00      	nop

0000d338 <am_board_init>:
void am_board_init(void)
{
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    d338:	2100      	movs	r1, #0
{
    d33a:	b538      	push	{r3, r4, r5, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    d33c:	4608      	mov	r0, r1
    d33e:	f000 fb67 	bl	da10 <am_hal_clkgen_control>
    
    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    d342:	4846      	ldr	r0, [pc, #280]	; (d45c <am_board_init+0x124>)
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    d344:	4d46      	ldr	r5, [pc, #280]	; (d460 <am_board_init+0x128>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    d346:	f000 f9c1 	bl	d6cc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    d34a:	f000 f9e5 	bl	d718 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    d34e:	f000 f8f9 	bl	d544 <am_bsp_low_power_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    d352:	4b44      	ldr	r3, [pc, #272]	; (d464 <am_board_init+0x12c>)
    d354:	2010      	movs	r0, #16
    d356:	6819      	ldr	r1, [r3, #0]
    d358:	f000 fd22 	bl	dda0 <am_hal_gpio_pinconfig>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    d35c:	2100      	movs	r1, #0
    d35e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d362:	f000 fec1 	bl	e0e8 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    d366:	2100      	movs	r1, #0
    d368:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d36c:	f000 fe98 	bl	e0a0 <am_hal_gpio_interrupt_enable>
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    d370:	2105      	movs	r1, #5
    d372:	4628      	mov	r0, r5
    d374:	f7ff ff94 	bl	d2a0 <am_devices_led_array_init>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    d378:	2400      	movs	r4, #0
        am_devices_led_off(am_bsp_psLEDs, ix);
    d37a:	4621      	mov	r1, r4
    d37c:	4628      	mov	r0, r5
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    d37e:	3401      	adds	r4, #1
        am_devices_led_off(am_bsp_psLEDs, ix);
    d380:	f7ff ffc2 	bl	d308 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    d384:	2c05      	cmp	r4, #5
    d386:	d1f8      	bne.n	d37a <am_board_init+0x42>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    d388:	2100      	movs	r1, #0
    d38a:	2001      	movs	r0, #1
    d38c:	f000 fb40 	bl	da10 <am_hal_clkgen_control>
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    d390:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d394:	2000      	movs	r0, #0
    d396:	f000 fc21 	bl	dbdc <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    d39a:	4933      	ldr	r1, [pc, #204]	; (d468 <am_board_init+0x130>)
#endif

    //
    // Configure of burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d39c:	4c33      	ldr	r4, [pc, #204]	; (d46c <am_board_init+0x134>)
    am_hal_ctimer_config(0, &g_sTimer0);
    d39e:	2000      	movs	r0, #0
    d3a0:	f000 fbc2 	bl	db28 <am_hal_ctimer_config>
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    d3a4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
    d3a8:	f241 7370 	movw	r3, #6000	; 0x1770
    d3ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d3b0:	2000      	movs	r0, #0
    d3b2:	f000 fc27 	bl	dc04 <am_hal_ctimer_period_set>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d3b6:	2001      	movs	r0, #1
    d3b8:	f000 fc8e 	bl	dcd8 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d3bc:	2001      	movs	r0, #1
    d3be:	f000 fc77 	bl	dcb0 <am_hal_ctimer_int_enable>
    am_hal_gpio_pinconfig(48, g_AM_HAL_GPIO_OUTPUT);
    d3c2:	4b2b      	ldr	r3, [pc, #172]	; (d470 <am_board_init+0x138>)
    d3c4:	2030      	movs	r0, #48	; 0x30
    d3c6:	6819      	ldr	r1, [r3, #0]
    d3c8:	f000 fcea 	bl	dda0 <am_hal_gpio_pinconfig>
    am_hal_gpio_state_write(48, AM_HAL_GPIO_OUTPUT_CLEAR);
    d3cc:	2100      	movs	r1, #0
    d3ce:	2030      	movs	r0, #48	; 0x30
    d3d0:	f000 fe22 	bl	e018 <am_hal_gpio_state_write>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3d4:	4b27      	ldr	r3, [pc, #156]	; (d474 <am_board_init+0x13c>)
    d3d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    d3da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d3de:	6019      	str	r1, [r3, #0]
    d3e0:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d3e2:	f000 fe9f 	bl	e124 <am_hal_interrupt_master_enable>
    am_bsp_uart_printf_enable();
    d3e6:	f000 f8cd 	bl	d584 <am_bsp_uart_printf_enable>
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d3ea:	4620      	mov	r0, r4
    d3ec:	f000 f8f8 	bl	d5e0 <am_hal_burst_mode_initialize>
    d3f0:	bb28      	cbnz	r0, d43e <am_board_init+0x106>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    d3f2:	7823      	ldrb	r3, [r4, #0]
    d3f4:	b183      	cbz	r3, d418 <am_board_init+0xe0>
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Available\r\n");
        }
        else
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Not Available\r\n");
    d3f6:	4820      	ldr	r0, [pc, #128]	; (d478 <am_board_init+0x140>)
    d3f8:	f7ff ff36 	bl	d268 <am_util_stdio_printf>
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\r\n");
    }

#if configUSE_BURST_ALWAYS_ON
    // Put the MCU into "Burst" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    d3fc:	4c1f      	ldr	r4, [pc, #124]	; (d47c <am_board_init+0x144>)
    d3fe:	4620      	mov	r0, r4
    d400:	f000 f936 	bl	d670 <am_hal_burst_mode_enable>
    d404:	b988      	cbnz	r0, d42a <am_board_init+0xf2>
    {
        if (AM_HAL_BURST_MODE == eBurstMode)
    d406:	7823      	ldrb	r3, [r4, #0]
    d408:	b1eb      	cbz	r3, d446 <am_board_init+0x10e>
        am_util_stdio_printf("Failed to Enable Burst Mode operation\r\n");
    }

#endif // configUSE_BURST_ALWAYS_ON

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d40a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d40e:	2000      	movs	r0, #0


}
    d410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d414:	f000 bbb8 	b.w	db88 <am_hal_ctimer_start>
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    d418:	4c18      	ldr	r4, [pc, #96]	; (d47c <am_board_init+0x144>)
            am_util_stdio_printf("Apollo3 Burst Mode is Available\r\n");
    d41a:	4819      	ldr	r0, [pc, #100]	; (d480 <am_board_init+0x148>)
    d41c:	f7ff ff24 	bl	d268 <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    d420:	4620      	mov	r0, r4
    d422:	f000 f925 	bl	d670 <am_hal_burst_mode_enable>
    d426:	2800      	cmp	r0, #0
    d428:	d0ed      	beq.n	d406 <am_board_init+0xce>
        am_util_stdio_printf("Failed to Enable Burst Mode operation\r\n");
    d42a:	4816      	ldr	r0, [pc, #88]	; (d484 <am_board_init+0x14c>)
    d42c:	f7ff ff1c 	bl	d268 <am_util_stdio_printf>
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d430:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d434:	2000      	movs	r0, #0
}
    d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d43a:	f000 bba5 	b.w	db88 <am_hal_ctimer_start>
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\r\n");
    d43e:	4812      	ldr	r0, [pc, #72]	; (d488 <am_board_init+0x150>)
    d440:	f7ff ff12 	bl	d268 <am_util_stdio_printf>
    d444:	e7da      	b.n	d3fc <am_board_init+0xc4>
            am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n");
    d446:	4811      	ldr	r0, [pc, #68]	; (d48c <am_board_init+0x154>)
    d448:	f7ff ff0e 	bl	d268 <am_util_stdio_printf>
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d44c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d450:	2000      	movs	r0, #0
}
    d452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d456:	f000 bb97 	b.w	db88 <am_hal_ctimer_start>
    d45a:	bf00      	nop
    d45c:	0000eea0 	.word	0x0000eea0
    d460:	1000c00c 	.word	0x1000c00c
    d464:	0000ee6c 	.word	0x0000ee6c
    d468:	1000c000 	.word	0x1000c000
    d46c:	1000c179 	.word	0x1000c179
    d470:	0000efdc 	.word	0x0000efdc
    d474:	e000e100 	.word	0xe000e100
    d478:	0000edc0 	.word	0x0000edc0
    d47c:	1000c178 	.word	0x1000c178
    d480:	0000ed9c 	.word	0x0000ed9c
    d484:	0000ee44 	.word	0x0000ee44
    d488:	0000ede8 	.word	0x0000ede8
    d48c:	0000ee18 	.word	0x0000ee18

0000d490 <am_ctimer_isr>:
void am_ctimer_isr(void)
{
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    d490:	4a0d      	ldr	r2, [pc, #52]	; (d4c8 <am_ctimer_isr+0x38>)
    if ( g_ui8DebounceFlag == 1)
    d492:	490e      	ldr	r1, [pc, #56]	; (d4cc <am_ctimer_isr+0x3c>)
    g_ui32TimerCount++;
    d494:	6813      	ldr	r3, [r2, #0]
    d496:	3301      	adds	r3, #1
    d498:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    d49a:	780b      	ldrb	r3, [r1, #0]
    d49c:	b2db      	uxtb	r3, r3
    d49e:	2b01      	cmp	r3, #1
    d4a0:	d002      	beq.n	d4a8 <am_ctimer_isr+0x18>
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d4a2:	2001      	movs	r0, #1
    d4a4:	f000 bc18 	b.w	dcd8 <am_hal_ctimer_int_clear>
        g_ui32DebounceTimerCount++;
    d4a8:	4a09      	ldr	r2, [pc, #36]	; (d4d0 <am_ctimer_isr+0x40>)
    d4aa:	6810      	ldr	r0, [r2, #0]
    d4ac:	3001      	adds	r0, #1
    d4ae:	6010      	str	r0, [r2, #0]
        if(g_ui32DebounceTimerCount > 300)
    d4b0:	6812      	ldr	r2, [r2, #0]
    d4b2:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    d4b6:	d9f4      	bls.n	d4a2 <am_ctimer_isr+0x12>
            g_sysKeyValue = AM_APP_KEY_0;
    d4b8:	4806      	ldr	r0, [pc, #24]	; (d4d4 <am_ctimer_isr+0x44>)
            g_ui8DebounceFlag = 0;
    d4ba:	2200      	movs	r2, #0
            g_sysKeyValue = AM_APP_KEY_0;
    d4bc:	7003      	strb	r3, [r0, #0]
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d4be:	2001      	movs	r0, #1
            g_ui8DebounceFlag = 0;
    d4c0:	700a      	strb	r2, [r1, #0]
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d4c2:	f000 bc09 	b.w	dcd8 <am_hal_ctimer_int_clear>
    d4c6:	bf00      	nop
    d4c8:	1000c15c 	.word	0x1000c15c
    d4cc:	1000c160 	.word	0x1000c160
    d4d0:	1000c158 	.word	0x1000c158
    d4d4:	1000c154 	.word	0x1000c154

0000d4d8 <am_gpio_isr>:
void am_gpio_isr(void) 
{
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    d4d8:	4a06      	ldr	r2, [pc, #24]	; (d4f4 <am_gpio_isr+0x1c>)
    d4da:	7813      	ldrb	r3, [r2, #0]
    d4dc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    d4e0:	b91b      	cbnz	r3, d4ea <am_gpio_isr+0x12>
    {
        g_ui8DebounceFlag = 1;
        g_ui32DebounceTimerCount = 0;
    d4e2:	4b05      	ldr	r3, [pc, #20]	; (d4f8 <am_gpio_isr+0x20>)
        g_ui8DebounceFlag = 1;
    d4e4:	2001      	movs	r0, #1
    d4e6:	7010      	strb	r0, [r2, #0]
        g_ui32DebounceTimerCount = 0;
    d4e8:	6019      	str	r1, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    d4ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d4ee:	2100      	movs	r1, #0
    d4f0:	f000 bdfa 	b.w	e0e8 <am_hal_gpio_interrupt_clear>
    d4f4:	1000c160 	.word	0x1000c160
    d4f8:	1000c158 	.word	0x1000c158

0000d4fc <am_bsp_uart_string_print>:
    d4fc:	b510      	push	{r4, lr}
    d4fe:	b086      	sub	sp, #24
    d500:	7803      	ldrb	r3, [r0, #0]
    d502:	2400      	movs	r4, #0
    d504:	9400      	str	r4, [sp, #0]
    d506:	b1bb      	cbz	r3, d538 <am_bsp_uart_string_print+0x3c>
    d508:	4603      	mov	r3, r0
    d50a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d50e:	3401      	adds	r4, #1
    d510:	2a00      	cmp	r2, #0
    d512:	d1fa      	bne.n	d50a <am_bsp_uart_string_print+0xe>
    d514:	4b0a      	ldr	r3, [pc, #40]	; (d540 <am_bsp_uart_string_print+0x44>)
    d516:	9002      	str	r0, [sp, #8]
    d518:	2200      	movs	r2, #0
    d51a:	6818      	ldr	r0, [r3, #0]
    d51c:	9403      	str	r4, [sp, #12]
    d51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d522:	a901      	add	r1, sp, #4
    d524:	9304      	str	r3, [sp, #16]
    d526:	9201      	str	r2, [sp, #4]
    d528:	f8cd d014 	str.w	sp, [sp, #20]
    d52c:	f001 f92c 	bl	e788 <am_hal_uart_transfer>
    d530:	9b00      	ldr	r3, [sp, #0]
    d532:	42a3      	cmp	r3, r4
    d534:	d002      	beq.n	d53c <am_bsp_uart_string_print+0x40>
    d536:	e7fe      	b.n	d536 <am_bsp_uart_string_print+0x3a>
    d538:	461c      	mov	r4, r3
    d53a:	e7eb      	b.n	d514 <am_bsp_uart_string_print+0x18>
    d53c:	b006      	add	sp, #24
    d53e:	bd10      	pop	{r4, pc}
    d540:	1000c168 	.word	0x1000c168

0000d544 <am_bsp_low_power_init>:
    d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d546:	f000 fee5 	bl	e314 <am_hal_pwrctrl_low_power_init>
    d54a:	f000 ff55 	bl	e3f8 <am_hal_rtc_osc_disable>
    d54e:	4b0b      	ldr	r3, [pc, #44]	; (d57c <am_bsp_low_power_init+0x38>)
    d550:	4f0b      	ldr	r7, [pc, #44]	; (d580 <am_bsp_low_power_init+0x3c>)
    d552:	681e      	ldr	r6, [r3, #0]
    d554:	2400      	movs	r4, #0
    d556:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d55a:	4631      	mov	r1, r6
    d55c:	4628      	mov	r0, r5
    d55e:	f000 fc1f 	bl	dda0 <am_hal_gpio_pinconfig>
    d562:	2103      	movs	r1, #3
    d564:	4628      	mov	r0, r5
    d566:	f000 fd57 	bl	e018 <am_hal_gpio_state_write>
    d56a:	3401      	adds	r4, #1
    d56c:	4628      	mov	r0, r5
    d56e:	2100      	movs	r1, #0
    d570:	f000 fd52 	bl	e018 <am_hal_gpio_state_write>
    d574:	2c05      	cmp	r4, #5
    d576:	d1ee      	bne.n	d556 <am_bsp_low_power_init+0x12>
    d578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d57a:	bf00      	nop
    d57c:	0000efdc 	.word	0x0000efdc
    d580:	1000c00c 	.word	0x1000c00c

0000d584 <am_bsp_uart_printf_enable>:
    d584:	b510      	push	{r4, lr}
    d586:	4c10      	ldr	r4, [pc, #64]	; (d5c8 <am_bsp_uart_printf_enable+0x44>)
    d588:	4b10      	ldr	r3, [pc, #64]	; (d5cc <am_bsp_uart_printf_enable+0x48>)
    d58a:	4621      	mov	r1, r4
    d58c:	2202      	movs	r2, #2
    d58e:	2000      	movs	r0, #0
    d590:	601a      	str	r2, [r3, #0]
    d592:	f000 ff3b 	bl	e40c <am_hal_uart_initialize>
    d596:	2200      	movs	r2, #0
    d598:	4611      	mov	r1, r2
    d59a:	6820      	ldr	r0, [r4, #0]
    d59c:	f000 ff5e 	bl	e45c <am_hal_uart_power_control>
    d5a0:	6820      	ldr	r0, [r4, #0]
    d5a2:	490b      	ldr	r1, [pc, #44]	; (d5d0 <am_bsp_uart_printf_enable+0x4c>)
    d5a4:	f000 ffcc 	bl	e540 <am_hal_uart_configure>
    d5a8:	4b0a      	ldr	r3, [pc, #40]	; (d5d4 <am_bsp_uart_printf_enable+0x50>)
    d5aa:	2016      	movs	r0, #22
    d5ac:	6819      	ldr	r1, [r3, #0]
    d5ae:	f000 fbf7 	bl	dda0 <am_hal_gpio_pinconfig>
    d5b2:	4b09      	ldr	r3, [pc, #36]	; (d5d8 <am_bsp_uart_printf_enable+0x54>)
    d5b4:	2017      	movs	r0, #23
    d5b6:	6819      	ldr	r1, [r3, #0]
    d5b8:	f000 fbf2 	bl	dda0 <am_hal_gpio_pinconfig>
    d5bc:	4807      	ldr	r0, [pc, #28]	; (d5dc <am_bsp_uart_printf_enable+0x58>)
    d5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5c2:	f7ff b843 	b.w	c64c <am_util_stdio_printf_init>
    d5c6:	bf00      	nop
    d5c8:	1000c168 	.word	0x1000c168
    d5cc:	1000c164 	.word	0x1000c164
    d5d0:	0000ee70 	.word	0x0000ee70
    d5d4:	0000ee98 	.word	0x0000ee98
    d5d8:	0000ee9c 	.word	0x0000ee9c
    d5dc:	0000d4fd 	.word	0x0000d4fd

0000d5e0 <am_hal_burst_mode_initialize>:
    d5e0:	b570      	push	{r4, r5, r6, lr}
    d5e2:	4b1e      	ldr	r3, [pc, #120]	; (d65c <am_hal_burst_mode_initialize+0x7c>)
    d5e4:	695a      	ldr	r2, [r3, #20]
    d5e6:	07d5      	lsls	r5, r2, #31
    d5e8:	b082      	sub	sp, #8
    d5ea:	4604      	mov	r4, r0
    d5ec:	d407      	bmi.n	d5fe <am_hal_burst_mode_initialize+0x1e>
    d5ee:	4a1c      	ldr	r2, [pc, #112]	; (d660 <am_hal_burst_mode_initialize+0x80>)
    d5f0:	2100      	movs	r1, #0
    d5f2:	2301      	movs	r3, #1
    d5f4:	7011      	strb	r1, [r2, #0]
    d5f6:	2007      	movs	r0, #7
    d5f8:	7023      	strb	r3, [r4, #0]
    d5fa:	b002      	add	sp, #8
    d5fc:	bd70      	pop	{r4, r5, r6, pc}
    d5fe:	4a19      	ldr	r2, [pc, #100]	; (d664 <am_hal_burst_mode_initialize+0x84>)
    d600:	6a91      	ldr	r1, [r2, #40]	; 0x28
    d602:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    d606:	6291      	str	r1, [r2, #40]	; 0x28
    d608:	6812      	ldr	r2, [r2, #0]
    d60a:	07d0      	lsls	r0, r2, #31
    d60c:	d507      	bpl.n	d61e <am_hal_burst_mode_initialize+0x3e>
    d60e:	68db      	ldr	r3, [r3, #12]
    d610:	b2db      	uxtb	r3, r3
    d612:	2b11      	cmp	r3, #17
    d614:	d903      	bls.n	d61e <am_hal_burst_mode_initialize+0x3e>
    d616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d61a:	4a13      	ldr	r2, [pc, #76]	; (d668 <am_hal_burst_mode_initialize+0x88>)
    d61c:	63da      	str	r2, [r3, #60]	; 0x3c
    d61e:	4d0f      	ldr	r5, [pc, #60]	; (d65c <am_hal_burst_mode_initialize+0x7c>)
    d620:	4912      	ldr	r1, [pc, #72]	; (d66c <am_hal_burst_mode_initialize+0x8c>)
    d622:	7e2a      	ldrb	r2, [r5, #24]
    d624:	2601      	movs	r6, #1
    d626:	f042 0210 	orr.w	r2, r2, #16
    d62a:	2320      	movs	r3, #32
    d62c:	762a      	strb	r2, [r5, #24]
    d62e:	f242 7010 	movw	r0, #10000	; 0x2710
    d632:	461a      	mov	r2, r3
    d634:	9600      	str	r6, [sp, #0]
    d636:	f000 fb6f 	bl	dd18 <am_hal_flash_delay_status_check>
    d63a:	b948      	cbnz	r0, d650 <am_hal_burst_mode_initialize+0x70>
    d63c:	69aa      	ldr	r2, [r5, #24]
    d63e:	0651      	lsls	r1, r2, #25
    d640:	d5d5      	bpl.n	d5ee <am_hal_burst_mode_initialize+0xe>
    d642:	69aa      	ldr	r2, [r5, #24]
    d644:	0692      	lsls	r2, r2, #26
    d646:	d5d2      	bpl.n	d5ee <am_hal_burst_mode_initialize+0xe>
    d648:	4a05      	ldr	r2, [pc, #20]	; (d660 <am_hal_burst_mode_initialize+0x80>)
    d64a:	7016      	strb	r6, [r2, #0]
    d64c:	7020      	strb	r0, [r4, #0]
    d64e:	e7d4      	b.n	d5fa <am_hal_burst_mode_initialize+0x1a>
    d650:	4a03      	ldr	r2, [pc, #12]	; (d660 <am_hal_burst_mode_initialize+0x80>)
    d652:	2100      	movs	r1, #0
    d654:	7011      	strb	r1, [r2, #0]
    d656:	7026      	strb	r6, [r4, #0]
    d658:	b002      	add	sp, #8
    d65a:	bd70      	pop	{r4, r5, r6, pc}
    d65c:	40020000 	.word	0x40020000
    d660:	1000c16c 	.word	0x1000c16c
    d664:	40021000 	.word	0x40021000
    d668:	0fc0400f 	.word	0x0fc0400f
    d66c:	40020018 	.word	0x40020018

0000d670 <am_hal_burst_mode_enable>:
    d670:	4b14      	ldr	r3, [pc, #80]	; (d6c4 <am_hal_burst_mode_enable+0x54>)
    d672:	781b      	ldrb	r3, [r3, #0]
    d674:	b91b      	cbnz	r3, d67e <am_hal_burst_mode_enable+0xe>
    d676:	2301      	movs	r3, #1
    d678:	7003      	strb	r3, [r0, #0]
    d67a:	2007      	movs	r0, #7
    d67c:	4770      	bx	lr
    d67e:	b570      	push	{r4, r5, r6, lr}
    d680:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d684:	b082      	sub	sp, #8
    d686:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d68a:	490f      	ldr	r1, [pc, #60]	; (d6c8 <am_hal_burst_mode_enable+0x58>)
    d68c:	2601      	movs	r6, #1
    d68e:	4332      	orrs	r2, r6
    d690:	2304      	movs	r3, #4
    d692:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d696:	4604      	mov	r4, r0
    d698:	461a      	mov	r2, r3
    d69a:	9600      	str	r6, [sp, #0]
    d69c:	f242 7010 	movw	r0, #10000	; 0x2710
    d6a0:	f000 fb3a 	bl	dd18 <am_hal_flash_delay_status_check>
    d6a4:	b938      	cbnz	r0, d6b6 <am_hal_burst_mode_enable+0x46>
    d6a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d6a8:	079a      	lsls	r2, r3, #30
    d6aa:	d507      	bpl.n	d6bc <am_hal_burst_mode_enable+0x4c>
    d6ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d6ae:	075b      	lsls	r3, r3, #29
    d6b0:	d501      	bpl.n	d6b6 <am_hal_burst_mode_enable+0x46>
    d6b2:	7020      	strb	r0, [r4, #0]
    d6b4:	e000      	b.n	d6b8 <am_hal_burst_mode_enable+0x48>
    d6b6:	7026      	strb	r6, [r4, #0]
    d6b8:	b002      	add	sp, #8
    d6ba:	bd70      	pop	{r4, r5, r6, pc}
    d6bc:	7026      	strb	r6, [r4, #0]
    d6be:	4630      	mov	r0, r6
    d6c0:	e7fa      	b.n	d6b8 <am_hal_burst_mode_enable+0x48>
    d6c2:	bf00      	nop
    d6c4:	1000c16c 	.word	0x1000c16c
    d6c8:	40004034 	.word	0x40004034

0000d6cc <am_hal_cachectrl_config>:
    d6cc:	b530      	push	{r4, r5, lr}
    d6ce:	b083      	sub	sp, #12
    d6d0:	4605      	mov	r5, r0
    d6d2:	f000 fd2b 	bl	e12c <am_hal_interrupt_master_disable>
    d6d6:	4c0f      	ldr	r4, [pc, #60]	; (d714 <am_hal_cachectrl_config+0x48>)
    d6d8:	9001      	str	r0, [sp, #4]
    d6da:	6823      	ldr	r3, [r4, #0]
    d6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d6e0:	6023      	str	r3, [r4, #0]
    d6e2:	9801      	ldr	r0, [sp, #4]
    d6e4:	f000 fd26 	bl	e134 <am_hal_interrupt_master_set>
    d6e8:	78ab      	ldrb	r3, [r5, #2]
    d6ea:	782a      	ldrb	r2, [r5, #0]
    d6ec:	7869      	ldrb	r1, [r5, #1]
    d6ee:	005b      	lsls	r3, r3, #1
    d6f0:	0112      	lsls	r2, r2, #4
    d6f2:	b2d2      	uxtb	r2, r2
    d6f4:	f003 0302 	and.w	r3, r3, #2
    d6f8:	4313      	orrs	r3, r2
    d6fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d6fe:	020a      	lsls	r2, r1, #8
    d700:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d708:	4313      	orrs	r3, r2
    d70a:	2000      	movs	r0, #0
    d70c:	6023      	str	r3, [r4, #0]
    d70e:	b003      	add	sp, #12
    d710:	bd30      	pop	{r4, r5, pc}
    d712:	bf00      	nop
    d714:	40018000 	.word	0x40018000

0000d718 <am_hal_cachectrl_enable>:
    d718:	4a03      	ldr	r2, [pc, #12]	; (d728 <am_hal_cachectrl_enable+0x10>)
    d71a:	6813      	ldr	r3, [r2, #0]
    d71c:	f043 0301 	orr.w	r3, r3, #1
    d720:	6013      	str	r3, [r2, #0]
    d722:	2000      	movs	r0, #0
    d724:	4770      	bx	lr
    d726:	bf00      	nop
    d728:	40018000 	.word	0x40018000

0000d72c <am_hal_cachectrl_control>:
    d72c:	b510      	push	{r4, lr}
    d72e:	3801      	subs	r0, #1
    d730:	b08e      	sub	sp, #56	; 0x38
    d732:	2810      	cmp	r0, #16
    d734:	f200 8143 	bhi.w	d9be <am_hal_cachectrl_control+0x292>
    d738:	e8df f010 	tbh	[pc, r0, lsl #1]
    d73c:	01380136 	.word	0x01380136
    d740:	0011013e 	.word	0x0011013e
    d744:	001a0018 	.word	0x001a0018
    d748:	001f001c 	.word	0x001f001c
    d74c:	00300022 	.word	0x00300022
    d750:	0074003c 	.word	0x0074003c
    d754:	00e400ac 	.word	0x00e400ac
    d758:	011a00ff 	.word	0x011a00ff
    d75c:	0120      	.short	0x0120
    d75e:	f44f 7208 	mov.w	r2, #544	; 0x220
    d762:	4ba8      	ldr	r3, [pc, #672]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d764:	2000      	movs	r0, #0
    d766:	609a      	str	r2, [r3, #8]
    d768:	b00e      	add	sp, #56	; 0x38
    d76a:	bd10      	pop	{r4, pc}
    d76c:	2240      	movs	r2, #64	; 0x40
    d76e:	e7f8      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d770:	2220      	movs	r2, #32
    d772:	e7f6      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d774:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d778:	e7f3      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d77a:	f44f 7200 	mov.w	r2, #512	; 0x200
    d77e:	e7f0      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d780:	f000 fcd4 	bl	e12c <am_hal_interrupt_master_disable>
    d784:	4a9f      	ldr	r2, [pc, #636]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d786:	9000      	str	r0, [sp, #0]
    d788:	6813      	ldr	r3, [r2, #0]
    d78a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d78e:	6013      	str	r3, [r2, #0]
    d790:	9800      	ldr	r0, [sp, #0]
    d792:	f000 fccf 	bl	e134 <am_hal_interrupt_master_set>
    d796:	2000      	movs	r0, #0
    d798:	b00e      	add	sp, #56	; 0x38
    d79a:	bd10      	pop	{r4, pc}
    d79c:	f000 fcc6 	bl	e12c <am_hal_interrupt_master_disable>
    d7a0:	4a98      	ldr	r2, [pc, #608]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d7a2:	9001      	str	r0, [sp, #4]
    d7a4:	6813      	ldr	r3, [r2, #0]
    d7a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d7aa:	6013      	str	r3, [r2, #0]
    d7ac:	9801      	ldr	r0, [sp, #4]
    d7ae:	f000 fcc1 	bl	e134 <am_hal_interrupt_master_set>
    d7b2:	e7f0      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d7b4:	f000 fcba 	bl	e12c <am_hal_interrupt_master_disable>
    d7b8:	4603      	mov	r3, r0
    d7ba:	4893      	ldr	r0, [pc, #588]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d7bc:	9302      	str	r3, [sp, #8]
    d7be:	f000 fae5 	bl	dd8c <am_hal_flash_load_ui32>
    d7c2:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d7c6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d7ca:	488f      	ldr	r0, [pc, #572]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d7cc:	f000 fae2 	bl	dd94 <am_hal_flash_store_ui32>
    d7d0:	9802      	ldr	r0, [sp, #8]
    d7d2:	f000 fcaf 	bl	e134 <am_hal_interrupt_master_set>
    d7d6:	f000 fca9 	bl	e12c <am_hal_interrupt_master_disable>
    d7da:	4603      	mov	r3, r0
    d7dc:	488a      	ldr	r0, [pc, #552]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d7de:	9303      	str	r3, [sp, #12]
    d7e0:	f000 fad4 	bl	dd8c <am_hal_flash_load_ui32>
    d7e4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d7e8:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    d7ec:	4886      	ldr	r0, [pc, #536]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d7ee:	f000 fad1 	bl	dd94 <am_hal_flash_store_ui32>
    d7f2:	9803      	ldr	r0, [sp, #12]
    d7f4:	f000 fc9e 	bl	e134 <am_hal_interrupt_master_set>
    d7f8:	f000 fc98 	bl	e12c <am_hal_interrupt_master_disable>
    d7fc:	4603      	mov	r3, r0
    d7fe:	4882      	ldr	r0, [pc, #520]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d800:	9304      	str	r3, [sp, #16]
    d802:	f000 fac3 	bl	dd8c <am_hal_flash_load_ui32>
    d806:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d80a:	f021 010f 	bic.w	r1, r1, #15
    d80e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d812:	f041 0103 	orr.w	r1, r1, #3
    d816:	487c      	ldr	r0, [pc, #496]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d818:	f000 fabc 	bl	dd94 <am_hal_flash_store_ui32>
    d81c:	9804      	ldr	r0, [sp, #16]
    d81e:	f000 fc89 	bl	e134 <am_hal_interrupt_master_set>
    d822:	e7b8      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d824:	f000 fc82 	bl	e12c <am_hal_interrupt_master_disable>
    d828:	4603      	mov	r3, r0
    d82a:	4877      	ldr	r0, [pc, #476]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d82c:	9305      	str	r3, [sp, #20]
    d82e:	f000 faad 	bl	dd8c <am_hal_flash_load_ui32>
    d832:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d836:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    d83a:	4873      	ldr	r0, [pc, #460]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d83c:	f000 faaa 	bl	dd94 <am_hal_flash_store_ui32>
    d840:	9805      	ldr	r0, [sp, #20]
    d842:	f000 fc77 	bl	e134 <am_hal_interrupt_master_set>
    d846:	f000 fc71 	bl	e12c <am_hal_interrupt_master_disable>
    d84a:	4603      	mov	r3, r0
    d84c:	486e      	ldr	r0, [pc, #440]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d84e:	9306      	str	r3, [sp, #24]
    d850:	f000 fa9c 	bl	dd8c <am_hal_flash_load_ui32>
    d854:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d858:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    d85c:	486a      	ldr	r0, [pc, #424]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d85e:	f000 fa99 	bl	dd94 <am_hal_flash_store_ui32>
    d862:	9806      	ldr	r0, [sp, #24]
    d864:	f000 fc66 	bl	e134 <am_hal_interrupt_master_set>
    d868:	f000 fc60 	bl	e12c <am_hal_interrupt_master_disable>
    d86c:	4603      	mov	r3, r0
    d86e:	4866      	ldr	r0, [pc, #408]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d870:	9307      	str	r3, [sp, #28]
    d872:	f000 fa8b 	bl	dd8c <am_hal_flash_load_ui32>
    d876:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d87a:	f021 010f 	bic.w	r1, r1, #15
    d87e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d882:	f041 0101 	orr.w	r1, r1, #1
    d886:	4860      	ldr	r0, [pc, #384]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d888:	f000 fa84 	bl	dd94 <am_hal_flash_store_ui32>
    d88c:	9807      	ldr	r0, [sp, #28]
    d88e:	f000 fc51 	bl	e134 <am_hal_interrupt_master_set>
    d892:	e780      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d894:	f000 fc4a 	bl	e12c <am_hal_interrupt_master_disable>
    d898:	4603      	mov	r3, r0
    d89a:	485b      	ldr	r0, [pc, #364]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d89c:	9308      	str	r3, [sp, #32]
    d89e:	f000 fa75 	bl	dd8c <am_hal_flash_load_ui32>
    d8a2:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d8a6:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    d8aa:	4857      	ldr	r0, [pc, #348]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d8ac:	f000 fa72 	bl	dd94 <am_hal_flash_store_ui32>
    d8b0:	9808      	ldr	r0, [sp, #32]
    d8b2:	f000 fc3f 	bl	e134 <am_hal_interrupt_master_set>
    d8b6:	f000 fc39 	bl	e12c <am_hal_interrupt_master_disable>
    d8ba:	4603      	mov	r3, r0
    d8bc:	4852      	ldr	r0, [pc, #328]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d8be:	9309      	str	r3, [sp, #36]	; 0x24
    d8c0:	f000 fa64 	bl	dd8c <am_hal_flash_load_ui32>
    d8c4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d8c8:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    d8cc:	484e      	ldr	r0, [pc, #312]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d8ce:	f000 fa61 	bl	dd94 <am_hal_flash_store_ui32>
    d8d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8d4:	f000 fc2e 	bl	e134 <am_hal_interrupt_master_set>
    d8d8:	f000 fc28 	bl	e12c <am_hal_interrupt_master_disable>
    d8dc:	4603      	mov	r3, r0
    d8de:	484a      	ldr	r0, [pc, #296]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d8e0:	930a      	str	r3, [sp, #40]	; 0x28
    d8e2:	f000 fa53 	bl	dd8c <am_hal_flash_load_ui32>
    d8e6:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d8ea:	f021 010f 	bic.w	r1, r1, #15
    d8ee:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8f2:	f041 0101 	orr.w	r1, r1, #1
    d8f6:	4844      	ldr	r0, [pc, #272]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d8f8:	f000 fa4c 	bl	dd94 <am_hal_flash_store_ui32>
    d8fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8fe:	f000 fc19 	bl	e134 <am_hal_interrupt_master_set>
    d902:	e748      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d904:	2900      	cmp	r1, #0
    d906:	d05a      	beq.n	d9be <am_hal_cachectrl_control+0x292>
    d908:	680c      	ldr	r4, [r1, #0]
    d90a:	2c03      	cmp	r4, #3
    d90c:	d834      	bhi.n	d978 <am_hal_cachectrl_control+0x24c>
    d90e:	f000 fc0d 	bl	e12c <am_hal_interrupt_master_disable>
    d912:	4603      	mov	r3, r0
    d914:	483c      	ldr	r0, [pc, #240]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d916:	930b      	str	r3, [sp, #44]	; 0x2c
    d918:	f000 fa38 	bl	dd8c <am_hal_flash_load_ui32>
    d91c:	0323      	lsls	r3, r4, #12
    d91e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    d922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    d926:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d92a:	4319      	orrs	r1, r3
    d92c:	4836      	ldr	r0, [pc, #216]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d92e:	f000 fa31 	bl	dd94 <am_hal_flash_store_ui32>
    d932:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d934:	f000 fbfe 	bl	e134 <am_hal_interrupt_master_set>
    d938:	e72d      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d93a:	2900      	cmp	r1, #0
    d93c:	d03f      	beq.n	d9be <am_hal_cachectrl_control+0x292>
    d93e:	680c      	ldr	r4, [r1, #0]
    d940:	2c07      	cmp	r4, #7
    d942:	d819      	bhi.n	d978 <am_hal_cachectrl_control+0x24c>
    d944:	f000 fbf2 	bl	e12c <am_hal_interrupt_master_disable>
    d948:	4603      	mov	r3, r0
    d94a:	482f      	ldr	r0, [pc, #188]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d94c:	930c      	str	r3, [sp, #48]	; 0x30
    d94e:	f000 fa1d 	bl	dd8c <am_hal_flash_load_ui32>
    d952:	0123      	lsls	r3, r4, #4
    d954:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d958:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    d95c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d960:	4319      	orrs	r1, r3
    d962:	4829      	ldr	r0, [pc, #164]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d964:	f000 fa16 	bl	dd94 <am_hal_flash_store_ui32>
    d968:	980c      	ldr	r0, [sp, #48]	; 0x30
    d96a:	f000 fbe3 	bl	e134 <am_hal_interrupt_master_set>
    d96e:	e712      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d970:	b329      	cbz	r1, d9be <am_hal_cachectrl_control+0x292>
    d972:	680c      	ldr	r4, [r1, #0]
    d974:	2c0f      	cmp	r4, #15
    d976:	d926      	bls.n	d9c6 <am_hal_cachectrl_control+0x29a>
    d978:	2001      	movs	r0, #1
    d97a:	e6f5      	b.n	d768 <am_hal_cachectrl_control+0x3c>
    d97c:	b1f9      	cbz	r1, d9be <am_hal_cachectrl_control+0x292>
    d97e:	684a      	ldr	r2, [r1, #4]
    d980:	4b22      	ldr	r3, [pc, #136]	; (da0c <am_hal_cachectrl_control+0x2e0>)
    d982:	4013      	ands	r3, r2
    d984:	b9db      	cbnz	r3, d9be <am_hal_cachectrl_control+0x292>
    d986:	688b      	ldr	r3, [r1, #8]
    d988:	4820      	ldr	r0, [pc, #128]	; (da0c <am_hal_cachectrl_control+0x2e0>)
    d98a:	4018      	ands	r0, r3
    d98c:	b9b8      	cbnz	r0, d9be <am_hal_cachectrl_control+0x292>
    d98e:	780c      	ldrb	r4, [r1, #0]
    d990:	b374      	cbz	r4, d9f0 <am_hal_cachectrl_control+0x2c4>
    d992:	2c01      	cmp	r4, #1
    d994:	d113      	bne.n	d9be <am_hal_cachectrl_control+0x292>
    d996:	4c1b      	ldr	r4, [pc, #108]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d998:	61a2      	str	r2, [r4, #24]
    d99a:	61e3      	str	r3, [r4, #28]
    d99c:	784a      	ldrb	r2, [r1, #1]
    d99e:	6823      	ldr	r3, [r4, #0]
    d9a0:	f362 03c3 	bfi	r3, r2, #3, #1
    d9a4:	6023      	str	r3, [r4, #0]
    d9a6:	e6df      	b.n	d768 <am_hal_cachectrl_control+0x3c>
    d9a8:	2201      	movs	r2, #1
    d9aa:	e6da      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d9ac:	4b15      	ldr	r3, [pc, #84]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d9ae:	681b      	ldr	r3, [r3, #0]
    d9b0:	01db      	lsls	r3, r3, #7
    d9b2:	d406      	bmi.n	d9c2 <am_hal_cachectrl_control+0x296>
    d9b4:	2007      	movs	r0, #7
    d9b6:	e6d7      	b.n	d768 <am_hal_cachectrl_control+0x3c>
    d9b8:	f44f 6288 	mov.w	r2, #1088	; 0x440
    d9bc:	e6d1      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d9be:	2006      	movs	r0, #6
    d9c0:	e6d2      	b.n	d768 <am_hal_cachectrl_control+0x3c>
    d9c2:	2202      	movs	r2, #2
    d9c4:	e6cd      	b.n	d762 <am_hal_cachectrl_control+0x36>
    d9c6:	f000 fbb1 	bl	e12c <am_hal_interrupt_master_disable>
    d9ca:	4603      	mov	r3, r0
    d9cc:	480e      	ldr	r0, [pc, #56]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d9ce:	930d      	str	r3, [sp, #52]	; 0x34
    d9d0:	f000 f9dc 	bl	dd8c <am_hal_flash_load_ui32>
    d9d4:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d9d8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    d9dc:	f021 010f 	bic.w	r1, r1, #15
    d9e0:	4321      	orrs	r1, r4
    d9e2:	4809      	ldr	r0, [pc, #36]	; (da08 <am_hal_cachectrl_control+0x2dc>)
    d9e4:	f000 f9d6 	bl	dd94 <am_hal_flash_store_ui32>
    d9e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    d9ea:	f000 fba3 	bl	e134 <am_hal_interrupt_master_set>
    d9ee:	e6d2      	b.n	d796 <am_hal_cachectrl_control+0x6a>
    d9f0:	4c04      	ldr	r4, [pc, #16]	; (da04 <am_hal_cachectrl_control+0x2d8>)
    d9f2:	6122      	str	r2, [r4, #16]
    d9f4:	6163      	str	r3, [r4, #20]
    d9f6:	784a      	ldrb	r2, [r1, #1]
    d9f8:	6823      	ldr	r3, [r4, #0]
    d9fa:	f362 0382 	bfi	r3, r2, #2, #1
    d9fe:	6023      	str	r3, [r4, #0]
    da00:	e6b2      	b.n	d768 <am_hal_cachectrl_control+0x3c>
    da02:	bf00      	nop
    da04:	40018000 	.word	0x40018000
    da08:	40018004 	.word	0x40018004
    da0c:	f800000f 	.word	0xf800000f

0000da10 <am_hal_clkgen_control>:
    da10:	4b41      	ldr	r3, [pc, #260]	; (db18 <am_hal_clkgen_control+0x108>)
    da12:	681a      	ldr	r2, [r3, #0]
    da14:	b912      	cbnz	r2, da1c <am_hal_clkgen_control+0xc>
    da16:	4a41      	ldr	r2, [pc, #260]	; (db1c <am_hal_clkgen_control+0x10c>)
    da18:	6812      	ldr	r2, [r2, #0]
    da1a:	601a      	str	r2, [r3, #0]
    da1c:	2809      	cmp	r0, #9
    da1e:	d878      	bhi.n	db12 <am_hal_clkgen_control+0x102>
    da20:	e8df f000 	tbb	[pc, r0]
    da24:	261e160d 	.word	0x261e160d
    da28:	524c423a 	.word	0x524c423a
    da2c:	055a      	.short	0x055a
    da2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da32:	2000      	movs	r0, #0
    da34:	6a1a      	ldr	r2, [r3, #32]
    da36:	f36f 0200 	bfc	r2, #0, #1
    da3a:	621a      	str	r2, [r3, #32]
    da3c:	4770      	bx	lr
    da3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da42:	2200      	movs	r2, #0
    da44:	2147      	movs	r1, #71	; 0x47
    da46:	6159      	str	r1, [r3, #20]
    da48:	4610      	mov	r0, r2
    da4a:	619a      	str	r2, [r3, #24]
    da4c:	615a      	str	r2, [r3, #20]
    da4e:	4770      	bx	lr
    da50:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da54:	2000      	movs	r0, #0
    da56:	68d3      	ldr	r3, [r2, #12]
    da58:	f023 0301 	bic.w	r3, r3, #1
    da5c:	60d3      	str	r3, [r2, #12]
    da5e:	4770      	bx	lr
    da60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da64:	2000      	movs	r0, #0
    da66:	68d3      	ldr	r3, [r2, #12]
    da68:	f023 0302 	bic.w	r3, r3, #2
    da6c:	60d3      	str	r3, [r2, #12]
    da6e:	4770      	bx	lr
    da70:	4a2b      	ldr	r2, [pc, #172]	; (db20 <am_hal_clkgen_control+0x110>)
    da72:	68d3      	ldr	r3, [r2, #12]
    da74:	b2db      	uxtb	r3, r3
    da76:	2b21      	cmp	r3, #33	; 0x21
    da78:	d106      	bne.n	da88 <am_hal_clkgen_control+0x78>
    da7a:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da7e:	2101      	movs	r1, #1
    da80:	f361 2309 	bfi	r3, r1, #8, #2
    da84:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da88:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da8c:	2000      	movs	r0, #0
    da8e:	68d3      	ldr	r3, [r2, #12]
    da90:	f043 0301 	orr.w	r3, r3, #1
    da94:	60d3      	str	r3, [r2, #12]
    da96:	4770      	bx	lr
    da98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da9c:	2000      	movs	r0, #0
    da9e:	68d3      	ldr	r3, [r2, #12]
    daa0:	f043 0302 	orr.w	r3, r3, #2
    daa4:	60d3      	str	r3, [r2, #12]
    daa6:	4770      	bx	lr
    daa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daac:	2200      	movs	r2, #0
    daae:	2047      	movs	r0, #71	; 0x47
    dab0:	2101      	movs	r1, #1
    dab2:	6158      	str	r0, [r3, #20]
    dab4:	6199      	str	r1, [r3, #24]
    dab6:	4610      	mov	r0, r2
    dab8:	615a      	str	r2, [r3, #20]
    daba:	4770      	bx	lr
    dabc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dac0:	2000      	movs	r0, #0
    dac2:	68da      	ldr	r2, [r3, #12]
    dac4:	60da      	str	r2, [r3, #12]
    dac6:	4770      	bx	lr
    dac8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dacc:	2000      	movs	r0, #0
    dace:	68d3      	ldr	r3, [r2, #12]
    dad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dad4:	60d3      	str	r3, [r2, #12]
    dad6:	4770      	bx	lr
    dad8:	b510      	push	{r4, lr}
    dada:	4a11      	ldr	r2, [pc, #68]	; (db20 <am_hal_clkgen_control+0x110>)
    dadc:	68d3      	ldr	r3, [r2, #12]
    dade:	b2db      	uxtb	r3, r3
    dae0:	2b21      	cmp	r3, #33	; 0x21
    dae2:	460c      	mov	r4, r1
    dae4:	d008      	beq.n	daf8 <am_hal_clkgen_control+0xe8>
    dae6:	b194      	cbz	r4, db0e <am_hal_clkgen_control+0xfe>
    dae8:	6823      	ldr	r3, [r4, #0]
    daea:	f043 0301 	orr.w	r3, r3, #1
    daee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daf2:	2000      	movs	r0, #0
    daf4:	6213      	str	r3, [r2, #32]
    daf6:	bd10      	pop	{r4, pc}
    daf8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dafc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db00:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db04:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    db08:	f000 f8f6 	bl	dcf8 <am_hal_flash_delay>
    db0c:	e7eb      	b.n	dae6 <am_hal_clkgen_control+0xd6>
    db0e:	4b05      	ldr	r3, [pc, #20]	; (db24 <am_hal_clkgen_control+0x114>)
    db10:	e7ed      	b.n	daee <am_hal_clkgen_control+0xde>
    db12:	2006      	movs	r0, #6
    db14:	4770      	bx	lr
    db16:	bf00      	nop
    db18:	1000c170 	.word	0x1000c170
    db1c:	4ffff000 	.word	0x4ffff000
    db20:	40020000 	.word	0x40020000
    db24:	0025b801 	.word	0x0025b801

0000db28 <am_hal_ctimer_config>:
    db28:	b570      	push	{r4, r5, r6, lr}
    db2a:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    db2e:	2a00      	cmp	r2, #0
    db30:	b082      	sub	sp, #8
    db32:	bf18      	it	ne
    db34:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    db38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    db3c:	ea42 0403 	orr.w	r4, r2, r3
    db40:	460d      	mov	r5, r1
    db42:	4606      	mov	r6, r0
    db44:	f000 faf2 	bl	e12c <am_hal_interrupt_master_disable>
    db48:	4b0d      	ldr	r3, [pc, #52]	; (db80 <am_hal_ctimer_config+0x58>)
    db4a:	9001      	str	r0, [sp, #4]
    db4c:	0172      	lsls	r2, r6, #5
    db4e:	50d4      	str	r4, [r2, r3]
    db50:	9801      	ldr	r0, [sp, #4]
    db52:	f000 faef 	bl	e134 <am_hal_interrupt_master_set>
    db56:	686b      	ldr	r3, [r5, #4]
    db58:	b90b      	cbnz	r3, db5e <am_hal_ctimer_config+0x36>
    db5a:	682a      	ldr	r2, [r5, #0]
    db5c:	b142      	cbz	r2, db70 <am_hal_ctimer_config+0x48>
    db5e:	f3c3 0344 	ubfx	r3, r3, #1, #5
    db62:	2100      	movs	r1, #0
    db64:	4a07      	ldr	r2, [pc, #28]	; (db84 <am_hal_ctimer_config+0x5c>)
    db66:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    db6a:	5473      	strb	r3, [r6, r1]
    db6c:	b002      	add	sp, #8
    db6e:	bd70      	pop	{r4, r5, r6, pc}
    db70:	68ab      	ldr	r3, [r5, #8]
    db72:	2b00      	cmp	r3, #0
    db74:	d0fa      	beq.n	db6c <am_hal_ctimer_config+0x44>
    db76:	f3c3 0344 	ubfx	r3, r3, #1, #5
    db7a:	2101      	movs	r1, #1
    db7c:	e7f2      	b.n	db64 <am_hal_ctimer_config+0x3c>
    db7e:	bf00      	nop
    db80:	4000800c 	.word	0x4000800c
    db84:	1000c034 	.word	0x1000c034

0000db88 <am_hal_ctimer_start>:
    db88:	b570      	push	{r4, r5, r6, lr}
    db8a:	b082      	sub	sp, #8
    db8c:	460c      	mov	r4, r1
    db8e:	0146      	lsls	r6, r0, #5
    db90:	4605      	mov	r5, r0
    db92:	f000 facb 	bl	e12c <am_hal_interrupt_master_disable>
    db96:	4a0f      	ldr	r2, [pc, #60]	; (dbd4 <am_hal_ctimer_start+0x4c>)
    db98:	9001      	str	r0, [sp, #4]
    db9a:	58b3      	ldr	r3, [r6, r2]
    db9c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    dba0:	ea23 0301 	bic.w	r3, r3, r1
    dba4:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    dba8:	430b      	orrs	r3, r1
    dbaa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dbae:	bf0c      	ite	eq
    dbb0:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dbb4:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dbb8:	50b3      	str	r3, [r6, r2]
    dbba:	4b07      	ldr	r3, [pc, #28]	; (dbd8 <am_hal_ctimer_start+0x50>)
    dbbc:	9801      	ldr	r0, [sp, #4]
    dbbe:	bf0c      	ite	eq
    dbc0:	2101      	moveq	r1, #1
    dbc2:	2100      	movne	r1, #0
    dbc4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    dbc8:	545c      	strb	r4, [r3, r1]
    dbca:	f000 fab3 	bl	e134 <am_hal_interrupt_master_set>
    dbce:	b002      	add	sp, #8
    dbd0:	bd70      	pop	{r4, r5, r6, pc}
    dbd2:	bf00      	nop
    dbd4:	4000800c 	.word	0x4000800c
    dbd8:	1000c034 	.word	0x1000c034

0000dbdc <am_hal_ctimer_clear>:
    dbdc:	b570      	push	{r4, r5, r6, lr}
    dbde:	b082      	sub	sp, #8
    dbe0:	0146      	lsls	r6, r0, #5
    dbe2:	460c      	mov	r4, r1
    dbe4:	f000 faa2 	bl	e12c <am_hal_interrupt_master_disable>
    dbe8:	4d05      	ldr	r5, [pc, #20]	; (dc00 <am_hal_ctimer_clear+0x24>)
    dbea:	9001      	str	r0, [sp, #4]
    dbec:	5973      	ldr	r3, [r6, r5]
    dbee:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    dbf2:	4319      	orrs	r1, r3
    dbf4:	5171      	str	r1, [r6, r5]
    dbf6:	9801      	ldr	r0, [sp, #4]
    dbf8:	f000 fa9c 	bl	e134 <am_hal_interrupt_master_set>
    dbfc:	b002      	add	sp, #8
    dbfe:	bd70      	pop	{r4, r5, r6, pc}
    dc00:	4000800c 	.word	0x4000800c

0000dc04 <am_hal_ctimer_period_set>:
    dc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc08:	b082      	sub	sp, #8
    dc0a:	4689      	mov	r9, r1
    dc0c:	4698      	mov	r8, r3
    dc0e:	0147      	lsls	r7, r0, #5
    dc10:	4614      	mov	r4, r2
    dc12:	f000 fa8b 	bl	e12c <am_hal_interrupt_master_disable>
    dc16:	f8df a094 	ldr.w	sl, [pc, #148]	; dcac <am_hal_ctimer_period_set+0xa8>
    dc1a:	9001      	str	r0, [sp, #4]
    dc1c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dc20:	4d20      	ldr	r5, [pc, #128]	; (dca4 <am_hal_ctimer_period_set+0xa0>)
    dc22:	4e21      	ldr	r6, [pc, #132]	; (dca8 <am_hal_ctimer_period_set+0xa4>)
    dc24:	f857 300a 	ldr.w	r3, [r7, sl]
    dc28:	d01a      	beq.n	dc60 <am_hal_ctimer_period_set+0x5c>
    dc2a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dc2e:	2b80      	cmp	r3, #128	; 0x80
    dc30:	d01b      	beq.n	dc6a <am_hal_ctimer_period_set+0x66>
    dc32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc36:	2000      	movs	r0, #0
    dc38:	4591      	cmp	r9, r2
    dc3a:	4603      	mov	r3, r0
    dc3c:	d01e      	beq.n	dc7c <am_hal_ctimer_period_set+0x78>
    dc3e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dc42:	d025      	beq.n	dc90 <am_hal_ctimer_period_set+0x8c>
    dc44:	0c1b      	lsrs	r3, r3, #16
    dc46:	b2a2      	uxth	r2, r4
    dc48:	041b      	lsls	r3, r3, #16
    dc4a:	4310      	orrs	r0, r2
    dc4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dc50:	5178      	str	r0, [r7, r5]
    dc52:	51bb      	str	r3, [r7, r6]
    dc54:	9801      	ldr	r0, [sp, #4]
    dc56:	f000 fa6d 	bl	e134 <am_hal_interrupt_master_set>
    dc5a:	b002      	add	sp, #8
    dc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc60:	0c1b      	lsrs	r3, r3, #16
    dc62:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dc66:	2b80      	cmp	r3, #128	; 0x80
    dc68:	d111      	bne.n	dc8e <am_hal_ctimer_period_set+0x8a>
    dc6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc6e:	4591      	cmp	r9, r2
    dc70:	ea4f 4004 	mov.w	r0, r4, lsl #16
    dc74:	4623      	mov	r3, r4
    dc76:	ebc8 0404 	rsb	r4, r8, r4
    dc7a:	d1e0      	bne.n	dc3e <am_hal_ctimer_period_set+0x3a>
    dc7c:	b2a3      	uxth	r3, r4
    dc7e:	4318      	orrs	r0, r3
    dc80:	5178      	str	r0, [r7, r5]
    dc82:	9801      	ldr	r0, [sp, #4]
    dc84:	f000 fa56 	bl	e134 <am_hal_interrupt_master_set>
    dc88:	b002      	add	sp, #8
    dc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc8e:	2000      	movs	r0, #0
    dc90:	b2a3      	uxth	r3, r4
    dc92:	4318      	orrs	r0, r3
    dc94:	51b8      	str	r0, [r7, r6]
    dc96:	9801      	ldr	r0, [sp, #4]
    dc98:	f000 fa4c 	bl	e134 <am_hal_interrupt_master_set>
    dc9c:	b002      	add	sp, #8
    dc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dca2:	bf00      	nop
    dca4:	40008004 	.word	0x40008004
    dca8:	40008008 	.word	0x40008008
    dcac:	4000800c 	.word	0x4000800c

0000dcb0 <am_hal_ctimer_int_enable>:
    dcb0:	b510      	push	{r4, lr}
    dcb2:	b082      	sub	sp, #8
    dcb4:	4604      	mov	r4, r0
    dcb6:	f000 fa39 	bl	e12c <am_hal_interrupt_master_disable>
    dcba:	4b06      	ldr	r3, [pc, #24]	; (dcd4 <am_hal_ctimer_int_enable+0x24>)
    dcbc:	9001      	str	r0, [sp, #4]
    dcbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dcc2:	4314      	orrs	r4, r2
    dcc4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    dcc8:	9801      	ldr	r0, [sp, #4]
    dcca:	f000 fa33 	bl	e134 <am_hal_interrupt_master_set>
    dcce:	b002      	add	sp, #8
    dcd0:	bd10      	pop	{r4, pc}
    dcd2:	bf00      	nop
    dcd4:	40008000 	.word	0x40008000

0000dcd8 <am_hal_ctimer_int_clear>:
    dcd8:	b510      	push	{r4, lr}
    dcda:	b082      	sub	sp, #8
    dcdc:	4604      	mov	r4, r0
    dcde:	f000 fa25 	bl	e12c <am_hal_interrupt_master_disable>
    dce2:	4b04      	ldr	r3, [pc, #16]	; (dcf4 <am_hal_ctimer_int_clear+0x1c>)
    dce4:	9001      	str	r0, [sp, #4]
    dce6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    dcea:	9801      	ldr	r0, [sp, #4]
    dcec:	f000 fa22 	bl	e134 <am_hal_interrupt_master_set>
    dcf0:	b002      	add	sp, #8
    dcf2:	bd10      	pop	{r4, pc}
    dcf4:	40008000 	.word	0x40008000

0000dcf8 <am_hal_flash_delay>:
    dcf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dcfe:	075b      	lsls	r3, r3, #29
    dd00:	bf46      	itte	mi
    dd02:	0040      	lslmi	r0, r0, #1
    dd04:	230e      	movmi	r3, #14
    dd06:	230b      	movpl	r3, #11
    dd08:	4298      	cmp	r0, r3
    dd0a:	d800      	bhi.n	dd0e <am_hal_flash_delay+0x16>
    dd0c:	4770      	bx	lr
    dd0e:	1ac0      	subs	r0, r0, r3
    dd10:	4b00      	ldr	r3, [pc, #0]	; (dd14 <am_hal_flash_delay+0x1c>)
    dd12:	4718      	bx	r3
    dd14:	0800009d 	.word	0x0800009d

0000dd18 <am_hal_flash_delay_status_check>:
    dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd1c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    dd20:	460d      	mov	r5, r1
    dd22:	4616      	mov	r6, r2
    dd24:	461f      	mov	r7, r3
    dd26:	b1b4      	cbz	r4, dd56 <am_hal_flash_delay_status_check+0x3e>
    dd28:	4604      	mov	r4, r0
    dd2a:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dd2e:	f8df 8058 	ldr.w	r8, [pc, #88]	; dd88 <am_hal_flash_delay_status_check+0x70>
    dd32:	e009      	b.n	dd48 <am_hal_flash_delay_status_check+0x30>
    dd34:	b324      	cbz	r4, dd80 <am_hal_flash_delay_status_check+0x68>
    dd36:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dd3a:	f013 0f04 	tst.w	r3, #4
    dd3e:	bf14      	ite	ne
    dd40:	2012      	movne	r0, #18
    dd42:	2005      	moveq	r0, #5
    dd44:	3c01      	subs	r4, #1
    dd46:	47c0      	blx	r8
    dd48:	682b      	ldr	r3, [r5, #0]
    dd4a:	4033      	ands	r3, r6
    dd4c:	429f      	cmp	r7, r3
    dd4e:	d1f1      	bne.n	dd34 <am_hal_flash_delay_status_check+0x1c>
    dd50:	2000      	movs	r0, #0
    dd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd56:	f8df 8030 	ldr.w	r8, [pc, #48]	; dd88 <am_hal_flash_delay_status_check+0x70>
    dd5a:	4604      	mov	r4, r0
    dd5c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dd60:	e009      	b.n	dd76 <am_hal_flash_delay_status_check+0x5e>
    dd62:	b16c      	cbz	r4, dd80 <am_hal_flash_delay_status_check+0x68>
    dd64:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dd68:	f013 0f04 	tst.w	r3, #4
    dd6c:	bf14      	ite	ne
    dd6e:	2012      	movne	r0, #18
    dd70:	2005      	moveq	r0, #5
    dd72:	3c01      	subs	r4, #1
    dd74:	47c0      	blx	r8
    dd76:	682b      	ldr	r3, [r5, #0]
    dd78:	4033      	ands	r3, r6
    dd7a:	429f      	cmp	r7, r3
    dd7c:	d0f1      	beq.n	dd62 <am_hal_flash_delay_status_check+0x4a>
    dd7e:	e7e7      	b.n	dd50 <am_hal_flash_delay_status_check+0x38>
    dd80:	2004      	movs	r0, #4
    dd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd86:	bf00      	nop
    dd88:	0800009d 	.word	0x0800009d

0000dd8c <am_hal_flash_load_ui32>:
    dd8c:	4b00      	ldr	r3, [pc, #0]	; (dd90 <am_hal_flash_load_ui32+0x4>)
    dd8e:	4718      	bx	r3
    dd90:	08000075 	.word	0x08000075

0000dd94 <am_hal_flash_store_ui32>:
    dd94:	4b01      	ldr	r3, [pc, #4]	; (dd9c <am_hal_flash_store_ui32+0x8>)
    dd96:	f043 0301 	orr.w	r3, r3, #1
    dd9a:	4718      	bx	r3
    dd9c:	1000c044 	.word	0x1000c044

0000dda0 <am_hal_gpio_pinconfig>:
    dda0:	2831      	cmp	r0, #49	; 0x31
    dda2:	d901      	bls.n	dda8 <am_hal_gpio_pinconfig+0x8>
    dda4:	2006      	movs	r0, #6
    dda6:	4770      	bx	lr
    dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddac:	f001 0307 	and.w	r3, r1, #7
    ddb0:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    ddb4:	b085      	sub	sp, #20
    ddb6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ddba:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    ddbe:	d014      	beq.n	ddea <am_hal_gpio_pinconfig+0x4a>
    ddc0:	f3c1 1742 	ubfx	r7, r1, #5, #3
    ddc4:	1dbd      	adds	r5, r7, #6
    ddc6:	f005 0507 	and.w	r5, r5, #7
    ddca:	2d03      	cmp	r5, #3
    ddcc:	f042 0201 	orr.w	r2, r2, #1
    ddd0:	f200 80a7 	bhi.w	df22 <am_hal_gpio_pinconfig+0x182>
    ddd4:	4d82      	ldr	r5, [pc, #520]	; (dfe0 <am_hal_gpio_pinconfig+0x240>)
    ddd6:	5c2d      	ldrb	r5, [r5, r0]
    ddd8:	07ee      	lsls	r6, r5, #31
    ddda:	d403      	bmi.n	dde4 <am_hal_gpio_pinconfig+0x44>
    dddc:	4881      	ldr	r0, [pc, #516]	; (dfe4 <am_hal_gpio_pinconfig+0x244>)
    ddde:	b005      	add	sp, #20
    dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dde4:	3f02      	subs	r7, #2
    dde6:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    ddea:	2c00      	cmp	r4, #0
    ddec:	f040 8091 	bne.w	df12 <am_hal_gpio_pinconfig+0x172>
    ddf0:	4c7d      	ldr	r4, [pc, #500]	; (dfe8 <am_hal_gpio_pinconfig+0x248>)
    ddf2:	4d7e      	ldr	r5, [pc, #504]	; (dfec <am_hal_gpio_pinconfig+0x24c>)
    ddf4:	5c24      	ldrb	r4, [r4, r0]
    ddf6:	5c2d      	ldrb	r5, [r5, r0]
    ddf8:	411c      	asrs	r4, r3
    ddfa:	f014 0f01 	tst.w	r4, #1
    ddfe:	bf0c      	ite	eq
    de00:	2400      	moveq	r4, #0
    de02:	2402      	movne	r4, #2
    de04:	42ab      	cmp	r3, r5
    de06:	ea42 0204 	orr.w	r2, r2, r4
    de0a:	f000 8096 	beq.w	df3a <am_hal_gpio_pinconfig+0x19a>
    de0e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de12:	105d      	asrs	r5, r3, #1
    de14:	f3c1 2681 	ubfx	r6, r1, #10, #2
    de18:	00db      	lsls	r3, r3, #3
    de1a:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    de1e:	f003 0408 	and.w	r4, r3, #8
    de22:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    de26:	f00e 060c 	and.w	r6, lr, #12
    de2a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    de2e:	2e04      	cmp	r6, #4
    de30:	ea43 0304 	orr.w	r3, r3, r4
    de34:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    de38:	462c      	mov	r4, r5
    de3a:	f000 808b 	beq.w	df54 <am_hal_gpio_pinconfig+0x1b4>
    de3e:	4c6c      	ldr	r4, [pc, #432]	; (dff0 <am_hal_gpio_pinconfig+0x250>)
    de40:	6827      	ldr	r7, [r4, #0]
    de42:	1bcf      	subs	r7, r1, r7
    de44:	fab7 f787 	clz	r7, r7
    de48:	097f      	lsrs	r7, r7, #5
    de4a:	f01e 0f60 	tst.w	lr, #96	; 0x60
    de4e:	bf04      	itt	eq
    de50:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    de54:	f364 0300 	bfieq	r3, r4, #0, #1
    de58:	0084      	lsls	r4, r0, #2
    de5a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de5e:	2902      	cmp	r1, #2
    de60:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    de64:	d078      	beq.n	df58 <am_hal_gpio_pinconfig+0x1b8>
    de66:	d87f      	bhi.n	df68 <am_hal_gpio_pinconfig+0x1c8>
    de68:	2901      	cmp	r1, #1
    de6a:	f04f 0100 	mov.w	r1, #0
    de6e:	bf08      	it	eq
    de70:	f042 0204 	orreq.w	r2, r2, #4
    de74:	f005 0518 	and.w	r5, r5, #24
    de78:	9101      	str	r1, [sp, #4]
    de7a:	f004 041c 	and.w	r4, r4, #28
    de7e:	f020 0a03 	bic.w	sl, r0, #3
    de82:	f04f 090f 	mov.w	r9, #15
    de86:	fa09 f904 	lsl.w	r9, r9, r4
    de8a:	0841      	lsrs	r1, r0, #1
    de8c:	26ff      	movs	r6, #255	; 0xff
    de8e:	fa03 f404 	lsl.w	r4, r3, r4
    de92:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    de96:	40ae      	lsls	r6, r5
    de98:	9300      	str	r3, [sp, #0]
    de9a:	fa02 f505 	lsl.w	r5, r2, r5
    de9e:	4683      	mov	fp, r0
    dea0:	f021 0803 	bic.w	r8, r1, #3
    dea4:	f000 f942 	bl	e12c <am_hal_interrupt_master_disable>
    dea8:	9b00      	ldr	r3, [sp, #0]
    deaa:	9003      	str	r0, [sp, #12]
    deac:	ea6f 0909 	mvn.w	r9, r9
    deb0:	43f6      	mvns	r6, r6
    deb2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    deb6:	f8df e15c 	ldr.w	lr, [pc, #348]	; e014 <am_hal_gpio_pinconfig+0x274>
    deba:	4a4e      	ldr	r2, [pc, #312]	; (dff4 <am_hal_gpio_pinconfig+0x254>)
    debc:	b15f      	cbz	r7, ded6 <am_hal_gpio_pinconfig+0x136>
    debe:	ea4f 07db 	mov.w	r7, fp, lsr #3
    dec2:	f00b 001f 	and.w	r0, fp, #31
    dec6:	f007 0704 	and.w	r7, r7, #4
    deca:	f04f 0b01 	mov.w	fp, #1
    dece:	494a      	ldr	r1, [pc, #296]	; (dff8 <am_hal_gpio_pinconfig+0x258>)
    ded0:	fa0b f000 	lsl.w	r0, fp, r0
    ded4:	5078      	str	r0, [r7, r1]
    ded6:	4849      	ldr	r0, [pc, #292]	; (dffc <am_hal_gpio_pinconfig+0x25c>)
    ded8:	2773      	movs	r7, #115	; 0x73
    deda:	6607      	str	r7, [r0, #96]	; 0x60
    dedc:	681f      	ldr	r7, [r3, #0]
    dede:	4037      	ands	r7, r6
    dee0:	433d      	orrs	r5, r7
    dee2:	601d      	str	r5, [r3, #0]
    dee4:	f858 300e 	ldr.w	r3, [r8, lr]
    dee8:	ea09 0303 	and.w	r3, r9, r3
    deec:	4323      	orrs	r3, r4
    deee:	f848 300e 	str.w	r3, [r8, lr]
    def2:	f85a 3002 	ldr.w	r3, [sl, r2]
    def6:	401e      	ands	r6, r3
    def8:	9b01      	ldr	r3, [sp, #4]
    defa:	2400      	movs	r4, #0
    defc:	431e      	orrs	r6, r3
    defe:	f84a 6002 	str.w	r6, [sl, r2]
    df02:	6604      	str	r4, [r0, #96]	; 0x60
    df04:	9803      	ldr	r0, [sp, #12]
    df06:	f000 f915 	bl	e134 <am_hal_interrupt_master_set>
    df0a:	4620      	mov	r0, r4
    df0c:	b005      	add	sp, #20
    df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df12:	2c01      	cmp	r4, #1
    df14:	d017      	beq.n	df46 <am_hal_gpio_pinconfig+0x1a6>
    df16:	2c02      	cmp	r4, #2
    df18:	d035      	beq.n	df86 <am_hal_gpio_pinconfig+0x1e6>
    df1a:	4839      	ldr	r0, [pc, #228]	; (e000 <am_hal_gpio_pinconfig+0x260>)
    df1c:	b005      	add	sp, #20
    df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df22:	2ec0      	cmp	r6, #192	; 0xc0
    df24:	d02a      	beq.n	df7c <am_hal_gpio_pinconfig+0x1dc>
    df26:	2e20      	cmp	r6, #32
    df28:	f47f af5f 	bne.w	ddea <am_hal_gpio_pinconfig+0x4a>
    df2c:	2814      	cmp	r0, #20
    df2e:	f43f af55 	beq.w	dddc <am_hal_gpio_pinconfig+0x3c>
    df32:	2c00      	cmp	r4, #0
    df34:	f43f af5c 	beq.w	ddf0 <am_hal_gpio_pinconfig+0x50>
    df38:	e7eb      	b.n	df12 <am_hal_gpio_pinconfig+0x172>
    df3a:	f3c1 4402 	ubfx	r4, r1, #16, #3
    df3e:	2c07      	cmp	r4, #7
    df40:	d128      	bne.n	df94 <am_hal_gpio_pinconfig+0x1f4>
    df42:	4830      	ldr	r0, [pc, #192]	; (e004 <am_hal_gpio_pinconfig+0x264>)
    df44:	e74b      	b.n	ddde <am_hal_gpio_pinconfig+0x3e>
    df46:	4c26      	ldr	r4, [pc, #152]	; (dfe0 <am_hal_gpio_pinconfig+0x240>)
    df48:	5c24      	ldrb	r4, [r4, r0]
    df4a:	07a5      	lsls	r5, r4, #30
    df4c:	d5e5      	bpl.n	df1a <am_hal_gpio_pinconfig+0x17a>
    df4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    df52:	e74d      	b.n	ddf0 <am_hal_gpio_pinconfig+0x50>
    df54:	2701      	movs	r7, #1
    df56:	e778      	b.n	de4a <am_hal_gpio_pinconfig+0xaa>
    df58:	f005 0518 	and.w	r5, r5, #24
    df5c:	f04f 0801 	mov.w	r8, #1
    df60:	fa08 f105 	lsl.w	r1, r8, r5
    df64:	9101      	str	r1, [sp, #4]
    df66:	e788      	b.n	de7a <am_hal_gpio_pinconfig+0xda>
    df68:	f005 0518 	and.w	r5, r5, #24
    df6c:	f04f 0801 	mov.w	r8, #1
    df70:	fa08 f105 	lsl.w	r1, r8, r5
    df74:	f042 0204 	orr.w	r2, r2, #4
    df78:	9101      	str	r1, [sp, #4]
    df7a:	e77e      	b.n	de7a <am_hal_gpio_pinconfig+0xda>
    df7c:	2814      	cmp	r0, #20
    df7e:	f43f af34 	beq.w	ddea <am_hal_gpio_pinconfig+0x4a>
    df82:	4821      	ldr	r0, [pc, #132]	; (e008 <am_hal_gpio_pinconfig+0x268>)
    df84:	e72b      	b.n	ddde <am_hal_gpio_pinconfig+0x3e>
    df86:	4c16      	ldr	r4, [pc, #88]	; (dfe0 <am_hal_gpio_pinconfig+0x240>)
    df88:	5c24      	ldrb	r4, [r4, r0]
    df8a:	0764      	lsls	r4, r4, #29
    df8c:	d5c5      	bpl.n	df1a <am_hal_gpio_pinconfig+0x17a>
    df8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    df92:	e72d      	b.n	ddf0 <am_hal_gpio_pinconfig+0x50>
    df94:	4d1d      	ldr	r5, [pc, #116]	; (e00c <am_hal_gpio_pinconfig+0x26c>)
    df96:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    df9a:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    df9e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dfa2:	429e      	cmp	r6, r3
    dfa4:	d00c      	beq.n	dfc0 <am_hal_gpio_pinconfig+0x220>
    dfa6:	0084      	lsls	r4, r0, #2
    dfa8:	4425      	add	r5, r4
    dfaa:	786e      	ldrb	r6, [r5, #1]
    dfac:	429e      	cmp	r6, r3
    dfae:	d012      	beq.n	dfd6 <am_hal_gpio_pinconfig+0x236>
    dfb0:	78ae      	ldrb	r6, [r5, #2]
    dfb2:	429e      	cmp	r6, r3
    dfb4:	d00d      	beq.n	dfd2 <am_hal_gpio_pinconfig+0x232>
    dfb6:	78ed      	ldrb	r5, [r5, #3]
    dfb8:	429d      	cmp	r5, r3
    dfba:	d00e      	beq.n	dfda <am_hal_gpio_pinconfig+0x23a>
    dfbc:	4814      	ldr	r0, [pc, #80]	; (e010 <am_hal_gpio_pinconfig+0x270>)
    dfbe:	e70e      	b.n	ddde <am_hal_gpio_pinconfig+0x3e>
    dfc0:	2300      	movs	r3, #0
    dfc2:	0084      	lsls	r4, r0, #2
    dfc4:	005b      	lsls	r3, r3, #1
    dfc6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dfca:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dfce:	2700      	movs	r7, #0
    dfd0:	e743      	b.n	de5a <am_hal_gpio_pinconfig+0xba>
    dfd2:	2302      	movs	r3, #2
    dfd4:	e7f6      	b.n	dfc4 <am_hal_gpio_pinconfig+0x224>
    dfd6:	2301      	movs	r3, #1
    dfd8:	e7f4      	b.n	dfc4 <am_hal_gpio_pinconfig+0x224>
    dfda:	2303      	movs	r3, #3
    dfdc:	e7f2      	b.n	dfc4 <am_hal_gpio_pinconfig+0x224>
    dfde:	bf00      	nop
    dfe0:	0000eea8 	.word	0x0000eea8
    dfe4:	08000100 	.word	0x08000100
    dfe8:	0000efa4 	.word	0x0000efa4
    dfec:	0000efe0 	.word	0x0000efe0
    dff0:	0000efd8 	.word	0x0000efd8
    dff4:	400100e0 	.word	0x400100e0
    dff8:	400100b4 	.word	0x400100b4
    dffc:	40010000 	.word	0x40010000
    e000:	08000102 	.word	0x08000102
    e004:	08000103 	.word	0x08000103
    e008:	08000101 	.word	0x08000101
    e00c:	0000eedc 	.word	0x0000eedc
    e010:	08000104 	.word	0x08000104
    e014:	40010040 	.word	0x40010040

0000e018 <am_hal_gpio_state_write>:
    e018:	2831      	cmp	r0, #49	; 0x31
    e01a:	d901      	bls.n	e020 <am_hal_gpio_state_write+0x8>
    e01c:	2005      	movs	r0, #5
    e01e:	4770      	bx	lr
    e020:	2905      	cmp	r1, #5
    e022:	d901      	bls.n	e028 <am_hal_gpio_state_write+0x10>
    e024:	2006      	movs	r0, #6
    e026:	4770      	bx	lr
    e028:	b570      	push	{r4, r5, r6, lr}
    e02a:	f000 031f 	and.w	r3, r0, #31
    e02e:	b082      	sub	sp, #8
    e030:	08c0      	lsrs	r0, r0, #3
    e032:	2201      	movs	r2, #1
    e034:	460d      	mov	r5, r1
    e036:	f000 0404 	and.w	r4, r0, #4
    e03a:	fa02 f603 	lsl.w	r6, r2, r3
    e03e:	f000 f875 	bl	e12c <am_hal_interrupt_master_disable>
    e042:	1e69      	subs	r1, r5, #1
    e044:	9001      	str	r0, [sp, #4]
    e046:	2904      	cmp	r1, #4
    e048:	d817      	bhi.n	e07a <am_hal_gpio_state_write+0x62>
    e04a:	e8df f001 	tbb	[pc, r1]
    e04e:	0e13      	.short	0x0e13
    e050:	030b      	.short	0x030b
    e052:	19          	.byte	0x19
    e053:	00          	.byte	0x00
    e054:	4b0d      	ldr	r3, [pc, #52]	; (e08c <am_hal_gpio_state_write+0x74>)
    e056:	50e6      	str	r6, [r4, r3]
    e058:	9801      	ldr	r0, [sp, #4]
    e05a:	f000 f86b 	bl	e134 <am_hal_interrupt_master_set>
    e05e:	2000      	movs	r0, #0
    e060:	b002      	add	sp, #8
    e062:	bd70      	pop	{r4, r5, r6, pc}
    e064:	4b0a      	ldr	r3, [pc, #40]	; (e090 <am_hal_gpio_state_write+0x78>)
    e066:	50e6      	str	r6, [r4, r3]
    e068:	e7f6      	b.n	e058 <am_hal_gpio_state_write+0x40>
    e06a:	4a0a      	ldr	r2, [pc, #40]	; (e094 <am_hal_gpio_state_write+0x7c>)
    e06c:	58a3      	ldr	r3, [r4, r2]
    e06e:	4073      	eors	r3, r6
    e070:	50a3      	str	r3, [r4, r2]
    e072:	e7f1      	b.n	e058 <am_hal_gpio_state_write+0x40>
    e074:	4b08      	ldr	r3, [pc, #32]	; (e098 <am_hal_gpio_state_write+0x80>)
    e076:	50e6      	str	r6, [r4, r3]
    e078:	e7ee      	b.n	e058 <am_hal_gpio_state_write+0x40>
    e07a:	4b08      	ldr	r3, [pc, #32]	; (e09c <am_hal_gpio_state_write+0x84>)
    e07c:	50e6      	str	r6, [r4, r3]
    e07e:	e7eb      	b.n	e058 <am_hal_gpio_state_write+0x40>
    e080:	4a03      	ldr	r2, [pc, #12]	; (e090 <am_hal_gpio_state_write+0x78>)
    e082:	58a3      	ldr	r3, [r4, r2]
    e084:	4073      	eors	r3, r6
    e086:	50a3      	str	r3, [r4, r2]
    e088:	e7e6      	b.n	e058 <am_hal_gpio_state_write+0x40>
    e08a:	bf00      	nop
    e08c:	400100a8 	.word	0x400100a8
    e090:	400100b4 	.word	0x400100b4
    e094:	40010088 	.word	0x40010088
    e098:	40010090 	.word	0x40010090
    e09c:	40010098 	.word	0x40010098

0000e0a0 <am_hal_gpio_interrupt_enable>:
    e0a0:	4b0f      	ldr	r3, [pc, #60]	; (e0e0 <am_hal_gpio_interrupt_enable+0x40>)
    e0a2:	2200      	movs	r2, #0
    e0a4:	4002      	ands	r2, r0
    e0a6:	400b      	ands	r3, r1
    e0a8:	4313      	orrs	r3, r2
    e0aa:	d001      	beq.n	e0b0 <am_hal_gpio_interrupt_enable+0x10>
    e0ac:	2005      	movs	r0, #5
    e0ae:	4770      	bx	lr
    e0b0:	b530      	push	{r4, r5, lr}
    e0b2:	b083      	sub	sp, #12
    e0b4:	460d      	mov	r5, r1
    e0b6:	4604      	mov	r4, r0
    e0b8:	f000 f838 	bl	e12c <am_hal_interrupt_master_disable>
    e0bc:	4b09      	ldr	r3, [pc, #36]	; (e0e4 <am_hal_gpio_interrupt_enable+0x44>)
    e0be:	9001      	str	r0, [sp, #4]
    e0c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e0c4:	4322      	orrs	r2, r4
    e0c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e0ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    e0ce:	432a      	orrs	r2, r5
    e0d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e0d4:	9801      	ldr	r0, [sp, #4]
    e0d6:	f000 f82d 	bl	e134 <am_hal_interrupt_master_set>
    e0da:	2000      	movs	r0, #0
    e0dc:	b003      	add	sp, #12
    e0de:	bd30      	pop	{r4, r5, pc}
    e0e0:	fffc0000 	.word	0xfffc0000
    e0e4:	40010000 	.word	0x40010000

0000e0e8 <am_hal_gpio_interrupt_clear>:
    e0e8:	4b0c      	ldr	r3, [pc, #48]	; (e11c <am_hal_gpio_interrupt_clear+0x34>)
    e0ea:	2200      	movs	r2, #0
    e0ec:	4002      	ands	r2, r0
    e0ee:	400b      	ands	r3, r1
    e0f0:	4313      	orrs	r3, r2
    e0f2:	d001      	beq.n	e0f8 <am_hal_gpio_interrupt_clear+0x10>
    e0f4:	2005      	movs	r0, #5
    e0f6:	4770      	bx	lr
    e0f8:	b530      	push	{r4, r5, lr}
    e0fa:	b083      	sub	sp, #12
    e0fc:	460d      	mov	r5, r1
    e0fe:	4604      	mov	r4, r0
    e100:	f000 f814 	bl	e12c <am_hal_interrupt_master_disable>
    e104:	4b06      	ldr	r3, [pc, #24]	; (e120 <am_hal_gpio_interrupt_clear+0x38>)
    e106:	9001      	str	r0, [sp, #4]
    e108:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e10c:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    e110:	9801      	ldr	r0, [sp, #4]
    e112:	f000 f80f 	bl	e134 <am_hal_interrupt_master_set>
    e116:	2000      	movs	r0, #0
    e118:	b003      	add	sp, #12
    e11a:	bd30      	pop	{r4, r5, pc}
    e11c:	fffc0000 	.word	0xfffc0000
    e120:	40010000 	.word	0x40010000

0000e124 <am_hal_interrupt_master_enable>:
    e124:	f3ef 8010 	mrs	r0, PRIMASK
    e128:	b662      	cpsie	i
    e12a:	4770      	bx	lr

0000e12c <am_hal_interrupt_master_disable>:
    e12c:	f3ef 8010 	mrs	r0, PRIMASK
    e130:	b672      	cpsid	i
    e132:	4770      	bx	lr

0000e134 <am_hal_interrupt_master_set>:
    e134:	f380 8810 	msr	PRIMASK, r0
    e138:	4770      	bx	lr
    e13a:	bf00      	nop

0000e13c <am_hal_mcuctrl_info_get>:
    e13c:	b4f0      	push	{r4, r5, r6, r7}
    e13e:	b121      	cbz	r1, e14a <am_hal_mcuctrl_info_get+0xe>
    e140:	2801      	cmp	r0, #1
    e142:	d038      	beq.n	e1b6 <am_hal_mcuctrl_info_get+0x7a>
    e144:	d320      	bcc.n	e188 <am_hal_mcuctrl_info_get+0x4c>
    e146:	2802      	cmp	r0, #2
    e148:	d002      	beq.n	e150 <am_hal_mcuctrl_info_get+0x14>
    e14a:	2006      	movs	r0, #6
    e14c:	bcf0      	pop	{r4, r5, r6, r7}
    e14e:	4770      	bx	lr
    e150:	4a41      	ldr	r2, [pc, #260]	; (e258 <am_hal_mcuctrl_info_get+0x11c>)
    e152:	684d      	ldr	r5, [r1, #4]
    e154:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e158:	694c      	ldr	r4, [r1, #20]
    e15a:	f003 0601 	and.w	r6, r3, #1
    e15e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e162:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e166:	700e      	strb	r6, [r1, #0]
    e168:	7208      	strb	r0, [r1, #8]
    e16a:	740b      	strb	r3, [r1, #16]
    e16c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e170:	60cb      	str	r3, [r1, #12]
    e172:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e176:	4328      	orrs	r0, r5
    e178:	6048      	str	r0, [r1, #4]
    e17a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e17e:	4323      	orrs	r3, r4
    e180:	2000      	movs	r0, #0
    e182:	614b      	str	r3, [r1, #20]
    e184:	bcf0      	pop	{r4, r5, r6, r7}
    e186:	4770      	bx	lr
    e188:	4a33      	ldr	r2, [pc, #204]	; (e258 <am_hal_mcuctrl_info_get+0x11c>)
    e18a:	6993      	ldr	r3, [r2, #24]
    e18c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e190:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e194:	7008      	strb	r0, [r1, #0]
    e196:	704b      	strb	r3, [r1, #1]
    e198:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e19c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e1a0:	710b      	strb	r3, [r1, #4]
    e1a2:	6953      	ldr	r3, [r2, #20]
    e1a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e1a8:	f003 0301 	and.w	r3, r3, #1
    e1ac:	2000      	movs	r0, #0
    e1ae:	708a      	strb	r2, [r1, #2]
    e1b0:	70cb      	strb	r3, [r1, #3]
    e1b2:	bcf0      	pop	{r4, r5, r6, r7}
    e1b4:	4770      	bx	lr
    e1b6:	4b28      	ldr	r3, [pc, #160]	; (e258 <am_hal_mcuctrl_info_get+0x11c>)
    e1b8:	4c28      	ldr	r4, [pc, #160]	; (e25c <am_hal_mcuctrl_info_get+0x120>)
    e1ba:	681a      	ldr	r2, [r3, #0]
    e1bc:	600a      	str	r2, [r1, #0]
    e1be:	6858      	ldr	r0, [r3, #4]
    e1c0:	6048      	str	r0, [r1, #4]
    e1c2:	6898      	ldr	r0, [r3, #8]
    e1c4:	6088      	str	r0, [r1, #8]
    e1c6:	68d8      	ldr	r0, [r3, #12]
    e1c8:	60c8      	str	r0, [r1, #12]
    e1ca:	691d      	ldr	r5, [r3, #16]
    e1cc:	4824      	ldr	r0, [pc, #144]	; (e260 <am_hal_mcuctrl_info_get+0x124>)
    e1ce:	610d      	str	r5, [r1, #16]
    e1d0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e1d4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e1d8:	695d      	ldr	r5, [r3, #20]
    e1da:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e1de:	4b21      	ldr	r3, [pc, #132]	; (e264 <am_hal_mcuctrl_info_get+0x128>)
    e1e0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e1e4:	6208      	str	r0, [r1, #32]
    e1e6:	f002 0201 	and.w	r2, r2, #1
    e1ea:	614d      	str	r5, [r1, #20]
    e1ec:	61cc      	str	r4, [r1, #28]
    e1ee:	618a      	str	r2, [r1, #24]
    e1f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e1f4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e1f8:	b2d0      	uxtb	r0, r2
    e1fa:	f004 020f 	and.w	r2, r4, #15
    e1fe:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e202:	624a      	str	r2, [r1, #36]	; 0x24
    e204:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e208:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e20c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e210:	f004 020f 	and.w	r2, r4, #15
    e214:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e218:	628a      	str	r2, [r1, #40]	; 0x28
    e21a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e21e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e222:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e226:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e22a:	4302      	orrs	r2, r0
    e22c:	62ca      	str	r2, [r1, #44]	; 0x2c
    e22e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e232:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e236:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e23a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e23e:	b2c0      	uxtb	r0, r0
    e240:	0400      	lsls	r0, r0, #16
    e242:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e246:	b2d2      	uxtb	r2, r2
    e248:	431a      	orrs	r2, r3
    e24a:	b2e3      	uxtb	r3, r4
    e24c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e250:	630b      	str	r3, [r1, #48]	; 0x30
    e252:	2000      	movs	r0, #0
    e254:	bcf0      	pop	{r4, r5, r6, r7}
    e256:	4770      	bx	lr
    e258:	40020000 	.word	0x40020000
    e25c:	0000f014 	.word	0x0000f014
    e260:	0000f054 	.word	0x0000f054
    e264:	f0000f00 	.word	0xf0000f00

0000e268 <am_hal_pwrctrl_periph_enable>:
    e268:	b570      	push	{r4, r5, r6, lr}
    e26a:	b082      	sub	sp, #8
    e26c:	4604      	mov	r4, r0
    e26e:	f7ff ff5d 	bl	e12c <am_hal_interrupt_master_disable>
    e272:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e276:	4d0f      	ldr	r5, [pc, #60]	; (e2b4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e278:	4e0f      	ldr	r6, [pc, #60]	; (e2b8 <am_hal_pwrctrl_periph_enable+0x50>)
    e27a:	9001      	str	r0, [sp, #4]
    e27c:	00a4      	lsls	r4, r4, #2
    e27e:	68aa      	ldr	r2, [r5, #8]
    e280:	5933      	ldr	r3, [r6, r4]
    e282:	4313      	orrs	r3, r2
    e284:	60ab      	str	r3, [r5, #8]
    e286:	9801      	ldr	r0, [sp, #4]
    e288:	4434      	add	r4, r6
    e28a:	f7ff ff53 	bl	e134 <am_hal_interrupt_master_set>
    e28e:	20a0      	movs	r0, #160	; 0xa0
    e290:	f7ff fd32 	bl	dcf8 <am_hal_flash_delay>
    e294:	69ab      	ldr	r3, [r5, #24]
    e296:	6864      	ldr	r4, [r4, #4]
    e298:	4223      	tst	r3, r4
    e29a:	d103      	bne.n	e2a4 <am_hal_pwrctrl_periph_enable+0x3c>
    e29c:	20a0      	movs	r0, #160	; 0xa0
    e29e:	f7ff fd2b 	bl	dcf8 <am_hal_flash_delay>
    e2a2:	69ab      	ldr	r3, [r5, #24]
    e2a4:	4b03      	ldr	r3, [pc, #12]	; (e2b4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e2a6:	699b      	ldr	r3, [r3, #24]
    e2a8:	4223      	tst	r3, r4
    e2aa:	bf0c      	ite	eq
    e2ac:	2001      	moveq	r0, #1
    e2ae:	2000      	movne	r0, #0
    e2b0:	b002      	add	sp, #8
    e2b2:	bd70      	pop	{r4, r5, r6, pc}
    e2b4:	40021000 	.word	0x40021000
    e2b8:	0000f094 	.word	0x0000f094

0000e2bc <am_hal_pwrctrl_periph_disable>:
    e2bc:	b570      	push	{r4, r5, r6, lr}
    e2be:	b082      	sub	sp, #8
    e2c0:	4604      	mov	r4, r0
    e2c2:	f7ff ff33 	bl	e12c <am_hal_interrupt_master_disable>
    e2c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e2ca:	4d10      	ldr	r5, [pc, #64]	; (e30c <am_hal_pwrctrl_periph_disable+0x50>)
    e2cc:	4e10      	ldr	r6, [pc, #64]	; (e310 <am_hal_pwrctrl_periph_disable+0x54>)
    e2ce:	9001      	str	r0, [sp, #4]
    e2d0:	00a4      	lsls	r4, r4, #2
    e2d2:	68ab      	ldr	r3, [r5, #8]
    e2d4:	5932      	ldr	r2, [r6, r4]
    e2d6:	ea23 0302 	bic.w	r3, r3, r2
    e2da:	60ab      	str	r3, [r5, #8]
    e2dc:	9801      	ldr	r0, [sp, #4]
    e2de:	4434      	add	r4, r6
    e2e0:	f7ff ff28 	bl	e134 <am_hal_interrupt_master_set>
    e2e4:	20a0      	movs	r0, #160	; 0xa0
    e2e6:	f7ff fd07 	bl	dcf8 <am_hal_flash_delay>
    e2ea:	69ab      	ldr	r3, [r5, #24]
    e2ec:	6864      	ldr	r4, [r4, #4]
    e2ee:	4223      	tst	r3, r4
    e2f0:	d003      	beq.n	e2fa <am_hal_pwrctrl_periph_disable+0x3e>
    e2f2:	20a0      	movs	r0, #160	; 0xa0
    e2f4:	f7ff fd00 	bl	dcf8 <am_hal_flash_delay>
    e2f8:	69ab      	ldr	r3, [r5, #24]
    e2fa:	4b04      	ldr	r3, [pc, #16]	; (e30c <am_hal_pwrctrl_periph_disable+0x50>)
    e2fc:	699b      	ldr	r3, [r3, #24]
    e2fe:	4223      	tst	r3, r4
    e300:	bf14      	ite	ne
    e302:	2001      	movne	r0, #1
    e304:	2000      	moveq	r0, #0
    e306:	b002      	add	sp, #8
    e308:	bd70      	pop	{r4, r5, r6, pc}
    e30a:	bf00      	nop
    e30c:	40021000 	.word	0x40021000
    e310:	0000f094 	.word	0x0000f094

0000e314 <am_hal_pwrctrl_low_power_init>:
    e314:	b530      	push	{r4, r5, lr}
    e316:	4b33      	ldr	r3, [pc, #204]	; (e3e4 <am_hal_pwrctrl_low_power_init+0xd0>)
    e318:	681a      	ldr	r2, [r3, #0]
    e31a:	b085      	sub	sp, #20
    e31c:	b912      	cbnz	r2, e324 <am_hal_pwrctrl_low_power_init+0x10>
    e31e:	4a32      	ldr	r2, [pc, #200]	; (e3e8 <am_hal_pwrctrl_low_power_init+0xd4>)
    e320:	6812      	ldr	r2, [r2, #0]
    e322:	601a      	str	r2, [r3, #0]
    e324:	4b31      	ldr	r3, [pc, #196]	; (e3ec <am_hal_pwrctrl_low_power_init+0xd8>)
    e326:	68db      	ldr	r3, [r3, #12]
    e328:	b2db      	uxtb	r3, r3
    e32a:	2b12      	cmp	r3, #18
    e32c:	d00a      	beq.n	e344 <am_hal_pwrctrl_low_power_init+0x30>
    e32e:	4c30      	ldr	r4, [pc, #192]	; (e3f0 <am_hal_pwrctrl_low_power_init+0xdc>)
    e330:	2100      	movs	r1, #0
    e332:	200c      	movs	r0, #12
    e334:	f7ff f9fa 	bl	d72c <am_hal_cachectrl_control>
    e338:	69a3      	ldr	r3, [r4, #24]
    e33a:	05d8      	lsls	r0, r3, #23
    e33c:	d520      	bpl.n	e380 <am_hal_pwrctrl_low_power_init+0x6c>
    e33e:	2000      	movs	r0, #0
    e340:	b005      	add	sp, #20
    e342:	bd30      	pop	{r4, r5, pc}
    e344:	4c2a      	ldr	r4, [pc, #168]	; (e3f0 <am_hal_pwrctrl_low_power_init+0xdc>)
    e346:	6863      	ldr	r3, [r4, #4]
    e348:	07d9      	lsls	r1, r3, #31
    e34a:	d5f0      	bpl.n	e32e <am_hal_pwrctrl_low_power_init+0x1a>
    e34c:	f7ff feee 	bl	e12c <am_hal_interrupt_master_disable>
    e350:	9003      	str	r0, [sp, #12]
    e352:	68a3      	ldr	r3, [r4, #8]
    e354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e358:	60a3      	str	r3, [r4, #8]
    e35a:	9803      	ldr	r0, [sp, #12]
    e35c:	f7ff feea 	bl	e134 <am_hal_interrupt_master_set>
    e360:	20a0      	movs	r0, #160	; 0xa0
    e362:	f7ff fcc9 	bl	dcf8 <am_hal_flash_delay>
    e366:	69a3      	ldr	r3, [r4, #24]
    e368:	061a      	lsls	r2, r3, #24
    e36a:	d403      	bmi.n	e374 <am_hal_pwrctrl_low_power_init+0x60>
    e36c:	20a0      	movs	r0, #160	; 0xa0
    e36e:	f7ff fcc3 	bl	dcf8 <am_hal_flash_delay>
    e372:	69a3      	ldr	r3, [r4, #24]
    e374:	4b1e      	ldr	r3, [pc, #120]	; (e3f0 <am_hal_pwrctrl_low_power_init+0xdc>)
    e376:	699b      	ldr	r3, [r3, #24]
    e378:	061b      	lsls	r3, r3, #24
    e37a:	d4d8      	bmi.n	e32e <am_hal_pwrctrl_low_power_init+0x1a>
    e37c:	2001      	movs	r0, #1
    e37e:	e7df      	b.n	e340 <am_hal_pwrctrl_low_power_init+0x2c>
    e380:	4d1a      	ldr	r5, [pc, #104]	; (e3ec <am_hal_pwrctrl_low_power_init+0xd8>)
    e382:	491c      	ldr	r1, [pc, #112]	; (e3f4 <am_hal_pwrctrl_low_power_init+0xe0>)
    e384:	7e2a      	ldrb	r2, [r5, #24]
    e386:	2001      	movs	r0, #1
    e388:	4302      	orrs	r2, r0
    e38a:	2307      	movs	r3, #7
    e38c:	762a      	strb	r2, [r5, #24]
    e38e:	9000      	str	r0, [sp, #0]
    e390:	461a      	mov	r2, r3
    e392:	f242 7010 	movw	r0, #10000	; 0x2710
    e396:	f7ff fcbf 	bl	dd18 <am_hal_flash_delay_status_check>
    e39a:	b110      	cbz	r0, e3a2 <am_hal_pwrctrl_low_power_init+0x8e>
    e39c:	2004      	movs	r0, #4
    e39e:	b005      	add	sp, #20
    e3a0:	bd30      	pop	{r4, r5, pc}
    e3a2:	6823      	ldr	r3, [r4, #0]
    e3a4:	f043 0301 	orr.w	r3, r3, #1
    e3a8:	6023      	str	r3, [r4, #0]
    e3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e3b0:	6263      	str	r3, [r4, #36]	; 0x24
    e3b2:	68eb      	ldr	r3, [r5, #12]
    e3b4:	b2db      	uxtb	r3, r3
    e3b6:	2b11      	cmp	r3, #17
    e3b8:	d1c1      	bne.n	e33e <am_hal_pwrctrl_low_power_init+0x2a>
    e3ba:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e3be:	f360 5356 	bfi	r3, r0, #21, #2
    e3c2:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e3c6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e3ca:	220f      	movs	r2, #15
    e3cc:	f362 138b 	bfi	r3, r2, #6, #6
    e3d0:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e3d4:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e3d8:	f362 0305 	bfi	r3, r2, #0, #6
    e3dc:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e3e0:	e7ae      	b.n	e340 <am_hal_pwrctrl_low_power_init+0x2c>
    e3e2:	bf00      	nop
    e3e4:	1000c170 	.word	0x1000c170
    e3e8:	4ffff000 	.word	0x4ffff000
    e3ec:	40020000 	.word	0x40020000
    e3f0:	40021000 	.word	0x40021000
    e3f4:	40020018 	.word	0x40020018

0000e3f8 <am_hal_rtc_osc_disable>:
    e3f8:	4a03      	ldr	r2, [pc, #12]	; (e408 <am_hal_rtc_osc_disable+0x10>)
    e3fa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e3fe:	f043 0310 	orr.w	r3, r3, #16
    e402:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e406:	4770      	bx	lr
    e408:	40004200 	.word	0x40004200

0000e40c <am_hal_uart_initialize>:
    e40c:	2801      	cmp	r0, #1
    e40e:	d901      	bls.n	e414 <am_hal_uart_initialize+0x8>
    e410:	2005      	movs	r0, #5
    e412:	4770      	bx	lr
    e414:	b169      	cbz	r1, e432 <am_hal_uart_initialize+0x26>
    e416:	b5f0      	push	{r4, r5, r6, r7, lr}
    e418:	2264      	movs	r2, #100	; 0x64
    e41a:	4e0e      	ldr	r6, [pc, #56]	; (e454 <am_hal_uart_initialize+0x48>)
    e41c:	fb02 f200 	mul.w	r2, r2, r0
    e420:	18b4      	adds	r4, r6, r2
    e422:	4603      	mov	r3, r0
    e424:	78e0      	ldrb	r0, [r4, #3]
    e426:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e42a:	b2fd      	uxtb	r5, r7
    e42c:	b11d      	cbz	r5, e436 <am_hal_uart_initialize+0x2a>
    e42e:	2007      	movs	r0, #7
    e430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e432:	2006      	movs	r0, #6
    e434:	4770      	bx	lr
    e436:	f040 0001 	orr.w	r0, r0, #1
    e43a:	70e0      	strb	r0, [r4, #3]
    e43c:	58b0      	ldr	r0, [r6, r2]
    e43e:	f8df e018 	ldr.w	lr, [pc, #24]	; e458 <am_hal_uart_initialize+0x4c>
    e442:	f36e 0017 	bfi	r0, lr, #0, #24
    e446:	50b0      	str	r0, [r6, r2]
    e448:	6263      	str	r3, [r4, #36]	; 0x24
    e44a:	7127      	strb	r7, [r4, #4]
    e44c:	6625      	str	r5, [r4, #96]	; 0x60
    e44e:	4628      	mov	r0, r5
    e450:	600c      	str	r4, [r1, #0]
    e452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e454:	1000c17c 	.word	0x1000c17c
    e458:	00ea9e06 	.word	0x00ea9e06

0000e45c <am_hal_uart_power_control>:
    e45c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e460:	6804      	ldr	r4, [r0, #0]
    e462:	4b36      	ldr	r3, [pc, #216]	; (e53c <am_hal_uart_power_control+0xe0>)
    e464:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e468:	429c      	cmp	r4, r3
    e46a:	b083      	sub	sp, #12
    e46c:	d003      	beq.n	e476 <am_hal_uart_power_control+0x1a>
    e46e:	2002      	movs	r0, #2
    e470:	b003      	add	sp, #12
    e472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e476:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e478:	4605      	mov	r5, r0
    e47a:	f107 0008 	add.w	r0, r7, #8
    e47e:	4691      	mov	r9, r2
    e480:	460e      	mov	r6, r1
    e482:	fa5f f880 	uxtb.w	r8, r0
    e486:	b181      	cbz	r1, e4aa <am_hal_uart_power_control+0x4e>
    e488:	2902      	cmp	r1, #2
    e48a:	d80c      	bhi.n	e4a6 <am_hal_uart_power_control+0x4a>
    e48c:	b992      	cbnz	r2, e4b4 <am_hal_uart_power_control+0x58>
    e48e:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e492:	371c      	adds	r7, #28
    e494:	033f      	lsls	r7, r7, #12
    e496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e49a:	647b      	str	r3, [r7, #68]	; 0x44
    e49c:	4640      	mov	r0, r8
    e49e:	f7ff ff0d 	bl	e2bc <am_hal_pwrctrl_periph_disable>
    e4a2:	2000      	movs	r0, #0
    e4a4:	e7e4      	b.n	e470 <am_hal_uart_power_control+0x14>
    e4a6:	2006      	movs	r0, #6
    e4a8:	e7e2      	b.n	e470 <am_hal_uart_power_control+0x14>
    e4aa:	b322      	cbz	r2, e4f6 <am_hal_uart_power_control+0x9a>
    e4ac:	792b      	ldrb	r3, [r5, #4]
    e4ae:	bb3b      	cbnz	r3, e500 <am_hal_uart_power_control+0xa4>
    e4b0:	2007      	movs	r0, #7
    e4b2:	e7dd      	b.n	e470 <am_hal_uart_power_control+0x14>
    e4b4:	f7ff fe3a 	bl	e12c <am_hal_interrupt_master_disable>
    e4b8:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e4bc:	331c      	adds	r3, #28
    e4be:	031b      	lsls	r3, r3, #12
    e4c0:	9001      	str	r0, [sp, #4]
    e4c2:	6a1a      	ldr	r2, [r3, #32]
    e4c4:	60aa      	str	r2, [r5, #8]
    e4c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e4c8:	60ea      	str	r2, [r5, #12]
    e4ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e4cc:	612a      	str	r2, [r5, #16]
    e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e4d0:	616a      	str	r2, [r5, #20]
    e4d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e4d4:	61aa      	str	r2, [r5, #24]
    e4d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e4d8:	61ea      	str	r2, [r5, #28]
    e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e4dc:	622b      	str	r3, [r5, #32]
    e4de:	2301      	movs	r3, #1
    e4e0:	712b      	strb	r3, [r5, #4]
    e4e2:	9801      	ldr	r0, [sp, #4]
    e4e4:	f7ff fe26 	bl	e134 <am_hal_interrupt_master_set>
    e4e8:	682b      	ldr	r3, [r5, #0]
    e4ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4ee:	42a3      	cmp	r3, r4
    e4f0:	d1d4      	bne.n	e49c <am_hal_uart_power_control+0x40>
    e4f2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e4f4:	e7cb      	b.n	e48e <am_hal_uart_power_control+0x32>
    e4f6:	4640      	mov	r0, r8
    e4f8:	f7ff feb6 	bl	e268 <am_hal_pwrctrl_periph_enable>
    e4fc:	4648      	mov	r0, r9
    e4fe:	e7b7      	b.n	e470 <am_hal_uart_power_control+0x14>
    e500:	4640      	mov	r0, r8
    e502:	f7ff feb1 	bl	e268 <am_hal_pwrctrl_periph_enable>
    e506:	f7ff fe11 	bl	e12c <am_hal_interrupt_master_disable>
    e50a:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e50e:	331c      	adds	r3, #28
    e510:	031b      	lsls	r3, r3, #12
    e512:	68aa      	ldr	r2, [r5, #8]
    e514:	9000      	str	r0, [sp, #0]
    e516:	621a      	str	r2, [r3, #32]
    e518:	68ea      	ldr	r2, [r5, #12]
    e51a:	625a      	str	r2, [r3, #36]	; 0x24
    e51c:	692a      	ldr	r2, [r5, #16]
    e51e:	629a      	str	r2, [r3, #40]	; 0x28
    e520:	696a      	ldr	r2, [r5, #20]
    e522:	62da      	str	r2, [r3, #44]	; 0x2c
    e524:	69aa      	ldr	r2, [r5, #24]
    e526:	631a      	str	r2, [r3, #48]	; 0x30
    e528:	69ea      	ldr	r2, [r5, #28]
    e52a:	635a      	str	r2, [r3, #52]	; 0x34
    e52c:	6a2a      	ldr	r2, [r5, #32]
    e52e:	639a      	str	r2, [r3, #56]	; 0x38
    e530:	9800      	ldr	r0, [sp, #0]
    e532:	712e      	strb	r6, [r5, #4]
    e534:	f7ff fdfe 	bl	e134 <am_hal_interrupt_master_set>
    e538:	4630      	mov	r0, r6
    e53a:	e799      	b.n	e470 <am_hal_uart_power_control+0x14>
    e53c:	01ea9e06 	.word	0x01ea9e06

0000e540 <am_hal_uart_configure>:
    e540:	6803      	ldr	r3, [r0, #0]
    e542:	4a84      	ldr	r2, [pc, #528]	; (e754 <am_hal_uart_configure+0x214>)
    e544:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e548:	4293      	cmp	r3, r2
    e54a:	d001      	beq.n	e550 <am_hal_uart_configure+0x10>
    e54c:	2002      	movs	r0, #2
    e54e:	4770      	bx	lr
    e550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e554:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e556:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e55a:	351c      	adds	r5, #28
    e55c:	032d      	lsls	r5, r5, #12
    e55e:	2700      	movs	r7, #0
    e560:	b084      	sub	sp, #16
    e562:	632f      	str	r7, [r5, #48]	; 0x30
    e564:	460e      	mov	r6, r1
    e566:	4604      	mov	r4, r0
    e568:	f7ff fde0 	bl	e12c <am_hal_interrupt_master_disable>
    e56c:	9001      	str	r0, [sp, #4]
    e56e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e570:	f043 0308 	orr.w	r3, r3, #8
    e574:	862b      	strh	r3, [r5, #48]	; 0x30
    e576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e578:	2201      	movs	r2, #1
    e57a:	f362 1306 	bfi	r3, r2, #4, #3
    e57e:	862b      	strh	r3, [r5, #48]	; 0x30
    e580:	9801      	ldr	r0, [sp, #4]
    e582:	f7ff fdd7 	bl	e134 <am_hal_interrupt_master_set>
    e586:	f7ff fdd1 	bl	e12c <am_hal_interrupt_master_disable>
    e58a:	9002      	str	r0, [sp, #8]
    e58c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e58e:	f367 0300 	bfi	r3, r7, #0, #1
    e592:	862b      	strh	r3, [r5, #48]	; 0x30
    e594:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e596:	f367 2349 	bfi	r3, r7, #9, #1
    e59a:	862b      	strh	r3, [r5, #48]	; 0x30
    e59c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e59e:	f367 2308 	bfi	r3, r7, #8, #1
    e5a2:	862b      	strh	r3, [r5, #48]	; 0x30
    e5a4:	9802      	ldr	r0, [sp, #8]
    e5a6:	f7ff fdc5 	bl	e134 <am_hal_interrupt_master_set>
    e5aa:	4a6b      	ldr	r2, [pc, #428]	; (e758 <am_hal_uart_configure+0x218>)
    e5ac:	6833      	ldr	r3, [r6, #0]
    e5ae:	68d2      	ldr	r2, [r2, #12]
    e5b0:	b2d2      	uxtb	r2, r2
    e5b2:	2a12      	cmp	r2, #18
    e5b4:	d00b      	beq.n	e5ce <am_hal_uart_configure+0x8e>
    e5b6:	4a68      	ldr	r2, [pc, #416]	; (e758 <am_hal_uart_configure+0x218>)
    e5b8:	68d2      	ldr	r2, [r2, #12]
    e5ba:	b2d2      	uxtb	r2, r2
    e5bc:	2a20      	cmp	r2, #32
    e5be:	d90a      	bls.n	e5d6 <am_hal_uart_configure+0x96>
    e5c0:	4a66      	ldr	r2, [pc, #408]	; (e75c <am_hal_uart_configure+0x21c>)
    e5c2:	4293      	cmp	r3, r2
    e5c4:	d907      	bls.n	e5d6 <am_hal_uart_configure+0x96>
    e5c6:	4866      	ldr	r0, [pc, #408]	; (e760 <am_hal_uart_configure+0x220>)
    e5c8:	b004      	add	sp, #16
    e5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5ce:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e5d2:	d8f8      	bhi.n	e5c6 <am_hal_uart_configure+0x86>
    e5d4:	e7ef      	b.n	e5b6 <am_hal_uart_configure+0x76>
    e5d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e5d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    e5dc:	3a01      	subs	r2, #1
    e5de:	2a03      	cmp	r2, #3
    e5e0:	d852      	bhi.n	e688 <am_hal_uart_configure+0x148>
    e5e2:	e8df f002 	tbb	[pc, r2]
    e5e6:	020f      	.short	0x020f
    e5e8:	1215      	.short	0x1215
    e5ea:	4a5e      	ldr	r2, [pc, #376]	; (e764 <am_hal_uart_configure+0x224>)
    e5ec:	495e      	ldr	r1, [pc, #376]	; (e768 <am_hal_uart_configure+0x228>)
    e5ee:	011b      	lsls	r3, r3, #4
    e5f0:	fbb2 f2f3 	udiv	r2, r2, r3
    e5f4:	fbb1 f3f3 	udiv	r3, r1, r3
    e5f8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e5fc:	b95b      	cbnz	r3, e616 <am_hal_uart_configure+0xd6>
    e5fe:	6623      	str	r3, [r4, #96]	; 0x60
    e600:	4857      	ldr	r0, [pc, #348]	; (e760 <am_hal_uart_configure+0x220>)
    e602:	e7e1      	b.n	e5c8 <am_hal_uart_configure+0x88>
    e604:	4a59      	ldr	r2, [pc, #356]	; (e76c <am_hal_uart_configure+0x22c>)
    e606:	495a      	ldr	r1, [pc, #360]	; (e770 <am_hal_uart_configure+0x230>)
    e608:	e7f1      	b.n	e5ee <am_hal_uart_configure+0xae>
    e60a:	4a5a      	ldr	r2, [pc, #360]	; (e774 <am_hal_uart_configure+0x234>)
    e60c:	495a      	ldr	r1, [pc, #360]	; (e778 <am_hal_uart_configure+0x238>)
    e60e:	e7ee      	b.n	e5ee <am_hal_uart_configure+0xae>
    e610:	4a5a      	ldr	r2, [pc, #360]	; (e77c <am_hal_uart_configure+0x23c>)
    e612:	495b      	ldr	r1, [pc, #364]	; (e780 <am_hal_uart_configure+0x240>)
    e614:	e7eb      	b.n	e5ee <am_hal_uart_configure+0xae>
    e616:	0890      	lsrs	r0, r2, #2
    e618:	626b      	str	r3, [r5, #36]	; 0x24
    e61a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e61e:	626b      	str	r3, [r5, #36]	; 0x24
    e620:	fbb1 f1f0 	udiv	r1, r1, r0
    e624:	62aa      	str	r2, [r5, #40]	; 0x28
    e626:	6621      	str	r1, [r4, #96]	; 0x60
    e628:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e62a:	f36f 338e 	bfc	r3, #14, #1
    e62e:	862b      	strh	r3, [r5, #48]	; 0x30
    e630:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e632:	f36f 33cf 	bfc	r3, #15, #1
    e636:	862b      	strh	r3, [r5, #48]	; 0x30
    e638:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e63a:	6933      	ldr	r3, [r6, #16]
    e63c:	4313      	orrs	r3, r2
    e63e:	632b      	str	r3, [r5, #48]	; 0x30
    e640:	6973      	ldr	r3, [r6, #20]
    e642:	636b      	str	r3, [r5, #52]	; 0x34
    e644:	6871      	ldr	r1, [r6, #4]
    e646:	68b3      	ldr	r3, [r6, #8]
    e648:	68f2      	ldr	r2, [r6, #12]
    e64a:	430b      	orrs	r3, r1
    e64c:	f043 0310 	orr.w	r3, r3, #16
    e650:	4313      	orrs	r3, r2
    e652:	62eb      	str	r3, [r5, #44]	; 0x2c
    e654:	f7ff fd6a 	bl	e12c <am_hal_interrupt_master_disable>
    e658:	9003      	str	r0, [sp, #12]
    e65a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e65c:	f043 0301 	orr.w	r3, r3, #1
    e660:	862b      	strh	r3, [r5, #48]	; 0x30
    e662:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e668:	862b      	strh	r3, [r5, #48]	; 0x30
    e66a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e670:	862b      	strh	r3, [r5, #48]	; 0x30
    e672:	9803      	ldr	r0, [sp, #12]
    e674:	f7ff fd5e 	bl	e134 <am_hal_interrupt_master_set>
    e678:	6825      	ldr	r5, [r4, #0]
    e67a:	4b36      	ldr	r3, [pc, #216]	; (e754 <am_hal_uart_configure+0x214>)
    e67c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e680:	429d      	cmp	r5, r3
    e682:	d005      	beq.n	e690 <am_hal_uart_configure+0x150>
    e684:	2000      	movs	r0, #0
    e686:	e79f      	b.n	e5c8 <am_hal_uart_configure+0x88>
    e688:	2300      	movs	r3, #0
    e68a:	6623      	str	r3, [r4, #96]	; 0x60
    e68c:	483d      	ldr	r0, [pc, #244]	; (e784 <am_hal_uart_configure+0x244>)
    e68e:	e79b      	b.n	e5c8 <am_hal_uart_configure+0x88>
    e690:	69b1      	ldr	r1, [r6, #24]
    e692:	6a37      	ldr	r7, [r6, #32]
    e694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e698:	b109      	cbz	r1, e69e <am_hal_uart_configure+0x15e>
    e69a:	69f3      	ldr	r3, [r6, #28]
    e69c:	bb3b      	cbnz	r3, e6ee <am_hal_uart_configure+0x1ae>
    e69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6a0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e6a4:	f103 021c 	add.w	r2, r3, #28
    e6a8:	0312      	lsls	r2, r2, #12
    e6aa:	2100      	movs	r1, #0
    e6ac:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e6b0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e6b2:	f021 0120 	bic.w	r1, r1, #32
    e6b6:	6391      	str	r1, [r2, #56]	; 0x38
    e6b8:	b1b7      	cbz	r7, e6e8 <am_hal_uart_configure+0x1a8>
    e6ba:	f1b8 0f00 	cmp.w	r8, #0
    e6be:	d12e      	bne.n	e71e <am_hal_uart_configure+0x1de>
    e6c0:	6823      	ldr	r3, [r4, #0]
    e6c2:	4a24      	ldr	r2, [pc, #144]	; (e754 <am_hal_uart_configure+0x214>)
    e6c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6c8:	2100      	movs	r1, #0
    e6ca:	4293      	cmp	r3, r2
    e6cc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e6d0:	d1d8      	bne.n	e684 <am_hal_uart_configure+0x144>
    e6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6d4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e6d8:	331c      	adds	r3, #28
    e6da:	031b      	lsls	r3, r3, #12
    e6dc:	2000      	movs	r0, #0
    e6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e6e0:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e6e4:	639a      	str	r2, [r3, #56]	; 0x38
    e6e6:	e76f      	b.n	e5c8 <am_hal_uart_configure+0x88>
    e6e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e6ec:	e7f4      	b.n	e6d8 <am_hal_uart_configure+0x198>
    e6ee:	2201      	movs	r2, #1
    e6f0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e6f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e6f8:	f000 fa80 	bl	ebfc <am_hal_queue_init>
    e6fc:	6823      	ldr	r3, [r4, #0]
    e6fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e702:	42ab      	cmp	r3, r5
    e704:	d1be      	bne.n	e684 <am_hal_uart_configure+0x144>
    e706:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e708:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e70c:	331c      	adds	r3, #28
    e70e:	031b      	lsls	r3, r3, #12
    e710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e712:	f042 0220 	orr.w	r2, r2, #32
    e716:	639a      	str	r2, [r3, #56]	; 0x38
    e718:	2f00      	cmp	r7, #0
    e71a:	d1ce      	bne.n	e6ba <am_hal_uart_configure+0x17a>
    e71c:	e7d0      	b.n	e6c0 <am_hal_uart_configure+0x180>
    e71e:	2201      	movs	r2, #1
    e720:	4643      	mov	r3, r8
    e722:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e726:	4639      	mov	r1, r7
    e728:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e72c:	f000 fa66 	bl	ebfc <am_hal_queue_init>
    e730:	6823      	ldr	r3, [r4, #0]
    e732:	4a08      	ldr	r2, [pc, #32]	; (e754 <am_hal_uart_configure+0x214>)
    e734:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e738:	4293      	cmp	r3, r2
    e73a:	d1a3      	bne.n	e684 <am_hal_uart_configure+0x144>
    e73c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e73e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e742:	331c      	adds	r3, #28
    e744:	031b      	lsls	r3, r3, #12
    e746:	2000      	movs	r0, #0
    e748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e74a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e74e:	639a      	str	r2, [r3, #56]	; 0x38
    e750:	e73a      	b.n	e5c8 <am_hal_uart_configure+0x88>
    e752:	bf00      	nop
    e754:	01ea9e06 	.word	0x01ea9e06
    e758:	40020000 	.word	0x40020000
    e75c:	0016e360 	.word	0x0016e360
    e760:	08000003 	.word	0x08000003
    e764:	2dc6c000 	.word	0x2dc6c000
    e768:	00b71b00 	.word	0x00b71b00
    e76c:	5b8d8000 	.word	0x5b8d8000
    e770:	016e3600 	.word	0x016e3600
    e774:	0b71b000 	.word	0x0b71b000
    e778:	002dc6c0 	.word	0x002dc6c0
    e77c:	16e36000 	.word	0x16e36000
    e780:	005b8d80 	.word	0x005b8d80
    e784:	08000002 	.word	0x08000002

0000e788 <am_hal_uart_transfer>:
    e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e78c:	680f      	ldr	r7, [r1, #0]
    e78e:	b091      	sub	sp, #68	; 0x44
    e790:	4605      	mov	r5, r0
    e792:	b13f      	cbz	r7, e7a4 <am_hal_uart_transfer+0x1c>
    e794:	2f01      	cmp	r7, #1
    e796:	bf18      	it	ne
    e798:	2707      	movne	r7, #7
    e79a:	d024      	beq.n	e7e6 <am_hal_uart_transfer+0x5e>
    e79c:	4638      	mov	r0, r7
    e79e:	b011      	add	sp, #68	; 0x44
    e7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7a4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e7a8:	690b      	ldr	r3, [r1, #16]
    e7aa:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e7ae:	688e      	ldr	r6, [r1, #8]
    e7b0:	9300      	str	r3, [sp, #0]
    e7b2:	f1b9 0f00 	cmp.w	r9, #0
    e7b6:	d031      	beq.n	e81c <am_hal_uart_transfer+0x94>
    e7b8:	2e00      	cmp	r6, #0
    e7ba:	f000 819c 	beq.w	eaf6 <am_hal_uart_transfer+0x36e>
    e7be:	2800      	cmp	r0, #0
    e7c0:	f000 8097 	beq.w	e8f2 <am_hal_uart_transfer+0x16a>
    e7c4:	6803      	ldr	r3, [r0, #0]
    e7c6:	4aa9      	ldr	r2, [pc, #676]	; (ea6c <am_hal_uart_transfer+0x2e4>)
    e7c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7cc:	4293      	cmp	r3, r2
    e7ce:	f000 8092 	beq.w	e8f6 <am_hal_uart_transfer+0x16e>
    e7d2:	46b8      	mov	r8, r7
    e7d4:	9b00      	ldr	r3, [sp, #0]
    e7d6:	b10b      	cbz	r3, e7dc <am_hal_uart_transfer+0x54>
    e7d8:	f8c3 8000 	str.w	r8, [r3]
    e7dc:	2702      	movs	r7, #2
    e7de:	4638      	mov	r0, r7
    e7e0:	b011      	add	sp, #68	; 0x44
    e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7e6:	1d0b      	adds	r3, r1, #4
    e7e8:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e7ec:	f1b9 0f00 	cmp.w	r9, #0
    e7f0:	d043      	beq.n	e87a <am_hal_uart_transfer+0xf2>
    e7f2:	2f00      	cmp	r7, #0
    e7f4:	f000 8185 	beq.w	eb02 <am_hal_uart_transfer+0x37a>
    e7f8:	2800      	cmp	r0, #0
    e7fa:	f000 80eb 	beq.w	e9d4 <am_hal_uart_transfer+0x24c>
    e7fe:	6802      	ldr	r2, [r0, #0]
    e800:	499a      	ldr	r1, [pc, #616]	; (ea6c <am_hal_uart_transfer+0x2e4>)
    e802:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e806:	428a      	cmp	r2, r1
    e808:	f000 80e7 	beq.w	e9da <am_hal_uart_transfer+0x252>
    e80c:	2600      	movs	r6, #0
    e80e:	2702      	movs	r7, #2
    e810:	f1bb 0f00 	cmp.w	fp, #0
    e814:	d0c2      	beq.n	e79c <am_hal_uart_transfer+0x14>
    e816:	f8cb 6000 	str.w	r6, [fp]
    e81a:	e7bf      	b.n	e79c <am_hal_uart_transfer+0x14>
    e81c:	2800      	cmp	r0, #0
    e81e:	d0dd      	beq.n	e7dc <am_hal_uart_transfer+0x54>
    e820:	6803      	ldr	r3, [r0, #0]
    e822:	4a92      	ldr	r2, [pc, #584]	; (ea6c <am_hal_uart_transfer+0x2e4>)
    e824:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e828:	4293      	cmp	r3, r2
    e82a:	d1d7      	bne.n	e7dc <am_hal_uart_transfer+0x54>
    e82c:	9b00      	ldr	r3, [sp, #0]
    e82e:	b10b      	cbz	r3, e834 <am_hal_uart_transfer+0xac>
    e830:	f8c3 9000 	str.w	r9, [r3]
    e834:	b1fe      	cbz	r6, e876 <am_hal_uart_transfer+0xee>
    e836:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e83a:	2b00      	cmp	r3, #0
    e83c:	f040 8165 	bne.w	eb0a <am_hal_uart_transfer+0x382>
    e840:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e842:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e846:	311c      	adds	r1, #28
    e848:	0309      	lsls	r1, r1, #12
    e84a:	698a      	ldr	r2, [r1, #24]
    e84c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e850:	2a00      	cmp	r2, #0
    e852:	f040 818d 	bne.w	eb70 <am_hal_uart_transfer+0x3e8>
    e856:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    e85a:	e003      	b.n	e864 <am_hal_uart_transfer+0xdc>
    e85c:	6988      	ldr	r0, [r1, #24]
    e85e:	0680      	lsls	r0, r0, #26
    e860:	f100 8151 	bmi.w	eb06 <am_hal_uart_transfer+0x37e>
    e864:	3201      	adds	r2, #1
    e866:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e86a:	6008      	str	r0, [r1, #0]
    e86c:	4296      	cmp	r6, r2
    e86e:	d1f5      	bne.n	e85c <am_hal_uart_transfer+0xd4>
    e870:	9b00      	ldr	r3, [sp, #0]
    e872:	b103      	cbz	r3, e876 <am_hal_uart_transfer+0xee>
    e874:	601e      	str	r6, [r3, #0]
    e876:	2700      	movs	r7, #0
    e878:	e790      	b.n	e79c <am_hal_uart_transfer+0x14>
    e87a:	2800      	cmp	r0, #0
    e87c:	d0ae      	beq.n	e7dc <am_hal_uart_transfer+0x54>
    e87e:	6802      	ldr	r2, [r0, #0]
    e880:	497a      	ldr	r1, [pc, #488]	; (ea6c <am_hal_uart_transfer+0x2e4>)
    e882:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e886:	428a      	cmp	r2, r1
    e888:	d1a8      	bne.n	e7dc <am_hal_uart_transfer+0x54>
    e88a:	f1bb 0f00 	cmp.w	fp, #0
    e88e:	d001      	beq.n	e894 <am_hal_uart_transfer+0x10c>
    e890:	f8cb 9000 	str.w	r9, [fp]
    e894:	2f00      	cmp	r7, #0
    e896:	d0ee      	beq.n	e876 <am_hal_uart_transfer+0xee>
    e898:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e89c:	2c00      	cmp	r4, #0
    e89e:	f040 816c 	bne.w	eb7a <am_hal_uart_transfer+0x3f2>
    e8a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e8a4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8a8:	321c      	adds	r2, #28
    e8aa:	0312      	lsls	r2, r2, #12
    e8ac:	6990      	ldr	r0, [r2, #24]
    e8ae:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e8b2:	2800      	cmp	r0, #0
    e8b4:	f040 819d 	bne.w	ebf2 <am_hal_uart_transfer+0x46a>
    e8b8:	6811      	ldr	r1, [r2, #0]
    e8ba:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e8be:	bf08      	it	eq
    e8c0:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    e8c4:	d008      	beq.n	e8d8 <am_hal_uart_transfer+0x150>
    e8c6:	e190      	b.n	ebea <am_hal_uart_transfer+0x462>
    e8c8:	6991      	ldr	r1, [r2, #24]
    e8ca:	06c8      	lsls	r0, r1, #27
    e8cc:	d409      	bmi.n	e8e2 <am_hal_uart_transfer+0x15a>
    e8ce:	6811      	ldr	r1, [r2, #0]
    e8d0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8d4:	f040 814e 	bne.w	eb74 <am_hal_uart_transfer+0x3ec>
    e8d8:	3401      	adds	r4, #1
    e8da:	42a7      	cmp	r7, r4
    e8dc:	f803 1f01 	strb.w	r1, [r3, #1]!
    e8e0:	d1f2      	bne.n	e8c8 <am_hal_uart_transfer+0x140>
    e8e2:	2700      	movs	r7, #0
    e8e4:	f1bb 0f00 	cmp.w	fp, #0
    e8e8:	f43f af58 	beq.w	e79c <am_hal_uart_transfer+0x14>
    e8ec:	f8cb 4000 	str.w	r4, [fp]
    e8f0:	e754      	b.n	e79c <am_hal_uart_transfer+0x14>
    e8f2:	4680      	mov	r8, r0
    e8f4:	e76e      	b.n	e7d4 <am_hal_uart_transfer+0x4c>
    e8f6:	9301      	str	r3, [sp, #4]
    e8f8:	4651      	mov	r1, sl
    e8fa:	46bb      	mov	fp, r7
    e8fc:	46b8      	mov	r8, r7
    e8fe:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e902:	b9f2      	cbnz	r2, e942 <am_hal_uart_transfer+0x1ba>
    e904:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e906:	b19e      	cbz	r6, e930 <am_hal_uart_transfer+0x1a8>
    e908:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e90c:	321c      	adds	r2, #28
    e90e:	0312      	lsls	r2, r2, #12
    e910:	3901      	subs	r1, #1
    e912:	6994      	ldr	r4, [r2, #24]
    e914:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e918:	b11c      	cbz	r4, e922 <am_hal_uart_transfer+0x19a>
    e91a:	e047      	b.n	e9ac <am_hal_uart_transfer+0x224>
    e91c:	6993      	ldr	r3, [r2, #24]
    e91e:	069b      	lsls	r3, r3, #26
    e920:	d441      	bmi.n	e9a6 <am_hal_uart_transfer+0x21e>
    e922:	3401      	adds	r4, #1
    e924:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e928:	6013      	str	r3, [r2, #0]
    e92a:	42b4      	cmp	r4, r6
    e92c:	d1f6      	bne.n	e91c <am_hal_uart_transfer+0x194>
    e92e:	44a0      	add	r8, r4
    e930:	9b00      	ldr	r3, [sp, #0]
    e932:	2b00      	cmp	r3, #0
    e934:	d09f      	beq.n	e876 <am_hal_uart_transfer+0xee>
    e936:	4638      	mov	r0, r7
    e938:	f8c3 8000 	str.w	r8, [r3]
    e93c:	b011      	add	sp, #68	; 0x44
    e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e942:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e944:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e946:	1b14      	subs	r4, r2, r4
    e948:	42b4      	cmp	r4, r6
    e94a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e94e:	bf28      	it	cs
    e950:	4634      	movcs	r4, r6
    e952:	4622      	mov	r2, r4
    e954:	4618      	mov	r0, r3
    e956:	9302      	str	r3, [sp, #8]
    e958:	f000 f95c 	bl	ec14 <am_hal_queue_item_add>
    e95c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e95e:	9303      	str	r3, [sp, #12]
    e960:	f7ff fbe4 	bl	e12c <am_hal_interrupt_master_disable>
    e964:	9b03      	ldr	r3, [sp, #12]
    e966:	9008      	str	r0, [sp, #32]
    e968:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e96c:	331c      	adds	r3, #28
    e96e:	031b      	lsls	r3, r3, #12
    e970:	9303      	str	r3, [sp, #12]
    e972:	e00d      	b.n	e990 <am_hal_uart_transfer+0x208>
    e974:	f000 f986 	bl	ec84 <am_hal_queue_item_get>
    e978:	b190      	cbz	r0, e9a0 <am_hal_uart_transfer+0x218>
    e97a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e97c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e980:	331c      	adds	r3, #28
    e982:	031b      	lsls	r3, r3, #12
    e984:	699a      	ldr	r2, [r3, #24]
    e986:	0692      	lsls	r2, r2, #26
    e988:	bf5c      	itt	pl
    e98a:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e98e:	601a      	strpl	r2, [r3, #0]
    e990:	9b03      	ldr	r3, [sp, #12]
    e992:	9802      	ldr	r0, [sp, #8]
    e994:	699b      	ldr	r3, [r3, #24]
    e996:	069b      	lsls	r3, r3, #26
    e998:	f04f 0201 	mov.w	r2, #1
    e99c:	a907      	add	r1, sp, #28
    e99e:	d5e9      	bpl.n	e974 <am_hal_uart_transfer+0x1ec>
    e9a0:	9808      	ldr	r0, [sp, #32]
    e9a2:	f7ff fbc7 	bl	e134 <am_hal_interrupt_master_set>
    e9a6:	1b36      	subs	r6, r6, r4
    e9a8:	44a0      	add	r8, r4
    e9aa:	d0c1      	beq.n	e930 <am_hal_uart_transfer+0x1a8>
    e9ac:	2010      	movs	r0, #16
    e9ae:	f7ff f9a3 	bl	dcf8 <am_hal_flash_delay>
    e9b2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e9b6:	d001      	beq.n	e9bc <am_hal_uart_transfer+0x234>
    e9b8:	f10b 0b01 	add.w	fp, fp, #1
    e9bc:	45d9      	cmp	r9, fp
    e9be:	d9b7      	bls.n	e930 <am_hal_uart_transfer+0x1a8>
    e9c0:	682a      	ldr	r2, [r5, #0]
    e9c2:	9b01      	ldr	r3, [sp, #4]
    e9c4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e9c8:	429a      	cmp	r2, r3
    e9ca:	eb0a 0108 	add.w	r1, sl, r8
    e9ce:	f47f af01 	bne.w	e7d4 <am_hal_uart_transfer+0x4c>
    e9d2:	e794      	b.n	e8fe <am_hal_uart_transfer+0x176>
    e9d4:	4606      	mov	r6, r0
    e9d6:	2702      	movs	r7, #2
    e9d8:	e71a      	b.n	e810 <am_hal_uart_transfer+0x88>
    e9da:	9200      	str	r2, [sp, #0]
    e9dc:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e9e0:	f04f 0a00 	mov.w	sl, #0
    e9e4:	9202      	str	r2, [sp, #8]
    e9e6:	465a      	mov	r2, fp
    e9e8:	4698      	mov	r8, r3
    e9ea:	469b      	mov	fp, r3
    e9ec:	4656      	mov	r6, sl
    e9ee:	4613      	mov	r3, r2
    e9f0:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e9f4:	2a00      	cmp	r2, #0
    e9f6:	d152      	bne.n	ea9e <am_hal_uart_transfer+0x316>
    e9f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e9fa:	b3a7      	cbz	r7, ea66 <am_hal_uart_transfer+0x2de>
    e9fc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea00:	311c      	adds	r1, #28
    ea02:	0309      	lsls	r1, r1, #12
    ea04:	698a      	ldr	r2, [r1, #24]
    ea06:	06d0      	lsls	r0, r2, #27
    ea08:	d432      	bmi.n	ea70 <am_hal_uart_transfer+0x2e8>
    ea0a:	680a      	ldr	r2, [r1, #0]
    ea0c:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    ea10:	f040 80aa 	bne.w	eb68 <am_hal_uart_transfer+0x3e0>
    ea14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ea18:	e006      	b.n	ea28 <am_hal_uart_transfer+0x2a0>
    ea1a:	698a      	ldr	r2, [r1, #24]
    ea1c:	06d2      	lsls	r2, r2, #27
    ea1e:	d41f      	bmi.n	ea60 <am_hal_uart_transfer+0x2d8>
    ea20:	680a      	ldr	r2, [r1, #0]
    ea22:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ea26:	d161      	bne.n	eaec <am_hal_uart_transfer+0x364>
    ea28:	3401      	adds	r4, #1
    ea2a:	42bc      	cmp	r4, r7
    ea2c:	f808 2f01 	strb.w	r2, [r8, #1]!
    ea30:	d1f3      	bne.n	ea1a <am_hal_uart_transfer+0x292>
    ea32:	469b      	mov	fp, r3
    ea34:	4426      	add	r6, r4
    ea36:	f1bb 0f00 	cmp.w	fp, #0
    ea3a:	f43f af1c 	beq.w	e876 <am_hal_uart_transfer+0xee>
    ea3e:	f8cb 6000 	str.w	r6, [fp]
    ea42:	2700      	movs	r7, #0
    ea44:	e6aa      	b.n	e79c <am_hal_uart_transfer+0x14>
    ea46:	9807      	ldr	r0, [sp, #28]
    ea48:	f7ff fb74 	bl	e134 <am_hal_interrupt_master_set>
    ea4c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ea4e:	9802      	ldr	r0, [sp, #8]
    ea50:	42bc      	cmp	r4, r7
    ea52:	bf28      	it	cs
    ea54:	463c      	movcs	r4, r7
    ea56:	4641      	mov	r1, r8
    ea58:	4622      	mov	r2, r4
    ea5a:	f000 f913 	bl	ec84 <am_hal_queue_item_get>
    ea5e:	9b01      	ldr	r3, [sp, #4]
    ea60:	1b3f      	subs	r7, r7, r4
    ea62:	4426      	add	r6, r4
    ea64:	d104      	bne.n	ea70 <am_hal_uart_transfer+0x2e8>
    ea66:	469b      	mov	fp, r3
    ea68:	e7e5      	b.n	ea36 <am_hal_uart_transfer+0x2ae>
    ea6a:	bf00      	nop
    ea6c:	01ea9e06 	.word	0x01ea9e06
    ea70:	2010      	movs	r0, #16
    ea72:	9301      	str	r3, [sp, #4]
    ea74:	f7ff f940 	bl	dcf8 <am_hal_flash_delay>
    ea78:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    ea7c:	9b01      	ldr	r3, [sp, #4]
    ea7e:	d001      	beq.n	ea84 <am_hal_uart_transfer+0x2fc>
    ea80:	f10a 0a01 	add.w	sl, sl, #1
    ea84:	45d1      	cmp	r9, sl
    ea86:	d9ee      	bls.n	ea66 <am_hal_uart_transfer+0x2de>
    ea88:	682a      	ldr	r2, [r5, #0]
    ea8a:	9900      	ldr	r1, [sp, #0]
    ea8c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea90:	428a      	cmp	r2, r1
    ea92:	eb0b 0806 	add.w	r8, fp, r6
    ea96:	d0ab      	beq.n	e9f0 <am_hal_uart_transfer+0x268>
    ea98:	469b      	mov	fp, r3
    ea9a:	2702      	movs	r7, #2
    ea9c:	e6b8      	b.n	e810 <am_hal_uart_transfer+0x88>
    ea9e:	9301      	str	r3, [sp, #4]
    eaa0:	f7ff fb44 	bl	e12c <am_hal_interrupt_master_disable>
    eaa4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eaa6:	9007      	str	r0, [sp, #28]
    eaa8:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    eaac:	301c      	adds	r0, #28
    eaae:	9b01      	ldr	r3, [sp, #4]
    eab0:	0300      	lsls	r0, r0, #12
    eab2:	ac08      	add	r4, sp, #32
    eab4:	2200      	movs	r2, #0
    eab6:	6981      	ldr	r1, [r0, #24]
    eab8:	06c9      	lsls	r1, r1, #27
    eaba:	d409      	bmi.n	ead0 <am_hal_uart_transfer+0x348>
    eabc:	6801      	ldr	r1, [r0, #0]
    eabe:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    eac2:	f102 0201 	add.w	r2, r2, #1
    eac6:	d118      	bne.n	eafa <am_hal_uart_transfer+0x372>
    eac8:	2a20      	cmp	r2, #32
    eaca:	f804 1b01 	strb.w	r1, [r4], #1
    eace:	d1f2      	bne.n	eab6 <am_hal_uart_transfer+0x32e>
    ead0:	a908      	add	r1, sp, #32
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	9301      	str	r3, [sp, #4]
    ead6:	f000 f89d 	bl	ec14 <am_hal_queue_item_add>
    eada:	9b01      	ldr	r3, [sp, #4]
    eadc:	2800      	cmp	r0, #0
    eade:	d1b2      	bne.n	ea46 <am_hal_uart_transfer+0x2be>
    eae0:	4f45      	ldr	r7, [pc, #276]	; (ebf8 <am_hal_uart_transfer+0x470>)
    eae2:	469b      	mov	fp, r3
    eae4:	9807      	ldr	r0, [sp, #28]
    eae6:	f7ff fb25 	bl	e134 <am_hal_interrupt_master_set>
    eaea:	e691      	b.n	e810 <am_hal_uart_transfer+0x88>
    eaec:	469b      	mov	fp, r3
    eaee:	4426      	add	r6, r4
    eaf0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eaf4:	e68c      	b.n	e810 <am_hal_uart_transfer+0x88>
    eaf6:	46b8      	mov	r8, r7
    eaf8:	e71a      	b.n	e930 <am_hal_uart_transfer+0x1a8>
    eafa:	469b      	mov	fp, r3
    eafc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb00:	e7f0      	b.n	eae4 <am_hal_uart_transfer+0x35c>
    eb02:	463e      	mov	r6, r7
    eb04:	e797      	b.n	ea36 <am_hal_uart_transfer+0x2ae>
    eb06:	4616      	mov	r6, r2
    eb08:	e6b2      	b.n	e870 <am_hal_uart_transfer+0xe8>
    eb0a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    eb0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    eb0e:	1a9b      	subs	r3, r3, r2
    eb10:	429e      	cmp	r6, r3
    eb12:	bf28      	it	cs
    eb14:	461e      	movcs	r6, r3
    eb16:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    eb1a:	4651      	mov	r1, sl
    eb1c:	4632      	mov	r2, r6
    eb1e:	4620      	mov	r0, r4
    eb20:	f000 f878 	bl	ec14 <am_hal_queue_item_add>
    eb24:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    eb26:	f7ff fb01 	bl	e12c <am_hal_interrupt_master_disable>
    eb2a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    eb2e:	371c      	adds	r7, #28
    eb30:	033f      	lsls	r7, r7, #12
    eb32:	9005      	str	r0, [sp, #20]
    eb34:	e00d      	b.n	eb52 <am_hal_uart_transfer+0x3ca>
    eb36:	f000 f8a5 	bl	ec84 <am_hal_queue_item_get>
    eb3a:	b188      	cbz	r0, eb60 <am_hal_uart_transfer+0x3d8>
    eb3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb3e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eb42:	331c      	adds	r3, #28
    eb44:	031b      	lsls	r3, r3, #12
    eb46:	699a      	ldr	r2, [r3, #24]
    eb48:	0692      	lsls	r2, r2, #26
    eb4a:	bf5c      	itt	pl
    eb4c:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    eb50:	601a      	strpl	r2, [r3, #0]
    eb52:	69bb      	ldr	r3, [r7, #24]
    eb54:	069b      	lsls	r3, r3, #26
    eb56:	f04f 0201 	mov.w	r2, #1
    eb5a:	a908      	add	r1, sp, #32
    eb5c:	4620      	mov	r0, r4
    eb5e:	d5ea      	bpl.n	eb36 <am_hal_uart_transfer+0x3ae>
    eb60:	9805      	ldr	r0, [sp, #20]
    eb62:	f7ff fae7 	bl	e134 <am_hal_interrupt_master_set>
    eb66:	e683      	b.n	e870 <am_hal_uart_transfer+0xe8>
    eb68:	469b      	mov	fp, r3
    eb6a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb6e:	e64f      	b.n	e810 <am_hal_uart_transfer+0x88>
    eb70:	461e      	mov	r6, r3
    eb72:	e67d      	b.n	e870 <am_hal_uart_transfer+0xe8>
    eb74:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb78:	e6b4      	b.n	e8e4 <am_hal_uart_transfer+0x15c>
    eb7a:	9300      	str	r3, [sp, #0]
    eb7c:	f7ff fad6 	bl	e12c <am_hal_interrupt_master_disable>
    eb80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eb82:	9006      	str	r0, [sp, #24]
    eb84:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eb88:	321c      	adds	r2, #28
    eb8a:	0311      	lsls	r1, r2, #12
    eb8c:	a808      	add	r0, sp, #32
    eb8e:	2200      	movs	r2, #0
    eb90:	9b00      	ldr	r3, [sp, #0]
    eb92:	e009      	b.n	eba8 <am_hal_uart_transfer+0x420>
    eb94:	680c      	ldr	r4, [r1, #0]
    eb96:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    eb9a:	f102 0201 	add.w	r2, r2, #1
    eb9e:	d121      	bne.n	ebe4 <am_hal_uart_transfer+0x45c>
    eba0:	2a20      	cmp	r2, #32
    eba2:	f800 4b01 	strb.w	r4, [r0], #1
    eba6:	d002      	beq.n	ebae <am_hal_uart_transfer+0x426>
    eba8:	698c      	ldr	r4, [r1, #24]
    ebaa:	06e4      	lsls	r4, r4, #27
    ebac:	d5f2      	bpl.n	eb94 <am_hal_uart_transfer+0x40c>
    ebae:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ebb2:	a908      	add	r1, sp, #32
    ebb4:	4630      	mov	r0, r6
    ebb6:	9300      	str	r3, [sp, #0]
    ebb8:	f000 f82c 	bl	ec14 <am_hal_queue_item_add>
    ebbc:	b920      	cbnz	r0, ebc8 <am_hal_uart_transfer+0x440>
    ebbe:	4f0e      	ldr	r7, [pc, #56]	; (ebf8 <am_hal_uart_transfer+0x470>)
    ebc0:	9806      	ldr	r0, [sp, #24]
    ebc2:	f7ff fab7 	bl	e134 <am_hal_interrupt_master_set>
    ebc6:	e5e9      	b.n	e79c <am_hal_uart_transfer+0x14>
    ebc8:	9806      	ldr	r0, [sp, #24]
    ebca:	f7ff fab3 	bl	e134 <am_hal_interrupt_master_set>
    ebce:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ebd0:	9b00      	ldr	r3, [sp, #0]
    ebd2:	42bc      	cmp	r4, r7
    ebd4:	bf28      	it	cs
    ebd6:	463c      	movcs	r4, r7
    ebd8:	4619      	mov	r1, r3
    ebda:	4630      	mov	r0, r6
    ebdc:	4622      	mov	r2, r4
    ebde:	f000 f851 	bl	ec84 <am_hal_queue_item_get>
    ebe2:	e67e      	b.n	e8e2 <am_hal_uart_transfer+0x15a>
    ebe4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ebe8:	e7ea      	b.n	ebc0 <am_hal_uart_transfer+0x438>
    ebea:	4604      	mov	r4, r0
    ebec:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ebf0:	e678      	b.n	e8e4 <am_hal_uart_transfer+0x15c>
    ebf2:	4627      	mov	r7, r4
    ebf4:	e676      	b.n	e8e4 <am_hal_uart_transfer+0x15c>
    ebf6:	bf00      	nop
    ebf8:	08000001 	.word	0x08000001

0000ebfc <am_hal_queue_init>:
    ebfc:	b410      	push	{r4}
    ebfe:	2400      	movs	r4, #0
    ec00:	6004      	str	r4, [r0, #0]
    ec02:	6044      	str	r4, [r0, #4]
    ec04:	6084      	str	r4, [r0, #8]
    ec06:	60c3      	str	r3, [r0, #12]
    ec08:	6102      	str	r2, [r0, #16]
    ec0a:	6141      	str	r1, [r0, #20]
    ec0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec10:	4770      	bx	lr
    ec12:	bf00      	nop

0000ec14 <am_hal_queue_item_add>:
    ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec16:	4604      	mov	r4, r0
    ec18:	6906      	ldr	r6, [r0, #16]
    ec1a:	b083      	sub	sp, #12
    ec1c:	fb06 f602 	mul.w	r6, r6, r2
    ec20:	460d      	mov	r5, r1
    ec22:	f7ff fa83 	bl	e12c <am_hal_interrupt_master_disable>
    ec26:	68e7      	ldr	r7, [r4, #12]
    ec28:	68a2      	ldr	r2, [r4, #8]
    ec2a:	9001      	str	r0, [sp, #4]
    ec2c:	1abb      	subs	r3, r7, r2
    ec2e:	429e      	cmp	r6, r3
    ec30:	d826      	bhi.n	ec80 <am_hal_queue_item_add+0x6c>
    ec32:	b196      	cbz	r6, ec5a <am_hal_queue_item_add+0x46>
    ec34:	6823      	ldr	r3, [r4, #0]
    ec36:	4629      	mov	r1, r5
    ec38:	b1c5      	cbz	r5, ec6c <am_hal_queue_item_add+0x58>
    ec3a:	19af      	adds	r7, r5, r6
    ec3c:	6962      	ldr	r2, [r4, #20]
    ec3e:	f811 0b01 	ldrb.w	r0, [r1], #1
    ec42:	54d0      	strb	r0, [r2, r3]
    ec44:	6823      	ldr	r3, [r4, #0]
    ec46:	68e5      	ldr	r5, [r4, #12]
    ec48:	3301      	adds	r3, #1
    ec4a:	42b9      	cmp	r1, r7
    ec4c:	fbb3 f0f5 	udiv	r0, r3, r5
    ec50:	fb05 3310 	mls	r3, r5, r0, r3
    ec54:	6023      	str	r3, [r4, #0]
    ec56:	d1f1      	bne.n	ec3c <am_hal_queue_item_add+0x28>
    ec58:	68a2      	ldr	r2, [r4, #8]
    ec5a:	4432      	add	r2, r6
    ec5c:	60a2      	str	r2, [r4, #8]
    ec5e:	2401      	movs	r4, #1
    ec60:	9801      	ldr	r0, [sp, #4]
    ec62:	f7ff fa67 	bl	e134 <am_hal_interrupt_master_set>
    ec66:	4620      	mov	r0, r4
    ec68:	b003      	add	sp, #12
    ec6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec6c:	3101      	adds	r1, #1
    ec6e:	3301      	adds	r3, #1
    ec70:	428e      	cmp	r6, r1
    ec72:	fbb3 f0f7 	udiv	r0, r3, r7
    ec76:	fb07 3310 	mls	r3, r7, r0, r3
    ec7a:	d1f7      	bne.n	ec6c <am_hal_queue_item_add+0x58>
    ec7c:	6023      	str	r3, [r4, #0]
    ec7e:	e7ec      	b.n	ec5a <am_hal_queue_item_add+0x46>
    ec80:	2400      	movs	r4, #0
    ec82:	e7ed      	b.n	ec60 <am_hal_queue_item_add+0x4c>

0000ec84 <am_hal_queue_item_get>:
    ec84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec86:	4604      	mov	r4, r0
    ec88:	6906      	ldr	r6, [r0, #16]
    ec8a:	b083      	sub	sp, #12
    ec8c:	fb06 f602 	mul.w	r6, r6, r2
    ec90:	460d      	mov	r5, r1
    ec92:	f7ff fa4b 	bl	e12c <am_hal_interrupt_master_disable>
    ec96:	68a2      	ldr	r2, [r4, #8]
    ec98:	9001      	str	r0, [sp, #4]
    ec9a:	4296      	cmp	r6, r2
    ec9c:	d81c      	bhi.n	ecd8 <am_hal_queue_item_get+0x54>
    ec9e:	b196      	cbz	r6, ecc6 <am_hal_queue_item_get+0x42>
    eca0:	6863      	ldr	r3, [r4, #4]
    eca2:	b1dd      	cbz	r5, ecdc <am_hal_queue_item_get+0x58>
    eca4:	4629      	mov	r1, r5
    eca6:	19af      	adds	r7, r5, r6
    eca8:	6962      	ldr	r2, [r4, #20]
    ecaa:	5cd3      	ldrb	r3, [r2, r3]
    ecac:	f801 3b01 	strb.w	r3, [r1], #1
    ecb0:	6863      	ldr	r3, [r4, #4]
    ecb2:	68e5      	ldr	r5, [r4, #12]
    ecb4:	3301      	adds	r3, #1
    ecb6:	428f      	cmp	r7, r1
    ecb8:	fbb3 f0f5 	udiv	r0, r3, r5
    ecbc:	fb05 3310 	mls	r3, r5, r0, r3
    ecc0:	6063      	str	r3, [r4, #4]
    ecc2:	d1f1      	bne.n	eca8 <am_hal_queue_item_get+0x24>
    ecc4:	68a2      	ldr	r2, [r4, #8]
    ecc6:	1b92      	subs	r2, r2, r6
    ecc8:	60a2      	str	r2, [r4, #8]
    ecca:	2401      	movs	r4, #1
    eccc:	9801      	ldr	r0, [sp, #4]
    ecce:	f7ff fa31 	bl	e134 <am_hal_interrupt_master_set>
    ecd2:	4620      	mov	r0, r4
    ecd4:	b003      	add	sp, #12
    ecd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecd8:	2400      	movs	r4, #0
    ecda:	e7f7      	b.n	eccc <am_hal_queue_item_get+0x48>
    ecdc:	68e0      	ldr	r0, [r4, #12]
    ecde:	4629      	mov	r1, r5
    ece0:	3101      	adds	r1, #1
    ece2:	3301      	adds	r3, #1
    ece4:	428e      	cmp	r6, r1
    ece6:	fbb3 f5f0 	udiv	r5, r3, r0
    ecea:	fb00 3315 	mls	r3, r0, r5, r3
    ecee:	d1f7      	bne.n	ece0 <am_hal_queue_item_get+0x5c>
    ecf0:	6063      	str	r3, [r4, #4]
    ecf2:	e7e8      	b.n	ecc6 <am_hal_queue_item_get+0x42>

0000ecf4 <_ZTVN6tflite18MicroErrorReporterE>:
	...
    ecfc:	c1a1 0000 c1a1 0000 c1a5 0000 7325 0000     ............%s..
    ed0c:	6946 696e 6873 6920 736e 6174 636e 2065     Finish instance 
    ed1c:	6e69 7469 2e2e 0d2e 000a 0000 754e 626d     init........Numb
    ed2c:	7265 203a 6425 0000 6142 6c64 2d79 6f66     er: %d..Badly-fo
    ed3c:	6d72 6465 6620 726f 616d 2074 7473 6972     rmed format stri
    ed4c:	676e 2520 0000 0000 6e41 746f 6568 2072     ng %....Another 
    ed5c:	2025 6162 6c64 2d79 6f66 6d72 6465 2520     % badly-formed %
    ed6c:	2025 6f66 6d72 7461 7320 7274 6e69 0067     % format string.
    ed7c:	4c41 204c 4554 5453 2053 4150 5353 4445     ALL TESTS PASSED
    ed8c:	0000 0000 7e7e 257e 7e73 7e7e 0000 0000     ....~~~%s~~~....
    ed9c:	7041 6c6f 6f6c 2033 7542 7372 2074 6f4d     Apollo3 Burst Mo
    edac:	6564 6920 2073 7641 6961 616c 6c62 0d65     de is Available.
    edbc:	000a 0000 7041 6c6f 6f6c 2033 7542 7372     ....Apollo3 Burs
    edcc:	2074 6f4d 6564 6920 2073 6f4e 2074 7641     t Mode is Not Av
    eddc:	6961 616c 6c62 0d65 000a 0000 6146 6c69     ailable.....Fail
    edec:	6465 7420 206f 6e49 7469 6169 696c 657a     ed to Initialize
    edfc:	6620 726f 4220 7275 7473 4d20 646f 2065      for Burst Mode 
    ee0c:	706f 7265 7461 6f69 0d6e 000a 7041 6c6f     operation...Apol
    ee1c:	6f6c 2033 706f 7265 7461 6e69 2067 6e69     lo3 operating in
    ee2c:	4220 7275 7473 4d20 646f 2065 3928 4d36      Burst Mode (96M
    ee3c:	7a48 0d29 000a 0000 6146 6c69 6465 7420     Hz).....Failed t
    ee4c:	206f 6e45 6261 656c 4220 7275 7473 4d20     o Enable Burst M
    ee5c:	646f 2065 706f 7265 7461 6f69 0d6e 000a     ode operation...

0000ee6c <g_deepsleep_button0>:
    ee6c:	1003 0000                                   ....

0000ee70 <g_sBspUartConfig>:
    ee70:	c200 0001 0060 0000 0000 0000 0000 0000     ....`...........
    ee80:	0000 0000 0012 0000 0000 0000 0000 0000     ................
	...

0000ee98 <g_AM_BSP_GPIO_COM_UART_TX>:
    ee98:	0000 0000                                   ....

0000ee9c <g_AM_BSP_GPIO_COM_UART_RX>:
    ee9c:	0000 0000                                   ....

0000eea0 <am_hal_cachectrl_defaults>:
    eea0:	0308 0000                                   ....

0000eea4 <g_AM_HAL_GPIO_TRISTATE>:
    eea4:	0c03 0000                                   ....

0000eea8 <g_ui8Bit76Capabilities>:
    eea8:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    eeb8:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    eec8:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    eed8:	0101 0000                                   ....

0000eedc <g_ui8NCEtable>:
    eedc:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    eeec:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    eefc:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    ef0c:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    ef1c:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    ef2c:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    ef3c:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    ef4c:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    ef5c:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    ef6c:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    ef7c:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    ef8c:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    ef9c:	1202 3222 1303 4323                         .."2..#C

0000efa4 <g_ui8Inpen>:
    efa4:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
    efb4:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
    efc4:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
    efd4:	3130 0000                                   01..

0000efd8 <g_AM_HAL_GPIO_DISABLE>:
    efd8:	0003 0000                                   ....

0000efdc <g_AM_HAL_GPIO_OUTPUT>:
    efdc:	0403 0000                                   ....

0000efe0 <g_ui8nCEpins>:
    efe0:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    eff0:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    f000:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    f010:	0101 0000                                   ....

0000f014 <g_am_hal_mcuctrl_flash_size>:
    f014:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f024:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
    f034:	0000 0018 0000 0000 0000 0000 0000 0000     ................
	...

0000f054 <g_am_hal_mcuctrl_sram_size>:
    f054:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f064:	0000 0004 0000 0008 0000 0010 0000 0006     ................
    f074:	0000 000c 0000 0000 0000 0000 0000 0000     ................
	...

0000f094 <am_hal_pwrctrl_peripheral_control>:
	...
    f0a0:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    f0b0:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    f0c0:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    f0d0:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    f0e0:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    f0f0:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    f100:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    f110:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    f120:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    f130:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    f140:	0100 0000 0100 0000                         ........
